

Microchip Technology PIC18 PRO Macro Assembler V1.38 build -256452561 
                                                                                               Wed Mar 22 09:39:01 2023

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	18LF66K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	text194,global,reloc=2,class=CODE,delta=1
   218                           	psect	text195,global,reloc=2,class=CODE,delta=1
   219                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	text198,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   239                           	psect	text215,global,reloc=2,class=CODE,delta=1
   240                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   241                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   242                           	psect	pa_nodes,global,class=CODE,delta=1
   243  0000                     
   244 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   245  0000                     
   246 ;; Function _INT3_DefaultInterruptHandler is unused but had its address taken
   247  0000                     
   248 ;; Function _DIO0_ISR_Lora is unused but had its address taken
   249  0000                     
   250 ;; Function _DIO1_ISR_Lora is unused but had its address taken
   251  0000                     
   252 ;; Function _DIO2_ISR_Lora is unused but had its address taken
   253  0000                     
   254 ;; Function _DIO5_ISR_Lora is unused but had its address taken
   255  0000                     tosu	equ	0xFFF
   256                           tosh	equ	0xFFE
   257                           tosl	equ	0xFFD
   258                           pclath	equ	0xFFA
   259                           tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           prodh	equ	0xFF4
   264                           prodl	equ	0xFF3
   265                           intcon	equ	0xFF2
   266                           indf0	equ	0xFEF
   267                           plusw0	equ	0xFEB
   268                           fsr0h	equ	0xFEA
   269                           fsr0l	equ	0xFE9
   270                           wreg	equ	0xFE8
   271                           postinc1	equ	0xFE6
   272                           postdec1	equ	0xFE5
   273                           plusw1	equ	0xFE3
   274                           fsr1h	equ	0xFE2
   275                           fsr1l	equ	0xFE1
   276                           indf2	equ	0xFDF
   277                           postinc2	equ	0xFDE
   278                           postdec2	equ	0xFDD
   279                           plusw2	equ	0xFDB
   280                           fsr2h	equ	0xFDA
   281                           fsr2l	equ	0xFD9
   282                           status	equ	0xFD8
   283                           
   284 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   285 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   286 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   287 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   288 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   289 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   290 ;;_LORAWAN_LinkCheckCallback$3304	offset	0
   291 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   292 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   293 ;;_DutyCycleCallback$2128	offset	0
   294 ;;DutyCycleCallback@minim	offset	4
   295 ;;DutyCycleCallback@i	offset	8
   296 ;;DutyCycleCallback@found	offset	9
   297 ;;DutyCycleCallback@param	offset=-1 (param)
   298 ;;AutomaticReplyCallback@param	offset=-1 (param)
   299 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   300 ;;AckRetransmissionCallback@param	offset=-1 (param)
   301 ;;_param	offset=-1 (param)
   302 ;;_UpdateJoinSuccessState$3321	offset	0
   303 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   304                           
   305                           	psect	idataCOMRAM
   306  006200                     __pidataCOMRAM:
   307                           	opt stack 0
   308                           
   309                           ;initializer for _randx
   310  006200  0001               	dw	1
   311  006202  0000               	dw	0
   312                           
   313                           ;initializer for _ticksToScheduledInterrupt
   314  006204  FFFF               	dw	65535
   315  006206  FFFF               	dw	65535
   316                           tosu	equ	0xFFF
   317                           tosh	equ	0xFFE
   318                           tosl	equ	0xFFD
   319                           pclath	equ	0xFFA
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           prodh	equ	0xFF4
   325                           prodl	equ	0xFF3
   326                           intcon	equ	0xFF2
   327                           indf0	equ	0xFEF
   328                           plusw0	equ	0xFEB
   329                           fsr0h	equ	0xFEA
   330                           fsr0l	equ	0xFE9
   331                           wreg	equ	0xFE8
   332                           postinc1	equ	0xFE6
   333                           postdec1	equ	0xFE5
   334                           plusw1	equ	0xFE3
   335                           fsr1h	equ	0xFE2
   336                           fsr1l	equ	0xFE1
   337                           indf2	equ	0xFDF
   338                           postinc2	equ	0xFDE
   339                           postdec2	equ	0xFDD
   340                           plusw2	equ	0xFDB
   341                           fsr2h	equ	0xFDA
   342                           fsr2l	equ	0xFD9
   343                           status	equ	0xFD8
   344                           
   345                           	psect	idataBANK1
   346  005A14                     __pidataBANK1:
   347                           	opt stack 0
   348                           
   349                           ;initializer for GenerateSubkey@F17044
   350  005A14  00                 	db	0
   351  005A15  00                 	db	0
   352  005A16  00                 	db	0
   353  005A17  00                 	db	0
   354  005A18  00                 	db	0
   355  005A19  00                 	db	0
   356  005A1A  00                 	db	0
   357  005A1B  00                 	db	0
   358  005A1C  00                 	db	0
   359  005A1D  00                 	db	0
   360  005A1E  00                 	db	0
   361  005A1F  00                 	db	0
   362  005A20  00                 	db	0
   363  005A21  00                 	db	0
   364  005A22  00                 	db	0
   365  005A23  87                 	db	135
   366                           
   367                           ;initializer for _appSKey
   368  005A24  3F                 	db	63
   369  005A25  1F                 	db	31
   370  005A26  99                 	db	153
   371  005A27  58                 	db	88
   372  005A28  DF                 	db	223
   373  005A29  CB                 	db	203
   374  005A2A  63                 	db	99
   375  005A2B  7F                 	db	127
   376  005A2C  AD                 	db	173
   377  005A2D  C0                 	db	192
   378  005A2E  60                 	db	96
   379  005A2F  8E                 	db	142
   380  005A30  16                 	db	22
   381  005A31  4B                 	db	75
   382  005A32  22                 	db	34
   383  005A33  B7                 	db	183
   384                           
   385                           ;initializer for _nwkSKey
   386  005A34  6A                 	db	106
   387  005A35  C2                 	db	194
   388  005A36  D7                 	db	215
   389  005A37  90                 	db	144
   390  005A38  05                 	db	5
   391  005A39  62                 	db	98
   392  005A3A  34                 	db	52
   393  005A3B  76                 	db	118
   394  005A3C  D0                 	db	208
   395  005A3D  8D                 	db	141
   396  005A3E  5F                 	db	95
   397  005A3F  9C                 	db	156
   398  005A40  57                 	db	87
   399  005A41  07                 	db	7
   400  005A42  A3                 	db	163
   401  005A43  FF                 	db	255
   402                           tosu	equ	0xFFF
   403                           tosh	equ	0xFFE
   404                           tosl	equ	0xFFD
   405                           pclath	equ	0xFFA
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           prodh	equ	0xFF4
   411                           prodl	equ	0xFF3
   412                           intcon	equ	0xFF2
   413                           indf0	equ	0xFEF
   414                           plusw0	equ	0xFEB
   415                           fsr0h	equ	0xFEA
   416                           fsr0l	equ	0xFE9
   417                           wreg	equ	0xFE8
   418                           postinc1	equ	0xFE6
   419                           postdec1	equ	0xFE5
   420                           plusw1	equ	0xFE3
   421                           fsr1h	equ	0xFE2
   422                           fsr1l	equ	0xFE1
   423                           indf2	equ	0xFDF
   424                           postinc2	equ	0xFDE
   425                           postdec2	equ	0xFDD
   426                           plusw2	equ	0xFDB
   427                           fsr2h	equ	0xFDA
   428                           fsr2l	equ	0xFD9
   429                           status	equ	0xFD8
   430                           
   431                           	psect	mediumconst
   432  00FE6C                     __pmediumconst:
   433                           	opt stack 0
   434  00FE6C  00                 	db	0
   435  00FE6D                     _STable:
   436                           	opt stack 0
   437  00FE6D  63                 	db	99
   438  00FE6E  7C                 	db	124
   439  00FE6F  77                 	db	119
   440  00FE70  7B                 	db	123
   441  00FE71  F2                 	db	242
   442  00FE72  6B                 	db	107
   443  00FE73  6F                 	db	111
   444  00FE74  C5                 	db	197
   445  00FE75  30                 	db	48
   446  00FE76  01                 	db	1
   447  00FE77  67                 	db	103
   448  00FE78  2B                 	db	43
   449  00FE79  FE                 	db	254
   450  00FE7A  D7                 	db	215
   451  00FE7B  AB                 	db	171
   452  00FE7C  76                 	db	118
   453  00FE7D  CA                 	db	202
   454  00FE7E  82                 	db	130
   455  00FE7F  C9                 	db	201
   456  00FE80  7D                 	db	125
   457  00FE81  FA                 	db	250
   458  00FE82  59                 	db	89
   459  00FE83  47                 	db	71
   460  00FE84  F0                 	db	240
   461  00FE85  AD                 	db	173
   462  00FE86  D4                 	db	212
   463  00FE87  A2                 	db	162
   464  00FE88  AF                 	db	175
   465  00FE89  9C                 	db	156
   466  00FE8A  A4                 	db	164
   467  00FE8B  72                 	db	114
   468  00FE8C  C0                 	db	192
   469  00FE8D  B7                 	db	183
   470  00FE8E  FD                 	db	253
   471  00FE8F  93                 	db	147
   472  00FE90  26                 	db	38
   473  00FE91  36                 	db	54
   474  00FE92  3F                 	db	63
   475  00FE93  F7                 	db	247
   476  00FE94  CC                 	db	204
   477  00FE95  34                 	db	52
   478  00FE96  A5                 	db	165
   479  00FE97  E5                 	db	229
   480  00FE98  F1                 	db	241
   481  00FE99  71                 	db	113
   482  00FE9A  D8                 	db	216
   483  00FE9B  31                 	db	49
   484  00FE9C  15                 	db	21
   485  00FE9D  04                 	db	4
   486  00FE9E  C7                 	db	199
   487  00FE9F  23                 	db	35
   488  00FEA0  C3                 	db	195
   489  00FEA1  18                 	db	24
   490  00FEA2  96                 	db	150
   491  00FEA3  05                 	db	5
   492  00FEA4  9A                 	db	154
   493  00FEA5  07                 	db	7
   494  00FEA6  12                 	db	18
   495  00FEA7  80                 	db	128
   496  00FEA8  E2                 	db	226
   497  00FEA9  EB                 	db	235
   498  00FEAA  27                 	db	39
   499  00FEAB  B2                 	db	178
   500  00FEAC  75                 	db	117
   501  00FEAD  09                 	db	9
   502  00FEAE  83                 	db	131
   503  00FEAF  2C                 	db	44
   504  00FEB0  1A                 	db	26
   505  00FEB1  1B                 	db	27
   506  00FEB2  6E                 	db	110
   507  00FEB3  5A                 	db	90
   508  00FEB4  A0                 	db	160
   509  00FEB5  52                 	db	82
   510  00FEB6  3B                 	db	59
   511  00FEB7  D6                 	db	214
   512  00FEB8  B3                 	db	179
   513  00FEB9  29                 	db	41
   514  00FEBA  E3                 	db	227
   515  00FEBB  2F                 	db	47
   516  00FEBC  84                 	db	132
   517  00FEBD  53                 	db	83
   518  00FEBE  D1                 	db	209
   519  00FEBF  00                 	db	0
   520  00FEC0  ED                 	db	237
   521  00FEC1  20                 	db	32
   522  00FEC2  FC                 	db	252
   523  00FEC3  B1                 	db	177
   524  00FEC4  5B                 	db	91
   525  00FEC5  6A                 	db	106
   526  00FEC6  CB                 	db	203
   527  00FEC7  BE                 	db	190
   528  00FEC8  39                 	db	57
   529  00FEC9  4A                 	db	74
   530  00FECA  4C                 	db	76
   531  00FECB  58                 	db	88
   532  00FECC  CF                 	db	207
   533  00FECD  D0                 	db	208
   534  00FECE  EF                 	db	239
   535  00FECF  AA                 	db	170
   536  00FED0  FB                 	db	251
   537  00FED1  43                 	db	67
   538  00FED2  4D                 	db	77
   539  00FED3  33                 	db	51
   540  00FED4  85                 	db	133
   541  00FED5  45                 	db	69
   542  00FED6  F9                 	db	249
   543  00FED7  02                 	db	2
   544  00FED8  7F                 	db	127
   545  00FED9  50                 	db	80
   546  00FEDA  3C                 	db	60
   547  00FEDB  9F                 	db	159
   548  00FEDC  A8                 	db	168
   549  00FEDD  51                 	db	81
   550  00FEDE  A3                 	db	163
   551  00FEDF  40                 	db	64
   552  00FEE0  8F                 	db	143
   553  00FEE1  92                 	db	146
   554  00FEE2  9D                 	db	157
   555  00FEE3  38                 	db	56
   556  00FEE4  F5                 	db	245
   557  00FEE5  BC                 	db	188
   558  00FEE6  B6                 	db	182
   559  00FEE7  DA                 	db	218
   560  00FEE8  21                 	db	33
   561  00FEE9  10                 	db	16
   562  00FEEA  FF                 	db	255
   563  00FEEB  F3                 	db	243
   564  00FEEC  D2                 	db	210
   565  00FEED  CD                 	db	205
   566  00FEEE  0C                 	db	12
   567  00FEEF  13                 	db	19
   568  00FEF0  EC                 	db	236
   569  00FEF1  5F                 	db	95
   570  00FEF2  97                 	db	151
   571  00FEF3  44                 	db	68
   572  00FEF4  17                 	db	23
   573  00FEF5  C4                 	db	196
   574  00FEF6  A7                 	db	167
   575  00FEF7  7E                 	db	126
   576  00FEF8  3D                 	db	61
   577  00FEF9  64                 	db	100
   578  00FEFA  5D                 	db	93
   579  00FEFB  19                 	db	25
   580  00FEFC  73                 	db	115
   581  00FEFD  60                 	db	96
   582  00FEFE  81                 	db	129
   583  00FEFF  4F                 	db	79
   584  00FF00  DC                 	db	220
   585  00FF01  22                 	db	34
   586  00FF02  2A                 	db	42
   587  00FF03  90                 	db	144
   588  00FF04  88                 	db	136
   589  00FF05  46                 	db	70
   590  00FF06  EE                 	db	238
   591  00FF07  B8                 	db	184
   592  00FF08  14                 	db	20
   593  00FF09  DE                 	db	222
   594  00FF0A  5E                 	db	94
   595  00FF0B  0B                 	db	11
   596  00FF0C  DB                 	db	219
   597  00FF0D  E0                 	db	224
   598  00FF0E  32                 	db	50
   599  00FF0F  3A                 	db	58
   600  00FF10  0A                 	db	10
   601  00FF11  49                 	db	73
   602  00FF12  06                 	db	6
   603  00FF13  24                 	db	36
   604  00FF14  5C                 	db	92
   605  00FF15  C2                 	db	194
   606  00FF16  D3                 	db	211
   607  00FF17  AC                 	db	172
   608  00FF18  62                 	db	98
   609  00FF19  91                 	db	145
   610  00FF1A  95                 	db	149
   611  00FF1B  E4                 	db	228
   612  00FF1C  79                 	db	121
   613  00FF1D  E7                 	db	231
   614  00FF1E  C8                 	db	200
   615  00FF1F  37                 	db	55
   616  00FF20  6D                 	db	109
   617  00FF21  8D                 	db	141
   618  00FF22  D5                 	db	213
   619  00FF23  4E                 	db	78
   620  00FF24  A9                 	db	169
   621  00FF25  6C                 	db	108
   622  00FF26  56                 	db	86
   623  00FF27  F4                 	db	244
   624  00FF28  EA                 	db	234
   625  00FF29  65                 	db	101
   626  00FF2A  7A                 	db	122
   627  00FF2B  AE                 	db	174
   628  00FF2C  08                 	db	8
   629  00FF2D  BA                 	db	186
   630  00FF2E  78                 	db	120
   631  00FF2F  25                 	db	37
   632  00FF30  2E                 	db	46
   633  00FF31  1C                 	db	28
   634  00FF32  A6                 	db	166
   635  00FF33  B4                 	db	180
   636  00FF34  C6                 	db	198
   637  00FF35  E8                 	db	232
   638  00FF36  DD                 	db	221
   639  00FF37  74                 	db	116
   640  00FF38  1F                 	db	31
   641  00FF39  4B                 	db	75
   642  00FF3A  BD                 	db	189
   643  00FF3B  8B                 	db	139
   644  00FF3C  8A                 	db	138
   645  00FF3D  70                 	db	112
   646  00FF3E  3E                 	db	62
   647  00FF3F  B5                 	db	181
   648  00FF40  66                 	db	102
   649  00FF41  48                 	db	72
   650  00FF42  03                 	db	3
   651  00FF43  F6                 	db	246
   652  00FF44  0E                 	db	14
   653  00FF45  61                 	db	97
   654  00FF46  35                 	db	53
   655  00FF47  57                 	db	87
   656  00FF48  B9                 	db	185
   657  00FF49  86                 	db	134
   658  00FF4A  C1                 	db	193
   659  00FF4B  1D                 	db	29
   660  00FF4C  9E                 	db	158
   661  00FF4D  E1                 	db	225
   662  00FF4E  F8                 	db	248
   663  00FF4F  98                 	db	152
   664  00FF50  11                 	db	17
   665  00FF51  69                 	db	105
   666  00FF52  D9                 	db	217
   667  00FF53  8E                 	db	142
   668  00FF54  94                 	db	148
   669  00FF55  9B                 	db	155
   670  00FF56  1E                 	db	30
   671  00FF57  87                 	db	135
   672  00FF58  E9                 	db	233
   673  00FF59  CE                 	db	206
   674  00FF5A  55                 	db	85
   675  00FF5B  28                 	db	40
   676  00FF5C  DF                 	db	223
   677  00FF5D  8C                 	db	140
   678  00FF5E  A1                 	db	161
   679  00FF5F  89                 	db	137
   680  00FF60  0D                 	db	13
   681  00FF61  BF                 	db	191
   682  00FF62  E6                 	db	230
   683  00FF63  42                 	db	66
   684  00FF64  68                 	db	104
   685  00FF65  41                 	db	65
   686  00FF66  99                 	db	153
   687  00FF67  2D                 	db	45
   688  00FF68  0F                 	db	15
   689  00FF69  B0                 	db	176
   690  00FF6A  54                 	db	84
   691  00FF6B  BB                 	db	187
   692  00FF6C  16                 	db	22
   693  00FF6D                     __end_of_STable:
   694                           	opt stack 0
   695  00FF6D                     _maxPayloadSize:
   696                           	opt stack 0
   697  00FF6D  33                 	db	51
   698  00FF6E  33                 	db	51
   699  00FF6F  33                 	db	51
   700  00FF70  73                 	db	115
   701  00FF71  F2                 	db	242
   702  00FF72  F2                 	db	242
   703  00FF73  F2                 	db	242
   704  00FF74  38                 	db	56
   705  00FF75                     __end_of_maxPayloadSize:
   706                           	opt stack 0
   707  00FF75                     _modulation:
   708                           	opt stack 0
   709  00FF75  01                 	db	1
   710  00FF76  01                 	db	1
   711  00FF77  01                 	db	1
   712  00FF78  01                 	db	1
   713  00FF79  01                 	db	1
   714  00FF7A  01                 	db	1
   715  00FF7B  01                 	db	1
   716  00FF7C  00                 	db	0
   717  00FF7D                     __end_of_modulation:
   718                           	opt stack 0
   719  00FF7D                     _rxWindowOffset:
   720                           	opt stack 0
   721  00FF7D  DF                 	db	223
   722  00FF7E  CE                 	db	206
   723  00FF7F  C6                 	db	198
   724  00FF80  C2                 	db	194
   725  00FF81  BE                 	db	190
   726  00FF82  BC                 	db	188
   727  00FF83  F1                 	db	241
   728  00FF84  FE                 	db	254
   729  00FF85                     __end_of_rxWindowOffset:
   730                           	opt stack 0
   731  00FF85                     _rxWindowSize:
   732                           	opt stack 0
   733  00FF85  08                 	db	8
   734  00FF86  0A                 	db	10
   735  00FF87  0E                 	db	14
   736  00FF88  1A                 	db	26
   737  00FF89  31                 	db	49
   738  00FF8A  58                 	db	88
   739  00FF8B  3C                 	db	60
   740  00FF8C  08                 	db	8
   741  00FF8D                     __end_of_rxWindowSize:
   742                           	opt stack 0
   743  00FF8D                     _bandwidth:
   744                           	opt stack 0
   745  00FF8D  07                 	db	7
   746  00FF8E  07                 	db	7
   747  00FF8F  07                 	db	7
   748  00FF90  07                 	db	7
   749  00FF91  07                 	db	7
   750  00FF92  07                 	db	7
   751  00FF93  08                 	db	8
   752  00FF94                     __end_of_bandwidth:
   753                           	opt stack 0
   754  00FF94                     _macEndDevCmdReplyLen:
   755                           	opt stack 0
   756  00FF94  01                 	db	1
   757  00FF95  02                 	db	2
   758  00FF96  01                 	db	1
   759  00FF97  02                 	db	2
   760  00FF98  03                 	db	3
   761  00FF99  02                 	db	2
   762  00FF9A  01                 	db	1
   763  00FF9B                     __end_of_macEndDevCmdReplyLen:
   764                           	opt stack 0
   765  00FF9B                     _spreadingFactor:
   766                           	opt stack 0
   767  00FF9B  0C                 	db	12
   768  00FF9C  0B                 	db	11
   769  00FF9D  0A                 	db	10
   770  00FF9E  09                 	db	9
   771  00FF9F  08                 	db	8
   772  00FFA0  07                 	db	7
   773  00FFA1  07                 	db	7
   774  00FFA2                     __end_of_spreadingFactor:
   775                           	opt stack 0
   776  00FFA2                     _txPower868:
   777                           	opt stack 0
   778  00FFA2  14                 	db	20
   779  00FFA3  0E                 	db	14
   780  00FFA4  0B                 	db	11
   781  00FFA5  08                 	db	8
   782  00FFA6  05                 	db	5
   783  00FFA7  02                 	db	2
   784  00FFA8                     __end_of_txPower868:
   785                           	opt stack 0
   786  00FFA8                     _DefaultChannels433:
   787                           	opt stack 0
   788  00FFA8  B9D8               	dw	47576
   789  00FFAA  19D1               	dw	6609
   790  00FFAC  01                 	db	1
   791  00FFAD  50                 	db	80
   792  00FFAE  012E               	dw	302
   793  00FFB0  0000               	dw	0
   794  00FFB2  0000               	dw	0
   795  00FFB4  01                 	db	1
   796  00FFB5  FF                 	db	255
   797  00FFB6  C718               	dw	50968
   798  00FFB8  19D4               	dw	6612
   799  00FFBA  01                 	db	1
   800  00FFBB  50                 	db	80
   801  00FFBC  012E               	dw	302
   802  00FFBE  0000               	dw	0
   803  00FFC0  0000               	dw	0
   804  00FFC2  01                 	db	1
   805  00FFC3  FF                 	db	255
   806  00FFC4  D458               	dw	54360
   807  00FFC6  19D7               	dw	6615
   808  00FFC8  01                 	db	1
   809  00FFC9  50                 	db	80
   810  00FFCA  012E               	dw	302
   811  00FFCC  0000               	dw	0
   812  00FFCE  0000               	dw	0
   813  00FFD0  01                 	db	1
   814  00FFD1  FF                 	db	255
   815  00FFD2                     __end_of_DefaultChannels433:
   816                           	opt stack 0
   817  00FFD2                     _DefaultChannels868:
   818                           	opt stack 0
   819  00FFD2  27A0               	dw	10144
   820  00FFD4  33BE               	dw	13246
   821  00FFD6  01                 	db	1
   822  00FFD7  50                 	db	80
   823  00FFD8  012E               	dw	302
   824  00FFDA  0000               	dw	0
   825  00FFDC  0000               	dw	0
   826  00FFDE  01                 	db	1
   827  00FFDF  FF                 	db	255
   828  00FFE0  34E0               	dw	13536
   829  00FFE2  33C1               	dw	13249
   830  00FFE4  01                 	db	1
   831  00FFE5  50                 	db	80
   832  00FFE6  012E               	dw	302
   833  00FFE8  0000               	dw	0
   834  00FFEA  0000               	dw	0
   835  00FFEC  01                 	db	1
   836  00FFED  FF                 	db	255
   837  00FFEE  4220               	dw	16928
   838  00FFF0  33C4               	dw	13252
   839  00FFF2  01                 	db	1
   840  00FFF3  50                 	db	80
   841  00FFF4  012E               	dw	302
   842  00FFF6  0000               	dw	0
   843  00FFF8  0000               	dw	0
   844  00FFFA  01                 	db	1
   845  00FFFB  FF                 	db	255
   846  00FFFC                     __end_of_DefaultChannels868:
   847                           	opt stack 0
   848  00FFFC                     _FskSyncWordBuff:
   849                           	opt stack 0
   850  00FFFC  C1                 	db	193
   851  00FFFD  94                 	db	148
   852  00FFFE  C1                 	db	193
   853  00FFFF                     __end_of_FskSyncWordBuff:
   854                           	opt stack 0
   855  00FFFF  00                 	db	0	; dummy byte at the end
   856  0000                     tosu	equ	0xFFF
   857                           tosh	equ	0xFFE
   858                           tosl	equ	0xFFD
   859                           pclath	equ	0xFFA
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           intcon	equ	0xFF2
   867                           indf0	equ	0xFEF
   868                           plusw0	equ	0xFEB
   869                           fsr0h	equ	0xFEA
   870                           fsr0l	equ	0xFE9
   871                           wreg	equ	0xFE8
   872                           postinc1	equ	0xFE6
   873                           postdec1	equ	0xFE5
   874                           plusw1	equ	0xFE3
   875                           fsr1h	equ	0xFE2
   876                           fsr1l	equ	0xFE1
   877                           indf2	equ	0xFDF
   878                           postinc2	equ	0xFDE
   879                           postdec2	equ	0xFDD
   880                           plusw2	equ	0xFDB
   881                           fsr2h	equ	0xFDA
   882                           fsr2l	equ	0xFD9
   883                           status	equ	0xFD8
   884                           
   885                           	psect	nvCOMRAM
   886  00005E                     __pnvCOMRAM:
   887                           	opt stack 0
   888  00005E                     _timer1ReloadVal:
   889                           	opt stack 0
   890  00005E                     	ds	2
   891                           tosu	equ	0xFFF
   892                           tosh	equ	0xFFE
   893                           tosl	equ	0xFFD
   894                           pclath	equ	0xFFA
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           prodh	equ	0xFF4
   900                           prodl	equ	0xFF3
   901                           intcon	equ	0xFF2
   902                           indf0	equ	0xFEF
   903                           plusw0	equ	0xFEB
   904                           fsr0h	equ	0xFEA
   905                           fsr0l	equ	0xFE9
   906                           wreg	equ	0xFE8
   907                           postinc1	equ	0xFE6
   908                           postdec1	equ	0xFE5
   909                           plusw1	equ	0xFE3
   910                           fsr1h	equ	0xFE2
   911                           fsr1l	equ	0xFE1
   912                           indf2	equ	0xFDF
   913                           postinc2	equ	0xFDE
   914                           postdec2	equ	0xFDD
   915                           plusw2	equ	0xFDB
   916                           fsr2h	equ	0xFDA
   917                           fsr2l	equ	0xFD9
   918                           status	equ	0xFD8
   919                           
   920                           	psect	nvBANK1
   921  0001ED                     __pnvBANK1:
   922                           	opt stack 0
   923  0001ED                     _INT1_InterruptHandler:
   924                           	opt stack 0
   925  0001ED                     	ds	2
   926  0001EF                     _INT2_InterruptHandler:
   927                           	opt stack 0
   928  0001EF                     	ds	2
   929  0001F1                     _IOCBF4_InterruptHandler:
   930                           	opt stack 0
   931  0001F1                     	ds	2
   932  0001F3                     _TMR1_InterruptHandler:
   933                           	opt stack 0
   934  0001F3                     	ds	2
   935  0000                     _INT0PPSbits	set	3568
   936  0000                     _INT1PPSbits	set	3569
   937  0000                     _INT2PPSbits	set	3570
   938  0000                     _INT3PPSbits	set	3571
   939  0000                     _PPSLOCK	set	3567
   940  0000                     _PPSLOCKbits	set	3567
   941  0000                     _ANSELA	set	3730
   942  0000                     _ANSELB	set	3738
   943  0000                     _ANSELD	set	3751
   944  0000                     _ANSELE	set	3759
   945  0000                     _ANSELF	set	3764
   946  0000                     _ANSELG	set	3772
   947  0000                     _IOCBFbits	set	3731
   948  0000                     _IOCBNbits	set	3732
   949  0000                     _IOCBPbits	set	3733
   950  0000                     _ODCONA	set	3728
   951  0000                     _ODCONB	set	3736
   952  0000                     _ODCONC	set	3744
   953  0000                     _ODCOND	set	3749
   954  0000                     _ODCONE	set	3757
   955  0000                     _ODCONF	set	3762
   956  0000                     _ODCONG	set	3770
   957  0000                     _ODCONH	set	3775
   958  0000                     _OSCCON1	set	3651
   959  0000                     _OSCCON3	set	3653
   960  0000                     _OSCEN	set	3655
   961  0000                     _OSCFRQ	set	3657
   962  0000                     _OSCTUNE	set	3656
   963  0000                     _PIE0bits	set	3625
   964  0000                     _PIE5bits	set	3630
   965  0000                     _PIR0bits	set	3635
   966  0000                     _PIR5bits	set	3640
   967  0000                     _RC6PPS	set	3688
   968  0000                     _RD5PPS	set	3695
   969  0000                     _RD6PPS	set	3696
   970  0000                     _SSP2ADD	set	3798
   971  0000                     _SSP2BUF	set	3797
   972  0000                     _SSP2CON1	set	3801
   973  0000                     _SSP2CON1bits	set	3801
   974  0000                     _SSP2DATPPSbits	set	3613
   975  0000                     _SSP2STAT	set	3800
   976  0000                     _SSP2STATbits	set	3800
   977  0000                     _WPUA	set	3729
   978  0000                     _WPUB	set	3737
   979  0000                     _WPUC	set	3745
   980  0000                     _WPUD	set	3750
   981  0000                     _WPUE	set	3758
   982  0000                     _WPUF	set	3763
   983  0000                     _WPUG	set	3771
   984  0000                     _WPUH	set	3776
   985  0000                     _BAUD1CON	set	3998
   986  0000                     _INTCONbits	set	4082
   987  0000                     _LATA	set	3961
   988  0000                     _LATAbits	set	3961
   989  0000                     _LATB	set	3962
   990  0000                     _LATC	set	3963
   991  0000                     _LATD	set	3964
   992  0000                     _LATE	set	3965
   993  0000                     _LATF	set	3966
   994  0000                     _LATG	set	3967
   995  0000                     _LATH	set	3968
   996  0000                     _PORTBbits	set	3978
   997  0000                     _RC1STA	set	3996
   998  0000                     _SP1BRGH	set	3995
   999  0000                     _SP1BRGL	set	3994
  1000  0000                     _T1CLK	set	4050
  1001  0000                     _T1CON	set	4047
  1002  0000                     _T1CONbits	set	4047
  1003  0000                     _T1GATE	set	4049
  1004  0000                     _T1GCON	set	4048
  1005  0000                     _TMR1H	set	4046
  1006  0000                     _TMR1L	set	4045
  1007  0000                     _TRISA	set	3969
  1008  0000                     _TRISB	set	3970
  1009  0000                     _TRISC	set	3971
  1010  0000                     _TRISD	set	3972
  1011  0000                     _TRISE	set	3973
  1012  0000                     _TRISF	set	3974
  1013  0000                     _TRISG	set	3975
  1014  0000                     _TRISH	set	3976
  1015  0000                     _TX1STA	set	3997
  1016  0000                     _GIE	set	32663
  1017  0000                     _LATC2	set	31706
  1018  0000                     _LATD3	set	31715
  1019  0000                     _TRISC2	set	31770
  1020                           
  1021                           ; #config settings
  1022  0000                     tosu	equ	0xFFF
  1023                           tosh	equ	0xFFE
  1024                           tosl	equ	0xFFD
  1025                           pclath	equ	0xFFA
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           prodh	equ	0xFF4
  1031                           prodl	equ	0xFF3
  1032                           intcon	equ	0xFF2
  1033                           indf0	equ	0xFEF
  1034                           plusw0	equ	0xFEB
  1035                           fsr0h	equ	0xFEA
  1036                           fsr0l	equ	0xFE9
  1037                           wreg	equ	0xFE8
  1038                           postinc1	equ	0xFE6
  1039                           postdec1	equ	0xFE5
  1040                           plusw1	equ	0xFE3
  1041                           fsr1h	equ	0xFE2
  1042                           fsr1l	equ	0xFE1
  1043                           indf2	equ	0xFDF
  1044                           postinc2	equ	0xFDE
  1045                           postdec2	equ	0xFDD
  1046                           plusw2	equ	0xFDB
  1047                           fsr2h	equ	0xFDA
  1048                           fsr2l	equ	0xFD9
  1049                           status	equ	0xFD8
  1050                           
  1051                           	psect	cinit
  1052  004604                     __pcinit:
  1053                           	opt stack 0
  1054  004604                     start_initialization:
  1055                           	opt stack 0
  1056  004604                     __initialization:
  1057                           	opt stack 0
  1058                           
  1059                           ; Initialize objects allocated to BANK1 (48 bytes)
  1060                           ; load TBLPTR registers with __pidataBANK1
  1061  004604  0E14               	movlw	low __pidataBANK1
  1062  004606  6EF6               	movwf	tblptrl,c
  1063  004608  0E5A               	movlw	high __pidataBANK1
  1064  00460A  6EF7               	movwf	tblptrh,c
  1065  00460C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1066  00460E  6EF8               	movwf	tblptru,c
  1067  004610  EE01  F0BD         	lfsr	0,__pdataBANK1
  1068  004614  EE20 F030          	lfsr	2,48
  1069  004618                     copy_data0:
  1070  004618  0009               	tblrd		*+
  1071  00461A  CFF5 FFEE          	movff	tablat,postinc0
  1072  00461E  50DD               	movf	postdec2,w,c
  1073  004620  50D9               	movf	fsr2l,w,c
  1074  004622  E1FA               	bnz	copy_data0
  1075                           
  1076                           ; Initialize objects allocated to COMRAM (8 bytes)
  1077                           ; load TBLPTR registers with __pidataCOMRAM
  1078  004624  0E00               	movlw	low __pidataCOMRAM
  1079  004626  6EF6               	movwf	tblptrl,c
  1080  004628  0E62               	movlw	high __pidataCOMRAM
  1081  00462A  6EF7               	movwf	tblptrh,c
  1082  00462C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1083  00462E  6EF8               	movwf	tblptru,c
  1084  004630  EE00  F056         	lfsr	0,__pdataCOMRAM
  1085  004634  EE20 F008          	lfsr	2,8
  1086  004638                     copy_data1:
  1087  004638  0009               	tblrd		*+
  1088  00463A  CFF5 FFEE          	movff	tablat,postinc0
  1089  00463E  50DD               	movf	postdec2,w,c
  1090  004640  50D9               	movf	fsr2l,w,c
  1091  004642  E1FA               	bnz	copy_data1
  1092                           
  1093                           ; Clear objects allocated to BIGRAM (542 bytes)
  1094  004644  EE04  F0E0         	lfsr	0,__pbssBIGRAM
  1095  004648  EE22 F01E          	lfsr	2,542
  1096  00464C                     clear_0:
  1097  00464C  6AEE               	clrf	postinc0,c
  1098  00464E  50DD               	movf	postdec2,w,c
  1099  004650  50D9               	movf	fsr2l,w,c
  1100  004652  E1FC               	bnz	clear_0
  1101  004654  50DA               	movf	fsr2h,w,c
  1102  004656  E1FA               	bnz	clear_0
  1103                           
  1104                           ; Clear objects allocated to BANK4 (224 bytes)
  1105  004658  EE04  F000         	lfsr	0,__pbssBANK4
  1106  00465C  0EE0               	movlw	224
  1107  00465E                     clear_1:
  1108  00465E  6AEE               	clrf	postinc0,c
  1109  004660  06E8               	decf	wreg,f,c
  1110  004662  E1FD               	bnz	clear_1
  1111                           
  1112                           ; Clear objects allocated to BANK3 (160 bytes)
  1113  004664  EE03  F000         	lfsr	0,__pbssBANK3
  1114  004668  0EA0               	movlw	160
  1115  00466A                     clear_2:
  1116  00466A  6AEE               	clrf	postinc0,c
  1117  00466C  06E8               	decf	wreg,f,c
  1118  00466E  E1FD               	bnz	clear_2
  1119                           
  1120                           ; Clear objects allocated to BANK2 (245 bytes)
  1121  004670  EE02  F000         	lfsr	0,__pbssBANK2
  1122  004674  0EF5               	movlw	245
  1123  004676                     clear_3:
  1124  004676  6AEE               	clrf	postinc0,c
  1125  004678  06E8               	decf	wreg,f,c
  1126  00467A  E1FD               	bnz	clear_3
  1127                           
  1128                           ; Clear objects allocated to BANK1 (79 bytes)
  1129  00467C  EE01  F06E         	lfsr	0,__pbssBANK1
  1130  004680  0E4F               	movlw	79
  1131  004682                     clear_4:
  1132  004682  6AEE               	clrf	postinc0,c
  1133  004684  06E8               	decf	wreg,f,c
  1134  004686  E1FD               	bnz	clear_4
  1135                           
  1136                           ; Clear objects allocated to COMRAM (26 bytes)
  1137  004688  EE00  F030         	lfsr	0,__pbssCOMRAM
  1138  00468C  0E1A               	movlw	26
  1139  00468E                     clear_5:
  1140  00468E  6AEE               	clrf	postinc0,c
  1141  004690  06E8               	decf	wreg,f,c
  1142  004692  E1FD               	bnz	clear_5
  1143  004694                     end_of_initialization:
  1144                           	opt stack 0
  1145  004694                     __end_of__initialization:
  1146                           	opt stack 0
  1147  004694  0100               	movlb	0
  1148  004696  EF48  F01E         	goto	_main	;jump to C main() function
  1149                           tosu	equ	0xFFF
  1150                           tosh	equ	0xFFE
  1151                           tosl	equ	0xFFD
  1152                           pclath	equ	0xFFA
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           prodh	equ	0xFF4
  1158                           prodl	equ	0xFF3
  1159                           intcon	equ	0xFF2
  1160                           indf0	equ	0xFEF
  1161                           postinc0	equ	0xFEE
  1162                           plusw0	equ	0xFEB
  1163                           fsr0h	equ	0xFEA
  1164                           fsr0l	equ	0xFE9
  1165                           wreg	equ	0xFE8
  1166                           postinc1	equ	0xFE6
  1167                           postdec1	equ	0xFE5
  1168                           plusw1	equ	0xFE3
  1169                           fsr1h	equ	0xFE2
  1170                           fsr1l	equ	0xFE1
  1171                           indf2	equ	0xFDF
  1172                           postinc2	equ	0xFDE
  1173                           postdec2	equ	0xFDD
  1174                           plusw2	equ	0xFDB
  1175                           fsr2h	equ	0xFDA
  1176                           fsr2l	equ	0xFD9
  1177                           status	equ	0xFD8
  1178                           
  1179                           	psect	bssCOMRAM
  1180  000030                     __pbssCOMRAM:
  1181                           	opt stack 0
  1182  000030                     TMR_GetDeltaTime@retVal:
  1183                           	opt stack 0
  1184  000030                     	ds	4
  1185  000034                     _ticksAccounted:
  1186                           	opt stack 0
  1187  000034                     	ds	4
  1188  000038                     _ticksAdded:
  1189                           	opt stack 0
  1190  000038                     	ds	4
  1191  00003C                     TMR1_ISR@CountCallBack:
  1192                           	opt stack 0
  1193  00003C                     	ds	2
  1194  00003E                     TMR_GetDeltaTime@tmrVal:
  1195                           	opt stack 0
  1196  00003E                     	ds	2
  1197  000040                     TMR_SwapTimer@oldVal:
  1198                           	opt stack 0
  1199  000040                     	ds	2
  1200  000042                     TMR_SwapTimer@retVal:
  1201                           	opt stack 0
  1202  000042                     	ds	2
  1203  000044                     _reloadVal:
  1204                           	opt stack 0
  1205  000044                     	ds	2
  1206  000046                     __rcon:
  1207                           	opt stack 0
  1208  000046                     	ds	1
  1209  000047                     __roundCounter:
  1210                           	opt stack 0
  1211  000047                     	ds	1
  1212  000048                     _dioStatus:
  1213                           	opt stack 0
  1214  000048                     	ds	1
  1215  000049                     _timerOverflow:
  1216                           	opt stack 0
  1217  000049                     	ds	1
  1218                           tosu	equ	0xFFF
  1219                           tosh	equ	0xFFE
  1220                           tosl	equ	0xFFD
  1221                           pclath	equ	0xFFA
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           prodh	equ	0xFF4
  1227                           prodl	equ	0xFF3
  1228                           intcon	equ	0xFF2
  1229                           indf0	equ	0xFEF
  1230                           postinc0	equ	0xFEE
  1231                           plusw0	equ	0xFEB
  1232                           fsr0h	equ	0xFEA
  1233                           fsr0l	equ	0xFE9
  1234                           wreg	equ	0xFE8
  1235                           postinc1	equ	0xFE6
  1236                           postdec1	equ	0xFE5
  1237                           plusw1	equ	0xFE3
  1238                           fsr1h	equ	0xFE2
  1239                           fsr1l	equ	0xFE1
  1240                           indf2	equ	0xFDF
  1241                           postinc2	equ	0xFDE
  1242                           postdec2	equ	0xFDD
  1243                           plusw2	equ	0xFDB
  1244                           fsr2h	equ	0xFDA
  1245                           fsr2l	equ	0xFD9
  1246                           status	equ	0xFD8
  1247                           
  1248                           	psect	dataCOMRAM
  1249  000056                     __pdataCOMRAM:
  1250                           	opt stack 0
  1251  000056                     _randx:
  1252                           	opt stack 0
  1253  000056                     	ds	4
  1254  00005A                     _ticksToScheduledInterrupt:
  1255                           	opt stack 0
  1256  00005A                     	ds	4
  1257                           tosu	equ	0xFFF
  1258                           tosh	equ	0xFFE
  1259                           tosl	equ	0xFFD
  1260                           pclath	equ	0xFFA
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           intcon	equ	0xFF2
  1268                           indf0	equ	0xFEF
  1269                           postinc0	equ	0xFEE
  1270                           plusw0	equ	0xFEB
  1271                           fsr0h	equ	0xFEA
  1272                           fsr0l	equ	0xFE9
  1273                           wreg	equ	0xFE8
  1274                           postinc1	equ	0xFE6
  1275                           postdec1	equ	0xFE5
  1276                           plusw1	equ	0xFE3
  1277                           fsr1h	equ	0xFE2
  1278                           fsr1l	equ	0xFE1
  1279                           indf2	equ	0xFDF
  1280                           postinc2	equ	0xFDE
  1281                           postdec2	equ	0xFDD
  1282                           plusw2	equ	0xFDB
  1283                           fsr2h	equ	0xFDA
  1284                           fsr2l	equ	0xFD9
  1285                           status	equ	0xFD8
  1286                           
  1287                           	psect	bssBANK1
  1288  00016E                     __pbssBANK1:
  1289                           	opt stack 0
  1290  00016E                     _rxPayload:
  1291                           	opt stack 0
  1292  00016E                     	ds	4
  1293  000172                     _JoinedServer:
  1294                           	opt stack 0
  1295  000172                     	ds	1
  1296  000173                     _allocatedTimers:
  1297                           	opt stack 0
  1298  000173                     	ds	1
  1299  000174                     _localDioStatus:
  1300                           	opt stack 0
  1301  000174                     	ds	1
  1302  000175                     _RadioConfiguration:
  1303                           	opt stack 0
  1304  000175                     	ds	54
  1305  0001AB                     _aesBuffer:
  1306                           	opt stack 0
  1307  0001AB                     	ds	16
  1308  0001BB                     _payload:
  1309                           	opt stack 0
  1310  0001BB                     	ds	2
  1311                           tosu	equ	0xFFF
  1312                           tosh	equ	0xFFE
  1313                           tosl	equ	0xFFD
  1314                           pclath	equ	0xFFA
  1315                           tblptru	equ	0xFF8
  1316                           tblptrh	equ	0xFF7
  1317                           tblptrl	equ	0xFF6
  1318                           tablat	equ	0xFF5
  1319                           prodh	equ	0xFF4
  1320                           prodl	equ	0xFF3
  1321                           intcon	equ	0xFF2
  1322                           indf0	equ	0xFEF
  1323                           postinc0	equ	0xFEE
  1324                           plusw0	equ	0xFEB
  1325                           fsr0h	equ	0xFEA
  1326                           fsr0l	equ	0xFE9
  1327                           wreg	equ	0xFE8
  1328                           postinc1	equ	0xFE6
  1329                           postdec1	equ	0xFE5
  1330                           plusw1	equ	0xFE3
  1331                           fsr1h	equ	0xFE2
  1332                           fsr1l	equ	0xFE1
  1333                           indf2	equ	0xFDF
  1334                           postinc2	equ	0xFDE
  1335                           postdec2	equ	0xFDD
  1336                           plusw2	equ	0xFDB
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341                           	psect	dataBANK1
  1342  0001BD                     __pdataBANK1:
  1343                           	opt stack 0
  1344  0001BD                     GenerateSubkey@F17044:
  1345                           	opt stack 0
  1346  0001BD                     	ds	16
  1347  0001CD                     _appSKey:
  1348                           	opt stack 0
  1349  0001CD                     	ds	16
  1350  0001DD                     _nwkSKey:
  1351                           	opt stack 0
  1352  0001DD                     	ds	16
  1353                           tosu	equ	0xFFF
  1354                           tosh	equ	0xFFE
  1355                           tosl	equ	0xFFD
  1356                           pclath	equ	0xFFA
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           prodh	equ	0xFF4
  1362                           prodl	equ	0xFF3
  1363                           intcon	equ	0xFF2
  1364                           indf0	equ	0xFEF
  1365                           postinc0	equ	0xFEE
  1366                           plusw0	equ	0xFEB
  1367                           fsr0h	equ	0xFEA
  1368                           fsr0l	equ	0xFE9
  1369                           wreg	equ	0xFE8
  1370                           postinc1	equ	0xFE6
  1371                           postdec1	equ	0xFE5
  1372                           plusw1	equ	0xFE3
  1373                           fsr1h	equ	0xFE2
  1374                           fsr1l	equ	0xFE1
  1375                           indf2	equ	0xFDF
  1376                           postinc2	equ	0xFDE
  1377                           postdec2	equ	0xFDD
  1378                           plusw2	equ	0xFDB
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           status	equ	0xFD8
  1382                           
  1383                           	psect	bssBANK2
  1384  000200                     __pbssBANK2:
  1385                           	opt stack 0
  1386  000200                     _loRa:
  1387                           	opt stack 0
  1388  000200                     	ds	245
  1389                           tosu	equ	0xFFF
  1390                           tosh	equ	0xFFE
  1391                           tosl	equ	0xFFD
  1392                           pclath	equ	0xFFA
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           intcon	equ	0xFF2
  1400                           indf0	equ	0xFEF
  1401                           postinc0	equ	0xFEE
  1402                           plusw0	equ	0xFEB
  1403                           fsr0h	equ	0xFEA
  1404                           fsr0l	equ	0xFE9
  1405                           wreg	equ	0xFE8
  1406                           postinc1	equ	0xFE6
  1407                           postdec1	equ	0xFE5
  1408                           plusw1	equ	0xFE3
  1409                           fsr1h	equ	0xFE2
  1410                           fsr1l	equ	0xFE1
  1411                           indf2	equ	0xFDF
  1412                           postinc2	equ	0xFDE
  1413                           postdec2	equ	0xFDD
  1414                           plusw2	equ	0xFDB
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419                           	psect	bssBANK3
  1420  000300                     __pbssBANK3:
  1421                           	opt stack 0
  1422  000300                     _swTimers:
  1423                           	opt stack 0
  1424  000300                     	ds	160
  1425                           tosu	equ	0xFFF
  1426                           tosh	equ	0xFFE
  1427                           tosl	equ	0xFFD
  1428                           pclath	equ	0xFFA
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           prodh	equ	0xFF4
  1434                           prodl	equ	0xFF3
  1435                           intcon	equ	0xFF2
  1436                           indf0	equ	0xFEF
  1437                           postinc0	equ	0xFEE
  1438                           plusw0	equ	0xFEB
  1439                           fsr0h	equ	0xFEA
  1440                           fsr0l	equ	0xFE9
  1441                           wreg	equ	0xFE8
  1442                           postinc1	equ	0xFE6
  1443                           postdec1	equ	0xFE5
  1444                           plusw1	equ	0xFE3
  1445                           fsr1h	equ	0xFE2
  1446                           fsr1l	equ	0xFE1
  1447                           indf2	equ	0xFDF
  1448                           postinc2	equ	0xFDE
  1449                           postdec2	equ	0xFDD
  1450                           plusw2	equ	0xFDB
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455                           	psect	bssBANK4
  1456  000400                     __pbssBANK4:
  1457                           	opt stack 0
  1458  000400                     _Channels:
  1459                           	opt stack 0
  1460  000400                     	ds	224
  1461                           tosu	equ	0xFFF
  1462                           tosh	equ	0xFFE
  1463                           tosl	equ	0xFFD
  1464                           pclath	equ	0xFFA
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           prodh	equ	0xFF4
  1470                           prodl	equ	0xFF3
  1471                           intcon	equ	0xFF2
  1472                           indf0	equ	0xFEF
  1473                           postinc0	equ	0xFEE
  1474                           plusw0	equ	0xFEB
  1475                           fsr0h	equ	0xFEA
  1476                           fsr0l	equ	0xFE9
  1477                           wreg	equ	0xFE8
  1478                           postinc1	equ	0xFE6
  1479                           postdec1	equ	0xFE5
  1480                           plusw1	equ	0xFE3
  1481                           fsr1h	equ	0xFE2
  1482                           fsr1l	equ	0xFE1
  1483                           indf2	equ	0xFDF
  1484                           postinc2	equ	0xFDE
  1485                           postdec2	equ	0xFDD
  1486                           plusw2	equ	0xFDB
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491                           	psect	bssBIGRAM
  1492  0004E0                     __pbssBIGRAM:
  1493                           	opt stack 0
  1494  0004E0                     _macBuffer:
  1495                           	opt stack 0
  1496  0004E0                     	ds	271
  1497  0005EF                     _radioBuffer:
  1498                           	opt stack 0
  1499  0005EF                     	ds	271
  1500                           tosu	equ	0xFFF
  1501                           tosh	equ	0xFFE
  1502                           tosl	equ	0xFFD
  1503                           pclath	equ	0xFFA
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon	equ	0xFF2
  1511                           indf0	equ	0xFEF
  1512                           postinc0	equ	0xFEE
  1513                           plusw0	equ	0xFEB
  1514                           fsr0h	equ	0xFEA
  1515                           fsr0l	equ	0xFE9
  1516                           wreg	equ	0xFE8
  1517                           postinc1	equ	0xFE6
  1518                           postdec1	equ	0xFE5
  1519                           plusw1	equ	0xFE3
  1520                           fsr1h	equ	0xFE2
  1521                           fsr1l	equ	0xFE1
  1522                           indf2	equ	0xFDF
  1523                           postinc2	equ	0xFDE
  1524                           postdec2	equ	0xFDD
  1525                           plusw2	equ	0xFDB
  1526                           fsr2h	equ	0xFDA
  1527                           fsr2l	equ	0xFD9
  1528                           status	equ	0xFD8
  1529                           
  1530                           	psect	cstackBANK3
  1531  0003A0                     __pcstackBANK3:
  1532                           	opt stack 0
  1533  0003A0                     LORAWAN_RxDone@fPort:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x0
  1537  0003A0                     	ds	1
  1538  0003A1                     LORAWAN_RxDone@channelIndex:
  1539                           	opt stack 0
  1540                           
  1541                           ; 1 bytes @ 0x1
  1542  0003A1                     	ds	1
  1543  0003A2                     LORAWAN_RxDone@mhdr:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x2
  1547  0003A2                     	ds	1
  1548  0003A3                     LORAWAN_RxDone@extractedMic:
  1549                           	opt stack 0
  1550                           
  1551                           ; 4 bytes @ 0x3
  1552  0003A3                     	ds	4
  1553  0003A7                     LORAWAN_RxDone@bufferIndex:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x7
  1557  0003A7                     	ds	1
  1558  0003A8                     LORAWAN_RxDone@temp:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0x8
  1562  0003A8                     	ds	1
  1563  0003A9                     LORAWAN_RxDone@packet:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x9
  1567  0003A9                     	ds	2
  1568  0003AB                     LORAWAN_RxDone@computedMic:
  1569                           	opt stack 0
  1570                           
  1571                           ; 4 bytes @ 0xB
  1572  0003AB                     	ds	4
  1573  0003AF                     LORAWAN_RxDone@joinAccept:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0xF
  1577  0003AF                     	ds	2
  1578  0003B1                     LORAWAN_RxDone@frmPayloadLength:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x11
  1582  0003B1                     	ds	1
  1583  0003B2                     LORAWAN_RxDone@hdr:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x12
  1587  0003B2                     	ds	2
  1588                           tosu	equ	0xFFF
  1589                           tosh	equ	0xFFE
  1590                           tosl	equ	0xFFD
  1591                           pclath	equ	0xFFA
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           prodh	equ	0xFF4
  1597                           prodl	equ	0xFF3
  1598                           intcon	equ	0xFF2
  1599                           indf0	equ	0xFEF
  1600                           postinc0	equ	0xFEE
  1601                           plusw0	equ	0xFEB
  1602                           fsr0h	equ	0xFEA
  1603                           fsr0l	equ	0xFE9
  1604                           wreg	equ	0xFE8
  1605                           postinc1	equ	0xFE6
  1606                           postdec1	equ	0xFE5
  1607                           plusw1	equ	0xFE3
  1608                           fsr1h	equ	0xFE2
  1609                           fsr1l	equ	0xFE1
  1610                           indf2	equ	0xFDF
  1611                           postinc2	equ	0xFDE
  1612                           postdec2	equ	0xFDD
  1613                           plusw2	equ	0xFDB
  1614                           fsr2h	equ	0xFDA
  1615                           fsr2l	equ	0xFD9
  1616                           status	equ	0xFD8
  1617                           
  1618                           	psect	cstackBANK1
  1619  000100                     __pcstackBANK1:
  1620                           	opt stack 0
  1621  000100                     AESCmac@k2:
  1622                           	opt stack 0
  1623                           
  1624                           ; 16 bytes @ 0x0
  1625  000100                     	ds	16
  1626  000110                     AESCmac@k1:
  1627                           	opt stack 0
  1628                           
  1629                           ; 16 bytes @ 0x10
  1630  000110                     	ds	16
  1631  000120                     AESCmac@mLast:
  1632                           	opt stack 0
  1633                           
  1634                           ; 16 bytes @ 0x20
  1635  000120                     	ds	16
  1636  000130                     AESCmac@padded:
  1637                           	opt stack 0
  1638                           
  1639                           ; 16 bytes @ 0x30
  1640  000130                     	ds	16
  1641  000140                     AESCmac@y:
  1642                           	opt stack 0
  1643                           
  1644                           ; 16 bytes @ 0x40
  1645  000140                     	ds	16
  1646  000150                     AESCmac@x:
  1647                           	opt stack 0
  1648                           
  1649                           ; 16 bytes @ 0x50
  1650  000150                     	ds	16
  1651  000160                     AESCmac@ptr:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x60
  1655  000160                     	ds	2
  1656  000162                     AESCmac@flag:
  1657                           	opt stack 0
  1658                           
  1659                           ; 1 bytes @ 0x62
  1660  000162                     	ds	1
  1661  000163                     AESCmac@n:
  1662                           	opt stack 0
  1663                           
  1664                           ; 1 bytes @ 0x63
  1665  000163                     	ds	1
  1666  000164                     AESCmac@j:
  1667                           	opt stack 0
  1668                           
  1669                           ; 1 bytes @ 0x64
  1670  000164                     	ds	1
  1671  000165                     AESCmac@i:
  1672                           	opt stack 0
  1673                           
  1674                           ; 1 bytes @ 0x65
  1675  000165                     	ds	1
  1676  000166                     AssemblePacket@port:
  1677                           	opt stack 0
  1678                           
  1679                           ; 1 bytes @ 0x66
  1680  000166                     	ds	1
  1681  000167                     AssemblePacket@buffer:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x67
  1685  000167                     	ds	2
  1686  000169                     AssemblePacket@bufferLength:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x69
  1690  000169                     	ds	2
  1691  00016B                     LORAWAN_RxDone@buffer:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x6B
  1695  00016B                     	ds	2
  1696  00016D                     LORAWAN_RxDone@bufferLength:
  1697                           	opt stack 0
  1698                           
  1699                           ; 1 bytes @ 0x6D
  1700  00016D                     	ds	1
  1701                           tosu	equ	0xFFF
  1702                           tosh	equ	0xFFE
  1703                           tosl	equ	0xFFD
  1704                           pclath	equ	0xFFA
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           intcon	equ	0xFF2
  1712                           indf0	equ	0xFEF
  1713                           postinc0	equ	0xFEE
  1714                           plusw0	equ	0xFEB
  1715                           fsr0h	equ	0xFEA
  1716                           fsr0l	equ	0xFE9
  1717                           wreg	equ	0xFE8
  1718                           postinc1	equ	0xFE6
  1719                           postdec1	equ	0xFE5
  1720                           plusw1	equ	0xFE3
  1721                           fsr1h	equ	0xFE2
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           plusw2	equ	0xFDB
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731                           	psect	cstackBANK0
  1732  000060                     __pcstackBANK0:
  1733                           	opt stack 0
  1734  000060                     	ds	4
  1735  000064                     ??_UpdateMinMaxChDataRate:
  1736  000064                     ??_FindSmallestDataRate:
  1737  000064                     ??_CountfOptsLength:
  1738  000064                     ??_flash:
  1739  000064                     ?_TMR1_ReadTimer:
  1740                           	opt stack 0
  1741  000064                     ?_ExecuteLinkCheck:
  1742                           	opt stack 0
  1743  000064                     ?_ExecuteDutyCycle:
  1744                           	opt stack 0
  1745  000064                     ?_ExecuteDevStatus:
  1746                           	opt stack 0
  1747  000064                     ?___wmul:
  1748                           	opt stack 0
  1749  000064                     ?_GetRx1Freq:
  1750                           	opt stack 0
  1751  000064                     ?___lldiv:
  1752                           	opt stack 0
  1753  000064                     ?___llmod:
  1754                           	opt stack 0
  1755  000064                     SwTimerCreate@retVal:
  1756                           	opt stack 0
  1757  000064                     SwTimerIsRunning@timerId:
  1758                           	opt stack 0
  1759  000064                     SwTimerStop@timerId:
  1760                           	opt stack 0
  1761  000064                     SPI2_Exchange8bit@data:
  1762                           	opt stack 0
  1763  000064                     HALResetPinOutputValue@value:
  1764                           	opt stack 0
  1765  000064                     RADIO_SetLoRaSyncWord@syncWord:
  1766                           	opt stack 0
  1767  000064                     RADIO_SetSpreadingFactor@spreadingFactor:
  1768                           	opt stack 0
  1769  000064                     RADIO_SetOutputPower@power:
  1770                           	opt stack 0
  1771  000064                     RADIO_SetCRC@crc:
  1772                           	opt stack 0
  1773  000064                     RADIO_SetIQInverted@iqInverted:
  1774                           	opt stack 0
  1775  000064                     RADIO_SetBandwidth@bandwidth:
  1776                           	opt stack 0
  1777  000064                     RADIO_SetModulation@modulation:
  1778                           	opt stack 0
  1779  000064                     ValidateDataRate@dataRate:
  1780                           	opt stack 0
  1781  000064                     ValidateTxPower@result:
  1782                           	opt stack 0
  1783  000064                     UpdateDLSettings@dlRx1DrOffset:
  1784                           	opt stack 0
  1785  000064                     UpdateDataRange@dataRangeNew:
  1786                           	opt stack 0
  1787  000064                     UpdateChannelIdStatus@statusNew:
  1788                           	opt stack 0
  1789  000064                     ValidateRxOffset@rxOffset:
  1790                           	opt stack 0
  1791  000064                     ValidateChannelId@allowedForDefaultChannels:
  1792                           	opt stack 0
  1793  000064                     ValidateChannelMaskCntl@result:
  1794                           	opt stack 0
  1795  000064                     UpdateCurrentDataRate@valueNew:
  1796                           	opt stack 0
  1797  000064                     UpdateTxPower@txPowerNew:
  1798                           	opt stack 0
  1799  000064                     UpdateJoinInProgress@state:
  1800                           	opt stack 0
  1801  000064                     INTERRUPT_GetDioStatus@a:
  1802                           	opt stack 0
  1803  000064                     EncKeySchedule@key:
  1804                           	opt stack 0
  1805  000064                     ___abdiv@divisor:
  1806                           	opt stack 0
  1807  000064                     INT1_SetInterruptHandler@InterruptHandler:
  1808                           	opt stack 0
  1809  000064                     INT2_SetInterruptHandler@InterruptHandler:
  1810                           	opt stack 0
  1811  000064                     INT0_SetInterruptHandler@InterruptHandler:
  1812                           	opt stack 0
  1813  000064                     INT3_SetInterruptHandler@InterruptHandler:
  1814                           	opt stack 0
  1815  000064                     SwTimerSetCallback@callback:
  1816                           	opt stack 0
  1817  000064                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1818                           	opt stack 0
  1819  000064                     ExecuteDutyCycle@ptr:
  1820                           	opt stack 0
  1821  000064                     ExecuteDevStatus@ptr:
  1822                           	opt stack 0
  1823  000064                     UpdateDutyCycle@dutyCycleNew:
  1824                           	opt stack 0
  1825  000064                     ValidateChannelMask@channelMask:
  1826                           	opt stack 0
  1827  000064                     TMR1_WriteTimer@timerVal:
  1828                           	opt stack 0
  1829  000064                     TMR1_SetInterruptHandler@InterruptHandler:
  1830                           	opt stack 0
  1831  000064                     FillSubKey@source:
  1832                           	opt stack 0
  1833  000064                     IOCBF4_SetInterruptHandler@InterruptHandler:
  1834                           	opt stack 0
  1835  000064                     ExecuteLinkCheck@ptr:
  1836                           	opt stack 0
  1837  000064                     IncludeMacCommandsResponse@macBuffer:
  1838                           	opt stack 0
  1839  000064                     CheckFlags@hdr:
  1840                           	opt stack 0
  1841  000064                     CheckMcastFlags@hdr:
  1842                           	opt stack 0
  1843  000064                     EncodeShiftRow@stateTable:
  1844                           	opt stack 0
  1845  000064                     RxDataDone@pData:
  1846                           	opt stack 0
  1847  000064                     ___wmul@multiplier:
  1848                           	opt stack 0
  1849  000064                     memcpy@d1:
  1850                           	opt stack 0
  1851  000064                     memset@p1:
  1852                           	opt stack 0
  1853  000064                     SystemBlockingWaitMs@ms:
  1854                           	opt stack 0
  1855  000064                     RADIO_SetChannelFrequency@frequency:
  1856                           	opt stack 0
  1857  000064                     ValidateFrequency@frequencyNew:
  1858                           	opt stack 0
  1859  000064                     UpdateFrequency@frequencyNew:
  1860                           	opt stack 0
  1861  000064                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1862                           	opt stack 0
  1863  000064                     UpdateReceiveWindow2Parameters@frequency:
  1864                           	opt stack 0
  1865  000064                     ___lldiv@dividend:
  1866                           	opt stack 0
  1867  000064                     ___llmod@dividend:
  1868                           	opt stack 0
  1869                           
  1870                           ; 4 bytes @ 0x4
  1871  000064                     	ds	1
  1872  000065                     ??_UpdateDataRange:
  1873  000065                     ??_UpdateChannelIdStatus:
  1874  000065                     ??_EncKeySchedule:
  1875  000065                     SwTimerIsRunning@isRunning:
  1876                           	opt stack 0
  1877  000065                     HALSPISend@data:
  1878                           	opt stack 0
  1879  000065                     ValidateDataRate@result:
  1880                           	opt stack 0
  1881  000065                     ValidateTxPower@txPowerNew:
  1882                           	opt stack 0
  1883  000065                     UpdateDLSettings@dlRx2Dr:
  1884                           	opt stack 0
  1885  000065                     ValidateRxOffset@result:
  1886                           	opt stack 0
  1887  000065                     ValidateChannelId@result:
  1888                           	opt stack 0
  1889  000065                     ValidateChannelMaskCntl@channelMaskCntl:
  1890                           	opt stack 0
  1891  000065                     UpdateMinMaxChDataRate@i:
  1892                           	opt stack 0
  1893  000065                     FindSmallestDataRate@found:
  1894                           	opt stack 0
  1895  000065                     flash@x:
  1896                           	opt stack 0
  1897  000065                     ___abdiv@counter:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x5
  1901  000065                     	ds	1
  1902  000066                     ??_TMR1_ReadTimer:
  1903  000066                     ??_TMR1_Initialize:
  1904  000066                     ??_ExecuteDutyCycle:
  1905  000066                     SwTimerSetCallback@callbackParameter:
  1906                           	opt stack 0
  1907  000066                     RADIO_RegisterWrite@value:
  1908                           	opt stack 0
  1909  000066                     RADIO_RegisterRead@reg:
  1910                           	opt stack 0
  1911  000066                     UpdateDataRange@channelId:
  1912                           	opt stack 0
  1913  000066                     UpdateChannelIdStatus@channelId:
  1914                           	opt stack 0
  1915  000066                     ValidateDataRange@result:
  1916                           	opt stack 0
  1917  000066                     ValidateChannelId@channelId:
  1918                           	opt stack 0
  1919  000066                     UpdateDutyCycle@channelId:
  1920                           	opt stack 0
  1921  000066                     ValidateChannelMask@i:
  1922                           	opt stack 0
  1923  000066                     PIN_MANAGER_Initialize@state:
  1924                           	opt stack 0
  1925  000066                     IncludeMacCommandsResponse@pBufferIndex:
  1926                           	opt stack 0
  1927  000066                     FindSmallestDataRate@i:
  1928                           	opt stack 0
  1929  000066                     EncodeShiftRow@temp:
  1930                           	opt stack 0
  1931  000066                     RxDataDone@dataLength:
  1932                           	opt stack 0
  1933  000066                     ___abdiv@sign:
  1934                           	opt stack 0
  1935  000066                     FillSubKey@key:
  1936                           	opt stack 0
  1937  000066                     ___wmul@multiplicand:
  1938                           	opt stack 0
  1939  000066                     memcpy@s1:
  1940                           	opt stack 0
  1941  000066                     memset@c:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x6
  1945  000066                     	ds	1
  1946  000067                     SwTimerSetCallback@timerId:
  1947                           	opt stack 0
  1948  000067                     RADIO_RegisterWrite@reg:
  1949                           	opt stack 0
  1950  000067                     RADIO_RegisterRead@readValue:
  1951                           	opt stack 0
  1952  000067                     UpdateDataRange@i:
  1953                           	opt stack 0
  1954  000067                     UpdateChannelIdStatus@i:
  1955                           	opt stack 0
  1956  000067                     ValidateDataRange@dataRangeNew:
  1957                           	opt stack 0
  1958  000067                     IncludeMacCommandsResponse@bIncludeInFopts:
  1959                           	opt stack 0
  1960  000067                     FindSmallestDataRate@dataRate:
  1961                           	opt stack 0
  1962  000067                     RxDataDone@status:
  1963                           	opt stack 0
  1964  000067                     ___abdiv@quotient:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x7
  1968  000067                     	ds	1
  1969  000068                     ??_IncludeMacCommandsResponse:
  1970  000068                     ??_SystemBlockingWaitMs:
  1971  000068                     RADIO_WritePower@ocp:
  1972                           	opt stack 0
  1973  000068                     RADIO_UnhandledInterrupt@modulation:
  1974                           	opt stack 0
  1975  000068                     LORAWAN_SetChannelIdStatus@statusNew:
  1976                           	opt stack 0
  1977  000068                     ValidateFrequency@result:
  1978                           	opt stack 0
  1979  000068                     ValidateDataRange@dataRateMax:
  1980                           	opt stack 0
  1981  000068                     UpdateFrequency@channelId:
  1982                           	opt stack 0
  1983  000068                     FillSubKey@size:
  1984                           	opt stack 0
  1985  000068                     UpdateReceiveWindow2Parameters@dataRate:
  1986                           	opt stack 0
  1987  000068                     ___abdiv@dividend:
  1988                           	opt stack 0
  1989  000068                     EnableChannels1@channelMask:
  1990                           	opt stack 0
  1991  000068                     TMR1_ReadTimer@readVal:
  1992                           	opt stack 0
  1993  000068                     _EncKeySchedule$3770:
  1994                           	opt stack 0
  1995  000068                     ___wmul@product:
  1996                           	opt stack 0
  1997  000068                     memcpy@n:
  1998                           	opt stack 0
  1999  000068                     memset@n:
  2000                           	opt stack 0
  2001  000068                     ___lldiv@divisor:
  2002                           	opt stack 0
  2003  000068                     ___llmod@divisor:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0x8
  2007  000068                     	ds	1
  2008  000069                     ??_FillSubKey:
  2009  000069                     ??_RADIO_DIO3:
  2010  000069                     ??_RADIO_DIO4:
  2011  000069                     ??_RADIO_DIO5:
  2012  000069                     RADIO_WriteMode@newModulation:
  2013                           	opt stack 0
  2014  000069                     RADIO_WritePower@paDac:
  2015                           	opt stack 0
  2016  000069                     ExecuteDutyCycle@maxDCycle:
  2017                           	opt stack 0
  2018  000069                     ValidateDataRange@dataRateMin:
  2019                           	opt stack 0
  2020                           
  2021                           ; 1 bytes @ 0x9
  2022  000069                     	ds	1
  2023  00006A                     ?_TMR_SwapTimer:
  2024                           	opt stack 0
  2025  00006A                     ?_TMR_GetDeltaTime:
  2026                           	opt stack 0
  2027  00006A                     RADIO_WriteMode@blocking:
  2028                           	opt stack 0
  2029  00006A                     RADIO_WritePower@power:
  2030                           	opt stack 0
  2031  00006A                     LORAWAN_SetChannelIdStatus@channelId:
  2032                           	opt stack 0
  2033  00006A                     EnableChannels1@channelMaskCntl:
  2034                           	opt stack 0
  2035  00006A                     FillSubKey@carry:
  2036                           	opt stack 0
  2037  00006A                     UpdateReceiveDelays@delay:
  2038                           	opt stack 0
  2039  00006A                     CountfOptsLength@macCommandLength:
  2040                           	opt stack 0
  2041  00006A                     TMR_SwapTimer@timerVal:
  2042                           	opt stack 0
  2043  00006A                     AESEncode@block:
  2044                           	opt stack 0
  2045  00006A                     memcpy@d:
  2046                           	opt stack 0
  2047  00006A                     memset@p:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0xA
  2051  00006A                     	ds	1
  2052  00006B                     ?_ExecuteRxTimingSetup:
  2053                           	opt stack 0
  2054  00006B                     RADIO_WriteMode@currentModulation:
  2055                           	opt stack 0
  2056  00006B                     EnableChannels1@channelIndexMin:
  2057                           	opt stack 0
  2058  00006B                     FillSubKey@i:
  2059                           	opt stack 0
  2060  00006B                     CountfOptsLength@i:
  2061                           	opt stack 0
  2062  00006B                     ExecuteRxTimingSetup@ptr:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0xB
  2066  00006B                     	ds	1
  2067  00006C                     ??_LORAWAN_GetMaxPayloadSize:
  2068  00006C                     RADIO_WriteMode@dioMapping:
  2069                           	opt stack 0
  2070  00006C                     EnableChannels1@channelIndexMax:
  2071                           	opt stack 0
  2072  00006C                     AESEncode@masterKey:
  2073                           	opt stack 0
  2074  00006C                     ___llmod@counter:
  2075                           	opt stack 0
  2076  00006C                     memcpy@s:
  2077                           	opt stack 0
  2078  00006C                     TMR_OverrideRemaining@ticksRemaining:
  2079                           	opt stack 0
  2080  00006C                     ___lldiv@quotient:
  2081                           	opt stack 0
  2082                           
  2083                           ; 4 bytes @ 0xC
  2084  00006C                     	ds	1
  2085  00006D                     ??_AESEncode:
  2086  00006D                     RADIO_WriteMode@currentMode:
  2087                           	opt stack 0
  2088  00006D                     EnableChannels1@i:
  2089                           	opt stack 0
  2090  00006D                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  2091                           	opt stack 0
  2092  00006D                     ExecuteRxTimingSetup@delay:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0xD
  2096  00006D                     	ds	1
  2097  00006E                     ??_TMR_GetDeltaTime:
  2098  00006E                     ?_ExtractMic:
  2099                           	opt stack 0
  2100  00006E                     RADIO_WriteMode@newMode:
  2101                           	opt stack 0
  2102  00006E                     InitDefault868Channels@i:
  2103                           	opt stack 0
  2104  00006E                     InitDefault433Channels@i:
  2105                           	opt stack 0
  2106  00006E                     LORAWAN_GetMaxPayloadSize@result:
  2107                           	opt stack 0
  2108  00006E                     IncludeMacCommandsResponse@i:
  2109                           	opt stack 0
  2110  00006E                     RADIO_SetFSKSyncWord@syncWord:
  2111                           	opt stack 0
  2112  00006E                     EnableChannels@channelMask:
  2113                           	opt stack 0
  2114  00006E                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  2115                           	opt stack 0
  2116  00006E                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  2117                           	opt stack 0
  2118  00006E                     PrepareSessionKeys@sessionKey:
  2119                           	opt stack 0
  2120  00006E                     ExtractMic@buffer:
  2121                           	opt stack 0
  2122  00006E                     AssembleEncryptionBlock@frameCounter:
  2123                           	opt stack 0
  2124                           
  2125                           ; 4 bytes @ 0xE
  2126  00006E                     	ds	1
  2127  00006F                     RADIO_WriteMode@opMode:
  2128                           	opt stack 0
  2129  00006F                     IncludeMacCommandsResponse@bufferIndex:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0xF
  2133  00006F                     	ds	1
  2134  000070                     ??_TMR_OverrideRemaining:
  2135  000070                     ?_RADIO_ReadRandom:
  2136                           	opt stack 0
  2137  000070                     RADIO_SetFSKSyncWord@syncWordLen:
  2138                           	opt stack 0
  2139  000070                     EnableChannels@channelMaskCntl:
  2140                           	opt stack 0
  2141  000070                     ExtractMic@bufferLength:
  2142                           	opt stack 0
  2143  000070                     ___lldiv@counter:
  2144                           	opt stack 0
  2145  000070                     PrepareSessionKeys@appNonce:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x10
  2149  000070                     	ds	1
  2150  000071                     ?_ExecuteLinkAdr:
  2151                           	opt stack 0
  2152  000071                     ExecuteLinkAdr@ptr:
  2153                           	opt stack 0
  2154  000071                     SwTimerSetTimeout@timeout:
  2155                           	opt stack 0
  2156  000071                     RADIO_WriteFrequency@frequency:
  2157                           	opt stack 0
  2158  000071                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  2159                           	opt stack 0
  2160  000071                     RADIO_WriteFSKBitRate@bitRate:
  2161                           	opt stack 0
  2162  000071                     ConfigureRadio@freq:
  2163                           	opt stack 0
  2164                           
  2165                           ; 4 bytes @ 0x11
  2166  000071                     	ds	1
  2167  000072                     ??_ExtractMic:
  2168  000072                     AssembleEncryptionBlock@blockId:
  2169                           	opt stack 0
  2170  000072                     TMR_OverrideRemaining@tmrVal:
  2171                           	opt stack 0
  2172  000072                     RADIO_ReadRandom@retVal:
  2173                           	opt stack 0
  2174  000072                     PrepareSessionKeys@networkId:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x12
  2178  000072                     	ds	1
  2179  000073                     ??_ExecuteLinkAdr:
  2180  000073                     AssembleEncryptionBlock@firstByte:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x13
  2184  000073                     	ds	1
  2185  000074                     RADIO_ReadRandom@i:
  2186                           	opt stack 0
  2187  000074                     PrepareSessionKeys@index:
  2188                           	opt stack 0
  2189  000074                     AssembleEncryptionBlock@multicastStatus:
  2190                           	opt stack 0
  2191  000074                     TMR_OverrideRemaining@oldReloadVal:
  2192                           	opt stack 0
  2193  000074                     ExecuteLinkAdr@channelMask:
  2194                           	opt stack 0
  2195  000074                     ExtractMic@mic:
  2196                           	opt stack 0
  2197                           
  2198                           ; 4 bytes @ 0x14
  2199  000074                     	ds	1
  2200  000075                     ??_SwTimerSetTimeout:
  2201  000075                     ConfigureRadio@dataRate:
  2202                           	opt stack 0
  2203  000075                     AssembleEncryptionBlock@dir:
  2204                           	opt stack 0
  2205  000075                     srand@x:
  2206                           	opt stack 0
  2207  000075                     RADIO_WriteFrequency@num_mod:
  2208                           	opt stack 0
  2209  000075                     RADIO_WriteFSKFrequencyDeviation@num:
  2210                           	opt stack 0
  2211  000075                     RADIO_WriteFSKBitRate@num:
  2212                           	opt stack 0
  2213  000075                     AESEncode@key:
  2214                           	opt stack 0
  2215                           
  2216                           ; 16 bytes @ 0x15
  2217  000075                     	ds	1
  2218  000076                     ExecuteLinkAdr@txPower:
  2219                           	opt stack 0
  2220  000076                     AssembleEncryptionBlock@bufferIndex:
  2221                           	opt stack 0
  2222  000076                     ConfigureRadioTx@freq:
  2223                           	opt stack 0
  2224  000076                     ConfigureRadioRx@freq:
  2225                           	opt stack 0
  2226                           
  2227                           ; 4 bytes @ 0x16
  2228  000076                     	ds	1
  2229  000077                     ExecuteLinkAdr@redundancy:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x17
  2233  000077                     	ds	2
  2234  000079                     SwTimerSetTimeout@timerId:
  2235                           	opt stack 0
  2236  000079                     ExecuteLinkAdr@dataRate:
  2237                           	opt stack 0
  2238  000079                     RADIO_WriteFrequency@num:
  2239                           	opt stack 0
  2240                           
  2241                           ; 4 bytes @ 0x19
  2242  000079                     	ds	1
  2243  00007A                     ?_SwTimersInterrupt:
  2244                           	opt stack 0
  2245  00007A                     ConfigureRadioTx@dataRate:
  2246                           	opt stack 0
  2247  00007A                     ConfigureRadioRx@dataRate:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x1A
  2251  00007A                     	ds	1
  2252  00007B                     ConfigureRadioTx@txPower:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x1B
  2256  00007B                     	ds	2
  2257  00007D                     ??_RADIO_DIO2:
  2258  00007D                     RADIO_Init@radioBuffer:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x1D
  2262  00007D                     	ds	1
  2263  00007E                     RADIO_DIO2@dioMapping:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x1E
  2267  00007E                     	ds	1
  2268  00007F                     RADIO_Init@frequency:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0x1F
  2272  00007F                     	ds	3
  2273  000082                     SwTimersInterrupt@timeElapsed:
  2274                           	opt stack 0
  2275                           
  2276                           ; 4 bytes @ 0x22
  2277  000082                     	ds	1
  2278  000083                     ??_RADIO_Init:
  2279                           
  2280                           ; 1 bytes @ 0x23
  2281  000083                     	ds	2
  2282  000085                     _AESEncode$3784:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x25
  2286  000085                     	ds	1
  2287  000086                     SwTimersInterrupt@ticksToNextTimerEvent:
  2288                           	opt stack 0
  2289                           
  2290                           ; 4 bytes @ 0x26
  2291  000086                     	ds	1
  2292  000087                     _AESEncode$3785:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x27
  2296  000087                     	ds	2
  2297  000089                     _AESEncode$3786:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x29
  2301  000089                     	ds	1
  2302  00008A                     SwTimersInterrupt@i:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x2A
  2306  00008A                     	ds	1
  2307  00008B                     ?_SwTimerReadValue:
  2308                           	opt stack 0
  2309  00008B                     AESEncode@aux:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x2B
  2313  00008B                     	ds	1
  2314  00008C                     AESEncode@aux2:
  2315                           	opt stack 0
  2316                           
  2317                           ; 1 bytes @ 0x2C
  2318  00008C                     	ds	1
  2319  00008D                     AESEncode@aux1:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x2D
  2323  00008D                     	ds	1
  2324  00008E                     AESEncode@aux3:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x2E
  2328  00008E                     	ds	1
  2329  00008F                     AESEncode@i:
  2330                           	opt stack 0
  2331  00008F                     SwTimerReadValue@ticksCount:
  2332                           	opt stack 0
  2333  00008F                     SwTimerStart@ticksRemaining:
  2334                           	opt stack 0
  2335                           
  2336                           ; 4 bytes @ 0x2F
  2337  00008F                     	ds	1
  2338  000090                     AESEncodeLoRa@block:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x30
  2342  000090                     	ds	2
  2343  000092                     AESEncodeLoRa@key:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x32
  2347  000092                     	ds	1
  2348  000093                     SwTimerReadValue@timerId:
  2349                           	opt stack 0
  2350  000093                     SwTimerStart@timerId:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x33
  2354  000093                     	ds	1
  2355  000094                     ??_UpdateRetransmissionAckTimeoutState:
  2356  000094                     ??_StartReTxTimer:
  2357  000094                     ?___lmul:
  2358                           	opt stack 0
  2359  000094                     ___lmul@multiplier:
  2360                           	opt stack 0
  2361  000094                     AESEncodeLoRa@useKey:
  2362                           	opt stack 0
  2363                           
  2364                           ; 16 bytes @ 0x34
  2365  000094                     	ds	4
  2366  000098                     StartReTxTimer@minim:
  2367                           	opt stack 0
  2368  000098                     ___lmul@multiplicand:
  2369                           	opt stack 0
  2370                           
  2371                           ; 4 bytes @ 0x38
  2372  000098                     	ds	4
  2373  00009C                     StartReTxTimer@i:
  2374                           	opt stack 0
  2375  00009C                     ___lmul@product:
  2376                           	opt stack 0
  2377                           
  2378                           ; 4 bytes @ 0x3C
  2379  00009C                     	ds	4
  2380  0000A0                     ?_rand:
  2381                           	opt stack 0
  2382  0000A0                     ?_ExecuteNewChannel:
  2383                           	opt stack 0
  2384  0000A0                     ?_ExecuteRxParamSetupReq:
  2385                           	opt stack 0
  2386  0000A0                     RADIO_WriteConfiguration@symbolTimeout:
  2387                           	opt stack 0
  2388  0000A0                     ExecuteNewChannel@ptr:
  2389                           	opt stack 0
  2390  0000A0                     ExecuteRxParamSetupReq@ptr:
  2391                           	opt stack 0
  2392  0000A0                     UpdateCfList@joinAccept:
  2393                           	opt stack 0
  2394  0000A0                     LORAWAN_LinkCheckConfigure@period:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x40
  2398  0000A0                     	ds	2
  2399  0000A2                     ??_LORAWAN_LinkCheckConfigure:
  2400  0000A2                     ??_RADIO_WriteConfiguration:
  2401  0000A2                     ??_UpdateCfList:
  2402  0000A2                     ?___lwmod:
  2403                           	opt stack 0
  2404  0000A2                     ExecuteNewChannel@drRange:
  2405                           	opt stack 0
  2406  0000A2                     ___lwmod@dividend:
  2407                           	opt stack 0
  2408  0000A2                     ExecuteRxParamSetupReq@frequency:
  2409                           	opt stack 0
  2410                           
  2411                           ; 4 bytes @ 0x42
  2412  0000A2                     	ds	1
  2413  0000A3                     ExecuteNewChannel@frequency:
  2414                           	opt stack 0
  2415                           
  2416                           ; 4 bytes @ 0x43
  2417  0000A3                     	ds	1
  2418  0000A4                     RADIO_WriteConfiguration@i:
  2419                           	opt stack 0
  2420  0000A4                     UpdateCfList@bufferLength:
  2421                           	opt stack 0
  2422  0000A4                     GenerateSubkey@key:
  2423                           	opt stack 0
  2424  0000A4                     ComputeSessionKeys@joinAcceptBuffer:
  2425                           	opt stack 0
  2426  0000A4                     EncryptFRMPayload@buffer:
  2427                           	opt stack 0
  2428  0000A4                     ___lwmod@divisor:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x44
  2432  0000A4                     	ds	1
  2433  0000A5                     RADIO_WriteConfiguration@tempValue:
  2434                           	opt stack 0
  2435  0000A5                     UpdateCfList@frequency:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x45
  2439  0000A5                     	ds	1
  2440  0000A6                     ExecuteRxParamSetupReq@dlSettings:
  2441                           	opt stack 0
  2442  0000A6                     EncryptFRMPayload@bufferLength:
  2443                           	opt stack 0
  2444  0000A6                     ___lwmod@counter:
  2445                           	opt stack 0
  2446  0000A6                     GenerateSubkey@k1:
  2447                           	opt stack 0
  2448  0000A6                     _LORAWAN_LinkCheckConfigure$3290:
  2449                           	opt stack 0
  2450                           
  2451                           ; 4 bytes @ 0x46
  2452  0000A6                     	ds	1
  2453  0000A7                     ?_Random:
  2454                           	opt stack 0
  2455  0000A7                     ExecuteNewChannel@channelIndex:
  2456                           	opt stack 0
  2457  0000A7                     EncryptFRMPayload@dir:
  2458                           	opt stack 0
  2459  0000A7                     Random@max:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x47
  2463  0000A7                     	ds	1
  2464  0000A8                     ?_MacExecuteCommands:
  2465                           	opt stack 0
  2466  0000A8                     GenerateSubkey@k2:
  2467                           	opt stack 0
  2468  0000A8                     MacExecuteCommands@buffer:
  2469                           	opt stack 0
  2470  0000A8                     EncryptFRMPayload@frameCounter:
  2471                           	opt stack 0
  2472                           
  2473                           ; 4 bytes @ 0x48
  2474  0000A8                     	ds	1
  2475  0000A9                     RADIO_WriteConfiguration@regValue:
  2476                           	opt stack 0
  2477  0000A9                     SearchAvailableChannel@transmissionType:
  2478                           	opt stack 0
  2479  0000A9                     UpdateCfList@channelIndex:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x49
  2483  0000A9                     	ds	1
  2484  0000AA                     ??_GenerateSubkey:
  2485  0000AA                     ?_RADIO_Transmit:
  2486                           	opt stack 0
  2487  0000AA                     ?_RADIO_ReceiveStart:
  2488                           	opt stack 0
  2489  0000AA                     UpdateCfList@i:
  2490                           	opt stack 0
  2491  0000AA                     LORAWAN_LinkCheckConfigure@iCtr:
  2492                           	opt stack 0
  2493  0000AA                     MacExecuteCommands@fOptsLen:
  2494                           	opt stack 0
  2495  0000AA                     RADIO_Transmit@buffer:
  2496                           	opt stack 0
  2497  0000AA                     RADIO_ReceiveStart@rxWindowSize:
  2498                           	opt stack 0
  2499  0000AA                     SearchAvailableChannel@channelIndex:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x4A
  2503  0000AA                     	ds	1
  2504  0000AB                     ??_MacExecuteCommands:
  2505  0000AB                     LORAWAN_Reset@ismBandNew:
  2506                           	opt stack 0
  2507  0000AB                     GenerateSubkey@const_Rb:
  2508                           	opt stack 0
  2509                           
  2510                           ; 16 bytes @ 0x4B
  2511  0000AB                     	ds	1
  2512  0000AC                     ??_RADIO_ReceiveStart:
  2513  0000AC                     ??_SearchAvailableChannel:
  2514  0000AC                     RADIO_Transmit@bufferLen:
  2515                           	opt stack 0
  2516  0000AC                     LORAWAN_Init@RxPayload:
  2517                           	opt stack 0
  2518  0000AC                     EncryptFRMPayload@key:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x4C
  2522  0000AC                     	ds	1
  2523  0000AD                     ??_RADIO_Transmit:
  2524  0000AD                     MacExecuteCommands@done:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x4D
  2528  0000AD                     	ds	1
  2529  0000AE                     EncryptFRMPayload@macBufferIndex:
  2530                           	opt stack 0
  2531  0000AE                     LORAWAN_Init@RxJoinResponse:
  2532                           	opt stack 0
  2533  0000AE                     MacExecuteCommands@ptr:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x4E
  2537  0000AE                     	ds	1
  2538  0000AF                     EncryptFRMPayload@bufferToBeEncrypted:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x4F
  2542  0000AF                     	ds	1
  2543  0000B0                     SearchAvailableChannel@randomNumberCopy:
  2544                           	opt stack 0
  2545  0000B0                     _RADIO_ReceiveStart$1059:
  2546                           	opt stack 0
  2547                           
  2548                           ; 4 bytes @ 0x50
  2549  0000B0                     	ds	1
  2550  0000B1                     SearchAvailableChannel@result:
  2551                           	opt stack 0
  2552  0000B1                     EncryptFRMPayload@multicastStatus:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x51
  2556  0000B1                     	ds	1
  2557  0000B2                     ??_EncryptFRMPayload:
  2558  0000B2                     SearchAvailableChannel@maxChannels:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x52
  2562  0000B2                     	ds	1
  2563  0000B3                     SearchAvailableChannel@randomNumber:
  2564                           	opt stack 0
  2565                           
  2566                           ; 1 bytes @ 0x53
  2567  0000B3                     	ds	1
  2568  0000B4                     SearchAvailableChannel@i:
  2569                           	opt stack 0
  2570  0000B4                     LORAWAN_TxDone@timeOnAir:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x54
  2574  0000B4                     	ds	1
  2575  0000B5                     SelectChannelForTransmission@transmissionType:
  2576                           	opt stack 0
  2577  0000B5                     _RADIO_Transmit$1056:
  2578                           	opt stack 0
  2579                           
  2580                           ; 4 bytes @ 0x55
  2581  0000B5                     	ds	1
  2582  0000B6                     ??_LORAWAN_TxDone:
  2583  0000B6                     SelectChannelForTransmission@result:
  2584                           	opt stack 0
  2585                           
  2586                           ; 1 bytes @ 0x56
  2587  0000B6                     	ds	1
  2588  0000B7                     SelectChannelForTransmission@channelIndex:
  2589                           	opt stack 0
  2590  0000B7                     EncryptFRMPayload@k:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x57
  2594  0000B7                     	ds	1
  2595  0000B8                     EncryptFRMPayload@i:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x58
  2599  0000B8                     	ds	1
  2600  0000B9                     RADIO_Transmit@regValue:
  2601                           	opt stack 0
  2602  0000B9                     EncryptFRMPayload@j:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x59
  2606  0000B9                     	ds	1
  2607  0000BA                     RADIO_Transmit@i:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x5A
  2611  0000BA                     	ds	1
  2612  0000BB                     ??_LORAWAN_RxTimeout:
  2613  0000BB                     GenerateSubkey@l:
  2614                           	opt stack 0
  2615                           
  2616                           ; 16 bytes @ 0x5B
  2617  0000BB                     	ds	3
  2618  0000BE                     _LORAWAN_TxDone$1952:
  2619                           	opt stack 0
  2620                           
  2621                           ; 4 bytes @ 0x5E
  2622  0000BE                     	ds	1
  2623  0000BF                     LORAWAN_RxTimeout@minim:
  2624                           	opt stack 0
  2625                           
  2626                           ; 4 bytes @ 0x5F
  2627  0000BF                     	ds	3
  2628  0000C2                     _LORAWAN_TxDone$1953:
  2629                           	opt stack 0
  2630                           
  2631                           ; 4 bytes @ 0x62
  2632  0000C2                     	ds	1
  2633  0000C3                     LORAWAN_RxTimeout@i:
  2634                           	opt stack 0
  2635                           
  2636                           ; 1 bytes @ 0x63
  2637  0000C3                     	ds	1
  2638  0000C4                     ??_RADIO_DIO1:
  2639                           
  2640                           ; 1 bytes @ 0x64
  2641  0000C4                     	ds	1
  2642  0000C5                     RADIO_DIO1@dioMapping:
  2643                           	opt stack 0
  2644                           
  2645                           ; 1 bytes @ 0x65
  2646  0000C5                     	ds	1
  2647  0000C6                     LORAWAN_TxDone@found:
  2648                           	opt stack 0
  2649                           
  2650                           ; 1 bytes @ 0x66
  2651  0000C6                     	ds	1
  2652  0000C7                     LORAWAN_TxDone@delta:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x67
  2656  0000C7                     	ds	4
  2657  0000CB                     GenerateSubkey@i:
  2658                           	opt stack 0
  2659  0000CB                     _LORAWAN_TxDone$5204:
  2660                           	opt stack 0
  2661                           
  2662                           ; 4 bytes @ 0x6B
  2663  0000CB                     	ds	1
  2664  0000CC                     AESCmac@key:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x6C
  2668  0000CC                     	ds	2
  2669  0000CE                     AESCmac@output:
  2670                           	opt stack 0
  2671                           
  2672                           ; 2 bytes @ 0x6E
  2673  0000CE                     	ds	1
  2674  0000CF                     LORAWAN_TxDone@ticks:
  2675                           	opt stack 0
  2676                           
  2677                           ; 4 bytes @ 0x6F
  2678  0000CF                     	ds	1
  2679  0000D0                     AESCmac@input:
  2680                           	opt stack 0
  2681                           
  2682                           ; 2 bytes @ 0x70
  2683  0000D0                     	ds	2
  2684  0000D2                     AESCmac@size:
  2685                           	opt stack 0
  2686                           
  2687                           ; 1 bytes @ 0x72
  2688  0000D2                     	ds	1
  2689  0000D3                     ??_AESCmac:
  2690  0000D3                     LORAWAN_TxDone@minim:
  2691                           	opt stack 0
  2692                           
  2693                           ; 4 bytes @ 0x73
  2694  0000D3                     	ds	4
  2695  0000D7                     LORAWAN_TxDone@i:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x77
  2699  0000D7                     	ds	1
  2700  0000D8                     RADIO_TxDone@timeOnAir:
  2701                           	opt stack 0
  2702  0000D8                     RADIO_FSKPacketSent@timeOnAir:
  2703                           	opt stack 0
  2704                           
  2705                           ; 4 bytes @ 0x78
  2706  0000D8                     	ds	2
  2707  0000DA                     ??_AssemblePacket:
  2708  0000DA                     ?_ComputeMic:
  2709                           	opt stack 0
  2710  0000DA                     ComputeMic@key:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x7A
  2714  0000DA                     	ds	2
  2715  0000DC                     AssemblePacket@confirmed:
  2716                           	opt stack 0
  2717  0000DC                     ComputeMic@buffer:
  2718                           	opt stack 0
  2719  0000DC                     _RADIO_TxDone$1071:
  2720                           	opt stack 0
  2721  0000DC                     _RADIO_FSKPacketSent$1075:
  2722                           	opt stack 0
  2723                           
  2724                           ; 4 bytes @ 0x7C
  2725  0000DC                     	ds	1
  2726  0000DD                     AssemblePacket@mhdr:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x7D
  2730  0000DD                     	ds	1
  2731  0000DE                     AssemblePacket@fCtrl:
  2732                           	opt stack 0
  2733  0000DE                     ComputeMic@bufferLength:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x7E
  2737  0000DE                     	ds	1
  2738  0000DF                     AssemblePacket@macCmdIdx:
  2739                           	opt stack 0
  2740  0000DF                     ComputeMic@mic:
  2741                           	opt stack 0
  2742                           
  2743                           ; 4 bytes @ 0x7F
  2744  0000DF                     	ds	1
  2745  0000E0                     RADIO_FSKPacketSent@irqFlags:
  2746                           	opt stack 0
  2747  0000E0                     AssemblePacket@bufferIndex:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0x80
  2751  0000E0                     	ds	1
  2752  0000E1                     LORAWAN_Send@port:
  2753                           	opt stack 0
  2754                           
  2755                           ; 1 bytes @ 0x81
  2756  0000E1                     	ds	1
  2757  0000E2                     LORAWAN_Send@buffer:
  2758                           	opt stack 0
  2759                           
  2760                           ; 2 bytes @ 0x82
  2761  0000E2                     	ds	1
  2762  0000E3                     ??_PrepareJoinRequestFrame:
  2763                           
  2764                           ; 1 bytes @ 0x83
  2765  0000E3                     	ds	1
  2766  0000E4                     LORAWAN_Send@bufferLength:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x84
  2770  0000E4                     	ds	1
  2771  0000E5                     ??_LORAWAN_Send:
  2772  0000E5                     PrepareJoinRequestFrame@mic:
  2773                           	opt stack 0
  2774                           
  2775                           ; 4 bytes @ 0x85
  2776  0000E5                     	ds	1
  2777  0000E6                     LORAWAN_Send@result:
  2778                           	opt stack 0
  2779                           
  2780                           ; 1 bytes @ 0x86
  2781  0000E6                     	ds	1
  2782  0000E7                     LORAWAN_Send@confirmed:
  2783                           	opt stack 0
  2784                           
  2785                           ; 1 bytes @ 0x87
  2786  0000E7                     	ds	1
  2787  0000E8                     ??_LORAWAN_RxDone:
  2788  0000E8                     ??_SwTimersExecute:
  2789                           
  2790                           ; 1 bytes @ 0x88
  2791  0000E8                     	ds	1
  2792  0000E9                     PrepareJoinRequestFrame@mhdr:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x89
  2796  0000E9                     	ds	1
  2797  0000EA                     PrepareJoinRequestFrame@bufferIndex:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x8A
  2801  0000EA                     	ds	1
  2802  0000EB                     PrepareJoinRequestFrame@iCtr:
  2803                           	opt stack 0
  2804                           
  2805                           ; 1 bytes @ 0x8B
  2806  0000EB                     	ds	1
  2807  0000EC                     SwTimersExecute@i:
  2808                           	opt stack 0
  2809  0000EC                     LORAWAN_Join@bufferIndex:
  2810                           	opt stack 0
  2811                           
  2812                           ; 1 bytes @ 0x8C
  2813  0000EC                     	ds	1
  2814  0000ED                     RADIO_RxDone@irqFlags:
  2815                           	opt stack 0
  2816  0000ED                     RADIO_FSKPayloadReady@irqFlags:
  2817                           	opt stack 0
  2818  0000ED                     LORAWAN_Join@result:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x8D
  2822  0000ED                     	ds	1
  2823  0000EE                     RADIO_RxDone@i:
  2824                           	opt stack 0
  2825  0000EE                     RADIO_FSKPayloadReady@i:
  2826                           	opt stack 0
  2827  0000EE                     LORAWAN_Join@activationTypeNew:
  2828                           	opt stack 0
  2829                           
  2830                           ; 1 bytes @ 0x8E
  2831  0000EE                     	ds	1
  2832  0000EF                     ??_RADIO_DIO0:
  2833                           
  2834                           ; 1 bytes @ 0x8F
  2835  0000EF                     	ds	2
  2836  0000F1                     RADIO_DIO0@dioMapping:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x91
  2840  0000F1                     	ds	1
  2841  0000F2                     RADIO_DIO0@opMode:
  2842                           	opt stack 0
  2843                           
  2844                           ; 1 bytes @ 0x92
  2845  0000F2                     	ds	1
  2846  0000F3                     ??_main:
  2847                           
  2848                           ; 1 bytes @ 0x93
  2849  0000F3                     	ds	1
  2850  0000F4                     main@flag:
  2851                           	opt stack 0
  2852                           
  2853                           ; 2 bytes @ 0x94
  2854  0000F4                     	ds	2
  2855  0000F6                     main@x:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x96
  2859  0000F6                     	ds	2
  2860                           tosu	equ	0xFFF
  2861                           tosh	equ	0xFFE
  2862                           tosl	equ	0xFFD
  2863                           pclath	equ	0xFFA
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           indf0	equ	0xFEF
  2872                           postinc0	equ	0xFEE
  2873                           plusw0	equ	0xFEB
  2874                           fsr0h	equ	0xFEA
  2875                           fsr0l	equ	0xFE9
  2876                           wreg	equ	0xFE8
  2877                           postinc1	equ	0xFE6
  2878                           postdec1	equ	0xFE5
  2879                           plusw1	equ	0xFE3
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           plusw2	equ	0xFDB
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890                           	psect	cstackCOMRAM
  2891  000001                     __pcstackCOMRAM:
  2892                           	opt stack 0
  2893  000001                     ?i2_TMR1_ReadTimer:
  2894                           	opt stack 0
  2895  000001                     i2TMR1_WriteTimer@timerVal:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x0
  2899  000001                     	ds	2
  2900  000003                     ??i2_TMR1_ReadTimer:
  2901  000003                     
  2902                           ; 1 bytes @ 0x2
  2903  000003                     	ds	2
  2904  000005                     i2TMR1_ReadTimer@readVal:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0x4
  2908  000005                     	ds	2
  2909  000007                     ?i2_TMR_SwapTimer:
  2910                           	opt stack 0
  2911  000007                     ?i2_TMR_GetDeltaTime:
  2912                           	opt stack 0
  2913  000007                     i2TMR_SwapTimer@timerVal:
  2914                           	opt stack 0
  2915                           
  2916                           ; 2 bytes @ 0x6
  2917  000007                     	ds	2
  2918  000009                     
  2919                           ; 1 bytes @ 0x8
  2920  000009                     	ds	2
  2921  00000B                     ??i2_TMR_GetDeltaTime:
  2922                           
  2923                           ; 1 bytes @ 0xA
  2924  00000B                     	ds	12
  2925  000017                     ?i2_SwTimersInterrupt:
  2926                           	opt stack 0
  2927                           
  2928                           ; 4 bytes @ 0x16
  2929  000017                     	ds	4
  2930  00001B                     
  2931                           ; 1 bytes @ 0x1A
  2932  00001B                     	ds	4
  2933  00001F                     i2SwTimersInterrupt@timeElapsed:
  2934                           	opt stack 0
  2935                           
  2936                           ; 4 bytes @ 0x1E
  2937  00001F                     	ds	4
  2938  000023                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2939                           	opt stack 0
  2940                           
  2941                           ; 4 bytes @ 0x22
  2942  000023                     	ds	4
  2943  000027                     i2SwTimersInterrupt@i:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0x26
  2947  000027                     	ds	1
  2948  000028                     ??_INTERRUPT_InterruptManager:
  2949                           
  2950                           ; 1 bytes @ 0x27
  2951  000028                     	ds	8
  2952                           tosu	equ	0xFFF
  2953                           tosh	equ	0xFFE
  2954                           tosl	equ	0xFFD
  2955                           pclath	equ	0xFFA
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           intcon	equ	0xFF2
  2963                           indf0	equ	0xFEF
  2964                           postinc0	equ	0xFEE
  2965                           plusw0	equ	0xFEB
  2966                           fsr0h	equ	0xFEA
  2967                           fsr0l	equ	0xFE9
  2968                           wreg	equ	0xFE8
  2969                           postinc1	equ	0xFE6
  2970                           postdec1	equ	0xFE5
  2971                           plusw1	equ	0xFE3
  2972                           fsr1h	equ	0xFE2
  2973                           fsr1l	equ	0xFE1
  2974                           indf2	equ	0xFDF
  2975                           postinc2	equ	0xFDE
  2976                           postdec2	equ	0xFDD
  2977                           plusw2	equ	0xFDB
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;;
  2983 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2984 ;;
  2985 ;; *************** function _main *****************
  2986 ;; Defined at:
  2987 ;;		line 61 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  x               2  150[BANK0 ] int 
  2992 ;;  flag            2  148[BANK0 ] int 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : F/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3003 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3005 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3006 ;;Total ram usage:        5 bytes
  3007 ;; Hardware stack levels required when called:   19
  3008 ;; This function calls:
  3009 ;;		_LORAWAN_Init
  3010 ;;		_LORAWAN_Join
  3011 ;;		_LORAWAN_Mainloop
  3012 ;;		_LORAWAN_SetApplicationSessionKey
  3013 ;;		_LORAWAN_SetDeviceAddress
  3014 ;;		_LORAWAN_SetNetworkSessionKey
  3015 ;;		_SYSTEM_Initialize
  3016 ;;		_flash
  3017 ;;		_sendPacket
  3018 ;; This function is called by:
  3019 ;;		Startup code after reset
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text0
  3024  003C90                     __ptext0:
  3025                           	opt stack 0
  3026  003C90                     _main:
  3027                           	opt stack 12
  3028                           
  3029                           ;main.c: 64: SYSTEM_Initialize();
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;incstack = 0
  3033  003C90  EC1A  F02F         	call	_SYSTEM_Initialize	;wreg free
  3034                           
  3035                           ; BSR set to: 1
  3036                           ;main.c: 67: (INTCONbits.GIE = 1);
  3037  003C94  8EF2               	bsf	intcon,7,c	;volatile
  3038                           
  3039                           ; BSR set to: 1
  3040                           ;main.c: 68: (INTCONbits.PEIE = 1);
  3041  003C96  8CF2               	bsf	intcon,6,c	;volatile
  3042                           
  3043                           ; BSR set to: 1
  3044  003C98  8079               	bsf	3961,0,c	;volatile
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;main.c: 71: LORAWAN_Init(RxDataDone, RxJoinResponse);
  3048  003C9A  0EA4               	movlw	low _RxDataDone
  3049  003C9C  0100               	movlb	0	; () banked
  3050  003C9E  6FAC               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  3051  003CA0  0E62               	movlw	high _RxDataDone
  3052  003CA2  6FAD               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  3053  003CA4  0E4E               	movlw	low _RxJoinResponse
  3054  003CA6  6FAE               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  3055  003CA8  0E62               	movlw	high _RxJoinResponse
  3056  003CAA  6FAF               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  3057  003CAC  EC0E  F02A         	call	_LORAWAN_Init	;wreg free
  3058                           
  3059                           ;main.c: 72: LORAWAN_SetNetworkSessionKey(nwkSKey);
  3060  003CB0  0EDD               	movlw	low _nwkSKey
  3061  003CB2  0100               	movlb	0	; () banked
  3062  003CB4  6F6E               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  3063  003CB6  0E01               	movlw	high _nwkSKey
  3064  003CB8  6F6F               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  3065  003CBA  EC2D  F02E         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  3066                           
  3067                           ;main.c: 73: LORAWAN_SetApplicationSessionKey(appSKey);
  3068  003CBE  0ECD               	movlw	low _appSKey
  3069  003CC0  0100               	movlb	0	; () banked
  3070  003CC2  6F6E               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  3071  003CC4  0E01               	movlw	high _appSKey
  3072  003CC6  6F6F               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  3073  003CC8  EC22  F02D         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  3074                           
  3075                           ;main.c: 74: LORAWAN_SetDeviceAddress(devAddr);
  3076  003CCC  0E40               	movlw	64
  3077  003CCE  0100               	movlb	0	; () banked
  3078  003CD0  6F64               	movwf	LORAWAN_SetDeviceAddress@deviceAddressNew& (0+255),b
  3079  003CD2  0E66               	movlw	102
  3080  003CD4  6F65               	movwf	(LORAWAN_SetDeviceAddress@deviceAddressNew+1)& (0+255),b
  3081  003CD6  0E00               	movlw	0
  3082  003CD8  6B66               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+2)& (0+255),b
  3083  003CDA  6B67               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+3)& (0+255),b
  3084  003CDC  ECD9  F02F         	call	_LORAWAN_SetDeviceAddress	;wreg free
  3085                           
  3086                           ; BSR set to: 2
  3087                           ;main.c: 75: LORAWAN_Join(ABP);
  3088  003CE0  0E01               	movlw	1
  3089  003CE2  EC94  F023         	call	_LORAWAN_Join
  3090                           
  3091                           ;main.c: 77: while(JoinedServer == 0){
  3092  003CE6  D003               	goto	l16390
  3093  003CE8                     l16386:
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;main.c: 78: LORAWAN_Mainloop();
  3097  003CE8  ECF6  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3098  003CEC  9079               	bcf	3961,0,c	;volatile
  3099  003CEE                     l16390:
  3100  003CEE  0101               	movlb	1	; () banked
  3101  003CF0  5172               	movf	_JoinedServer& (0+255),w,b
  3102  003CF2  E0FA               	bz	l16386
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;main.c: 80: }
  3106                           ;main.c: 82: int flag = 5;
  3107  003CF4  0100               	movlb	0	; () banked
  3108  003CF6  6BF5               	clrf	(main@flag+1)& (0+255),b
  3109  003CF8  0E05               	movlw	5
  3110  003CFA  6FF4               	movwf	main@flag& (0+255),b
  3111  003CFC                     l16394:
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;main.c: 85: {
  3115                           ;main.c: 86: LORAWAN_Mainloop();
  3116  003CFC  ECF6  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3117                           
  3118                           ;main.c: 87: flag++;
  3119  003D00  0100               	movlb	0	; () banked
  3120  003D02  4BF4               	infsnz	main@flag& (0+255),f,b
  3121  003D04  2BF5               	incf	(main@flag+1)& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 89: if(flag > 10){
  3125  003D06  BFF5               	btfsc	(main@flag+1)& (0+255),7,b
  3126  003D08  D00B               	goto	l16406
  3127  003D0A  51F5               	movf	(main@flag+1)& (0+255),w,b
  3128  003D0C  E103               	bnz	u19650
  3129  003D0E  0E0B               	movlw	11
  3130  003D10  5DF4               	subwf	main@flag& (0+255),w,b
  3131  003D12  E306               	bnc	l16406
  3132  003D14                     u19650:
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 90: flag = 0;
  3136  003D14  6BF4               	clrf	main@flag& (0+255),b
  3137  003D16  6BF5               	clrf	(main@flag+1)& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 91: flash();
  3141  003D18  EC34  F02B         	call	_flash	;wreg free
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;main.c: 92: sendPacket();
  3145  003D1C  EC0A  F02F         	call	_sendPacket	;wreg free
  3146  003D20                     l16406:
  3147                           
  3148                           ;main.c: 93: }
  3149                           ;main.c: 94: for(int x = 0; x < 1000; x++) _delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
  3150  003D20  0100               	movlb	0	; () banked
  3151  003D22  6BF6               	clrf	main@x& (0+255),b
  3152  003D24  6BF7               	clrf	(main@x+1)& (0+255),b
  3153  003D26                     l16412:
  3154                           
  3155                           ; BSR set to: 0
  3156  003D26  0E06               	movlw	6
  3157  003D28  6FF3               	movwf	??_main& (0+255),b
  3158  003D2A  0E30               	movlw	48
  3159  003D2C                     u19677:
  3160  003D2C  2EE8               	decfsz	wreg,f,c
  3161  003D2E  D7FE               	goto	u19677
  3162  003D30  2FF3               	decfsz	??_main& (0+255),f,b
  3163  003D32  D7FC               	goto	u19677
  3164  003D34  D000               	nop2	
  3165  003D36  0100               	movlb	0	; () banked
  3166  003D38  4BF6               	infsnz	main@x& (0+255),f,b
  3167  003D3A  2BF7               	incf	(main@x+1)& (0+255),f,b
  3168  003D3C  BFF7               	btfsc	(main@x+1)& (0+255),7,b
  3169  003D3E  D7F3               	goto	l16412
  3170  003D40  0EE8               	movlw	232
  3171  003D42  5DF6               	subwf	main@x& (0+255),w,b
  3172  003D44  0E03               	movlw	3
  3173  003D46  59F7               	subwfb	(main@x+1)& (0+255),w,b
  3174  003D48  E2D9               	bc	l16394
  3175  003D4A  D7ED               	goto	l16412
  3176  003D4C                     __end_of_main:
  3177                           	opt stack 0
  3178                           tosu	equ	0xFFF
  3179                           tosh	equ	0xFFE
  3180                           tosl	equ	0xFFD
  3181                           pclath	equ	0xFFA
  3182                           tblptru	equ	0xFF8
  3183                           tblptrh	equ	0xFF7
  3184                           tblptrl	equ	0xFF6
  3185                           tablat	equ	0xFF5
  3186                           prodh	equ	0xFF4
  3187                           prodl	equ	0xFF3
  3188                           intcon	equ	0xFF2
  3189                           indf0	equ	0xFEF
  3190                           postinc0	equ	0xFEE
  3191                           plusw0	equ	0xFEB
  3192                           fsr0h	equ	0xFEA
  3193                           fsr0l	equ	0xFE9
  3194                           wreg	equ	0xFE8
  3195                           postinc1	equ	0xFE6
  3196                           postdec1	equ	0xFE5
  3197                           plusw1	equ	0xFE3
  3198                           fsr1h	equ	0xFE2
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           plusw2	equ	0xFDB
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _sendPacket *****************
  3209 ;; Defined at:
  3210 ;;		line 99 in file "main.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;		None
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;		None
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      void 
  3217 ;; Registers used:
  3218 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : F/0
  3221 ;;		On exit  : D/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3228 ;;Total ram usage:        0 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:   14
  3231 ;; This function calls:
  3232 ;;		_LORAWAN_Send
  3233 ;; This function is called by:
  3234 ;;		_main
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text1
  3239  005E14                     __ptext1:
  3240                           	opt stack 0
  3241  005E14                     _sendPacket:
  3242                           	opt stack 16
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 101: payload[0] = 0xFF00;
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;incstack = 0
  3249  005E14  0101               	movlb	1	; () banked
  3250  005E16  69BC               	setf	(_payload+1)& (0+255),b
  3251  005E18  0E00               	movlw	0
  3252  005E1A  6FBB               	movwf	_payload& (0+255),b
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;main.c: 104: count++;
  3256  005E1C  0E02               	movlw	2
  3257  005E1E  0100               	movlb	0	; () banked
  3258  005E20  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
  3259  005E22  0EBB               	movlw	low _payload
  3260  005E24  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
  3261  005E26  0E01               	movlw	high _payload
  3262  005E28  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3263  005E2A  0E02               	movlw	2
  3264  005E2C  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3265  005E2E  0E00               	movlw	0
  3266  005E30  EFB8  F01F         	goto	_LORAWAN_Send
  3267  005E34                     __end_of_sendPacket:
  3268                           	opt stack 0
  3269                           tosu	equ	0xFFF
  3270                           tosh	equ	0xFFE
  3271                           tosl	equ	0xFFD
  3272                           pclath	equ	0xFFA
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           intcon	equ	0xFF2
  3280                           indf0	equ	0xFEF
  3281                           postinc0	equ	0xFEE
  3282                           plusw0	equ	0xFEB
  3283                           fsr0h	equ	0xFEA
  3284                           fsr0l	equ	0xFE9
  3285                           wreg	equ	0xFE8
  3286                           postinc1	equ	0xFE6
  3287                           postdec1	equ	0xFE5
  3288                           plusw1	equ	0xFE3
  3289                           fsr1h	equ	0xFE2
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           plusw2	equ	0xFDB
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _flash *****************
  3300 ;; Defined at:
  3301 ;;		line 117 in file "main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  x               1    5[BANK0 ] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : F/0
  3312 ;;		On exit  : F/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3319 ;;Total ram usage:        2 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    7
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_main
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text2
  3330  005668                     __ptext2:
  3331                           	opt stack 0
  3332  005668                     _flash:
  3333                           	opt stack 23
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 118: for(uint8_t x = 0; x < 10; x++){
  3337                           
  3338                           ;incstack = 0
  3339  005668  6B65               	clrf	flash@x& (0+255),b
  3340  00566A                     l15878:
  3341  00566A  0E01               	movlw	1
  3342                           
  3343                           ; BSR set to: 0
  3344  00566C  A079               	btfss	3961,0,c	;volatile
  3345  00566E  0E00               	movlw	0
  3346  005670  0AFF               	xorlw	255
  3347  005672  6F64               	movwf	??_flash& (0+255),b
  3348  005674  5079               	movf	3961,w,c	;volatile
  3349  005676  1964               	xorwf	??_flash& (0+255),w,b
  3350  005678  0BFE               	andlw	-2
  3351  00567A  1964               	xorwf	??_flash& (0+255),w,b
  3352  00567C  6E79               	movwf	3961,c	;volatile
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 120: _delay((unsigned long)((25)*(16000000/4000.0)));
  3356  00567E  0E82               	movlw	130
  3357  005680  6F64               	movwf	??_flash& (0+255),b
  3358  005682  0EDE               	movlw	222
  3359  005684                     u19687:
  3360  005684  2EE8               	decfsz	wreg,f,c
  3361  005686  D7FE               	goto	u19687
  3362  005688  2F64               	decfsz	??_flash& (0+255),f,b
  3363  00568A  D7FC               	goto	u19687
  3364                           
  3365                           ;main.c: 121: _delay((unsigned long)((25)*(16000000/4000.0)));
  3366  00568C  0E82               	movlw	130
  3367  00568E  0100               	movlb	0	; () banked
  3368  005690  6F64               	movwf	??_flash& (0+255),b
  3369  005692  0EDE               	movlw	222
  3370  005694                     u19697:
  3371  005694  2EE8               	decfsz	wreg,f,c
  3372  005696  D7FE               	goto	u19697
  3373  005698  2F64               	decfsz	??_flash& (0+255),f,b
  3374  00569A  D7FC               	goto	u19697
  3375  00569C  0100               	movlb	0	; () banked
  3376  00569E  2B65               	incf	flash@x& (0+255),f,b
  3377                           
  3378                           ; BSR set to: 0
  3379  0056A0  0E09               	movlw	9
  3380  0056A2  6565               	cpfsgt	flash@x& (0+255),b
  3381  0056A4  D7E2               	goto	l15878
  3382                           
  3383                           ; BSR set to: 0
  3384                           
  3385                           ;main.c: 122: }
  3386                           ;main.c: 123: do { LATAbits.LATA0 = 0; } while(0);
  3387  0056A6  9079               	bcf	3961,0,c	;volatile
  3388                           
  3389                           ; BSR set to: 0
  3390  0056A8  0C09               	retlw	9	;funcret
  3391  0056AA                     __end_of_flash:
  3392                           	opt stack 0
  3393                           tosu	equ	0xFFF
  3394                           tosh	equ	0xFFE
  3395                           tosl	equ	0xFFD
  3396                           pclath	equ	0xFFA
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           indf0	equ	0xFEF
  3405                           postinc0	equ	0xFEE
  3406                           plusw0	equ	0xFEB
  3407                           fsr0h	equ	0xFEA
  3408                           fsr0l	equ	0xFE9
  3409                           wreg	equ	0xFE8
  3410                           postinc1	equ	0xFE6
  3411                           postdec1	equ	0xFE5
  3412                           plusw1	equ	0xFE3
  3413                           fsr1h	equ	0xFE2
  3414                           fsr1l	equ	0xFE1
  3415                           indf2	equ	0xFDF
  3416                           postinc2	equ	0xFDE
  3417                           postdec2	equ	0xFDD
  3418                           plusw2	equ	0xFDB
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _SYSTEM_Initialize *****************
  3424 ;; Defined at:
  3425 ;;		line 107 in file "mcc_generated_files/mcc.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : F/1
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;Total ram usage:        0 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:   10
  3446 ;; This function calls:
  3447 ;;		_EUSART1_Initialize
  3448 ;;		_EXT_INT_Initialize
  3449 ;;		_INTERRUPT_Initialize
  3450 ;;		_LORAWAN_PlatformInit
  3451 ;;		_OSCILLATOR_Initialize
  3452 ;;		_PIN_MANAGER_Initialize
  3453 ;;		_SPI2_Initialize
  3454 ;;		_TMR1_Initialize
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text3
  3461  005E34                     __ptext3:
  3462                           	opt stack 0
  3463  005E34                     _SYSTEM_Initialize:
  3464                           	opt stack 20
  3465                           
  3466                           ;mcc.c: 110: INTERRUPT_Initialize();
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;incstack = 0
  3470  005E34  EC44  F031         	call	_INTERRUPT_Initialize	;wreg free
  3471                           
  3472                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  3473  005E38  EC98  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  3474                           
  3475                           ;mcc.c: 112: OSCILLATOR_Initialize();
  3476  005E3C  EC83  F030         	call	_OSCILLATOR_Initialize	;wreg free
  3477                           
  3478                           ; BSR set to: 14
  3479                           ;mcc.c: 113: SPI2_Initialize();
  3480  005E40  ECBD  F030         	call	_SPI2_Initialize	;wreg free
  3481                           
  3482                           ; BSR set to: 14
  3483                           ;mcc.c: 114: EXT_INT_Initialize();
  3484  005E44  EC5A  F02A         	call	_EXT_INT_Initialize	;wreg free
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;mcc.c: 115: TMR1_Initialize();
  3488  005E48  EC55  F02B         	call	_TMR1_Initialize	;wreg free
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;mcc.c: 116: EUSART1_Initialize();
  3492  005E4C  EC39  F030         	call	_EUSART1_Initialize	;wreg free
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;mcc.c: 117: LORAWAN_PlatformInit();
  3496  005E50  EF2A  F02F         	goto	_LORAWAN_PlatformInit	;wreg free
  3497  005E54                     __end_of_SYSTEM_Initialize:
  3498                           	opt stack 0
  3499                           tosu	equ	0xFFF
  3500                           tosh	equ	0xFFE
  3501                           tosl	equ	0xFFD
  3502                           pclath	equ	0xFFA
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           indf0	equ	0xFEF
  3511                           postinc0	equ	0xFEE
  3512                           plusw0	equ	0xFEB
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           postinc1	equ	0xFE6
  3517                           postdec1	equ	0xFE5
  3518                           plusw1	equ	0xFE3
  3519                           fsr1h	equ	0xFE2
  3520                           fsr1l	equ	0xFE1
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           postdec2	equ	0xFDD
  3524                           plusw2	equ	0xFDB
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function _TMR1_Initialize *****************
  3530 ;; Defined at:
  3531 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;		None
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0, cstack
  3540 ;; Tracked objects:
  3541 ;;		On entry : F/0
  3542 ;;		On exit  : F/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;Total ram usage:        2 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    8
  3552 ;; This function calls:
  3553 ;;		_TMR1_SetInterruptHandler
  3554 ;;		_TMR1_StartTimer
  3555 ;; This function is called by:
  3556 ;;		_SYSTEM_Initialize
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text4
  3561  0056AA                     __ptext4:
  3562                           	opt stack 0
  3563  0056AA                     _TMR1_Initialize:
  3564                           	opt stack 21
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;tmr1.c: 68: T1CON = 0x34;
  3568                           
  3569                           ; BSR set to: 1
  3570                           ;incstack = 0
  3571  0056AA  0E34               	movlw	52
  3572  0056AC  6ECF               	movwf	4047,c	;volatile
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;tmr1.c: 71: T1GCON = 0x00;
  3576  0056AE  6AD0               	clrf	4048,c	;volatile
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;tmr1.c: 74: T1GATE = 0x00;
  3580  0056B0  6AD1               	clrf	4049,c	;volatile
  3581                           
  3582                           ;tmr1.c: 77: T1CLK = 0x01;
  3583  0056B2  0E01               	movlw	1
  3584  0056B4  6ED2               	movwf	4050,c	;volatile
  3585                           
  3586                           ;tmr1.c: 80: TMR1H = 0x0B;
  3587  0056B6  0E0B               	movlw	11
  3588  0056B8  6ECE               	movwf	4046,c	;volatile
  3589                           
  3590                           ;tmr1.c: 83: TMR1L = 0xDC;
  3591  0056BA  0EDC               	movlw	220
  3592  0056BC  6ECD               	movwf	4045,c	;volatile
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;tmr1.c: 86: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  3596  0056BE  50CD               	movf	4045,w,c	;volatile
  3597  0056C0  CFCE F066          	movff	4046,??_TMR1_Initialize	;volatile
  3598  0056C4  6B67               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  3599  0056C6  C066  F067         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3600  0056CA  6B66               	clrf	??_TMR1_Initialize& (0+255),b
  3601  0056CC  1166               	iorwf	??_TMR1_Initialize& (0+255),w,b
  3602  0056CE  6E5E               	movwf	_timer1ReloadVal,c	;volatile
  3603  0056D0  5167               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  3604  0056D2  6E5F               	movwf	_timer1ReloadVal+1,c	;volatile
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;tmr1.c: 89: PIR5bits.TMR1IF = 0;
  3608  0056D4  010E               	movlb	14	; () banked
  3609  0056D6  9138               	bcf	56,0,b	;volatile
  3610                           
  3611                           ; BSR set to: 14
  3612                           ;tmr1.c: 92: PIE5bits.TMR1IE = 1;
  3613  0056D8  812E               	bsf	46,0,b	;volatile
  3614                           
  3615                           ; BSR set to: 14
  3616                           ;tmr1.c: 95: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3617  0056DA  0EA6               	movlw	low _TMR1_DefaultInterruptHandler
  3618  0056DC  0100               	movlb	0	; () banked
  3619  0056DE  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3620  0056E0  0E62               	movlw	high _TMR1_DefaultInterruptHandler
  3621  0056E2  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3622  0056E4  ECCE  F030         	call	_TMR1_SetInterruptHandler	;wreg free
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;tmr1.c: 98: TMR1_StartTimer();
  3626  0056E8  EF3C  F031         	goto	_TMR1_StartTimer	;wreg free
  3627  0056EC                     __end_of_TMR1_Initialize:
  3628                           	opt stack 0
  3629                           tosu	equ	0xFFF
  3630                           tosh	equ	0xFFE
  3631                           tosl	equ	0xFFD
  3632                           pclath	equ	0xFFA
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           indf0	equ	0xFEF
  3641                           postinc0	equ	0xFEE
  3642                           plusw0	equ	0xFEB
  3643                           fsr0h	equ	0xFEA
  3644                           fsr0l	equ	0xFE9
  3645                           wreg	equ	0xFE8
  3646                           postinc1	equ	0xFE6
  3647                           postdec1	equ	0xFE5
  3648                           plusw1	equ	0xFE3
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           plusw2	equ	0xFDB
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function _TMR1_StartTimer *****************
  3660 ;; Defined at:
  3661 ;;		line 101 in file "mcc_generated_files/tmr1.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;		None
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;		None
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		None
  3670 ;; Tracked objects:
  3671 ;;		On entry : F/0
  3672 ;;		On exit  : F/0
  3673 ;;		Unchanged: F/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3679 ;;Total ram usage:        0 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    7
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_TMR1_Initialize
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text5
  3690  006278                     __ptext5:
  3691                           	opt stack 0
  3692  006278                     _TMR1_StartTimer:
  3693                           	opt stack 21
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;tmr1.c: 104: T1CONbits.TMR1ON = 1;
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;incstack = 0
  3700  006278  80CF               	bsf	4047,0,c	;volatile
  3701                           
  3702                           ; BSR set to: 0
  3703  00627A  0012               	return		;funcret
  3704  00627C                     __end_of_TMR1_StartTimer:
  3705                           	opt stack 0
  3706                           tosu	equ	0xFFF
  3707                           tosh	equ	0xFFE
  3708                           tosl	equ	0xFFD
  3709                           pclath	equ	0xFFA
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           indf0	equ	0xFEF
  3718                           postinc0	equ	0xFEE
  3719                           plusw0	equ	0xFEB
  3720                           fsr0h	equ	0xFEA
  3721                           fsr0l	equ	0xFE9
  3722                           wreg	equ	0xFE8
  3723                           postinc1	equ	0xFE6
  3724                           postdec1	equ	0xFE5
  3725                           plusw1	equ	0xFE3
  3726                           fsr1h	equ	0xFE2
  3727                           fsr1l	equ	0xFE1
  3728                           indf2	equ	0xFDF
  3729                           postinc2	equ	0xFDE
  3730                           postdec2	equ	0xFDD
  3731                           plusw2	equ	0xFDB
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function _SPI2_Initialize *****************
  3737 ;; Defined at:
  3738 ;;		line 63 in file "mcc_generated_files/spi2.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2
  3747 ;; Tracked objects:
  3748 ;;		On entry : F/E
  3749 ;;		On exit  : F/E
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3756 ;;Total ram usage:        0 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    7
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_SYSTEM_Initialize
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text6
  3767  00617A                     __ptext6:
  3768                           	opt stack 0
  3769  00617A                     _SPI2_Initialize:
  3770                           	opt stack 22
  3771                           
  3772                           ; BSR set to: 14
  3773                           ;spi2.c: 68: SSP2STAT = 0x40;
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;incstack = 0
  3777  00617A  0E40               	movlw	64
  3778  00617C  6FD8               	movwf	216,b	;volatile
  3779                           
  3780                           ;spi2.c: 71: SSP2CON1 = 0x20;
  3781  00617E  0E20               	movlw	32
  3782  006180  6FD9               	movwf	217,b	;volatile
  3783                           
  3784                           ; BSR set to: 14
  3785                           ;spi2.c: 74: SSP2ADD = 0x00;
  3786  006182  6BD6               	clrf	214,b	;volatile
  3787                           
  3788                           ; BSR set to: 14
  3789  006184  0012               	return		;funcret
  3790  006186                     __end_of_SPI2_Initialize:
  3791                           	opt stack 0
  3792                           tosu	equ	0xFFF
  3793                           tosh	equ	0xFFE
  3794                           tosl	equ	0xFFD
  3795                           pclath	equ	0xFFA
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           intcon	equ	0xFF2
  3803                           indf0	equ	0xFEF
  3804                           postinc0	equ	0xFEE
  3805                           plusw0	equ	0xFEB
  3806                           fsr0h	equ	0xFEA
  3807                           fsr0l	equ	0xFE9
  3808                           wreg	equ	0xFE8
  3809                           postinc1	equ	0xFE6
  3810                           postdec1	equ	0xFE5
  3811                           plusw1	equ	0xFE3
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           plusw2	equ	0xFDB
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function _PIN_MANAGER_Initialize *****************
  3823 ;; Defined at:
  3824 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  state           1    6[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;Total ram usage:        1 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    8
  3845 ;; This function calls:
  3846 ;;		_IOCBF4_SetInterruptHandler
  3847 ;; This function is called by:
  3848 ;;		_SYSTEM_Initialize
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text7
  3853  003530                     __ptext7:
  3854                           	opt stack 0
  3855  003530                     _PIN_MANAGER_Initialize:
  3856                           	opt stack 21
  3857                           
  3858                           ;pin_manager.c: 57: LATE = 0x00;
  3859                           
  3860                           ; BSR set to: 14
  3861                           ;incstack = 0
  3862  003530  6A7D               	clrf	3965,c	;volatile
  3863                           
  3864                           ;pin_manager.c: 58: LATD = 0x00;
  3865  003532  6A7C               	clrf	3964,c	;volatile
  3866                           
  3867                           ;pin_manager.c: 59: LATA = 0x00;
  3868  003534  6A79               	clrf	3961,c	;volatile
  3869                           
  3870                           ;pin_manager.c: 60: LATF = 0x00;
  3871  003536  6A7E               	clrf	3966,c	;volatile
  3872                           
  3873                           ;pin_manager.c: 61: LATB = 0x00;
  3874  003538  6A7A               	clrf	3962,c	;volatile
  3875                           
  3876                           ;pin_manager.c: 62: LATG = 0x00;
  3877  00353A  6A7F               	clrf	3967,c	;volatile
  3878                           
  3879                           ;pin_manager.c: 63: LATC = 0x00;
  3880  00353C  6A7B               	clrf	3963,c	;volatile
  3881                           
  3882                           ;pin_manager.c: 64: LATH = 0x00;
  3883  00353E  6A80               	clrf	3968,c	;volatile
  3884                           
  3885                           ;pin_manager.c: 69: TRISE = 0xFF;
  3886  003540  6885               	setf	3973,c	;volatile
  3887                           
  3888                           ;pin_manager.c: 70: TRISF = 0xFF;
  3889  003542  6886               	setf	3974,c	;volatile
  3890                           
  3891                           ;pin_manager.c: 71: TRISA = 0xFE;
  3892  003544  0EFE               	movlw	254
  3893  003546  6E81               	movwf	3969,c	;volatile
  3894                           
  3895                           ;pin_manager.c: 72: TRISG = 0xDF;
  3896  003548  0EDF               	movlw	223
  3897  00354A  6E87               	movwf	3975,c	;volatile
  3898                           
  3899                           ;pin_manager.c: 73: TRISB = 0xFF;
  3900  00354C  6882               	setf	3970,c	;volatile
  3901                           
  3902                           ;pin_manager.c: 74: TRISH = 0x0F;
  3903  00354E  0E0F               	movlw	15
  3904  003550  6E88               	movwf	3976,c	;volatile
  3905                           
  3906                           ;pin_manager.c: 75: TRISC = 0xBF;
  3907  003552  0EBF               	movlw	191
  3908  003554  6E83               	movwf	3971,c	;volatile
  3909                           
  3910                           ;pin_manager.c: 76: TRISD = 0x97;
  3911  003556  0E97               	movlw	151
  3912  003558  6E84               	movwf	3972,c	;volatile
  3913                           
  3914                           ;pin_manager.c: 81: ANSELB = 0xE0;
  3915  00355A  0EE0               	movlw	224
  3916  00355C  010E               	movlb	14	; () banked
  3917  00355E  6F9A               	movwf	154,b	;volatile
  3918                           
  3919                           ;pin_manager.c: 82: ANSELD = 0x77;
  3920  003560  0E77               	movlw	119
  3921  003562  6FA7               	movwf	167,b	;volatile
  3922                           
  3923                           ; BSR set to: 14
  3924                           ;pin_manager.c: 83: ANSELE = 0xFF;
  3925  003564  69AF               	setf	175,b	;volatile
  3926                           
  3927                           ; BSR set to: 14
  3928                           ;pin_manager.c: 84: ANSELG = 0xFF;
  3929  003566  69BC               	setf	188,b	;volatile
  3930                           
  3931                           ; BSR set to: 14
  3932                           ;pin_manager.c: 85: ANSELF = 0xFF;
  3933  003568  69B4               	setf	180,b	;volatile
  3934                           
  3935                           ; BSR set to: 14
  3936                           ;pin_manager.c: 86: ANSELA = 0xFF;
  3937  00356A  6992               	setf	146,b	;volatile
  3938                           
  3939                           ; BSR set to: 14
  3940                           ;pin_manager.c: 91: WPUD = 0xFF;
  3941  00356C  69A6               	setf	166,b	;volatile
  3942                           
  3943                           ; BSR set to: 14
  3944                           ;pin_manager.c: 92: WPUF = 0xFF;
  3945  00356E  69B3               	setf	179,b	;volatile
  3946                           
  3947                           ; BSR set to: 14
  3948                           ;pin_manager.c: 93: WPUE = 0xFF;
  3949  003570  69AE               	setf	174,b	;volatile
  3950                           
  3951                           ; BSR set to: 14
  3952                           ;pin_manager.c: 94: WPUB = 0xFF;
  3953  003572  6999               	setf	153,b	;volatile
  3954                           
  3955                           ; BSR set to: 14
  3956                           ;pin_manager.c: 95: WPUG = 0xFF;
  3957  003574  69BB               	setf	187,b	;volatile
  3958                           
  3959                           ; BSR set to: 14
  3960                           ;pin_manager.c: 96: WPUA = 0xFF;
  3961  003576  6991               	setf	145,b	;volatile
  3962                           
  3963                           ; BSR set to: 14
  3964                           ;pin_manager.c: 97: WPUC = 0xFF;
  3965  003578  69A1               	setf	161,b	;volatile
  3966                           
  3967                           ;pin_manager.c: 98: WPUH = 0x0F;
  3968  00357A  0E0F               	movlw	15
  3969  00357C  6FC0               	movwf	192,b	;volatile
  3970                           
  3971                           ; BSR set to: 14
  3972                           ;pin_manager.c: 103: ODCONE = 0x00;
  3973  00357E  6BAD               	clrf	173,b	;volatile
  3974                           
  3975                           ; BSR set to: 14
  3976                           ;pin_manager.c: 104: ODCONF = 0x00;
  3977  003580  6BB2               	clrf	178,b	;volatile
  3978                           
  3979                           ; BSR set to: 14
  3980                           ;pin_manager.c: 105: ODCONA = 0x00;
  3981  003582  6B90               	clrf	144,b	;volatile
  3982                           
  3983                           ; BSR set to: 14
  3984                           ;pin_manager.c: 106: ODCONG = 0x00;
  3985  003584  6BBA               	clrf	186,b	;volatile
  3986                           
  3987                           ; BSR set to: 14
  3988                           ;pin_manager.c: 107: ODCONB = 0x00;
  3989  003586  6B98               	clrf	152,b	;volatile
  3990                           
  3991                           ; BSR set to: 14
  3992                           ;pin_manager.c: 108: ODCONH = 0x00;
  3993  003588  6BBF               	clrf	191,b	;volatile
  3994                           
  3995                           ; BSR set to: 14
  3996                           ;pin_manager.c: 109: ODCONC = 0x00;
  3997  00358A  6BA0               	clrf	160,b	;volatile
  3998                           
  3999                           ; BSR set to: 14
  4000                           ;pin_manager.c: 110: ODCOND = 0x00;
  4001  00358C  6BA5               	clrf	165,b	;volatile
  4002                           
  4003                           ; BSR set to: 14
  4004                           ;pin_manager.c: 117: IOCBFbits.IOCBF4 = 0;
  4005  00358E  9993               	bcf	147,4,b	;volatile
  4006                           
  4007                           ; BSR set to: 14
  4008                           ;pin_manager.c: 119: IOCBNbits.IOCBN4 = 1;
  4009  003590  8994               	bsf	148,4,b	;volatile
  4010                           
  4011                           ; BSR set to: 14
  4012                           ;pin_manager.c: 121: IOCBPbits.IOCBP4 = 1;
  4013  003592  8995               	bsf	149,4,b	;volatile
  4014                           
  4015                           ; BSR set to: 14
  4016                           ;pin_manager.c: 124: IOCBF4_SetInterruptHandler(IOCBF4_DefaultInterruptHandler);
  4017  003594  0EA8               	movlw	low _IOCBF4_DefaultInterruptHandler
  4018  003596  0100               	movlb	0	; () banked
  4019  003598  6F64               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  4020  00359A  0E62               	movlw	high _IOCBF4_DefaultInterruptHandler
  4021  00359C  6F65               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4022  00359E  ECC9  F030         	call	_IOCBF4_SetInterruptHandler	;wreg free
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;pin_manager.c: 127: PIE0bits.IOCIE = 1;
  4026  0035A2  010E               	movlb	14	; () banked
  4027  0035A4  8929               	bsf	41,4,b	;volatile
  4028                           
  4029                           ; BSR set to: 14
  4030                           ;pin_manager.c: 130: bool state = GIE;
  4031  0035A6  0E00               	movlw	0
  4032  0035A8  BEF2               	btfsc	intcon,7,c	;volatile
  4033  0035AA  0E01               	movlw	1
  4034  0035AC  0100               	movlb	0	; () banked
  4035  0035AE  6F66               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;pin_manager.c: 131: GIE = 0;
  4039  0035B0  9EF2               	bcf	intcon,7,c	;volatile
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;pin_manager.c: 132: PPSLOCK = 0x55;
  4043                           
  4044                           ; BSR set to: 13
  4045                           ;pin_manager.c: 133: PPSLOCK = 0xAA;
  4046  0035B2  D827               	call	PL360	;call to abstracted procedure
  4047                           
  4048                           ; BSR set to: 13
  4049                           ;pin_manager.c: 134: PPSLOCKbits.PPSLOCKED = 0x00;
  4050  0035B4  91EF               	bcf	239,0,b	;volatile
  4051                           
  4052                           ; BSR set to: 13
  4053                           ;pin_manager.c: 136: INT1PPSbits.INT1PPS = 0x09;
  4054  0035B6  51F1               	movf	241,w,b	;volatile
  4055  0035B8  0BC0               	andlw	-64
  4056  0035BA  0909               	iorlw	9
  4057  0035BC  6FF1               	movwf	241,b	;volatile
  4058                           
  4059                           ; BSR set to: 13
  4060                           ;pin_manager.c: 137: INT3PPSbits.INT3PPS = 0x0B;
  4061  0035BE  51F3               	movf	243,w,b	;volatile
  4062  0035C0  0BC0               	andlw	-64
  4063  0035C2  090B               	iorlw	11
  4064  0035C4  6FF3               	movwf	243,b	;volatile
  4065                           
  4066                           ; BSR set to: 13
  4067                           ;pin_manager.c: 138: RD5PPS = 0x1C;
  4068  0035C6  0E1C               	movlw	28
  4069  0035C8  010E               	movlb	14	; () banked
  4070  0035CA  6F6F               	movwf	111,b	;volatile
  4071                           
  4072                           ; BSR set to: 14
  4073                           ;pin_manager.c: 139: INT0PPSbits.INT0PPS = 0x08;
  4074  0035CC  010D               	movlb	13	; () banked
  4075  0035CE  51F0               	movf	240,w,b	;volatile
  4076  0035D0  0BC0               	andlw	-64
  4077  0035D2  0908               	iorlw	8
  4078  0035D4  6FF0               	movwf	240,b	;volatile
  4079                           
  4080                           ; BSR set to: 13
  4081                           ;pin_manager.c: 140: INT2PPSbits.INT2PPS = 0x0A;
  4082  0035D6  51F2               	movf	242,w,b	;volatile
  4083  0035D8  0BC0               	andlw	-64
  4084  0035DA  090A               	iorlw	10
  4085  0035DC  6FF2               	movwf	242,b	;volatile
  4086                           
  4087                           ; BSR set to: 13
  4088                           ;pin_manager.c: 141: RC6PPS = 0x0C;
  4089  0035DE  0E0C               	movlw	12
  4090  0035E0  010E               	movlb	14	; () banked
  4091  0035E2  6F68               	movwf	104,b	;volatile
  4092                           
  4093                           ; BSR set to: 14
  4094                           ;pin_manager.c: 142: RD6PPS = 0x1B;
  4095  0035E4  0E1B               	movlw	27
  4096  0035E6  6F70               	movwf	112,b	;volatile
  4097                           
  4098                           ; BSR set to: 14
  4099                           ;pin_manager.c: 143: SSP2DATPPSbits.SSP2DATPPS = 0x1F;
  4100  0035E8  511D               	movf	29,w,b	;volatile
  4101  0035EA  0BC0               	andlw	-64
  4102  0035EC  091F               	iorlw	31
  4103  0035EE  6F1D               	movwf	29,b	;volatile
  4104                           
  4105                           ; BSR set to: 14
  4106                           ;pin_manager.c: 145: PPSLOCK = 0x55;
  4107                           
  4108                           ; BSR set to: 13
  4109                           ;pin_manager.c: 146: PPSLOCK = 0xAA;
  4110  0035F0  D808               	call	PL360	;call to abstracted procedure
  4111                           
  4112                           ; BSR set to: 13
  4113                           ;pin_manager.c: 147: PPSLOCKbits.PPSLOCKED = 0x01;
  4114  0035F2  81EF               	bsf	239,0,b	;volatile
  4115                           
  4116                           ; BSR set to: 13
  4117                           ;pin_manager.c: 149: GIE = state;
  4118  0035F4  0100               	movlb	0	; () banked
  4119  0035F6  A166               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4120  0035F8  D002               	goto	u18110
  4121  0035FA  8EF2               	bsf	intcon,7,c	;volatile
  4122  0035FC  0CAA               	retlw	170
  4123  0035FE                     u18110:
  4124  0035FE  9EF2               	bcf	intcon,7,c	;volatile
  4125  003600  0012               	return		;funcret
  4126  003602                     __end_of_PIN_MANAGER_Initialize:
  4127                           	opt stack 0
  4128  003602                     PL360:
  4129                           	opt stack 21
  4130  003602  0E55               	movlw	85
  4131  003604  010D               	movlb	13	; () banked
  4132  003606  6FEF               	movwf	239,b	;volatile
  4133  003608  0EAA               	movlw	170
  4134  00360A  6FEF               	movwf	239,b	;volatile
  4135  00360C  0CAA               	retlw	170
  4136  00360E                     __end_ofPL360:
  4137                           	opt stack 0
  4138                           tosu	equ	0xFFF
  4139                           tosh	equ	0xFFE
  4140                           tosl	equ	0xFFD
  4141                           pclath	equ	0xFFA
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           intcon	equ	0xFF2
  4149                           indf0	equ	0xFEF
  4150                           postinc0	equ	0xFEE
  4151                           plusw0	equ	0xFEB
  4152                           fsr0h	equ	0xFEA
  4153                           fsr0l	equ	0xFE9
  4154                           wreg	equ	0xFE8
  4155                           postinc1	equ	0xFE6
  4156                           postdec1	equ	0xFE5
  4157                           plusw1	equ	0xFE3
  4158                           fsr1h	equ	0xFE2
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           postdec2	equ	0xFDD
  4163                           plusw2	equ	0xFDB
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  4169 ;; Defined at:
  4170 ;;		line 181 in file "mcc_generated_files/pin_manager.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4173 ;;		 -> IOCBF4_DefaultInterruptHandler(1), 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : F/0
  4182 ;;		On exit  : F/0
  4183 ;;		Unchanged: F/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4185 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;Total ram usage:        2 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    7
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_PIN_MANAGER_Initialize
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text8
  4200  006192                     __ptext8:
  4201                           	opt stack 0
  4202  006192                     _IOCBF4_SetInterruptHandler:
  4203                           	opt stack 21
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;pin_manager.c: 182: IOCBF4_InterruptHandler = InterruptHandler;
  4207                           
  4208                           ;incstack = 0
  4209  006192  C064  F1F1         	movff	IOCBF4_SetInterruptHandler@InterruptHandler,_IOCBF4_InterruptHandler
  4210  006196  C065  F1F2         	movff	IOCBF4_SetInterruptHandler@InterruptHandler+1,_IOCBF4_InterruptHandler+1
  4211                           
  4212                           ; BSR set to: 0
  4213  00619A  0012               	return		;funcret
  4214  00619C                     __end_of_IOCBF4_SetInterruptHandler:
  4215                           	opt stack 0
  4216                           tosu	equ	0xFFF
  4217                           tosh	equ	0xFFE
  4218                           tosl	equ	0xFFD
  4219                           pclath	equ	0xFFA
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           indf0	equ	0xFEF
  4228                           postinc0	equ	0xFEE
  4229                           plusw0	equ	0xFEB
  4230                           fsr0h	equ	0xFEA
  4231                           fsr0l	equ	0xFE9
  4232                           wreg	equ	0xFE8
  4233                           postinc1	equ	0xFE6
  4234                           postdec1	equ	0xFE5
  4235                           plusw1	equ	0xFE3
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           plusw2	equ	0xFDB
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _OSCILLATOR_Initialize *****************
  4247 ;; Defined at:
  4248 ;;		line 120 in file "mcc_generated_files/mcc.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : F/E
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4266 ;;Total ram usage:        0 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    7
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_SYSTEM_Initialize
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text9
  4277  006106                     __ptext9:
  4278                           	opt stack 0
  4279  006106                     _OSCILLATOR_Initialize:
  4280                           	opt stack 22
  4281                           
  4282                           ;mcc.c: 123: OSCCON1 = 0x60;
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;incstack = 0
  4286  006106  0E60               	movlw	96
  4287  006108  010E               	movlb	14	; () banked
  4288  00610A  6F43               	movwf	67,b	;volatile
  4289                           
  4290                           ; BSR set to: 14
  4291                           ;mcc.c: 125: OSCCON3 = 0x00;
  4292  00610C  6B45               	clrf	69,b	;volatile
  4293                           
  4294                           ; BSR set to: 14
  4295                           ;mcc.c: 127: OSCEN = 0x00;
  4296  00610E  6B47               	clrf	71,b	;volatile
  4297                           
  4298                           ;mcc.c: 129: OSCFRQ = 0x05;
  4299  006110  0E05               	movlw	5
  4300  006112  6F49               	movwf	73,b	;volatile
  4301                           
  4302                           ; BSR set to: 14
  4303                           ;mcc.c: 131: OSCTUNE = 0x00;
  4304  006114  6B48               	clrf	72,b	;volatile
  4305                           
  4306                           ; BSR set to: 14
  4307  006116  0012               	return		;funcret
  4308  006118                     __end_of_OSCILLATOR_Initialize:
  4309                           	opt stack 0
  4310                           tosu	equ	0xFFF
  4311                           tosh	equ	0xFFE
  4312                           tosl	equ	0xFFD
  4313                           pclath	equ	0xFFA
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           indf0	equ	0xFEF
  4322                           postinc0	equ	0xFEE
  4323                           plusw0	equ	0xFEB
  4324                           fsr0h	equ	0xFEA
  4325                           fsr0l	equ	0xFE9
  4326                           wreg	equ	0xFE8
  4327                           postinc1	equ	0xFE6
  4328                           postdec1	equ	0xFE5
  4329                           plusw1	equ	0xFE3
  4330                           fsr1h	equ	0xFE2
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           plusw2	equ	0xFDB
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _LORAWAN_PlatformInit *****************
  4341 ;; Defined at:
  4342 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;		None
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, status,0, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : F/0
  4353 ;;		On exit  : F/1
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4360 ;;Total ram usage:        0 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    9
  4363 ;; This function calls:
  4364 ;;		_DIO0_ISR_Lora_Init
  4365 ;;		_DIO1_ISR_Lora_Init
  4366 ;;		_DIO2_ISR_Lora_Init
  4367 ;;		_DIO3_ISR_Lora_Init
  4368 ;;		_DIO4_ISR_Lora_Init
  4369 ;;		_DIO5_ISR_Lora_Init
  4370 ;;		_SystemTimerInit
  4371 ;;		_TMR_ISR_Lora_Init
  4372 ;; This function is called by:
  4373 ;;		_SYSTEM_Initialize
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text10
  4378  005E54                     __ptext10:
  4379                           	opt stack 0
  4380  005E54                     _LORAWAN_PlatformInit:
  4381                           	opt stack 20
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  4385                           
  4386                           ; BSR set to: 14
  4387                           ;incstack = 0
  4388  005E54  ECC3  F030         	call	_TMR_ISR_Lora_Init	;wreg free
  4389                           
  4390                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  4391  005E58  EC42  F031         	call	_DIO0_ISR_Lora_Init	;wreg free
  4392                           
  4393                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  4394  005E5C  EC40  F031         	call	_DIO1_ISR_Lora_Init	;wreg free
  4395                           
  4396                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  4397  005E60  EC04  F031         	call	_DIO2_ISR_Lora_Init	;wreg free
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  4401  005E64  EC4F  F031         	call	_DIO3_ISR_Lora_Init	;wreg free
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  4405  005E68  EC4E  F031         	call	_DIO4_ISR_Lora_Init	;wreg free
  4406                           
  4407                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  4408  005E6C  EC3E  F031         	call	_DIO5_ISR_Lora_Init	;wreg free
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;lorawan_init.c: 81: SystemTimerInit();
  4412  005E70  EF24  F031         	goto	_SystemTimerInit	;wreg free
  4413  005E74                     __end_of_LORAWAN_PlatformInit:
  4414                           	opt stack 0
  4415                           tosu	equ	0xFFF
  4416                           tosh	equ	0xFFE
  4417                           tosl	equ	0xFFD
  4418                           pclath	equ	0xFFA
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           indf0	equ	0xFEF
  4427                           postinc0	equ	0xFEE
  4428                           plusw0	equ	0xFEB
  4429                           fsr0h	equ	0xFEA
  4430                           fsr0l	equ	0xFE9
  4431                           wreg	equ	0xFE8
  4432                           postinc1	equ	0xFE6
  4433                           postdec1	equ	0xFE5
  4434                           plusw1	equ	0xFE3
  4435                           fsr1h	equ	0xFE2
  4436                           fsr1l	equ	0xFE1
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           plusw2	equ	0xFDB
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function _TMR_ISR_Lora_Init *****************
  4446 ;; Defined at:
  4447 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : F/0
  4458 ;;		On exit  : F/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    8
  4468 ;; This function calls:
  4469 ;;		_TMR1_SetInterruptHandler
  4470 ;; This function is called by:
  4471 ;;		_LORAWAN_PlatformInit
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text11
  4476  006186                     __ptext11:
  4477                           	opt stack 0
  4478  006186                     _TMR_ISR_Lora_Init:
  4479                           	opt stack 20
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4483                           
  4484                           ; BSR set to: 1
  4485                           ;incstack = 0
  4486  006186  0EE2               	movlw	low _TMR_ISR_lora
  4487  006188  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4488  00618A  0E52               	movlw	high _TMR_ISR_lora
  4489  00618C  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4490  00618E  EFCE  F030         	goto	_TMR1_SetInterruptHandler	;wreg free
  4491  006192                     __end_of_TMR_ISR_Lora_Init:
  4492                           	opt stack 0
  4493                           tosu	equ	0xFFF
  4494                           tosh	equ	0xFFE
  4495                           tosl	equ	0xFFD
  4496                           pclath	equ	0xFFA
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           intcon	equ	0xFF2
  4504                           indf0	equ	0xFEF
  4505                           postinc0	equ	0xFEE
  4506                           plusw0	equ	0xFEB
  4507                           fsr0h	equ	0xFEA
  4508                           fsr0l	equ	0xFE9
  4509                           wreg	equ	0xFE8
  4510                           postinc1	equ	0xFE6
  4511                           postdec1	equ	0xFE5
  4512                           plusw1	equ	0xFE3
  4513                           fsr1h	equ	0xFE2
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           postdec2	equ	0xFDD
  4518                           plusw2	equ	0xFDB
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _TMR1_SetInterruptHandler *****************
  4524 ;; Defined at:
  4525 ;;		line 191 in file "mcc_generated_files/tmr1.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4528 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0
  4535 ;; Tracked objects:
  4536 ;;		On entry : F/0
  4537 ;;		On exit  : F/0
  4538 ;;		Unchanged: F/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;Total ram usage:        2 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    7
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_TMR_ISR_Lora_Init
  4551 ;;		_TMR1_Initialize
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text12
  4556  00619C                     __ptext12:
  4557                           	opt stack 0
  4558  00619C                     _TMR1_SetInterruptHandler:
  4559                           	opt stack 21
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;tmr1.c: 192: TMR1_InterruptHandler = InterruptHandler;
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;incstack = 0
  4566  00619C  C064  F1F3         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4567  0061A0  C065  F1F4         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4568                           
  4569                           ; BSR set to: 0
  4570  0061A4  0012               	return		;funcret
  4571  0061A6                     __end_of_TMR1_SetInterruptHandler:
  4572                           	opt stack 0
  4573                           tosu	equ	0xFFF
  4574                           tosh	equ	0xFFE
  4575                           tosl	equ	0xFFD
  4576                           pclath	equ	0xFFA
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           indf0	equ	0xFEF
  4585                           postinc0	equ	0xFEE
  4586                           plusw0	equ	0xFEB
  4587                           fsr0h	equ	0xFEA
  4588                           fsr0l	equ	0xFE9
  4589                           wreg	equ	0xFE8
  4590                           postinc1	equ	0xFE6
  4591                           postdec1	equ	0xFE5
  4592                           plusw1	equ	0xFE3
  4593                           fsr1h	equ	0xFE2
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           plusw2	equ	0xFDB
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _SystemTimerInit *****************
  4604 ;; Defined at:
  4605 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		None
  4614 ;; Tracked objects:
  4615 ;;		On entry : F/0
  4616 ;;		On exit  : F/1
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4623 ;;Total ram usage:        0 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    7
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		_LORAWAN_PlatformInit
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           	psect	text13
  4634  006248                     __ptext13:
  4635                           	opt stack 0
  4636  006248                     _SystemTimerInit:
  4637                           	opt stack 21
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;sw_timer.c: 137: allocatedTimers = 0;
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;incstack = 0
  4644  006248  0101               	movlb	1	; () banked
  4645  00624A  6B73               	clrf	_allocatedTimers& (0+255),b	;volatile
  4646                           
  4647                           ; BSR set to: 1
  4648  00624C  0012               	return		;funcret
  4649  00624E                     __end_of_SystemTimerInit:
  4650                           	opt stack 0
  4651                           tosu	equ	0xFFF
  4652                           tosh	equ	0xFFE
  4653                           tosl	equ	0xFFD
  4654                           pclath	equ	0xFFA
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           indf0	equ	0xFEF
  4663                           postinc0	equ	0xFEE
  4664                           plusw0	equ	0xFEB
  4665                           fsr0h	equ	0xFEA
  4666                           fsr0l	equ	0xFE9
  4667                           wreg	equ	0xFE8
  4668                           postinc1	equ	0xFE6
  4669                           postdec1	equ	0xFE5
  4670                           plusw1	equ	0xFE3
  4671                           fsr1h	equ	0xFE2
  4672                           fsr1l	equ	0xFE1
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           plusw2	equ	0xFDB
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4682 ;; Defined at:
  4683 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : F/0
  4694 ;;		On exit  : F/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    8
  4704 ;; This function calls:
  4705 ;;		_INT0_SetInterruptHandler
  4706 ;; This function is called by:
  4707 ;;		_LORAWAN_PlatformInit
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text14
  4712  00627C                     __ptext14:
  4713                           	opt stack 0
  4714  00627C                     _DIO5_ISR_Lora_Init:
  4715                           	opt stack 0
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;lorawan_init.c: 69: INT0_SetInterruptHandler(DIO5_ISR_Lora);
  4719                           
  4720                           ; BSR set to: 1
  4721                           ;incstack = 0
  4722  00627C  EF05  F031         	goto	PL414	;call to abstracted procedure
  4723  006280                     __end_of_DIO5_ISR_Lora_Init:
  4724                           	opt stack 0
  4725                           tosu	equ	0xFFF
  4726                           tosh	equ	0xFFE
  4727                           tosl	equ	0xFFD
  4728                           pclath	equ	0xFFA
  4729                           tblptru	equ	0xFF8
  4730                           tblptrh	equ	0xFF7
  4731                           tblptrl	equ	0xFF6
  4732                           tablat	equ	0xFF5
  4733                           prodh	equ	0xFF4
  4734                           prodl	equ	0xFF3
  4735                           intcon	equ	0xFF2
  4736                           indf0	equ	0xFEF
  4737                           postinc0	equ	0xFEE
  4738                           plusw0	equ	0xFEB
  4739                           fsr0h	equ	0xFEA
  4740                           fsr0l	equ	0xFE9
  4741                           wreg	equ	0xFE8
  4742                           postinc1	equ	0xFE6
  4743                           postdec1	equ	0xFE5
  4744                           plusw1	equ	0xFE3
  4745                           fsr1h	equ	0xFE2
  4746                           fsr1l	equ	0xFE1
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           plusw2	equ	0xFDB
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4756 ;; Defined at:
  4757 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		None
  4766 ;; Tracked objects:
  4767 ;;		On entry : F/0
  4768 ;;		On exit  : F/0
  4769 ;;		Unchanged: F/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    7
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_LORAWAN_PlatformInit
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text15
  4786  00629C                     __ptext15:
  4787                           	opt stack 0
  4788  00629C                     _DIO4_ISR_Lora_Init:
  4789                           	opt stack 21
  4790                           
  4791                           ; BSR set to: 0
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;incstack = 0
  4795  00629C  0012               	return		;funcret
  4796  00629E                     __end_of_DIO4_ISR_Lora_Init:
  4797                           	opt stack 0
  4798                           tosu	equ	0xFFF
  4799                           tosh	equ	0xFFE
  4800                           tosl	equ	0xFFD
  4801                           pclath	equ	0xFFA
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           indf0	equ	0xFEF
  4810                           postinc0	equ	0xFEE
  4811                           plusw0	equ	0xFEB
  4812                           fsr0h	equ	0xFEA
  4813                           fsr0l	equ	0xFE9
  4814                           wreg	equ	0xFE8
  4815                           postinc1	equ	0xFE6
  4816                           postdec1	equ	0xFE5
  4817                           plusw1	equ	0xFE3
  4818                           fsr1h	equ	0xFE2
  4819                           fsr1l	equ	0xFE1
  4820                           indf2	equ	0xFDF
  4821                           postinc2	equ	0xFDE
  4822                           postdec2	equ	0xFDD
  4823                           plusw2	equ	0xFDB
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4829 ;; Defined at:
  4830 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		None
  4839 ;; Tracked objects:
  4840 ;;		On entry : F/0
  4841 ;;		On exit  : F/0
  4842 ;;		Unchanged: F/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4848 ;;Total ram usage:        0 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    7
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_LORAWAN_PlatformInit
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text16
  4859  00629E                     __ptext16:
  4860                           	opt stack 0
  4861  00629E                     _DIO3_ISR_Lora_Init:
  4862                           	opt stack 21
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;incstack = 0
  4868  00629E  0012               	return		;funcret
  4869  0062A0                     __end_of_DIO3_ISR_Lora_Init:
  4870                           	opt stack 0
  4871                           tosu	equ	0xFFF
  4872                           tosh	equ	0xFFE
  4873                           tosl	equ	0xFFD
  4874                           pclath	equ	0xFFA
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           indf0	equ	0xFEF
  4883                           postinc0	equ	0xFEE
  4884                           plusw0	equ	0xFEB
  4885                           fsr0h	equ	0xFEA
  4886                           fsr0l	equ	0xFE9
  4887                           wreg	equ	0xFE8
  4888                           postinc1	equ	0xFE6
  4889                           postdec1	equ	0xFE5
  4890                           plusw1	equ	0xFE3
  4891                           fsr1h	equ	0xFE2
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           plusw2	equ	0xFDB
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4902 ;; Defined at:
  4903 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : F/0
  4914 ;;		On exit  : F/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;Total ram usage:        0 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    8
  4924 ;; This function calls:
  4925 ;;		_INT0_SetInterruptHandler
  4926 ;; This function is called by:
  4927 ;;		_LORAWAN_PlatformInit
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text17
  4932  006208                     __ptext17:
  4933                           	opt stack 0
  4934  006208                     _DIO2_ISR_Lora_Init:
  4935                           	opt stack 0
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;lorawan_init.c: 56: INT0_SetInterruptHandler(DIO2_ISR_Lora);
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;incstack = 0
  4942  006208  D000               	goto	PL414	;call to abstracted procedure
  4943  00620A                     __end_of_DIO2_ISR_Lora_Init:
  4944                           	opt stack 0
  4945  00620A                     PL414:
  4946                           	opt stack 20
  4947  00620A  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4948  00620C  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4949  00620E  0C00               	retlw	0	;wreg free
  4950  006210                     __end_ofPL414:
  4951                           	opt stack 0
  4952                           tosu	equ	0xFFF
  4953                           tosh	equ	0xFFE
  4954                           tosl	equ	0xFFD
  4955                           pclath	equ	0xFFA
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           indf0	equ	0xFEF
  4964                           postinc0	equ	0xFEE
  4965                           plusw0	equ	0xFEB
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           postinc1	equ	0xFE6
  4970                           postdec1	equ	0xFE5
  4971                           plusw1	equ	0xFE3
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           plusw2	equ	0xFDB
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function _DIO1_ISR_Lora_Init *****************
  4983 ;; Defined at:
  4984 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : F/0
  4995 ;;		On exit  : F/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    8
  5005 ;; This function calls:
  5006 ;;		_INT0_SetInterruptHandler
  5007 ;; This function is called by:
  5008 ;;		_LORAWAN_PlatformInit
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text18
  5013  006280                     __ptext18:
  5014                           	opt stack 0
  5015  006280                     _DIO1_ISR_Lora_Init:
  5016                           	opt stack 0
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;lorawan_init.c: 51: INT0_SetInterruptHandler(DIO1_ISR_Lora);
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;incstack = 0
  5023  006280  EF05  F031         	goto	PL414	;call to abstracted procedure
  5024  006284                     __end_of_DIO1_ISR_Lora_Init:
  5025                           	opt stack 0
  5026                           tosu	equ	0xFFF
  5027                           tosh	equ	0xFFE
  5028                           tosl	equ	0xFFD
  5029                           pclath	equ	0xFFA
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           indf0	equ	0xFEF
  5038                           postinc0	equ	0xFEE
  5039                           plusw0	equ	0xFEB
  5040                           fsr0h	equ	0xFEA
  5041                           fsr0l	equ	0xFE9
  5042                           wreg	equ	0xFE8
  5043                           postinc1	equ	0xFE6
  5044                           postdec1	equ	0xFE5
  5045                           plusw1	equ	0xFE3
  5046                           fsr1h	equ	0xFE2
  5047                           fsr1l	equ	0xFE1
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           plusw2	equ	0xFDB
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5057 ;; Defined at:
  5058 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;		None
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : F/0
  5069 ;;		On exit  : F/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5076 ;;Total ram usage:        0 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    8
  5079 ;; This function calls:
  5080 ;;		_INT0_SetInterruptHandler
  5081 ;; This function is called by:
  5082 ;;		_LORAWAN_PlatformInit
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text19
  5087  006284                     __ptext19:
  5088                           	opt stack 0
  5089  006284                     _DIO0_ISR_Lora_Init:
  5090                           	opt stack 0
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;lorawan_init.c: 46: INT0_SetInterruptHandler(DIO0_ISR_Lora);
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;incstack = 0
  5097  006284  EF05  F031         	goto	PL414	;call to abstracted procedure
  5098  006288                     __end_of_DIO0_ISR_Lora_Init:
  5099                           	opt stack 0
  5100                           tosu	equ	0xFFF
  5101                           tosh	equ	0xFFE
  5102                           tosl	equ	0xFFD
  5103                           pclath	equ	0xFFA
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           indf0	equ	0xFEF
  5112                           postinc0	equ	0xFEE
  5113                           plusw0	equ	0xFEB
  5114                           fsr0h	equ	0xFEA
  5115                           fsr0l	equ	0xFE9
  5116                           wreg	equ	0xFE8
  5117                           postinc1	equ	0xFE6
  5118                           postdec1	equ	0xFE5
  5119                           plusw1	equ	0xFE3
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           plusw2	equ	0xFDB
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _INTERRUPT_Initialize *****************
  5131 ;; Defined at:
  5132 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		None
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;Total ram usage:        0 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    7
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_SYSTEM_Initialize
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text20
  5161  006288                     __ptext20:
  5162                           	opt stack 0
  5163  006288                     _INTERRUPT_Initialize:
  5164                           	opt stack 22
  5165                           
  5166                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;incstack = 0
  5170  006288  9AF2               	bcf	intcon,5,c	;volatile
  5171  00628A  0012               	return		;funcret
  5172  00628C                     __end_of_INTERRUPT_Initialize:
  5173                           	opt stack 0
  5174                           tosu	equ	0xFFF
  5175                           tosh	equ	0xFFE
  5176                           tosl	equ	0xFFD
  5177                           pclath	equ	0xFFA
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           indf0	equ	0xFEF
  5186                           postinc0	equ	0xFEE
  5187                           plusw0	equ	0xFEB
  5188                           fsr0h	equ	0xFEA
  5189                           fsr0l	equ	0xFE9
  5190                           wreg	equ	0xFE8
  5191                           postinc1	equ	0xFE6
  5192                           postdec1	equ	0xFE5
  5193                           plusw1	equ	0xFE3
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           plusw2	equ	0xFDB
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _EXT_INT_Initialize *****************
  5205 ;; Defined at:
  5206 ;;		line 219 in file "mcc_generated_files/ext_int.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  1    wreg      void 
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : F/E
  5217 ;;		On exit  : F/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5224 ;;Total ram usage:        0 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    8
  5227 ;; This function calls:
  5228 ;;		_INT0_SetInterruptHandler
  5229 ;;		_INT1_SetInterruptHandler
  5230 ;;		_INT2_SetInterruptHandler
  5231 ;;		_INT3_SetInterruptHandler
  5232 ;; This function is called by:
  5233 ;;		_SYSTEM_Initialize
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text21
  5238  0054B4                     __ptext21:
  5239                           	opt stack 0
  5240  0054B4                     _EXT_INT_Initialize:
  5241                           	opt stack 21
  5242                           
  5243                           ; BSR set to: 14
  5244                           ;ext_int.c: 228: (PIR0bits.INT1IF = 0);
  5245                           
  5246                           ;incstack = 0
  5247  0054B4  9333               	bcf	51,1,b	;volatile
  5248                           
  5249                           ;ext_int.c: 229: (INTCONbits.INT1EDG = 1);
  5250  0054B6  82F2               	bsf	intcon,1,c	;volatile
  5251                           
  5252                           ; BSR set to: 14
  5253                           ;ext_int.c: 231: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5254  0054B8  0EAC               	movlw	low _INT1_DefaultInterruptHandler
  5255  0054BA  0100               	movlb	0	; () banked
  5256  0054BC  6F64               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5257  0054BE  0E62               	movlw	high _INT1_DefaultInterruptHandler
  5258  0054C0  6F65               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5259  0054C2  ECD8  F030         	call	_INT1_SetInterruptHandler	;wreg free
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;ext_int.c: 232: (PIE0bits.INT1IE = 1);
  5263  0054C6  010E               	movlb	14	; () banked
  5264  0054C8  8329               	bsf	41,1,b	;volatile
  5265                           
  5266                           ; BSR set to: 14
  5267                           ;ext_int.c: 243: (PIR0bits.INT2IF = 0);
  5268  0054CA  9533               	bcf	51,2,b	;volatile
  5269                           
  5270                           ; BSR set to: 14
  5271                           ;ext_int.c: 244: (INTCONbits.INT2EDG = 1);
  5272  0054CC  84F2               	bsf	intcon,2,c	;volatile
  5273                           
  5274                           ;ext_int.c: 246: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5275  0054CE  0EAA               	movlw	low _INT2_DefaultInterruptHandler
  5276  0054D0  0100               	movlb	0	; () banked
  5277  0054D2  6F64               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5278  0054D4  0E62               	movlw	high _INT2_DefaultInterruptHandler
  5279  0054D6  6F65               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5280  0054D8  ECD3  F030         	call	_INT2_SetInterruptHandler	;wreg free
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;ext_int.c: 247: (PIE0bits.INT2IE = 1);
  5284  0054DC  010E               	movlb	14	; () banked
  5285  0054DE  8529               	bsf	41,2,b	;volatile
  5286                           
  5287                           ; BSR set to: 14
  5288                           ;ext_int.c: 258: (PIR0bits.INT0IF = 0);
  5289  0054E0  9133               	bcf	51,0,b	;volatile
  5290                           
  5291                           ; BSR set to: 14
  5292                           ;ext_int.c: 259: (INTCONbits.INT0EDG = 1);
  5293  0054E2  80F2               	bsf	intcon,0,c	;volatile
  5294                           
  5295                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5296  0054E4  0E00               	movlw	0
  5297  0054E6  0100               	movlb	0	; () banked
  5298  0054E8  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5299  0054EA  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5300  0054EC  EC51  F031         	call	_INT0_SetInterruptHandler	;wreg free
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;ext_int.c: 272: (PIR0bits.INT3IF = 0);
  5304  0054F0  010E               	movlb	14	; () banked
  5305  0054F2  9733               	bcf	51,3,b	;volatile
  5306                           
  5307                           ; BSR set to: 14
  5308                           ;ext_int.c: 273: (INTCONbits.INT3EDG = 1);
  5309  0054F4  86F2               	bsf	intcon,3,c	;volatile
  5310                           
  5311                           ;ext_int.c: 275: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  5312  0054F6  0100               	movlb	0	; () banked
  5313  0054F8  6B64               	clrf	INT3_SetInterruptHandler@InterruptHandler& (0+255),b
  5314  0054FA  6B65               	clrf	(INT3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5315  0054FC  0C00               	retlw	0	;wreg free
  5316  0054FE                     __end_of_EXT_INT_Initialize:
  5317                           	opt stack 0
  5318                           tosu	equ	0xFFF
  5319                           tosh	equ	0xFFE
  5320                           tosl	equ	0xFFD
  5321                           pclath	equ	0xFFA
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           indf0	equ	0xFEF
  5330                           postinc0	equ	0xFEE
  5331                           plusw0	equ	0xFEB
  5332                           fsr0h	equ	0xFEA
  5333                           fsr0l	equ	0xFE9
  5334                           wreg	equ	0xFE8
  5335                           postinc1	equ	0xFE6
  5336                           postdec1	equ	0xFE5
  5337                           plusw1	equ	0xFE3
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           plusw2	equ	0xFDB
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _INT3_SetInterruptHandler *****************
  5349 ;; Defined at:
  5350 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  5353 ;;		 -> INT3_DefaultInterruptHandler(1), 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;		None
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		None
  5360 ;; Tracked objects:
  5361 ;;		On entry : F/0
  5362 ;;		On exit  : F/0
  5363 ;;		Unchanged: F/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;Total ram usage:        2 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    7
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_EXT_INT_Initialize
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text22
  5380  0062A0                     __ptext22:
  5381                           	opt stack 0
  5382  0062A0                     _INT3_SetInterruptHandler:
  5383                           	opt stack 21
  5384                           
  5385                           ; BSR set to: 0
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;incstack = 0
  5389  0062A0  0012               	return		;funcret
  5390  0062A2                     __end_of_INT3_SetInterruptHandler:
  5391                           	opt stack 0
  5392                           tosu	equ	0xFFF
  5393                           tosh	equ	0xFFE
  5394                           tosl	equ	0xFFD
  5395                           pclath	equ	0xFFA
  5396                           tblptru	equ	0xFF8
  5397                           tblptrh	equ	0xFF7
  5398                           tblptrl	equ	0xFF6
  5399                           tablat	equ	0xFF5
  5400                           prodh	equ	0xFF4
  5401                           prodl	equ	0xFF3
  5402                           intcon	equ	0xFF2
  5403                           indf0	equ	0xFEF
  5404                           postinc0	equ	0xFEE
  5405                           plusw0	equ	0xFEB
  5406                           fsr0h	equ	0xFEA
  5407                           fsr0l	equ	0xFE9
  5408                           wreg	equ	0xFE8
  5409                           postinc1	equ	0xFE6
  5410                           postdec1	equ	0xFE5
  5411                           plusw1	equ	0xFE3
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _INT2_SetInterruptHandler *****************
  5423 ;; Defined at:
  5424 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  5427 ;;		 -> INT2_DefaultInterruptHandler(1), 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0
  5434 ;; Tracked objects:
  5435 ;;		On entry : F/0
  5436 ;;		On exit  : F/0
  5437 ;;		Unchanged: F/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5443 ;;Total ram usage:        2 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    7
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_EXT_INT_Initialize
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text23
  5454  0061A6                     __ptext23:
  5455                           	opt stack 0
  5456  0061A6                     _INT2_SetInterruptHandler:
  5457                           	opt stack 21
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;incstack = 0
  5464  0061A6  C064  F1EF         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5465  0061AA  C065  F1F0         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5466                           
  5467                           ; BSR set to: 0
  5468  0061AE  0012               	return		;funcret
  5469  0061B0                     __end_of_INT2_SetInterruptHandler:
  5470                           	opt stack 0
  5471                           tosu	equ	0xFFF
  5472                           tosh	equ	0xFFE
  5473                           tosl	equ	0xFFD
  5474                           pclath	equ	0xFFA
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           indf0	equ	0xFEF
  5483                           postinc0	equ	0xFEE
  5484                           plusw0	equ	0xFEB
  5485                           fsr0h	equ	0xFEA
  5486                           fsr0l	equ	0xFE9
  5487                           wreg	equ	0xFE8
  5488                           postinc1	equ	0xFE6
  5489                           postdec1	equ	0xFE5
  5490                           plusw1	equ	0xFE3
  5491                           fsr1h	equ	0xFE2
  5492                           fsr1l	equ	0xFE1
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           plusw2	equ	0xFDB
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function _INT1_SetInterruptHandler *****************
  5502 ;; Defined at:
  5503 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  5506 ;;		 -> INT1_DefaultInterruptHandler(1), 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : F/0
  5515 ;;		On exit  : F/0
  5516 ;;		Unchanged: F/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5518 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;Total ram usage:        2 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    7
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_EXT_INT_Initialize
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text24
  5533  0061B0                     __ptext24:
  5534                           	opt stack 0
  5535  0061B0                     _INT1_SetInterruptHandler:
  5536                           	opt stack 21
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;incstack = 0
  5543  0061B0  C064  F1ED         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5544  0061B4  C065  F1EE         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5545                           
  5546                           ; BSR set to: 0
  5547  0061B8  0012               	return		;funcret
  5548  0061BA                     __end_of_INT1_SetInterruptHandler:
  5549                           	opt stack 0
  5550                           tosu	equ	0xFFF
  5551                           tosh	equ	0xFFE
  5552                           tosl	equ	0xFFD
  5553                           pclath	equ	0xFFA
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           indf0	equ	0xFEF
  5562                           postinc0	equ	0xFEE
  5563                           plusw0	equ	0xFEB
  5564                           fsr0h	equ	0xFEA
  5565                           fsr0l	equ	0xFE9
  5566                           wreg	equ	0xFE8
  5567                           postinc1	equ	0xFE6
  5568                           postdec1	equ	0xFE5
  5569                           plusw1	equ	0xFE3
  5570                           fsr1h	equ	0xFE2
  5571                           fsr1l	equ	0xFE1
  5572                           indf2	equ	0xFDF
  5573                           postinc2	equ	0xFDE
  5574                           postdec2	equ	0xFDD
  5575                           plusw2	equ	0xFDB
  5576                           fsr2h	equ	0xFDA
  5577                           fsr2l	equ	0xFD9
  5578                           status	equ	0xFD8
  5579                           
  5580 ;; *************** function _INT0_SetInterruptHandler *****************
  5581 ;; Defined at:
  5582 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  5585 ;;		 -> DIO5_ISR_Lora(1), DIO2_ISR_Lora(1), DIO1_ISR_Lora(1), DIO0_ISR_Lora(1), 
  5586 ;;		 -> INT0_DefaultInterruptHandler(1), 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		None
  5593 ;; Tracked objects:
  5594 ;;		On entry : F/0
  5595 ;;		On exit  : F/0
  5596 ;;		Unchanged: F/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5602 ;;Total ram usage:        2 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    7
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_EXT_INT_Initialize
  5609 ;;		_DIO0_ISR_Lora_Init
  5610 ;;		_DIO1_ISR_Lora_Init
  5611 ;;		_DIO2_ISR_Lora_Init
  5612 ;;		_DIO5_ISR_Lora_Init
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text25
  5617  0062A2                     __ptext25:
  5618                           	opt stack 0
  5619  0062A2                     _INT0_SetInterruptHandler:
  5620                           	opt stack 20
  5621                           
  5622                           ; BSR set to: 0
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;incstack = 0
  5626  0062A2  0012               	return		;funcret
  5627  0062A4                     __end_of_INT0_SetInterruptHandler:
  5628                           	opt stack 0
  5629                           tosu	equ	0xFFF
  5630                           tosh	equ	0xFFE
  5631                           tosl	equ	0xFFD
  5632                           pclath	equ	0xFFA
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           indf0	equ	0xFEF
  5641                           postinc0	equ	0xFEE
  5642                           plusw0	equ	0xFEB
  5643                           fsr0h	equ	0xFEA
  5644                           fsr0l	equ	0xFE9
  5645                           wreg	equ	0xFE8
  5646                           postinc1	equ	0xFE6
  5647                           postdec1	equ	0xFE5
  5648                           plusw1	equ	0xFE3
  5649                           fsr1h	equ	0xFE2
  5650                           fsr1l	equ	0xFE1
  5651                           indf2	equ	0xFDF
  5652                           postinc2	equ	0xFDE
  5653                           postdec2	equ	0xFDD
  5654                           plusw2	equ	0xFDB
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _EUSART1_Initialize *****************
  5660 ;; Defined at:
  5661 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2
  5670 ;; Tracked objects:
  5671 ;;		On entry : F/0
  5672 ;;		On exit  : F/0
  5673 ;;		Unchanged: F/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5679 ;;Total ram usage:        0 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    7
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_SYSTEM_Initialize
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text26
  5690  006072                     __ptext26:
  5691                           	opt stack 0
  5692  006072                     _EUSART1_Initialize:
  5693                           	opt stack 22
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;eusart1.c: 60: BAUD1CON = 0x08;
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;incstack = 0
  5700  006072  0E08               	movlw	8
  5701  006074  6E9E               	movwf	3998,c	;volatile
  5702                           
  5703                           ;eusart1.c: 63: RC1STA = 0x80;
  5704  006076  0E80               	movlw	128
  5705  006078  6E9C               	movwf	3996,c	;volatile
  5706                           
  5707                           ;eusart1.c: 66: TX1STA = 0x24;
  5708  00607A  0E24               	movlw	36
  5709  00607C  6E9D               	movwf	3997,c	;volatile
  5710                           
  5711                           ;eusart1.c: 69: SP1BRGL = 0x14;
  5712  00607E  0E14               	movlw	20
  5713  006080  6E9A               	movwf	3994,c	;volatile
  5714                           
  5715                           ;eusart1.c: 72: SP1BRGH = 0x34;
  5716  006082  0E34               	movlw	52
  5717  006084  6E9B               	movwf	3995,c	;volatile
  5718                           
  5719                           ; BSR set to: 0
  5720  006086  0C34               	retlw	52	;funcret
  5721  006088                     __end_of_EUSART1_Initialize:
  5722                           	opt stack 0
  5723                           tosu	equ	0xFFF
  5724                           tosh	equ	0xFFE
  5725                           tosl	equ	0xFFD
  5726                           pclath	equ	0xFFA
  5727                           tblptru	equ	0xFF8
  5728                           tblptrh	equ	0xFF7
  5729                           tblptrl	equ	0xFF6
  5730                           tablat	equ	0xFF5
  5731                           prodh	equ	0xFF4
  5732                           prodl	equ	0xFF3
  5733                           intcon	equ	0xFF2
  5734                           indf0	equ	0xFEF
  5735                           postinc0	equ	0xFEE
  5736                           plusw0	equ	0xFEB
  5737                           fsr0h	equ	0xFEA
  5738                           fsr0l	equ	0xFE9
  5739                           wreg	equ	0xFE8
  5740                           postinc1	equ	0xFE6
  5741                           postdec1	equ	0xFE5
  5742                           plusw1	equ	0xFE3
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  5754 ;; Defined at:
  5755 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  networkSessi    2   14[BANK0 ] PTR unsigned char 
  5758 ;;		 -> nwkSKey(16), 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : F/0
  5767 ;;		On exit  : D/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5770 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;Total ram usage:        2 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    8
  5777 ;; This function calls:
  5778 ;;		_memcpy
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text27
  5785  005C5A                     __ptext27:
  5786                           	opt stack 0
  5787  005C5A                     _LORAWAN_SetNetworkSessionKey:
  5788                           	opt stack 22
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;incstack = 0
  5795  005C5A  516E               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  5796  005C5C  116F               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  5797  005C5E  B4D8               	btfsc	status,2,c
  5798  005C60  0012               	return	
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;lorawan.c: 382: {
  5802                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  5803  005C62  0E22               	movlw	low (_loRa+34)
  5804  005C64  6F64               	movwf	memcpy@d1& (0+255),b
  5805  005C66  0E02               	movlw	high (_loRa+34)
  5806  005C68  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  5807  005C6A  C06E  F066         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  5808  005C6E  C06F  F067         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  5809  005C72  EC35  F02D         	call	PL302	;call to abstracted procedure
  5810  005C76  ECA0  F028         	call	_memcpy	;wreg free
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  5814  005C7A  0102               	movlb	2	; () banked
  5815  005C7C  89A5               	bsf	(_loRa+165)& (0+255),4,b
  5816                           
  5817                           ; BSR set to: 2
  5818                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  5819  005C7E  9902               	bcf	(_loRa+2)& (0+255),4,b
  5820  005C80  0012               	return		;funcret
  5821  005C82                     __end_of_LORAWAN_SetNetworkSessionKey:
  5822                           	opt stack 0
  5823                           tosu	equ	0xFFF
  5824                           tosh	equ	0xFFE
  5825                           tosl	equ	0xFFD
  5826                           pclath	equ	0xFFA
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           intcon	equ	0xFF2
  5834                           indf0	equ	0xFEF
  5835                           postinc0	equ	0xFEE
  5836                           plusw0	equ	0xFEB
  5837                           fsr0h	equ	0xFEA
  5838                           fsr0l	equ	0xFE9
  5839                           wreg	equ	0xFE8
  5840                           postinc1	equ	0xFE6
  5841                           postdec1	equ	0xFE5
  5842                           plusw1	equ	0xFE3
  5843                           fsr1h	equ	0xFE2
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           plusw2	equ	0xFDB
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  5854 ;; Defined at:
  5855 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  deviceAddres    4    4[BANK0 ] unsigned long 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;		None
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      void 
  5862 ;; Registers used:
  5863 ;;		None
  5864 ;; Tracked objects:
  5865 ;;		On entry : F/0
  5866 ;;		On exit  : F/2
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;Total ram usage:        4 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    7
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		_main
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text28
  5884  005FB2                     __ptext28:
  5885                           	opt stack 0
  5886  005FB2                     _LORAWAN_SetDeviceAddress:
  5887                           	opt stack 23
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  5891                           
  5892                           ;incstack = 0
  5893  005FB2  C064  F21E         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  5894  005FB6  C065  F21F         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  5895  005FBA  C066  F220         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  5896  005FBE  C067  F221         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  5897                           
  5898                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  5899  005FC2  0102               	movlb	2	; () banked
  5900  005FC4  85A5               	bsf	(_loRa+165)& (0+255),2,b
  5901                           
  5902                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  5903  005FC6  9902               	bcf	(_loRa+2)& (0+255),4,b
  5904                           
  5905                           ; BSR set to: 2
  5906  005FC8  0012               	return		;funcret
  5907  005FCA                     __end_of_LORAWAN_SetDeviceAddress:
  5908                           	opt stack 0
  5909                           tosu	equ	0xFFF
  5910                           tosh	equ	0xFFE
  5911                           tosl	equ	0xFFD
  5912                           pclath	equ	0xFFA
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           indf0	equ	0xFEF
  5921                           postinc0	equ	0xFEE
  5922                           plusw0	equ	0xFEB
  5923                           fsr0h	equ	0xFEA
  5924                           fsr0l	equ	0xFE9
  5925                           wreg	equ	0xFE8
  5926                           postinc1	equ	0xFE6
  5927                           postdec1	equ	0xFE5
  5928                           plusw1	equ	0xFE3
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           plusw2	equ	0xFDB
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  5940 ;; Defined at:
  5941 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  applicationS    2   14[BANK0 ] PTR unsigned char 
  5944 ;;		 -> appSKey(16), 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : F/0
  5953 ;;		On exit  : D/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;Total ram usage:        2 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    8
  5963 ;; This function calls:
  5964 ;;		_memcpy
  5965 ;; This function is called by:
  5966 ;;		_main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text29
  5971  005A44                     __ptext29:
  5972                           	opt stack 0
  5973  005A44                     _LORAWAN_SetApplicationSessionKey:
  5974                           	opt stack 22
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  5978                           
  5979                           ; BSR set to: 2
  5980                           ;incstack = 0
  5981  005A44  516E               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  5982  005A46  116F               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  5983  005A48  B4D8               	btfsc	status,2,c
  5984  005A4A  0012               	return	
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;lorawan.c: 397: {
  5988                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  5989  005A4C  0E32               	movlw	low (_loRa+50)
  5990  005A4E  6F64               	movwf	memcpy@d1& (0+255),b
  5991  005A50  0E02               	movlw	high (_loRa+50)
  5992  005A52  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  5993  005A54  C06E  F066         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  5994  005A58  C06F  F067         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  5995  005A5C  D806               	call	PL302	;call to abstracted procedure
  5996  005A5E  ECA0  F028         	call	_memcpy	;wreg free
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  6000  005A62  0102               	movlb	2	; () banked
  6001  005A64  8BA5               	bsf	(_loRa+165)& (0+255),5,b
  6002                           
  6003                           ; BSR set to: 2
  6004                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  6005  005A66  9902               	bcf	(_loRa+2)& (0+255),4,b
  6006  005A68  0012               	return		;funcret
  6007  005A6A                     __end_of_LORAWAN_SetApplicationSessionKey:
  6008                           	opt stack 0
  6009  005A6A                     PL302:
  6010                           	opt stack 22
  6011  005A6A  6B69               	clrf	(memcpy@n+1)& (0+255),b
  6012  005A6C  0E10               	movlw	16
  6013  005A6E  6F68               	movwf	memcpy@n& (0+255),b
  6014  005A70  0C10               	retlw	16
  6015  005A72                     __end_ofPL302:
  6016                           	opt stack 0
  6017                           tosu	equ	0xFFF
  6018                           tosh	equ	0xFFE
  6019                           tosl	equ	0xFFD
  6020                           pclath	equ	0xFFA
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           intcon	equ	0xFF2
  6028                           indf0	equ	0xFEF
  6029                           postinc0	equ	0xFEE
  6030                           plusw0	equ	0xFEB
  6031                           fsr0h	equ	0xFEA
  6032                           fsr0l	equ	0xFE9
  6033                           wreg	equ	0xFE8
  6034                           postinc1	equ	0xFE6
  6035                           postdec1	equ	0xFE5
  6036                           plusw1	equ	0xFE3
  6037                           fsr1h	equ	0xFE2
  6038                           fsr1l	equ	0xFE1
  6039                           indf2	equ	0xFDF
  6040                           postinc2	equ	0xFDE
  6041                           postdec2	equ	0xFDD
  6042                           plusw2	equ	0xFDB
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _LORAWAN_Mainloop *****************
  6048 ;; Defined at:
  6049 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/1
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;Total ram usage:        0 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   18
  6070 ;; This function calls:
  6071 ;;		_INTERRUPT_GetDioStatus
  6072 ;;		_RADIO_DIO0
  6073 ;;		_RADIO_DIO1
  6074 ;;		_RADIO_DIO2
  6075 ;;		_RADIO_DIO3
  6076 ;;		_RADIO_DIO4
  6077 ;;		_RADIO_DIO5
  6078 ;;		_SwTimersExecute
  6079 ;; This function is called by:
  6080 ;;		_main
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           	psect	text30
  6085  0057EC                     __ptext30:
  6086                           	opt stack 0
  6087  0057EC                     _LORAWAN_Mainloop:
  6088                           	opt stack 12
  6089                           
  6090                           ;lorawan.c: 2240: SwTimersExecute();
  6091                           
  6092                           ;incstack = 0
  6093  0057EC  EC4D  F023         	call	_SwTimersExecute	;wreg free
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  6097  0057F0  ECAF  F030         	call	_INTERRUPT_GetDioStatus	;wreg free
  6098  0057F4  0101               	movlb	1	; () banked
  6099  0057F6  6F74               	movwf	_localDioStatus& (0+255),b
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  6103  0057F8  B174               	btfsc	_localDioStatus& (0+255),0,b
  6104                           
  6105                           ; BSR set to: 1
  6106                           ;lorawan.c: 2246: {
  6107                           ;lorawan.c: 2247: RADIO_DIO0();
  6108  0057FA  EC9A  F026         	call	_RADIO_DIO0	;wreg free
  6109                           
  6110                           ;lorawan.c: 2248: }
  6111                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  6112  0057FE  0101               	movlb	1	; () banked
  6113  005800  B374               	btfsc	_localDioStatus& (0+255),1,b
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;lorawan.c: 2250: {
  6117                           ;lorawan.c: 2251: RADIO_DIO1();
  6118  005802  EC32  F02C         	call	_RADIO_DIO1	;wreg free
  6119                           
  6120                           ;lorawan.c: 2252: }
  6121                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  6122  005806  0101               	movlb	1	; () banked
  6123  005808  B574               	btfsc	_localDioStatus& (0+255),2,b
  6124                           
  6125                           ; BSR set to: 1
  6126                           ;lorawan.c: 2254: {
  6127                           ;lorawan.c: 2255: RADIO_DIO2();
  6128  00580A  ECEE  F02A         	call	_RADIO_DIO2	;wreg free
  6129                           
  6130                           ;lorawan.c: 2256: }
  6131                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  6132  00580E  0101               	movlb	1	; () banked
  6133  005810  B774               	btfsc	_localDioStatus& (0+255),3,b
  6134                           
  6135                           ; BSR set to: 1
  6136                           ;lorawan.c: 2258: {
  6137                           ;lorawan.c: 2259: RADIO_DIO3();
  6138  005812  ECFD  F02F         	call	_RADIO_DIO3	;wreg free
  6139                           
  6140                           ;lorawan.c: 2260: }
  6141                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  6142  005816  0101               	movlb	1	; () banked
  6143  005818  B974               	btfsc	_localDioStatus& (0+255),4,b
  6144                           
  6145                           ; BSR set to: 1
  6146                           ;lorawan.c: 2262: {
  6147                           ;lorawan.c: 2263: RADIO_DIO4();
  6148  00581A  ECF1  F02F         	call	_RADIO_DIO4	;wreg free
  6149                           
  6150                           ;lorawan.c: 2264: }
  6151                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  6152  00581E  0101               	movlb	1	; () banked
  6153  005820  BB74               	btfsc	_localDioStatus& (0+255),5,b
  6154                           
  6155                           ; BSR set to: 1
  6156                           ;lorawan.c: 2266: {
  6157                           ;lorawan.c: 2267: RADIO_DIO5();
  6158  005822  ECE5  F02F         	call	_RADIO_DIO5	;wreg free
  6159  005826  0012               	return		;funcret
  6160  005828                     __end_of_LORAWAN_Mainloop:
  6161                           	opt stack 0
  6162                           tosu	equ	0xFFF
  6163                           tosh	equ	0xFFE
  6164                           tosl	equ	0xFFD
  6165                           pclath	equ	0xFFA
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           intcon	equ	0xFF2
  6173                           indf0	equ	0xFEF
  6174                           postinc0	equ	0xFEE
  6175                           plusw0	equ	0xFEB
  6176                           fsr0h	equ	0xFEA
  6177                           fsr0l	equ	0xFE9
  6178                           wreg	equ	0xFE8
  6179                           postinc1	equ	0xFE6
  6180                           postdec1	equ	0xFE5
  6181                           plusw1	equ	0xFE3
  6182                           fsr1h	equ	0xFE2
  6183                           fsr1l	equ	0xFE1
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           plusw2	equ	0xFDB
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _SwTimersExecute *****************
  6193 ;; Defined at:
  6194 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  i               1  140[BANK0 ] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/1
  6205 ;;		On exit  : F/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;Total ram usage:        5 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:   17
  6215 ;; This function calls:
  6216 ;;		Absolute function
  6217 ;;		_AckRetransmissionCallback
  6218 ;;		_AutomaticReplyCallback
  6219 ;;		_DutyCycleCallback
  6220 ;;		_LORAWAN_LinkCheckCallback
  6221 ;;		_LORAWAN_ReceiveWindow1Callback
  6222 ;;		_LORAWAN_ReceiveWindow2Callback
  6223 ;;		_RADIO_RxFSKTimeout
  6224 ;;		_RADIO_WatchdogTimeout
  6225 ;;		_UnconfirmedTransmissionCallback
  6226 ;;		_UpdateJoinSuccessState
  6227 ;; This function is called by:
  6228 ;;		_LORAWAN_Mainloop
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text31
  6233  00469A                     __ptext31:
  6234                           	opt stack 0
  6235  00469A                     _SwTimersExecute:
  6236                           	opt stack 12
  6237                           
  6238                           ;sw_timer.c: 262: uint8_t i;
  6239                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  6240                           
  6241                           ;incstack = 0
  6242  00469A  9EF2               	bcf	intcon,7,c	;volatile
  6243                           
  6244                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  6245  00469C  0100               	movlb	0	; () banked
  6246  00469E  6BEC               	clrf	SwTimersExecute@i& (0+255),b
  6247  0046A0  D02C               	goto	l16288
  6248  0046A2                     l16274:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;sw_timer.c: 266: {
  6252                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  6253  0046A2  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6254  0046A4  D831               	call	PL36	;call to abstracted procedure
  6255  0046A6  04DE               	decf	postinc2,w,c
  6256  0046A8  E126               	bnz	l16286
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;sw_timer.c: 270: {
  6260                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  6261  0046AA  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6262  0046AC  ECFA  F01E         	call	PL10	;call to abstracted procedure
  6263  0046B0  ECDD  F00E         	call	PL140	;call to abstracted procedure
  6264  0046B4  E120               	bnz	l16286
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;sw_timer.c: 272: {
  6268                           ;sw_timer.c: 273: swTimers[i].running = 0;
  6269  0046B6  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6270  0046B8  D827               	call	PL36	;call to abstracted procedure
  6271  0046BA  6ADF               	clrf	indf2,c
  6272                           
  6273                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  6274  0046BC  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6275  0046BE  D82C               	call	PL94	;call to abstracted procedure
  6276  0046C0  50DE               	movf	postinc2,w,c
  6277  0046C2  10DE               	iorwf	postinc2,w,c
  6278  0046C4  E018               	bz	l16286
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;sw_timer.c: 275: {
  6282                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6283  0046C6  8EF2               	bsf	intcon,7,c	;volatile
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6287  0046C8  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6288  0046CA  ECFB  F02D         	call	PL158	;call to abstracted procedure
  6289  0046CE  50DF               	movf	indf2,w,c
  6290  0046D0  6EE6               	movwf	postinc1,c
  6291  0046D2  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  6292  0046D4  D821               	call	PL94	;call to abstracted procedure
  6293  0046D6  CFDE F0E8          	movff	postinc2,??_SwTimersExecute
  6294  0046DA  CFDD F0E9          	movff	postdec2,??_SwTimersExecute+1
  6295  0046DE  D801               	call	u19418
  6296  0046E0  D009               	goto	l16284
  6297  0046E2                     u19418:
  6298  0046E2  0005               	push	
  6299  0046E4  6EFA               	movwf	pclath,c
  6300  0046E6  51E8               	movf	??_SwTimersExecute& (0+255),w,b
  6301  0046E8  6EFD               	movwf	tosl,c
  6302  0046EA  51E9               	movf	(??_SwTimersExecute+1)& (0+255),w,b
  6303  0046EC  6EFE               	movwf	tosh,c
  6304  0046EE  6AFF               	clrf	tosu,c
  6305  0046F0  50FA               	movf	pclath,w,c
  6306  0046F2  0012               	return		;indir
  6307  0046F4                     l16284:
  6308                           
  6309                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6310  0046F4  9EF2               	bcf	intcon,7,c	;volatile
  6311  0046F6                     l16286:
  6312  0046F6  0100               	movlb	0	; () banked
  6313  0046F8  2BEC               	incf	SwTimersExecute@i& (0+255),f,b
  6314  0046FA                     l16288:
  6315                           
  6316                           ; BSR set to: 0
  6317  0046FA  0101               	movlb	1	; () banked
  6318  0046FC  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
  6319  0046FE  0100               	movlb	0	; () banked
  6320  004700  5DEC               	subwf	SwTimersExecute@i& (0+255),w,b
  6321  004702  E3CF               	bnc	l16274
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;sw_timer.c: 279: }
  6325                           ;sw_timer.c: 280: }
  6326                           ;sw_timer.c: 281: }
  6327                           ;sw_timer.c: 282: }
  6328                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6329  004704  8EF2               	bsf	intcon,7,c	;volatile
  6330                           
  6331                           ; BSR set to: 0
  6332  004706  0012               	return		;funcret
  6333  004708                     __end_of_SwTimersExecute:
  6334                           	opt stack 0
  6335  004708                     PL36:
  6336                           	opt stack 12
  6337  004708  0D08               	mullw	8
  6338  00470A  0E04               	movlw	low (_swTimers+4)
  6339  00470C  24F3               	addwf	prodl,w,c
  6340  00470E  6ED9               	movwf	fsr2l,c
  6341  004710  0E03               	movlw	high (_swTimers+4)
  6342  004712  20F4               	addwfc	prodh,w,c
  6343  004714  6EDA               	movwf	fsr2h,c
  6344  004716  0012               	return	
  6345  004718                     __end_ofPL36:
  6346                           	opt stack 0
  6347  004718                     PL94:
  6348                           	opt stack 12
  6349  004718  0D08               	mullw	8
  6350  00471A  0E06               	movlw	low (_swTimers+6)
  6351  00471C  24F3               	addwf	prodl,w,c
  6352  00471E  6ED9               	movwf	fsr2l,c
  6353  004720  0E03               	movlw	high (_swTimers+6)
  6354  004722  20F4               	addwfc	prodh,w,c
  6355  004724  6EDA               	movwf	fsr2h,c
  6356  004726  0012               	return	
  6357  004728                     __end_ofPL94:
  6358                           	opt stack 0
  6359                           tosu	equ	0xFFF
  6360                           tosh	equ	0xFFE
  6361                           tosl	equ	0xFFD
  6362                           pclath	equ	0xFFA
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           intcon	equ	0xFF2
  6370                           indf0	equ	0xFEF
  6371                           postinc0	equ	0xFEE
  6372                           plusw0	equ	0xFEB
  6373                           fsr0h	equ	0xFEA
  6374                           fsr0l	equ	0xFE9
  6375                           wreg	equ	0xFE8
  6376                           postinc1	equ	0xFE6
  6377                           postdec1	equ	0xFE5
  6378                           plusw1	equ	0xFE3
  6379                           fsr1h	equ	0xFE2
  6380                           fsr1l	equ	0xFE1
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           plusw2	equ	0xFDB
  6385                           fsr2h	equ	0xFDA
  6386                           fsr2l	equ	0xFD9
  6387                           status	equ	0xFD8
  6388                           
  6389 ;; *************** function _DutyCycleCallback *****************
  6390 ;; Defined at:
  6391 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  param           1  [STACK] unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  minim           4  [STACK] unsigned long 
  6396 ;;  i               1  [STACK] unsigned char 
  6397 ;;  found           1  [STACK] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1  [STACK] void 
  6400 ;; Registers used:
  6401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9,
      + btemp+10, btemp+11, prodl, prodh, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : F/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6411 ;;Total ram usage:        0 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:   11
  6414 ;; This function calls:
  6415 ;;		_SwTimerSetTimeout
  6416 ;;		_SwTimerStart
  6417 ;;		___lldiv
  6418 ;; This function is called by:
  6419 ;;		_SetCallbackSoftwareTimers
  6420 ;;		_SwTimersExecute
  6421 ;; This function uses a reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text32
  6425  001BC8                     __ptext32:
  6426                           	opt stack 0
  6427  001BC8                     _DutyCycleCallback:
  6428                           	opt stack 0
  6429                           
  6430                           ; BSR set to: 0
  6431                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  6432  001BC8  0E0A               	movlw	10
  6433  001BCA  26E1               	addwf	fsr1l,f,c
  6434  001BCC  0E00               	movlw	0
  6435  001BCE  22E2               	addwfc	fsr1h,f,c
  6436                           
  6437                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  6438                           
  6439                           ;incstack = 0
  6440  001BD0  6852               	setf	btemp+8,c
  6441  001BD2  6853               	setf	btemp+9,c
  6442  001BD4  6854               	setf	btemp+10,c
  6443  001BD6  6855               	setf	btemp+11,c
  6444                           
  6445                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6446                           
  6447                           ;lorawan_eu.c: 1224: bool found = 0;
  6448                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6449  001BD8  D8E1               	call	PL120	;call to abstracted procedure
  6450                           
  6451                           ;lorawan_eu.c: 1225: uint8_t i;
  6452                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  6453                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6454  001BDA  0EFE               	movlw	-2
  6455  001BDC  6AE3               	clrf	plusw1,c
  6456  001BDE                     l15088:
  6457                           
  6458                           ;lorawan_eu.c: 1228: {
  6459                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  6460                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6461  001BDE  0EFE               	movlw	-2
  6462  001BE0  50E3               	movf	plusw1,w,c
  6463  001BE2  ECB7  F021         	call	PL12	;call to abstracted procedure
  6464  001BE6  E155               	bnz	l15106
  6465                           
  6466                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6467  001BE8  0EFE               	movlw	-2
  6468  001BEA  50E3               	movf	plusw1,w,c
  6469  001BEC  EC71  F006         	call	PL4	;call to abstracted procedure
  6470  001BF0  D8E4               	call	PL140	;call to abstracted procedure
  6471  001BF2  E04F               	bz	l15106
  6472                           
  6473                           ;lorawan_eu.c: 1231: {
  6474                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  6475                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6476  001BF4  0EFE               	movlw	-2
  6477  001BF6  50E3               	movf	plusw1,w,c
  6478  001BF8  EC71  F006         	call	PL4	;call to abstracted procedure
  6479  001BFC  50DE               	movf	postinc2,w,c
  6480  001BFE  0102               	movlb	2	; () banked
  6481  001C00  5DC8               	subwf	(_loRa+200)& (0+255),w,b
  6482  001C02  50DE               	movf	postinc2,w,c
  6483  001C04  59C9               	subwfb	(_loRa+201)& (0+255),w,b
  6484  001C06  50DE               	movf	postinc2,w,c
  6485  001C08  59CA               	subwfb	(_loRa+202)& (0+255),w,b
  6486  001C0A  50DE               	movf	postinc2,w,c
  6487  001C0C  59CB               	subwfb	(_loRa+203)& (0+255),w,b
  6488  001C0E  E21E               	bc	l15096
  6489                           
  6490                           ; BSR set to: 2
  6491                           ;lorawan_eu.c: 1233: {
  6492                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  6493                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6494  001C10  0EFE               	movlw	-2
  6495  001C12  50E3               	movf	plusw1,w,c
  6496  001C14  EC71  F006         	call	PL4	;call to abstracted procedure
  6497  001C18  D8D5               	call	PL230	;call to abstracted procedure
  6498  001C1A  51C8               	movf	(_loRa+200)& (0+255),w,b
  6499  001C1C  5C52               	subwf	btemp+8,w,c
  6500  001C1E  6E4E               	movwf	btemp+4,c
  6501  001C20  51C9               	movf	(_loRa+201)& (0+255),w,b
  6502  001C22  5853               	subwfb	btemp+9,w,c
  6503  001C24  6E4F               	movwf	btemp+5,c
  6504  001C26  51CA               	movf	(_loRa+202)& (0+255),w,b
  6505  001C28  5854               	subwfb	btemp+10,w,c
  6506  001C2A  6E50               	movwf	btemp+6,c
  6507  001C2C  51CB               	movf	(_loRa+203)& (0+255),w,b
  6508  001C2E  5855               	subwfb	btemp+11,w,c
  6509  001C30  6E51               	movwf	btemp+7,c
  6510                           
  6511                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6512  001C32  0EFE               	movlw	-2
  6513  001C34  50E3               	movf	plusw1,w,c
  6514  001C36  EC71  F006         	call	PL4	;call to abstracted procedure
  6515  001C3A  C04E  FFDE         	movff	btemp+4,postinc2
  6516  001C3E  C04F  FFDE         	movff	btemp+5,postinc2
  6517  001C42  C050  FFDE         	movff	btemp+6,postinc2
  6518  001C46  C051  FFDE         	movff	btemp+7,postinc2
  6519                           
  6520                           ;lorawan_eu.c: 1235: }
  6521  001C4A  D006               	goto	l15098
  6522  001C4C                     l15096:
  6523                           
  6524                           ; BSR set to: 2
  6525                           ;lorawan_eu.c: 1236: else
  6526                           ;lorawan_eu.c: 1237: {
  6527                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  6528                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6529  001C4C  0EFE               	movlw	-2
  6530  001C4E  50E3               	movf	plusw1,w,c
  6531  001C50  EC71  F006         	call	PL4	;call to abstracted procedure
  6532  001C54  ECCF  F01D         	call	PL184	;call to abstracted procedure
  6533  001C58                     l15098:
  6534                           
  6535                           ; BSR set to: 2
  6536                           ;lorawan_eu.c: 1239: }
  6537                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  6538                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6539  001C58  0EFE               	movlw	-2
  6540  001C5A  50E3               	movf	plusw1,w,c
  6541  001C5C  EC71  F006         	call	PL4	;call to abstracted procedure
  6542                           
  6543                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6544  001C60  0EFA               	movlw	-6
  6545  001C62  CFE3 F04B          	movff	plusw1,btemp+1
  6546  001C66  50DE               	movf	postinc2,w,c
  6547  001C68  5C4B               	subwf	btemp+1,w,c
  6548  001C6A  0EFB               	movlw	-5
  6549  001C6C  D8B4               	call	PL324	;call to abstracted procedure
  6550  001C6E  0EFC               	movlw	-4
  6551  001C70  D8B2               	call	PL324	;call to abstracted procedure
  6552  001C72  0EFD               	movlw	-3
  6553  001C74  D8B0               	call	PL324	;call to abstracted procedure
  6554  001C76  E30D               	bnc	l15106
  6555                           
  6556                           ; BSR set to: 2
  6557                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6558  001C78  0EFE               	movlw	-2
  6559  001C7A  50E3               	movf	plusw1,w,c
  6560  001C7C  EC71  F006         	call	PL4	;call to abstracted procedure
  6561  001C80  D89C               	call	PL140	;call to abstracted procedure
  6562  001C82  E007               	bz	l15106
  6563                           
  6564                           ; BSR set to: 2
  6565                           ;lorawan_eu.c: 1241: {
  6566                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  6567                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6568  001C84  0EFE               	movlw	-2
  6569  001C86  50E3               	movf	plusw1,w,c
  6570  001C88  EC71  F006         	call	PL4	;call to abstracted procedure
  6571  001C8C  D89B               	call	PL230	;call to abstracted procedure
  6572                           
  6573                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6574                           
  6575                           ; BSR set to: 2
  6576                           ;lorawan_eu.c: 1243: found = 1;
  6577                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6578  001C8E  D886               	call	PL120	;call to abstracted procedure
  6579  001C90  2AE3               	incf	plusw1,f,c
  6580  001C92                     l15106:
  6581                           
  6582                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6583  001C92  0EFE               	movlw	-2
  6584  001C94  2AE3               	incf	plusw1,f,c
  6585                           
  6586                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6587  001C96  CFE3 F04B          	movff	plusw1,btemp+1
  6588  001C9A  0E0F               	movlw	15
  6589  001C9C  644B               	cpfsgt	btemp+1,c
  6590  001C9E  D79F               	goto	l15088
  6591                           
  6592                           ;lorawan_eu.c: 1244: }
  6593                           ;lorawan_eu.c: 1245: }
  6594                           ;lorawan_eu.c: 1246: }
  6595                           ;lorawan_eu.c: 1247: if ( found == 1 )
  6596                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6597  001CA0  0EFF               	movlw	-1
  6598  001CA2  04E3               	decf	plusw1,w,c
  6599  001CA4  E16C               	bnz	l1318
  6600                           
  6601                           ;lorawan_eu.c: 1248: {
  6602                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  6603                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6604  001CA6  50E1               	movf	fsr1l,w,c
  6605  001CA8  0FFA               	addlw	-6
  6606  001CAA  D872               	call	PL114	;call to abstracted procedure
  6607  001CAC  CFDE F2C8          	movff	postinc2,_loRa+200
  6608  001CB0  CFDE F2C9          	movff	postinc2,_loRa+201
  6609  001CB4  CFDE F2CA          	movff	postinc2,_loRa+202
  6610  001CB8  CFDE F2CB          	movff	postinc2,_loRa+203
  6611                           
  6612                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  6613                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6614  001CBC  0EFD               	movlw	-3
  6615  001CBE  50E3               	movf	plusw1,w,c
  6616  001CC0  E10D               	bnz	u17680
  6617  001CC2  0EFA               	movlw	-6
  6618  001CC4  28E3               	incf	plusw1,w,c
  6619  001CC6  0EFB               	movlw	-5
  6620  001CC8  CFE3 F04B          	movff	plusw1,btemp+1
  6621  001CCC  0EFF               	movlw	255
  6622  001CCE  5A4B               	subwfb	btemp+1,f,c
  6623  001CD0  0EFC               	movlw	-4
  6624  001CD2  CFE3 F04B          	movff	plusw1,btemp+1
  6625  001CD6  0E0F               	movlw	15
  6626  001CD8  5A4B               	subwfb	btemp+1,f,c
  6627  001CDA  E318               	bnc	l15118
  6628  001CDC                     u17680:
  6629                           
  6630                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6631  001CDC  50E1               	movf	fsr1l,w,c
  6632  001CDE  0FFA               	addlw	-6
  6633  001CE0  D857               	call	PL114	;call to abstracted procedure
  6634  001CE2  CFDE F064          	movff	postinc2,___lldiv@dividend
  6635  001CE6  CFDE F065          	movff	postinc2,___lldiv@dividend+1
  6636  001CEA  CFDE F066          	movff	postinc2,___lldiv@dividend+2
  6637  001CEE  CFDE F067          	movff	postinc2,___lldiv@dividend+3
  6638  001CF2  0E7D               	movlw	125
  6639  001CF4  0100               	movlb	0	; () banked
  6640  001CF6  EC99  F011         	call	PL32	;call to abstracted procedure
  6641  001CFA  EC55  F025         	call	___lldiv	;wreg free
  6642  001CFE  EC2E  F01E         	call	PL46	;call to abstracted procedure
  6643  001D02  0E0C               	movlw	12
  6644  001D04                     u17695:
  6645  001D04  D83F               	call	PL112	;call to abstracted procedure
  6646  001D06  2EE8               	decfsz	wreg,f,c
  6647  001D08  D7FD               	goto	u17695
  6648  001D0A  D020               	goto	L1
  6649  001D0C                     l15118:
  6650                           
  6651                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6652  001D0C  0EFA               	movlw	-6
  6653  001D0E  CFE3 F052          	movff	plusw1,btemp+8
  6654  001D12  0EFB               	movlw	-5
  6655  001D14  CFE3 F053          	movff	plusw1,btemp+9
  6656  001D18  0EFC               	movlw	-4
  6657  001D1A  CFE3 F054          	movff	plusw1,btemp+10
  6658  001D1E  0EFD               	movlw	-3
  6659  001D20  CFE3 F055          	movff	plusw1,btemp+11
  6660  001D24  0E0C               	movlw	12
  6661  001D26                     u17705:
  6662  001D26  D82E               	call	PL112	;call to abstracted procedure
  6663  001D28  2EE8               	decfsz	wreg,f,c
  6664  001D2A  D7FD               	goto	u17705
  6665  001D2C  C052  F064         	movff	btemp+8,___lldiv@dividend
  6666  001D30  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  6667  001D34  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  6668  001D38  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  6669  001D3C  0E7D               	movlw	125
  6670  001D3E  0100               	movlb	0	; () banked
  6671  001D40  EC99  F011         	call	PL32	;call to abstracted procedure
  6672  001D44  EC55  F025         	call	___lldiv	;wreg free
  6673  001D48  EC2E  F01E         	call	PL46	;call to abstracted procedure
  6674  001D4C                     L1:
  6675                           
  6676                           ;stkvar	_DutyCycleCallback$2128 @ sp[(-10)+0]
  6677  001D4C  0EF6               	movlw	-10
  6678  001D4E  C052  FFE3         	movff	btemp+8,plusw1
  6679  001D52  0EF7               	movlw	-9
  6680  001D54  C053  FFE3         	movff	btemp+9,plusw1
  6681  001D58  0EF8               	movlw	-8
  6682  001D5A  C054  FFE3         	movff	btemp+10,plusw1
  6683  001D5E  0EF9               	movlw	-7
  6684  001D60  C055  FFE3         	movff	btemp+11,plusw1
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;stkvar	_DutyCycleCallback$2128 @ sp[(-10)+0]
  6688  001D64  50E1               	movf	fsr1l,w,c
  6689  001D66  0FF6               	addlw	-10
  6690  001D68  6ED9               	movwf	fsr2l,c
  6691  001D6A  50E2               	movf	fsr1h,w,c
  6692  001D6C  EC37  F01E         	call	PL70	;call to abstracted procedure
  6693  001D70  51E9               	movf	(_loRa+233)& (0+255),w,b
  6694  001D72  EC4F  F02C         	call	_SwTimerSetTimeout
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  6698  001D76  0102               	movlb	2	; () banked
  6699  001D78  51E9               	movf	(_loRa+233)& (0+255),w,b
  6700  001D7A  ECFE  F025         	call	_SwTimerStart
  6701  001D7E                     l1318:
  6702                           
  6703                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6704  001D7E  0EF5               	movlw	245
  6705  001D80  EF44  F01E         	goto	PL276	;call to abstracted procedure
  6706  001D84                     __end_of_DutyCycleCallback:
  6707                           	opt stack 0
  6708  001D84                     PL112:
  6709                           	opt stack 17
  6710  001D84  90D8               	bcf	status,0,c
  6711  001D86  3652               	rlcf	btemp+8,f,c
  6712  001D88  3653               	rlcf	btemp+9,f,c
  6713  001D8A  3654               	rlcf	btemp+10,f,c
  6714  001D8C  3655               	rlcf	btemp+11,f,c
  6715  001D8E  0012               	return	
  6716  001D90                     __end_ofPL112:
  6717                           	opt stack 0
  6718  001D90                     PL114:
  6719                           	opt stack 17
  6720  001D90  6ED9               	movwf	fsr2l,c
  6721  001D92  50E2               	movf	fsr1h,w,c
  6722  001D94  6EDA               	movwf	fsr2h,c
  6723  001D96  0EFF               	movlw	255
  6724  001D98  22DA               	addwfc	fsr2h,f,c
  6725  001D9A  0CFF               	retlw	255
  6726  001D9C                     __end_ofPL114:
  6727                           	opt stack 0
  6728  001D9C                     PL120:
  6729                           	opt stack 17
  6730  001D9C  0EFA               	movlw	-6
  6731  001D9E  C052  FFE3         	movff	btemp+8,plusw1
  6732  001DA2  0EFB               	movlw	-5
  6733  001DA4  C053  FFE3         	movff	btemp+9,plusw1
  6734  001DA8  0EFC               	movlw	-4
  6735  001DAA  C054  FFE3         	movff	btemp+10,plusw1
  6736  001DAE  0EFD               	movlw	-3
  6737  001DB0  C055  FFE3         	movff	btemp+11,plusw1
  6738  001DB4  0EFF               	movlw	-1
  6739  001DB6  6AE3               	clrf	plusw1,c
  6740  001DB8  0012               	return	
  6741  001DBA                     __end_ofPL120:
  6742                           	opt stack 0
  6743  001DBA                     PL140:
  6744                           	opt stack 12
  6745  001DBA  50DE               	movf	postinc2,w,c
  6746  001DBC  10DE               	iorwf	postinc2,w,c
  6747  001DBE  10DE               	iorwf	postinc2,w,c
  6748  001DC0  10DE               	iorwf	postinc2,w,c
  6749  001DC2  0012               	return	
  6750  001DC4                     __end_ofPL140:
  6751                           	opt stack 0
  6752  001DC4                     PL230:
  6753                           	opt stack 17
  6754  001DC4  CFDE F052          	movff	postinc2,btemp+8
  6755  001DC8  CFDE F053          	movff	postinc2,btemp+9
  6756  001DCC  CFDE F054          	movff	postinc2,btemp+10
  6757  001DD0  CFDE F055          	movff	postinc2,btemp+11
  6758  001DD4  0012               	return	
  6759  001DD6                     __end_ofPL230:
  6760                           	opt stack 0
  6761  001DD6                     PL324:
  6762                           	opt stack 17
  6763  001DD6  CFE3 F04B          	movff	plusw1,btemp+1
  6764  001DDA  50DE               	movf	postinc2,w,c
  6765  001DDC  584B               	subwfb	btemp+1,w,c
  6766  001DDE  0012               	return	
  6767  001DE0                     __end_ofPL324:
  6768                           	opt stack 0
  6769                           tosu	equ	0xFFF
  6770                           tosh	equ	0xFFE
  6771                           tosl	equ	0xFFD
  6772                           pclath	equ	0xFFA
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           indf0	equ	0xFEF
  6781                           postinc0	equ	0xFEE
  6782                           plusw0	equ	0xFEB
  6783                           fsr0h	equ	0xFEA
  6784                           fsr0l	equ	0xFE9
  6785                           wreg	equ	0xFE8
  6786                           postinc1	equ	0xFE6
  6787                           postdec1	equ	0xFE5
  6788                           plusw1	equ	0xFE3
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           plusw2	equ	0xFDB
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _UpdateJoinSuccessState *****************
  6800 ;; Defined at:
  6801 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  param           1  [STACK] unsigned char 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  1  [STACK] void 
  6808 ;; Registers used:
  6809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prod
      +h, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : F/0
  6812 ;;		On exit  : F/1
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6819 ;;Total ram usage:        0 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:   11
  6822 ;; This function calls:
  6823 ;;		_RxJoinResponse
  6824 ;;		_SwTimerSetTimeout
  6825 ;;		_SwTimerStart
  6826 ;;		___lldiv
  6827 ;; This function is called by:
  6828 ;;		_SetCallbackSoftwareTimers
  6829 ;;		_LORAWAN_RxDone
  6830 ;;		_SwTimersExecute
  6831 ;; This function uses a reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text33
  6835  003BD0                     __ptext33:
  6836                           	opt stack 0
  6837  003BD0                     _UpdateJoinSuccessState:
  6838                           	opt stack 0
  6839                           
  6840                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6841  003BD0  52E6               	movf	postinc1,f,c
  6842  003BD2  52E6               	movf	postinc1,f,c
  6843  003BD4  52E6               	movf	postinc1,f,c
  6844  003BD6  52E6               	movf	postinc1,f,c
  6845                           
  6846                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  6847                           
  6848                           ;incstack = 0
  6849  003BD8  0102               	movlb	2	; () banked
  6850  003BDA  9500               	bcf	_loRa& (0+255),2,b
  6851                           
  6852                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  6853  003BDC  8902               	bsf	(_loRa+2)& (0+255),4,b
  6854                           
  6855                           ; BSR set to: 2
  6856                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  6857  003BDE  0EF0               	movlw	-16
  6858  003BE0  1702               	andwf	(_loRa+2)& (0+255),f,b
  6859                           
  6860                           ; BSR set to: 2
  6861                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  6862  003BE2  6BD0               	clrf	(_loRa+208)& (0+255),b
  6863  003BE4  6BD1               	clrf	(_loRa+209)& (0+255),b
  6864                           
  6865                           ; BSR set to: 2
  6866                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  6867  003BE6  6BEE               	clrf	(_loRa+238)& (0+255),b
  6868                           
  6869                           ; BSR set to: 2
  6870                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  6871  003BE8  A503               	btfss	(_loRa+3)& (0+255),2,b
  6872  003BEA  D027               	goto	l13960
  6873                           
  6874                           ; BSR set to: 2
  6875                           ;lorawan.c: 1052: {
  6876                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  6877  003BEC  51CF               	movf	(_loRa+207)& (0+255),w,b
  6878  003BEE  E103               	bnz	u15630
  6879  003BF0  EC2B  F018         	call	PL240	;call to abstracted procedure
  6880  003BF4  E30D               	bnc	l13954
  6881  003BF6                     u15630:
  6882                           
  6883                           ; BSR set to: 2
  6884  003BF6  EC21  F018         	call	PL62	;call to abstracted procedure
  6885  003BFA  EC99  F011         	call	PL32	;call to abstracted procedure
  6886  003BFE  EC55  F025         	call	___lldiv	;wreg free
  6887  003C02  D82C               	call	PL46	;call to abstracted procedure
  6888  003C04  0E0C               	movlw	12
  6889  003C06                     u15645:
  6890  003C06  ECC2  F00E         	call	PL112	;call to abstracted procedure
  6891  003C0A  2EE8               	decfsz	wreg,f,c
  6892  003C0C  D7FC               	goto	u15645
  6893  003C0E  D007               	goto	L2
  6894  003C10                     l13954:
  6895                           
  6896                           ; BSR set to: 2
  6897  003C10  EC07  F018         	call	PL44	;call to abstracted procedure
  6898  003C14  EC99  F011         	call	PL32	;call to abstracted procedure
  6899  003C18  EC55  F025         	call	___lldiv	;wreg free
  6900  003C1C  D81F               	call	PL46	;call to abstracted procedure
  6901  003C1E                     L2:
  6902                           
  6903                           ;stkvar	_UpdateJoinSuccessState$3321 @ sp[(-4)+0]
  6904  003C1E  EC56  F022         	call	PL152	;call to abstracted procedure
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;stkvar	_UpdateJoinSuccessState$3321 @ sp[(-4)+0]
  6908  003C22  50E1               	movf	fsr1l,w,c
  6909  003C24  0FFC               	addlw	-4
  6910  003C26  6ED9               	movwf	fsr2l,c
  6911  003C28  50E2               	movf	fsr1h,w,c
  6912  003C2A  D821               	call	PL70	;call to abstracted procedure
  6913  003C2C  51E7               	movf	(_loRa+231)& (0+255),w,b
  6914  003C2E  EC4F  F02C         	call	_SwTimerSetTimeout
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  6918  003C32  0102               	movlb	2	; () banked
  6919  003C34  51E7               	movf	(_loRa+231)& (0+255),w,b
  6920  003C36  ECFE  F025         	call	_SwTimerStart
  6921  003C3A                     l13960:
  6922                           
  6923                           ;lorawan.c: 1055: }
  6924                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  6925  003C3A  0101               	movlb	1	; () banked
  6926  003C3C  5170               	movf	(_rxPayload+2)& (0+255),w,b
  6927  003C3E  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
  6928  003C40  E00B               	bz	l2115
  6929                           
  6930                           ; BSR set to: 1
  6931                           ;lorawan.c: 1058: {
  6932                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  6933  003C42  D801               	call	u15678
  6934  003C44  D009               	goto	l2115
  6935  003C46                     u15678:
  6936  003C46  0005               	push	
  6937  003C48  6EFA               	movwf	pclath,c
  6938  003C4A  5170               	movf	(_rxPayload+2)& (0+255),w,b
  6939  003C4C  6EFD               	movwf	tosl,c
  6940  003C4E  5171               	movf	(_rxPayload+3)& (0+255),w,b
  6941  003C50  6EFE               	movwf	tosh,c
  6942  003C52  6AFF               	clrf	tosu,c
  6943  003C54  50FA               	movf	pclath,w,c
  6944  003C56  0C01               	retlw	1	;indir
  6945  003C58                     l2115:
  6946                           
  6947                           ; BSR set to: 1
  6948                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  6949  003C58  0EFB               	movlw	251
  6950  003C5A  D016               	goto	PL276	;call to abstracted procedure
  6951  003C5C                     __end_of_UpdateJoinSuccessState:
  6952                           	opt stack 0
  6953  003C5C                     PL46:
  6954                           	opt stack 17
  6955  003C5C  C064  F052         	movff	?___lldiv,btemp+8
  6956  003C60  C065  F053         	movff	?___lldiv+1,btemp+9
  6957  003C64  C066  F054         	movff	?___lldiv+2,btemp+10
  6958  003C68  C067  F055         	movff	?___lldiv+3,btemp+11
  6959  003C6C  0012               	return	
  6960  003C6E                     __end_ofPL46:
  6961                           	opt stack 0
  6962  003C6E                     PL70:
  6963                           	opt stack 17
  6964  003C6E  6EDA               	movwf	fsr2h,c
  6965  003C70  0EFF               	movlw	255
  6966  003C72  22DA               	addwfc	fsr2h,f,c
  6967  003C74  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  6968  003C78  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  6969  003C7C  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  6970  003C80  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  6971  003C84  0102               	movlb	2	; () banked
  6972  003C86  0CFF               	retlw	255
  6973  003C88                     __end_ofPL70:
  6974                           	opt stack 0
  6975  003C88                     PL276:
  6976                           	opt stack 17
  6977  003C88  26E1               	addwf	fsr1l,f,c
  6978  003C8A  0EFF               	movlw	255
  6979  003C8C  22E2               	addwfc	fsr1h,f,c
  6980  003C8E  0CFF               	retlw	255	;funcret
  6981  003C90                     __end_ofPL276:
  6982                           	opt stack 0
  6983                           tosu	equ	0xFFF
  6984                           tosh	equ	0xFFE
  6985                           tosl	equ	0xFFD
  6986                           pclath	equ	0xFFA
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           indf0	equ	0xFEF
  6995                           postinc0	equ	0xFEE
  6996                           plusw0	equ	0xFEB
  6997                           fsr0h	equ	0xFEA
  6998                           fsr0l	equ	0xFE9
  6999                           wreg	equ	0xFE8
  7000                           postinc1	equ	0xFE6
  7001                           postdec1	equ	0xFE5
  7002                           plusw1	equ	0xFE3
  7003                           fsr1h	equ	0xFE2
  7004                           fsr1l	equ	0xFE1
  7005                           indf2	equ	0xFDF
  7006                           postinc2	equ	0xFDE
  7007                           postdec2	equ	0xFDD
  7008                           plusw2	equ	0xFDB
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _AutomaticReplyCallback *****************
  7014 ;; Defined at:
  7015 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  param           1  [STACK] unsigned char 
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1  [STACK] void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : F/0
  7026 ;;		On exit  : F/2
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:   14
  7036 ;; This function calls:
  7037 ;;		_LORAWAN_Send
  7038 ;; This function is called by:
  7039 ;;		_SetCallbackSoftwareTimers
  7040 ;;		_SwTimersExecute
  7041 ;; This function uses a reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text34
  7045  005F64                     __ptext34:
  7046                           	opt stack 0
  7047  005F64                     _AutomaticReplyCallback:
  7048                           	opt stack 14
  7049                           
  7050                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  7051                           
  7052                           ; BSR set to: 1
  7053                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7054                           ;incstack = 0
  7055  005F64  0EF0               	movlw	-16
  7056  005F66  0102               	movlb	2	; () banked
  7057  005F68  1702               	andwf	(_loRa+2)& (0+255),f,b
  7058                           
  7059                           ; BSR set to: 2
  7060                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  7061  005F6A  0E00               	movlw	0
  7062  005F6C  0100               	movlb	0	; () banked
  7063  005F6E  EC56  F004         	call	PL334	;call to abstracted procedure
  7064  005F72  ECB8  F01F         	call	_LORAWAN_Send
  7065                           
  7066                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  7067  005F76  0102               	movlb	2	; () banked
  7068  005F78  9700               	bcf	_loRa& (0+255),3,b
  7069                           
  7070                           ; BSR set to: 2
  7071                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7072  005F7A  52E5               	movf	postdec1,f,c
  7073  005F7C  0012               	return		;funcret
  7074  005F7E                     __end_of_AutomaticReplyCallback:
  7075                           	opt stack 0
  7076                           tosu	equ	0xFFF
  7077                           tosh	equ	0xFFE
  7078                           tosl	equ	0xFFD
  7079                           pclath	equ	0xFFA
  7080                           tblptru	equ	0xFF8
  7081                           tblptrh	equ	0xFF7
  7082                           tblptrl	equ	0xFF6
  7083                           tablat	equ	0xFF5
  7084                           prodh	equ	0xFF4
  7085                           prodl	equ	0xFF3
  7086                           intcon	equ	0xFF2
  7087                           indf0	equ	0xFEF
  7088                           postinc0	equ	0xFEE
  7089                           plusw0	equ	0xFEB
  7090                           fsr0h	equ	0xFEA
  7091                           fsr0l	equ	0xFE9
  7092                           wreg	equ	0xFE8
  7093                           postinc1	equ	0xFE6
  7094                           postdec1	equ	0xFE5
  7095                           plusw1	equ	0xFE3
  7096                           fsr1h	equ	0xFE2
  7097                           fsr1l	equ	0xFE1
  7098                           indf2	equ	0xFDF
  7099                           postinc2	equ	0xFDE
  7100                           postdec2	equ	0xFDD
  7101                           plusw2	equ	0xFDB
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _AckRetransmissionCallback *****************
  7107 ;; Defined at:
  7108 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  param           1  [STACK] unsigned char 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  maximumPacke    1  [STACK] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1  [STACK] void 
  7115 ;; Registers used:
  7116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : F/0
  7119 ;;		On exit  : C/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7126 ;;Total ram usage:        0 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:   13
  7129 ;; This function calls:
  7130 ;;		_FindSmallestDataRate
  7131 ;;		_LORAWAN_GetMaxPayloadSize
  7132 ;;		_RADIO_Transmit
  7133 ;;		_ResetParametersForConfirmedTransmission
  7134 ;;		_RxDataDone
  7135 ;;		_SelectChannelForTransmission
  7136 ;;		_UpdateRetransmissionAckTimeoutState
  7137 ;; This function is called by:
  7138 ;;		_SetCallbackSoftwareTimers
  7139 ;;		_SwTimersExecute
  7140 ;; This function uses a reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text35
  7144  003268                     __ptext35:
  7145                           	opt stack 0
  7146  003268                     _AckRetransmissionCallback:
  7147                           	opt stack 0
  7148                           
  7149                           ; BSR set to: 2
  7150                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7151  003268  52E6               	movf	postinc1,f,c
  7152                           
  7153                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  7154                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  7155                           
  7156                           ;incstack = 0
  7157  00326A  0102               	movlb	2	; () banked
  7158  00326C  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7159  00326E  D076               	goto	l15228
  7160                           
  7161                           ; BSR set to: 2
  7162                           ;lorawan.c: 939: {
  7163                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  7164  003270  51D9               	movf	(_loRa+217)& (0+255),w,b
  7165  003272  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7166  003274  E352               	bnc	l15218
  7167                           
  7168                           ; BSR set to: 2
  7169                           ;lorawan.c: 941: {
  7170                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  7171  003276  EC14  F02C         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  7172  00327A  6E55               	movwf	btemp+11,c
  7173  00327C  0E0D               	movlw	13
  7174  00327E  2655               	addwf	btemp+11,f,c
  7175                           
  7176                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7177  003280  0EFF               	movlw	-1
  7178  003282  C055  FFE3         	movff	btemp+11,plusw1
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  7182                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7183  003286  50E3               	movf	plusw1,w,c
  7184  003288  6E4B               	movwf	btemp+1,c
  7185  00328A  6A4C               	clrf	btemp+2,c
  7186  00328C  0102               	movlb	2	; () banked
  7187  00328E  51D4               	movf	(_loRa+212)& (0+255),w,b
  7188  003290  5C4B               	subwf	btemp+1,w,c
  7189  003292  51D5               	movf	(_loRa+213)& (0+255),w,b
  7190  003294  584C               	subwfb	btemp+2,w,c
  7191  003296  E331               	bnc	l15212
  7192                           
  7193                           ; BSR set to: 2
  7194                           ;lorawan.c: 946: {
  7195                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  7196  003298  0E01               	movlw	1
  7197  00329A  ECCC  F026         	call	_SelectChannelForTransmission
  7198  00329E  0900               	iorlw	0
  7199  0032A0  E128               	bnz	l15208
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;lorawan.c: 948: {
  7203                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  7204  0032A2  0EF0               	movlw	low (_macBuffer+16)
  7205  0032A4  ECB7  F025         	call	PL194	;call to abstracted procedure
  7206  0032A8  ECF0  F00E         	call	_RADIO_Transmit	;wreg free
  7207  0032AC  ECC2  F025         	call	PL310	;call to abstracted procedure
  7208  0032B0  E120               	bnz	l15208
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;lorawan.c: 951: {
  7212                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7213  0032B2  0102               	movlb	2	; () banked
  7214  0032B4  ECBD  F025         	call	PL288	;call to abstracted procedure
  7215                           
  7216                           ; BSR set to: 2
  7217                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  7218  0032B8  2BD9               	incf	(_loRa+217)& (0+255),f,b
  7219                           
  7220                           ; BSR set to: 2
  7221                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  7222  0032BA  B1D9               	btfsc	(_loRa+217)& (0+255),0,b
  7223  0032BC  EFD3  F02C         	goto	PL468
  7224                           
  7225                           ; BSR set to: 2
  7226  0032C0  51DF               	movf	(_loRa+223)& (0+255),w,b
  7227  0032C2  E102 EFD3  F02C    	bz	PL468
  7228                           
  7229                           ; BSR set to: 2
  7230  0032C8  51D9               	movf	(_loRa+217)& (0+255),w,b
  7231  0032CA  6E4B               	movwf	btemp+1,c
  7232  0032CC  6A4C               	clrf	btemp+2,c
  7233  0032CE  51D7               	movf	(_loRa+215)& (0+255),w,b
  7234  0032D0  6E54               	movwf	btemp+10,c
  7235  0032D2  6A55               	clrf	btemp+11,c
  7236  0032D4  2A54               	incf	btemp+10,f,c
  7237  0032D6  0E00               	movlw	0
  7238  0032D8  2255               	addwfc	btemp+11,f,c
  7239  0032DA  504B               	movf	btemp+1,w,c
  7240  0032DC  1854               	xorwf	btemp+10,w,c
  7241  0032DE  E105               	bnz	u17910
  7242  0032E0  504C               	movf	btemp+2,w,c
  7243  0032E2  1855               	xorwf	btemp+11,w,c
  7244  0032E4  E102 EFD3  F02C    	bz	PL468
  7245  0032EA                     u17910:
  7246                           
  7247                           ; BSR set to: 2
  7248                           ;lorawan.c: 957: {
  7249                           ;lorawan.c: 958: FindSmallestDataRate();
  7250  0032EA  ECDA  F023         	call	_FindSmallestDataRate	;wreg free
  7251  0032EE  EFD3  F02C         	goto	PL468
  7252  0032F2                     l15208:
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;lorawan.c: 961: else
  7256                           ;lorawan.c: 962: {
  7257                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7258  0032F2  ECCC  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7259  0032F6  EFD3  F02C         	goto	PL468
  7260  0032FA                     l15212:
  7261                           
  7262                           ; BSR set to: 2
  7263                           ;lorawan.c: 973: else
  7264                           ;lorawan.c: 974: {
  7265                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7266  0032FA  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7267                           
  7268                           ; BSR set to: 2
  7269                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7270  0032FE  0101               	movlb	1	; () banked
  7271  003300  516E               	movf	_rxPayload& (0+255),w,b
  7272  003302  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7273  003304  E102 EFD3  F02C    	bz	PL468
  7274                           
  7275                           ; BSR set to: 1
  7276                           ;lorawan.c: 977: {
  7277                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7278  00330A  ECD1  F00D         	call	PL82	;call to abstracted procedure
  7279  00330E  0E04               	movlw	4
  7280  003310  6F67               	movwf	RxDataDone@status& (0+255),b
  7281  003312  D802               	call	u17938
  7282  003314  EFD3  F02C         	goto	PL468
  7283  003318                     u17938:
  7284  003318  D017               	goto	u17978
  7285  00331A                     l15218:
  7286                           
  7287                           ; BSR set to: 2
  7288                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7289  00331A  51D9               	movf	(_loRa+217)& (0+255),w,b
  7290  00331C  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7291  00331E  E302 EFD3  F02C    	bc	PL468
  7292                           
  7293                           ; BSR set to: 2
  7294  003324  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7295  003326  EFD3  F02C         	goto	PL468
  7296                           
  7297                           ; BSR set to: 2
  7298                           ;lorawan.c: 983: {
  7299                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7300  00332A  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7301                           
  7302                           ; BSR set to: 2
  7303                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7304  00332E  0101               	movlb	1	; () banked
  7305  003330  516E               	movf	_rxPayload& (0+255),w,b
  7306  003332  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7307  003334  E102 EFD3  F02C    	bz	PL468
  7308                           
  7309                           ; BSR set to: 1
  7310                           ;lorawan.c: 986: {
  7311                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7312  00333A  0E00               	movlw	0
  7313  00333C  ECD1  F00D         	call	PL82	;call to abstracted procedure
  7314  003340  6B67               	clrf	RxDataDone@status& (0+255),b
  7315  003342  D802               	call	u17978
  7316  003344  EFD3  F02C         	goto	PL468
  7317  003348                     u17978:
  7318  003348  0005               	push	
  7319  00334A  6EFA               	movwf	pclath,c
  7320  00334C  0101               	movlb	1	; () banked
  7321  00334E  516E               	movf	_rxPayload& (0+255),w,b
  7322  003350  6EFD               	movwf	tosl,c
  7323  003352  516F               	movf	(_rxPayload+1)& (0+255),w,b
  7324  003354  6EFE               	movwf	tosh,c
  7325  003356  6AFF               	clrf	tosu,c
  7326  003358  50FA               	movf	pclath,w,c
  7327  00335A  0012               	return		;indir
  7328  00335C                     l15228:
  7329                           
  7330                           ; BSR set to: 2
  7331                           ;lorawan.c: 991: else
  7332                           ;lorawan.c: 992: {
  7333                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7334  00335C  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7335  003360                     l2088:
  7336                           
  7337                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7338  003360  EFD3  F02C         	goto	PL468	;call to abstracted procedure
  7339  003364                     __end_of_AckRetransmissionCallback:
  7340                           	opt stack 0
  7341                           tosu	equ	0xFFF
  7342                           tosh	equ	0xFFE
  7343                           tosl	equ	0xFFD
  7344                           pclath	equ	0xFFA
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           indf0	equ	0xFEF
  7353                           postinc0	equ	0xFEE
  7354                           plusw0	equ	0xFEB
  7355                           fsr0h	equ	0xFEA
  7356                           fsr0l	equ	0xFE9
  7357                           wreg	equ	0xFE8
  7358                           postinc1	equ	0xFE6
  7359                           postdec1	equ	0xFE5
  7360                           plusw1	equ	0xFE3
  7361                           fsr1h	equ	0xFE2
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           plusw2	equ	0xFDB
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8
  7370                           
  7371 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7372 ;; Defined at:
  7373 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  param           1  [STACK] unsigned char 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  iCtr            1  [STACK] unsigned char 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1  [STACK] void 
  7380 ;; Registers used:
  7381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, c
      +stack
  7382 ;; Tracked objects:
  7383 ;;		On entry : F/0
  7384 ;;		On exit  : D/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7391 ;;Total ram usage:        0 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:   11
  7394 ;; This function calls:
  7395 ;;		_SwTimerSetTimeout
  7396 ;;		_SwTimerStart
  7397 ;;		___lldiv
  7398 ;; This function is called by:
  7399 ;;		_SetCallbackSoftwareTimers
  7400 ;;		_SwTimersExecute
  7401 ;; This function uses a reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text36
  7405  002F54                     __ptext36:
  7406                           	opt stack 0
  7407  002F54                     _LORAWAN_LinkCheckCallback:
  7408                           	opt stack 0
  7409                           
  7410                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7411  002F54  0E05               	movlw	5
  7412  002F56  26E1               	addwf	fsr1l,f,c
  7413  002F58  0E00               	movlw	0
  7414  002F5A  22E2               	addwfc	fsr1h,f,c
  7415                           
  7416                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7417                           
  7418                           ;incstack = 0
  7419  002F5C  0102               	movlb	2	; () banked
  7420  002F5E  A103               	btfss	(_loRa+3)& (0+255),0,b
  7421                           
  7422                           ; BSR set to: 2
  7423  002F60  A503               	btfss	(_loRa+3)& (0+255),2,b
  7424  002F62  D01F               	goto	l15172
  7425                           
  7426                           ; BSR set to: 2
  7427                           ;lorawan.c: 886: {
  7428                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7429                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7430  002F64  0EFF               	movlw	-1
  7431  002F66  6AE3               	clrf	plusw1,c
  7432  002F68  D009               	goto	l15162
  7433  002F6A                     l15156:
  7434                           
  7435                           ; BSR set to: 2
  7436                           ;lorawan.c: 889: {
  7437                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7438                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7439  002F6A  0EFF               	movlw	-1
  7440  002F6C  50E3               	movf	plusw1,w,c
  7441  002F6E  ECC5  F010         	call	PL16	;call to abstracted procedure
  7442  002F72  0E02               	movlw	2
  7443  002F74  18DE               	xorwf	postinc2,w,c
  7444  002F76  E008               	bz	l15164
  7445                           
  7446                           ; BSR set to: 2
  7447                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7448  002F78  0EFF               	movlw	-1
  7449  002F7A  2AE3               	incf	plusw1,f,c
  7450  002F7C                     l15162:
  7451                           
  7452                           ; BSR set to: 2
  7453                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7454  002F7C  0EFF               	movlw	-1
  7455  002F7E  CFE3 F04B          	movff	plusw1,btemp+1
  7456  002F82  51A7               	movf	(_loRa+167)& (0+255),w,b
  7457  002F84  5C4B               	subwf	btemp+1,w,c
  7458  002F86  E3F1               	bnc	l15156
  7459  002F88                     l15164:
  7460                           
  7461                           ; BSR set to: 2
  7462                           ;lorawan.c: 893: }
  7463                           ;lorawan.c: 894: }
  7464                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7465                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7466  002F88  0EFF               	movlw	-1
  7467  002F8A  50E3               	movf	plusw1,w,c
  7468  002F8C  19A7               	xorwf	(_loRa+167)& (0+255),w,b
  7469  002F8E  E109               	bnz	l15172
  7470                           
  7471                           ; BSR set to: 2
  7472                           ;lorawan.c: 897: {
  7473                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7474  002F90  51A7               	movf	(_loRa+167)& (0+255),w,b
  7475  002F92  ECC5  F010         	call	PL16	;call to abstracted procedure
  7476  002F96  0E02               	movlw	2
  7477  002F98  6EDF               	movwf	indf2,c
  7478                           
  7479                           ; BSR set to: 2
  7480                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7481  002F9A  0E10               	movlw	16
  7482  002F9C  61A7               	cpfslt	(_loRa+167)& (0+255),b
  7483  002F9E  D001               	goto	l15172
  7484                           
  7485                           ; BSR set to: 2
  7486                           ;lorawan.c: 901: {
  7487                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7488  002FA0  2BA7               	incf	(_loRa+167)& (0+255),f,b
  7489  002FA2                     l15172:
  7490                           
  7491                           ; BSR set to: 2
  7492                           ;lorawan.c: 903: }
  7493                           ;lorawan.c: 904: }
  7494                           ;lorawan.c: 905: }
  7495                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7496  002FA2  A503               	btfss	(_loRa+3)& (0+255),2,b
  7497  002FA4  D031               	goto	l2066
  7498                           
  7499                           ; BSR set to: 2
  7500                           ;lorawan.c: 909: {
  7501                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7502  002FA6  51CF               	movf	(_loRa+207)& (0+255),w,b
  7503  002FA8  E102               	bnz	u17810
  7504  002FAA  D855               	call	PL240	;call to abstracted procedure
  7505  002FAC  E30D               	bnc	l15178
  7506  002FAE                     u17810:
  7507                           
  7508                           ; BSR set to: 2
  7509  002FAE  D849               	call	PL62	;call to abstracted procedure
  7510  002FB0  EC99  F011         	call	PL32	;call to abstracted procedure
  7511  002FB4  EC55  F025         	call	___lldiv	;wreg free
  7512  002FB8  EC2E  F01E         	call	PL46	;call to abstracted procedure
  7513  002FBC  0E0C               	movlw	12
  7514  002FBE                     u17825:
  7515  002FBE  ECC2  F00E         	call	PL112	;call to abstracted procedure
  7516  002FC2  2EE8               	decfsz	wreg,f,c
  7517  002FC4  D7FC               	goto	u17825
  7518  002FC6  D007               	goto	L3
  7519  002FC8                     l15178:
  7520                           
  7521                           ; BSR set to: 2
  7522  002FC8  D822               	call	PL44	;call to abstracted procedure
  7523  002FCA  EC99  F011         	call	PL32	;call to abstracted procedure
  7524  002FCE  EC55  F025         	call	___lldiv	;wreg free
  7525  002FD2  EC2E  F01E         	call	PL46	;call to abstracted procedure
  7526  002FD6                     L3:
  7527                           
  7528                           ;stkvar	_LORAWAN_LinkCheckCallback$3304 @ sp[(-5)+0]
  7529  002FD6  0EFB               	movlw	-5
  7530  002FD8  C052  FFE3         	movff	btemp+8,plusw1
  7531  002FDC  0EFC               	movlw	-4
  7532  002FDE  C053  FFE3         	movff	btemp+9,plusw1
  7533  002FE2  0EFD               	movlw	-3
  7534  002FE4  C054  FFE3         	movff	btemp+10,plusw1
  7535  002FE8  0EFE               	movlw	-2
  7536  002FEA  C055  FFE3         	movff	btemp+11,plusw1
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;stkvar	_LORAWAN_LinkCheckCallback$3304 @ sp[(-5)+0]
  7540  002FEE  50E1               	movf	fsr1l,w,c
  7541  002FF0  0FFB               	addlw	-5
  7542  002FF2  6ED9               	movwf	fsr2l,c
  7543  002FF4  50E2               	movf	fsr1h,w,c
  7544  002FF6  EC37  F01E         	call	PL70	;call to abstracted procedure
  7545  002FFA  51E7               	movf	(_loRa+231)& (0+255),w,b
  7546  002FFC  EC4F  F02C         	call	_SwTimerSetTimeout
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  7550  003000  0102               	movlb	2	; () banked
  7551  003002  51E7               	movf	(_loRa+231)& (0+255),w,b
  7552  003004  ECFE  F025         	call	_SwTimerStart
  7553  003008                     l2066:
  7554                           
  7555                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7556  003008  0EFA               	movlw	250
  7557  00300A  EF44  F01E         	goto	PL276	;call to abstracted procedure
  7558  00300E                     __end_of_LORAWAN_LinkCheckCallback:
  7559                           	opt stack 0
  7560  00300E                     PL44:
  7561                           	opt stack 17
  7562  00300E  C2CC  F052         	movff	_loRa+204,btemp+8
  7563  003012  C2CD  F053         	movff	_loRa+205,btemp+9
  7564  003016  C2CE  F054         	movff	_loRa+206,btemp+10
  7565  00301A  C2CF  F055         	movff	_loRa+207,btemp+11
  7566  00301E  0E0C               	movlw	12
  7567  003020                     u15655:
  7568  003020  90D8               	bcf	status,0,c
  7569  003022  3652               	rlcf	btemp+8,f,c
  7570  003024  3653               	rlcf	btemp+9,f,c
  7571  003026  3654               	rlcf	btemp+10,f,c
  7572  003028  3655               	rlcf	btemp+11,f,c
  7573  00302A  2EE8               	decfsz	wreg,f,c
  7574  00302C  D7F9               	goto	u15655
  7575  00302E  C052  F064         	movff	btemp+8,___lldiv@dividend
  7576  003032  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  7577  003036  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  7578  00303A  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  7579  00303E  0100               	movlb	0	; () banked
  7580  003040  0C7D               	retlw	125
  7581  003042                     __end_ofPL44:
  7582                           	opt stack 0
  7583  003042                     PL62:
  7584                           	opt stack 17
  7585  003042  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
  7586  003046  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
  7587  00304A  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
  7588  00304E  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
  7589  003052  0100               	movlb	0	; () banked
  7590  003054  0C7D               	retlw	125
  7591  003056                     __end_ofPL62:
  7592                           	opt stack 0
  7593  003056                     PL240:
  7594                           	opt stack 17
  7595  003056  29CC               	incf	(_loRa+204)& (0+255),w,b
  7596  003058  0EFF               	movlw	255
  7597  00305A  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  7598  00305C  0E0F               	movlw	15
  7599  00305E  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  7600  003060  0012               	return	
  7601  003062                     __end_ofPL240:
  7602                           	opt stack 0
  7603                           tosu	equ	0xFFF
  7604                           tosh	equ	0xFFE
  7605                           tosl	equ	0xFFD
  7606                           pclath	equ	0xFFA
  7607                           tblptru	equ	0xFF8
  7608                           tblptrh	equ	0xFF7
  7609                           tblptrl	equ	0xFF6
  7610                           tablat	equ	0xFF5
  7611                           prodh	equ	0xFF4
  7612                           prodl	equ	0xFF3
  7613                           intcon	equ	0xFF2
  7614                           indf0	equ	0xFEF
  7615                           postinc0	equ	0xFEE
  7616                           plusw0	equ	0xFEB
  7617                           fsr0h	equ	0xFEA
  7618                           fsr0l	equ	0xFE9
  7619                           wreg	equ	0xFE8
  7620                           postinc1	equ	0xFE6
  7621                           postdec1	equ	0xFE5
  7622                           plusw1	equ	0xFE3
  7623                           fsr1h	equ	0xFE2
  7624                           fsr1l	equ	0xFE1
  7625                           indf2	equ	0xFDF
  7626                           postinc2	equ	0xFDE
  7627                           postdec2	equ	0xFDD
  7628                           plusw2	equ	0xFDB
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  7634 ;; Defined at:
  7635 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  param           1  [STACK] unsigned char 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  freq            4  [STACK] unsigned long 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1  [STACK] void 
  7642 ;; Registers used:
  7643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : F/0
  7646 ;;		On exit  : D/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7653 ;;Total ram usage:        0 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:   13
  7656 ;; This function calls:
  7657 ;;		_ConfigureRadioRx
  7658 ;;		_GetRx1Freq
  7659 ;;		_RADIO_ReceiveStart
  7660 ;;		_RADIO_ReceiveStop
  7661 ;;		_RADIO_ReleaseData
  7662 ;; This function is called by:
  7663 ;;		_SetCallbackSoftwareTimers
  7664 ;;		_SwTimersExecute
  7665 ;; This function uses a reentrant model
  7666 ;;
  7667                           
  7668                           	psect	text37
  7669  004424                     __ptext37:
  7670                           	opt stack 0
  7671  004424                     _LORAWAN_ReceiveWindow1Callback:
  7672                           	opt stack 0
  7673                           
  7674                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7675  004424  52E6               	movf	postinc1,f,c
  7676  004426  52E6               	movf	postinc1,f,c
  7677  004428  52E6               	movf	postinc1,f,c
  7678  00442A  52E6               	movf	postinc1,f,c
  7679                           
  7680                           ;lorawan.c: 798: uint32_t freq;
  7681                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  7682                           
  7683                           ;incstack = 0
  7684  00442C  0102               	movlb	2	; () banked
  7685  00442E  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7686  004430  D03A               	goto	l2039
  7687                           
  7688                           ; BSR set to: 2
  7689                           ;lorawan.c: 801: {
  7690                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  7691  004432  0E02               	movlw	2
  7692  004434  1912               	xorwf	(_loRa+18)& (0+255),w,b
  7693  004436  E102               	bnz	l15134
  7694                           
  7695                           ; BSR set to: 2
  7696                           ;lorawan.c: 803: {
  7697                           ;lorawan.c: 804: RADIO_ReceiveStop();
  7698  004438  EC15  F030         	call	_RADIO_ReceiveStop	;wreg free
  7699  00443C                     l15134:
  7700                           
  7701                           ;lorawan.c: 805: }
  7702                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  7703  00443C  0102               	movlb	2	; () banked
  7704  00443E  51EF               	movf	(_loRa+239)& (0+255),w,b
  7705  004440  5D17               	subwf	(_loRa+23)& (0+255),w,b
  7706  004442  E304               	bnc	l2037
  7707                           
  7708                           ; BSR set to: 2
  7709                           ;lorawan.c: 807: {
  7710                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  7711  004444  51EF               	movf	(_loRa+239)& (0+255),w,b
  7712  004446  5D17               	subwf	(_loRa+23)& (0+255),w,b
  7713  004448  6F17               	movwf	(_loRa+23)& (0+255),b
  7714                           
  7715                           ;lorawan.c: 809: }
  7716  00444A  D001               	goto	l15138
  7717  00444C                     l2037:
  7718                           
  7719                           ; BSR set to: 2
  7720                           ;lorawan.c: 810: else
  7721                           ;lorawan.c: 811: {
  7722                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  7723  00444C  6B17               	clrf	(_loRa+23)& (0+255),b
  7724  00444E                     l15138:
  7725                           
  7726                           ; BSR set to: 2
  7727                           ;lorawan.c: 813: }
  7728                           ;lorawan.c: 815: freq = GetRx1Freq();
  7729  00444E  EC8C  F030         	call	_GetRx1Freq	;wreg free
  7730  004452  C064  F052         	movff	?_GetRx1Freq,btemp+8
  7731  004456  C065  F053         	movff	?_GetRx1Freq+1,btemp+9
  7732  00445A  C066  F054         	movff	?_GetRx1Freq+2,btemp+10
  7733  00445E  C067  F055         	movff	?_GetRx1Freq+3,btemp+11
  7734                           
  7735                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  7736  004462  D824               	call	PL152	;call to abstracted procedure
  7737                           
  7738                           ; BSR set to: 2
  7739                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  7740  004464  5102               	movf	(_loRa+2)& (0+255),w,b
  7741  004466  0BF0               	andlw	-16
  7742  004468  0903               	iorlw	3
  7743  00446A  6F02               	movwf	(_loRa+2)& (0+255),b
  7744                           
  7745                           ; BSR set to: 2
  7746                           ;lorawan.c: 819: RADIO_ReleaseData();
  7747  00446C  EC30  F031         	call	_RADIO_ReleaseData	;wreg free
  7748                           
  7749                           ; BSR set to: 1
  7750                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  7751                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  7752  004470  50E1               	movf	fsr1l,w,c
  7753  004472  0FFC               	addlw	-4
  7754  004474  ECC8  F00E         	call	PL114	;call to abstracted procedure
  7755  004478  CFDE F076          	movff	postinc2,ConfigureRadioRx@freq
  7756  00447C  CFDE F077          	movff	postinc2,ConfigureRadioRx@freq+1
  7757  004480  CFDE F078          	movff	postinc2,ConfigureRadioRx@freq+2
  7758  004484  CFDE F079          	movff	postinc2,ConfigureRadioRx@freq+3
  7759  004488  0102               	movlb	2	; () banked
  7760  00448A  5117               	movf	(_loRa+23)& (0+255),w,b
  7761  00448C  EC67  F02E         	call	_ConfigureRadioRx
  7762                           
  7763                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  7764  004490  0E85               	movlw	low _rxWindowSize
  7765  004492  0102               	movlb	2	; () banked
  7766  004494  2517               	addwf	(_loRa+23)& (0+255),w,b
  7767  004496  EC54  F01F         	call	PL150	;call to abstracted procedure
  7768  00449A  EC9D  F006         	call	PL48	;call to abstracted procedure
  7769  00449E  EC58  F01F         	call	PL406	;call to abstracted procedure
  7770  0044A2  ECD6  F010         	call	_RADIO_ReceiveStart	;wreg free
  7771  0044A6                     l2039:
  7772                           
  7773                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  7774  0044A6  0EFB               	movlw	251
  7775  0044A8  EF44  F01E         	goto	PL276	;call to abstracted procedure
  7776  0044AC                     __end_of_LORAWAN_ReceiveWindow1Callback:
  7777                           	opt stack 0
  7778  0044AC                     PL152:
  7779                           	opt stack 17
  7780  0044AC  0EFC               	movlw	-4
  7781  0044AE  C052  FFE3         	movff	btemp+8,plusw1
  7782  0044B2  0EFD               	movlw	-3
  7783  0044B4  C053  FFE3         	movff	btemp+9,plusw1
  7784  0044B8  0EFE               	movlw	-2
  7785  0044BA  C054  FFE3         	movff	btemp+10,plusw1
  7786  0044BE  0EFF               	movlw	-1
  7787  0044C0  C055  FFE3         	movff	btemp+11,plusw1
  7788  0044C4  0CFF               	retlw	255
  7789  0044C6                     __end_ofPL152:
  7790                           	opt stack 0
  7791                           tosu	equ	0xFFF
  7792                           tosh	equ	0xFFE
  7793                           tosl	equ	0xFFD
  7794                           pclath	equ	0xFFA
  7795                           tblptru	equ	0xFF8
  7796                           tblptrh	equ	0xFF7
  7797                           tblptrl	equ	0xFF6
  7798                           tablat	equ	0xFF5
  7799                           prodh	equ	0xFF4
  7800                           prodl	equ	0xFF3
  7801                           intcon	equ	0xFF2
  7802                           indf0	equ	0xFEF
  7803                           postinc0	equ	0xFEE
  7804                           plusw0	equ	0xFEB
  7805                           fsr0h	equ	0xFEA
  7806                           fsr0l	equ	0xFE9
  7807                           wreg	equ	0xFE8
  7808                           postinc1	equ	0xFE6
  7809                           postdec1	equ	0xFE5
  7810                           plusw1	equ	0xFE3
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           plusw2	equ	0xFDB
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  7822 ;; Defined at:
  7823 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  param           1  [STACK] unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1  [STACK] void 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : D/0
  7834 ;;		On exit  : C/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7841 ;;Total ram usage:        0 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:   14
  7844 ;; This function calls:
  7845 ;;		_ConfigureRadioRx
  7846 ;;		_LORAWAN_EnterContinuousReceive
  7847 ;;		_RADIO_GetStatus
  7848 ;;		_RADIO_ReceiveStart
  7849 ;;		_RADIO_ReceiveStop
  7850 ;;		_RADIO_ReleaseData
  7851 ;;		_ResetParametersForConfirmedTransmission
  7852 ;;		_ResetParametersForUnconfirmedTransmission
  7853 ;;		_RxDataDone
  7854 ;; This function is called by:
  7855 ;;		_LORAWAN_RxTimeout
  7856 ;;		_SetCallbackSoftwareTimers
  7857 ;;		_SwTimersExecute
  7858 ;; This function uses a reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text38
  7862  003E04                     __ptext38:
  7863                           	opt stack 0
  7864  003E04                     _LORAWAN_ReceiveWindow2Callback:
  7865                           	opt stack 12
  7866                           
  7867                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  7868                           
  7869                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7870                           ;incstack = 0
  7871  003E04  0102               	movlb	2	; () banked
  7872  003E06  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7873  003E08  D045               	goto	l2042
  7874                           
  7875                           ; BSR set to: 2
  7876                           ;lorawan.c: 831: {
  7877                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  7878  003E0A  EC2D  F031         	call	_RADIO_GetStatus	;wreg free
  7879  003E0E  6E55               	movwf	btemp+11,c
  7880  003E10  B255               	btfsc	btemp+11,1,c
  7881  003E12  D03C               	goto	l13808
  7882                           
  7883                           ; BSR set to: 1
  7884                           ;lorawan.c: 833: {
  7885                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  7886  003E14  0102               	movlb	2	; () banked
  7887  003E16  5102               	movf	(_loRa+2)& (0+255),w,b
  7888  003E18  0BF0               	andlw	-16
  7889  003E1A  0905               	iorlw	5
  7890  003E1C  6F02               	movwf	(_loRa+2)& (0+255),b
  7891                           
  7892                           ; BSR set to: 2
  7893                           ;lorawan.c: 836: RADIO_ReceiveStop();
  7894  003E1E  EC15  F030         	call	_RADIO_ReceiveStop	;wreg free
  7895                           
  7896                           ; BSR set to: 1
  7897                           ;lorawan.c: 837: RADIO_ReleaseData();
  7898  003E22  EC30  F031         	call	_RADIO_ReleaseData	;wreg free
  7899                           
  7900                           ; BSR set to: 1
  7901                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  7902  003E26  EC85  F027         	call	PL192	;call to abstracted procedure
  7903  003E2A  EC67  F02E         	call	_ConfigureRadioRx
  7904                           
  7905                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  7906  003E2E  0102               	movlb	2	; () banked
  7907  003E30  5112               	movf	(_loRa+18)& (0+255),w,b
  7908  003E32  E127               	bnz	l13804
  7909                           
  7910                           ; BSR set to: 2
  7911                           ;lorawan.c: 842: {
  7912                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  7913  003E34  0E85               	movlw	low _rxWindowSize
  7914  003E36  251C               	addwf	(_loRa+28)& (0+255),w,b
  7915  003E38  D837               	call	PL150	;call to abstracted procedure
  7916  003E3A  EC9D  F006         	call	PL48	;call to abstracted procedure
  7917  003E3E  D838               	call	PL406	;call to abstracted procedure
  7918  003E40  ECD6  F010         	call	_RADIO_ReceiveStart	;wreg free
  7919  003E44  C0AA  F04B         	movff	?_RADIO_ReceiveStart,btemp+1
  7920  003E48  C0AB  F04C         	movff	?_RADIO_ReceiveStart+1,btemp+2
  7921  003E4C  504B               	movf	btemp+1,w,c
  7922  003E4E  104C               	iorwf	btemp+2,w,c
  7923  003E50  E029               	bz	l2051
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;lorawan.c: 844: {
  7927                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  7928  003E52  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7929                           
  7930                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  7931  003E56  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7932                           
  7933                           ; BSR set to: 2
  7934                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  7935  003E5A  0101               	movlb	1	; () banked
  7936  003E5C  516E               	movf	_rxPayload& (0+255),w,b
  7937  003E5E  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7938  003E60  E021               	bz	l2051
  7939                           
  7940                           ; BSR set to: 1
  7941                           ;lorawan.c: 848: {
  7942                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  7943  003E62  0E00               	movlw	0
  7944  003E64  ECD1  F00D         	call	PL82	;call to abstracted procedure
  7945  003E68  6B67               	clrf	RxDataDone@status& (0+255),b
  7946  003E6A  D801               	call	u15318
  7947  003E6C  D01B               	goto	l2051
  7948  003E6E                     u15318:
  7949  003E6E  0005               	push	
  7950  003E70  6EFA               	movwf	pclath,c
  7951  003E72  0101               	movlb	1	; () banked
  7952  003E74  516E               	movf	_rxPayload& (0+255),w,b
  7953  003E76  6EFD               	movwf	tosl,c
  7954  003E78  516F               	movf	(_rxPayload+1)& (0+255),w,b
  7955  003E7A  6EFE               	movwf	tosh,c
  7956  003E7C  6AFF               	clrf	tosu,c
  7957  003E7E  50FA               	movf	pclath,w,c
  7958  003E80  0012               	return		;indir
  7959  003E82                     l13804:
  7960                           
  7961                           ; BSR set to: 2
  7962                           ;lorawan.c: 853: else
  7963                           ;lorawan.c: 854: {
  7964                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  7965  003E82  EC51  F004         	call	PL328	;call to abstracted procedure
  7966                           
  7967                           ; BSR set to: 2
  7968                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  7969  003E86  EC60  F027         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  7970  003E8A  D00C               	goto	l2051
  7971  003E8C                     l13808:
  7972                           
  7973                           ; BSR set to: 1
  7974                           ;lorawan.c: 859: else
  7975                           ;lorawan.c: 860: {
  7976                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  7977  003E8C  0E01               	movlw	1
  7978  003E8E  0102               	movlb	2	; () banked
  7979  003E90  6FF1               	movwf	(_loRa+241)& (0+255),b
  7980                           
  7981                           ; BSR set to: 1
  7982                           ;lorawan.c: 864: }
  7983                           ;lorawan.c: 865: }
  7984  003E92  D008               	goto	l2051
  7985  003E94                     l2042:
  7986                           
  7987                           ; BSR set to: 2
  7988                           ;lorawan.c: 866: else
  7989                           ;lorawan.c: 867: {
  7990                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  7991  003E94  A500               	btfss	_loRa& (0+255),2,b
  7992  003E96  D002               	goto	l13812
  7993                           
  7994                           ; BSR set to: 2
  7995                           ;lorawan.c: 871: {
  7996                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  7997  003E98  9500               	bcf	_loRa& (0+255),2,b
  7998                           
  7999                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  8000  003E9A  9902               	bcf	(_loRa+2)& (0+255),4,b
  8001  003E9C                     l13812:
  8002                           
  8003                           ; BSR set to: 2
  8004                           ;lorawan.c: 874: }
  8005                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  8006  003E9C  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8007                           
  8008                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  8009  003EA0  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8010  003EA4                     l2051:
  8011                           
  8012                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8013  003EA4  52E5               	movf	postdec1,f,c
  8014  003EA6  0012               	return		;funcret
  8015  003EA8                     __end_of_LORAWAN_ReceiveWindow2Callback:
  8016                           	opt stack 0
  8017  003EA8                     PL150:
  8018                           	opt stack 15
  8019  003EA8  6EF6               	movwf	tblptrl,c
  8020  003EAA  6AF7               	clrf	tblptrh,c
  8021  003EAC  0EFF               	movlw	high _rxWindowSize
  8022  003EAE  0012               	return	
  8023  003EB0                     __end_ofPL150:
  8024                           	opt stack 0
  8025  003EB0                     PL406:
  8026                           	opt stack 15
  8027  003EB0  50F5               	movf	tablat,w,c
  8028  003EB2  0100               	movlb	0	; () banked
  8029  003EB4  6FAA               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8030  003EB6  6BAB               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8031  003EB8  0012               	return	
  8032  003EBA                     __end_ofPL406:
  8033                           	opt stack 0
  8034                           tosu	equ	0xFFF
  8035                           tosh	equ	0xFFE
  8036                           tosl	equ	0xFFD
  8037                           pclath	equ	0xFFA
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodh	equ	0xFF4
  8043                           prodl	equ	0xFF3
  8044                           intcon	equ	0xFF2
  8045                           indf0	equ	0xFEF
  8046                           postinc0	equ	0xFEE
  8047                           plusw0	equ	0xFEB
  8048                           fsr0h	equ	0xFEA
  8049                           fsr0l	equ	0xFE9
  8050                           wreg	equ	0xFE8
  8051                           postinc1	equ	0xFE6
  8052                           postdec1	equ	0xFE5
  8053                           plusw1	equ	0xFE3
  8054                           fsr1h	equ	0xFE2
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           plusw2	equ	0xFDB
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _RADIO_WatchdogTimeout *****************
  8065 ;; Defined at:
  8066 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  param           1  [STACK] unsigned char 
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1  [STACK] void 
  8073 ;; Registers used:
  8074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : F/0
  8077 ;;		On exit  : C/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8084 ;;Total ram usage:        0 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:   16
  8087 ;; This function calls:
  8088 ;;		_LORAWAN_RxTimeout
  8089 ;;		_LORAWAN_TxDone
  8090 ;;		_RADIO_WriteMode
  8091 ;; This function is called by:
  8092 ;;		_RADIO_Init
  8093 ;;		_SwTimersExecute
  8094 ;; This function uses a reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text39
  8098  0058D6                     __ptext39:
  8099                           	opt stack 0
  8100  0058D6                     _RADIO_WatchdogTimeout:
  8101                           	opt stack 0
  8102                           
  8103                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  8104                           
  8105                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8106                           ;incstack = 0
  8107  0058D6  ECCA  F00F         	call	PL340	;call to abstracted procedure
  8108  0058DA  EC75  F01B         	call	_RADIO_WriteMode
  8109                           
  8110                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8111  0058DE  ECA5  F02D         	call	PL86	;call to abstracted procedure
  8112  0058E2  EC75  F01B         	call	_RADIO_WriteMode
  8113                           
  8114                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  8115  0058E6  0101               	movlb	1	; () banked
  8116  0058E8  8998               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  8117                           
  8118                           ; BSR set to: 1
  8119                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  8120  0058EA  A398               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  8121  0058EC  D004               	goto	l694
  8122                           
  8123                           ; BSR set to: 1
  8124                           ;radio_driver_SX1276.c: 1414: {
  8125                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  8126  0058EE  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8127                           
  8128                           ; BSR set to: 1
  8129                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  8130  0058F0  ECCE  F00C         	call	_LORAWAN_RxTimeout	;wreg free
  8131                           
  8132                           ;radio_driver_SX1276.c: 1417: }
  8133  0058F4  D009               	goto	l697
  8134  0058F6                     l694:
  8135                           
  8136                           ; BSR set to: 1
  8137                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  8138  0058F6  A198               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  8139  0058F8  D007               	goto	l697
  8140                           
  8141                           ; BSR set to: 1
  8142                           ;radio_driver_SX1276.c: 1419: {
  8143                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  8144  0058FA  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  8145                           
  8146                           ; BSR set to: 1
  8147                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  8148  0058FC  C19F  F0B4         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  8149  005900  C1A0  F0B5         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  8150  005904  EC75  F004         	call	_LORAWAN_TxDone	;wreg free
  8151  005908                     l697:
  8152                           
  8153                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  8154  005908  52E5               	movf	postdec1,f,c
  8155  00590A  0012               	return		;funcret
  8156  00590C                     __end_of_RADIO_WatchdogTimeout:
  8157                           	opt stack 0
  8158                           tosu	equ	0xFFF
  8159                           tosh	equ	0xFFE
  8160                           tosl	equ	0xFFD
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           plusw0	equ	0xFEB
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           postinc1	equ	0xFE6
  8176                           postdec1	equ	0xFE5
  8177                           plusw1	equ	0xFE3
  8178                           fsr1h	equ	0xFE2
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           plusw2	equ	0xFDB
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _RADIO_RxFSKTimeout *****************
  8189 ;; Defined at:
  8190 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  param           1  [STACK] unsigned char 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  irqFlags        1  [STACK] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1  [STACK] void 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl
      +, tblptrh, tblptru, prodl, prodh, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : F/0
  8201 ;;		On exit  : C/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:   16
  8211 ;; This function calls:
  8212 ;;		_LORAWAN_RxTimeout
  8213 ;;		_RADIO_RegisterRead
  8214 ;;		_RADIO_WriteMode
  8215 ;;		_SwTimerStop
  8216 ;; This function is called by:
  8217 ;;		_RADIO_Init
  8218 ;;		_SwTimersExecute
  8219 ;; This function uses a reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text40
  8223  005978                     __ptext40:
  8224                           	opt stack 0
  8225  005978                     _RADIO_RxFSKTimeout:
  8226                           	opt stack 0
  8227                           
  8228                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8229  005978  52E6               	movf	postinc1,f,c
  8230                           
  8231                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  8232                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  8233                           
  8234                           ;incstack = 0
  8235  00597A  0E3E               	movlw	62
  8236  00597C  EC8D  F02E         	call	_RADIO_RegisterRead
  8237  005980  6E55               	movwf	btemp+11,c
  8238                           
  8239                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8240  005982  0EFF               	movlw	-1
  8241  005984  C055  FFE3         	movff	btemp+11,plusw1
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  8245                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8246  005988  B0E3               	btfsc	plusw1,0,c
  8247  00598A  D00D               	goto	PL468
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;radio_driver_SX1276.c: 1397: {
  8251                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8252  00598C  EC15  F01A         	call	PL268	;call to abstracted procedure
  8253  005990  EC75  F01B         	call	_RADIO_WriteMode
  8254                           
  8255                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8256  005994  0101               	movlb	1	; () banked
  8257  005996  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8258  005998  EC9E  F030         	call	_SwTimerStop
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  8262  00599C  0101               	movlb	1	; () banked
  8263  00599E  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8264                           
  8265                           ; BSR set to: 1
  8266                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  8267  0059A0  ECCE  F00C         	call	_LORAWAN_RxTimeout	;wreg free
  8268  0059A4                     l691:
  8269                           
  8270                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  8271  0059A4  D000               	goto	PL468	;call to abstracted procedure
  8272  0059A6                     __end_of_RADIO_RxFSKTimeout:
  8273                           	opt stack 0
  8274  0059A6                     PL468:
  8275                           	opt stack 15
  8276  0059A6  52E5               	movf	postdec1,f,c
  8277  0059A8  52E5               	movf	postdec1,f,c
  8278  0059AA  0012               	return		;funcret
  8279  0059AC                     __end_ofPL468:
  8280                           	opt stack 0
  8281                           tosu	equ	0xFFF
  8282                           tosh	equ	0xFFE
  8283                           tosl	equ	0xFFD
  8284                           pclath	equ	0xFFA
  8285                           tblptru	equ	0xFF8
  8286                           tblptrh	equ	0xFF7
  8287                           tblptrl	equ	0xFF6
  8288                           tablat	equ	0xFF5
  8289                           prodh	equ	0xFF4
  8290                           prodl	equ	0xFF3
  8291                           intcon	equ	0xFF2
  8292                           indf0	equ	0xFEF
  8293                           postinc0	equ	0xFEE
  8294                           plusw0	equ	0xFEB
  8295                           fsr0h	equ	0xFEA
  8296                           fsr0l	equ	0xFE9
  8297                           wreg	equ	0xFE8
  8298                           postinc1	equ	0xFE6
  8299                           postdec1	equ	0xFE5
  8300                           plusw1	equ	0xFE3
  8301                           fsr1h	equ	0xFE2
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           plusw2	equ	0xFDB
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _UnconfirmedTransmissionCallback *****************
  8312 ;; Defined at:
  8313 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  param           1  [STACK] unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;		None
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1  [STACK] void 
  8320 ;; Registers used:
  8321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, prod
      +l, prodh, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : F/0
  8324 ;;		On exit  : C/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8331 ;;Total ram usage:        0 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:   13
  8334 ;; This function calls:
  8335 ;;		_RADIO_Transmit
  8336 ;;		_ResetParametersForUnconfirmedTransmission
  8337 ;;		_RxDataDone
  8338 ;;		_SelectChannelForTransmission
  8339 ;; This function is called by:
  8340 ;;		_SetCallbackSoftwareTimers
  8341 ;;		_SwTimersExecute
  8342 ;; This function uses a reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text41
  8346  004B20                     __ptext41:
  8347                           	opt stack 0
  8348  004B20                     _UnconfirmedTransmissionCallback:
  8349                           	opt stack 15
  8350                           
  8351                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  8352                           
  8353                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8354                           ;incstack = 0
  8355  004B20  0E01               	movlw	1
  8356  004B22  ECCC  F026         	call	_SelectChannelForTransmission
  8357  004B26  0900               	iorlw	0
  8358  004B28  E10A               	bnz	l15238
  8359                           
  8360                           ; BSR set to: 0
  8361  004B2A  0EF0               	movlw	low (_macBuffer+16)
  8362  004B2C  D820               	call	PL194	;call to abstracted procedure
  8363  004B2E  ECF0  F00E         	call	_RADIO_Transmit	;wreg free
  8364  004B32  D828               	call	PL310	;call to abstracted procedure
  8365  004B34  E104               	bnz	l15238
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;lorawan.c: 1001: {
  8369                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  8370  004B36  0102               	movlb	2	; () banked
  8371  004B38  2BD8               	incf	(_loRa+216)& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 2
  8374                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  8375  004B3A  D81F               	call	PL288	;call to abstracted procedure
  8376                           
  8377                           ;lorawan.c: 1005: }
  8378  004B3C  D016               	goto	l2094
  8379  004B3E                     l15238:
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;lorawan.c: 1006: else
  8383                           ;lorawan.c: 1008: {
  8384                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  8385  004B3E  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8386                           
  8387                           ; BSR set to: 2
  8388                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  8389  004B42  0101               	movlb	1	; () banked
  8390  004B44  516E               	movf	_rxPayload& (0+255),w,b
  8391  004B46  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  8392  004B48  E010               	bz	l2094
  8393                           
  8394                           ; BSR set to: 1
  8395                           ;lorawan.c: 1011: {
  8396                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  8397  004B4A  0E00               	movlw	0
  8398  004B4C  ECD1  F00D         	call	PL82	;call to abstracted procedure
  8399  004B50  6B67               	clrf	RxDataDone@status& (0+255),b
  8400  004B52  D801               	call	u18018
  8401  004B54  D00A               	goto	l2094
  8402  004B56                     u18018:
  8403  004B56  0005               	push	
  8404  004B58  6EFA               	movwf	pclath,c
  8405  004B5A  0101               	movlb	1	; () banked
  8406  004B5C  516E               	movf	_rxPayload& (0+255),w,b
  8407  004B5E  6EFD               	movwf	tosl,c
  8408  004B60  516F               	movf	(_rxPayload+1)& (0+255),w,b
  8409  004B62  6EFE               	movwf	tosh,c
  8410  004B64  6AFF               	clrf	tosu,c
  8411  004B66  50FA               	movf	pclath,w,c
  8412  004B68  0012               	return		;indir
  8413  004B6A                     l2094:
  8414                           
  8415                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8416  004B6A  52E5               	movf	postdec1,f,c
  8417  004B6C  0012               	return		;funcret
  8418  004B6E                     __end_of_UnconfirmedTransmissionCallback:
  8419                           	opt stack 0
  8420  004B6E                     PL194:
  8421                           	opt stack 15
  8422  004B6E  6FAA               	movwf	RADIO_Transmit@buffer& (0+255),b
  8423  004B70  0E04               	movlw	high (_macBuffer+16)
  8424  004B72  6FAB               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  8425  004B74  C2D4  F0AC         	movff	_loRa+212,RADIO_Transmit@bufferLen
  8426  004B78  0012               	return	
  8427  004B7A                     __end_ofPL194:
  8428                           	opt stack 0
  8429  004B7A                     PL288:
  8430                           	opt stack 15
  8431  004B7A  5102               	movf	(_loRa+2)& (0+255),w,b
  8432  004B7C  0BF0               	andlw	-16
  8433  004B7E  0901               	iorlw	1
  8434  004B80  6F02               	movwf	(_loRa+2)& (0+255),b
  8435  004B82  0012               	return	
  8436  004B84                     __end_ofPL288:
  8437                           	opt stack 0
  8438  004B84                     PL310:
  8439                           	opt stack 15
  8440  004B84  C0AA  F04B         	movff	?_RADIO_Transmit,btemp+1
  8441  004B88  C0AB  F04C         	movff	?_RADIO_Transmit+1,btemp+2
  8442  004B8C  504B               	movf	btemp+1,w,c
  8443  004B8E  104C               	iorwf	btemp+2,w,c
  8444  004B90  0012               	return	
  8445  004B92                     __end_ofPL310:
  8446                           	opt stack 0
  8447                           tosu	equ	0xFFF
  8448                           tosh	equ	0xFFE
  8449                           tosl	equ	0xFFD
  8450                           pclath	equ	0xFFA
  8451                           tblptru	equ	0xFF8
  8452                           tblptrh	equ	0xFF7
  8453                           tblptrl	equ	0xFF6
  8454                           tablat	equ	0xFF5
  8455                           prodh	equ	0xFF4
  8456                           prodl	equ	0xFF3
  8457                           intcon	equ	0xFF2
  8458                           indf0	equ	0xFEF
  8459                           postinc0	equ	0xFEE
  8460                           plusw0	equ	0xFEB
  8461                           fsr0h	equ	0xFEA
  8462                           fsr0l	equ	0xFE9
  8463                           wreg	equ	0xFE8
  8464                           postinc1	equ	0xFE6
  8465                           postdec1	equ	0xFE5
  8466                           plusw1	equ	0xFE3
  8467                           fsr1h	equ	0xFE2
  8468                           fsr1l	equ	0xFE1
  8469                           indf2	equ	0xFDF
  8470                           postinc2	equ	0xFDE
  8471                           postdec2	equ	0xFDD
  8472                           plusw2	equ	0xFDB
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function _GetRx1Freq *****************
  8478 ;; Defined at:
  8479 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;		None
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;		None
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  4    4[BANK0 ] unsigned long 
  8486 ;; Registers used:
  8487 ;;		None
  8488 ;; Tracked objects:
  8489 ;;		On entry : F/2
  8490 ;;		On exit  : F/2
  8491 ;;		Unchanged: F/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8493 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8496 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8497 ;;Total ram usage:        4 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; Hardware stack levels required when called:    7
  8500 ;; This function calls:
  8501 ;;		Nothing
  8502 ;; This function is called by:
  8503 ;;		_LORAWAN_ReceiveWindow1Callback
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text42
  8508  006118                     __ptext42:
  8509                           	opt stack 0
  8510  006118                     _GetRx1Freq:
  8511                           	opt stack 20
  8512                           
  8513                           ; BSR set to: 2
  8514                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  8515                           
  8516                           ;incstack = 0
  8517  006118  C213  F064         	movff	_loRa+19,?_GetRx1Freq
  8518  00611C  C214  F065         	movff	_loRa+20,?_GetRx1Freq+1
  8519  006120  C215  F066         	movff	_loRa+21,?_GetRx1Freq+2
  8520  006124  C216  F067         	movff	_loRa+22,?_GetRx1Freq+3
  8521                           
  8522                           ; BSR set to: 2
  8523  006128  0012               	return		;funcret
  8524  00612A                     __end_of_GetRx1Freq:
  8525                           	opt stack 0
  8526                           tosu	equ	0xFFF
  8527                           tosh	equ	0xFFE
  8528                           tosl	equ	0xFFD
  8529                           pclath	equ	0xFFA
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           intcon	equ	0xFF2
  8537                           indf0	equ	0xFEF
  8538                           postinc0	equ	0xFEE
  8539                           plusw0	equ	0xFEB
  8540                           fsr0h	equ	0xFEA
  8541                           fsr0l	equ	0xFE9
  8542                           wreg	equ	0xFE8
  8543                           postinc1	equ	0xFE6
  8544                           postdec1	equ	0xFE5
  8545                           plusw1	equ	0xFE3
  8546                           fsr1h	equ	0xFE2
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _RADIO_DIO5 *****************
  8557 ;; Defined at:
  8558 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  dioMapping      1    0        unsigned char 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : F/1
  8569 ;;		On exit  : 1/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8576 ;;Total ram usage:        1 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:   11
  8579 ;; This function calls:
  8580 ;;		_RADIO_RegisterRead
  8581 ;;		_RADIO_UnhandledInterrupt
  8582 ;; This function is called by:
  8583 ;;		_LORAWAN_Mainloop
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text43
  8588  005FCA                     __ptext43:
  8589                           	opt stack 0
  8590  005FCA                     _RADIO_DIO5:
  8591                           	opt stack 18
  8592                           
  8593                           ; BSR set to: 1
  8594                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  8595                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  8596                           
  8597                           ; BSR set to: 2
  8598                           ;incstack = 0
  8599  005FCA  0E41               	movlw	65
  8600  005FCC  EC8D  F02E         	call	_RADIO_RegisterRead
  8601                           
  8602                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8603  005FD0  0E01               	movlw	1
  8604  005FD2  EC8D  F02E         	call	_RADIO_RegisterRead
  8605  005FD6  6F69               	movwf	??_RADIO_DIO5& (0+255),b
  8606  005FD8  AF69               	btfss	??_RADIO_DIO5& (0+255),7,b
  8607  005FDA  0012               	return	
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8611  005FDC  0E01               	movlw	1
  8612  005FDE  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  8613  005FE2                     __end_of_RADIO_DIO5:
  8614                           	opt stack 0
  8615                           tosu	equ	0xFFF
  8616                           tosh	equ	0xFFE
  8617                           tosl	equ	0xFFD
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           indf0	equ	0xFEF
  8627                           postinc0	equ	0xFEE
  8628                           plusw0	equ	0xFEB
  8629                           fsr0h	equ	0xFEA
  8630                           fsr0l	equ	0xFE9
  8631                           wreg	equ	0xFE8
  8632                           postinc1	equ	0xFE6
  8633                           postdec1	equ	0xFE5
  8634                           plusw1	equ	0xFE3
  8635                           fsr1h	equ	0xFE2
  8636                           fsr1l	equ	0xFE1
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           postdec2	equ	0xFDD
  8640                           plusw2	equ	0xFDB
  8641                           fsr2h	equ	0xFDA
  8642                           fsr2l	equ	0xFD9
  8643                           status	equ	0xFD8
  8644                           
  8645 ;; *************** function _RADIO_DIO4 *****************
  8646 ;; Defined at:
  8647 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  dioMapping      1    0        unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  1    wreg      void 
  8654 ;; Registers used:
  8655 ;;		wreg, status,2, status,0, cstack
  8656 ;; Tracked objects:
  8657 ;;		On entry : F/1
  8658 ;;		On exit  : 1/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8665 ;;Total ram usage:        1 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:   11
  8668 ;; This function calls:
  8669 ;;		_RADIO_RegisterRead
  8670 ;;		_RADIO_UnhandledInterrupt
  8671 ;; This function is called by:
  8672 ;;		_LORAWAN_Mainloop
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text44
  8677  005FE2                     __ptext44:
  8678                           	opt stack 0
  8679  005FE2                     _RADIO_DIO4:
  8680                           	opt stack 18
  8681                           
  8682                           ; BSR set to: 1
  8683                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  8684                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  8685                           
  8686                           ;incstack = 0
  8687  005FE2  0E41               	movlw	65
  8688  005FE4  EC8D  F02E         	call	_RADIO_RegisterRead
  8689                           
  8690                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8691  005FE8  0E01               	movlw	1
  8692  005FEA  EC8D  F02E         	call	_RADIO_RegisterRead
  8693  005FEE  6F69               	movwf	??_RADIO_DIO4& (0+255),b
  8694  005FF0  AF69               	btfss	??_RADIO_DIO4& (0+255),7,b
  8695  005FF2  0012               	return	
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8699  005FF4  0E01               	movlw	1
  8700  005FF6  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  8701  005FFA                     __end_of_RADIO_DIO4:
  8702                           	opt stack 0
  8703                           tosu	equ	0xFFF
  8704                           tosh	equ	0xFFE
  8705                           tosl	equ	0xFFD
  8706                           pclath	equ	0xFFA
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           indf0	equ	0xFEF
  8715                           postinc0	equ	0xFEE
  8716                           plusw0	equ	0xFEB
  8717                           fsr0h	equ	0xFEA
  8718                           fsr0l	equ	0xFE9
  8719                           wreg	equ	0xFE8
  8720                           postinc1	equ	0xFE6
  8721                           postdec1	equ	0xFE5
  8722                           plusw1	equ	0xFE3
  8723                           fsr1h	equ	0xFE2
  8724                           fsr1l	equ	0xFE1
  8725                           indf2	equ	0xFDF
  8726                           postinc2	equ	0xFDE
  8727                           postdec2	equ	0xFDD
  8728                           plusw2	equ	0xFDB
  8729                           fsr2h	equ	0xFDA
  8730                           fsr2l	equ	0xFD9
  8731                           status	equ	0xFD8
  8732                           
  8733 ;; *************** function _RADIO_DIO3 *****************
  8734 ;; Defined at:
  8735 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;		None
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  dioMapping      1    0        unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, status,2, status,0, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : F/1
  8746 ;;		On exit  : 1/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8753 ;;Total ram usage:        1 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:   11
  8756 ;; This function calls:
  8757 ;;		_RADIO_RegisterRead
  8758 ;;		_RADIO_UnhandledInterrupt
  8759 ;; This function is called by:
  8760 ;;		_LORAWAN_Mainloop
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text45
  8765  005FFA                     __ptext45:
  8766                           	opt stack 0
  8767  005FFA                     _RADIO_DIO3:
  8768                           	opt stack 18
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  8772                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  8773                           
  8774                           ;incstack = 0
  8775  005FFA  0E40               	movlw	64
  8776  005FFC  EC8D  F02E         	call	_RADIO_RegisterRead
  8777                           
  8778                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8779  006000  0E01               	movlw	1
  8780  006002  EC8D  F02E         	call	_RADIO_RegisterRead
  8781  006006  6F69               	movwf	??_RADIO_DIO3& (0+255),b
  8782  006008  AF69               	btfss	??_RADIO_DIO3& (0+255),7,b
  8783  00600A  0012               	return	
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8787  00600C  0E01               	movlw	1
  8788  00600E  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  8789  006012                     __end_of_RADIO_DIO3:
  8790                           	opt stack 0
  8791                           tosu	equ	0xFFF
  8792                           tosh	equ	0xFFE
  8793                           tosl	equ	0xFFD
  8794                           pclath	equ	0xFFA
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           indf0	equ	0xFEF
  8803                           postinc0	equ	0xFEE
  8804                           plusw0	equ	0xFEB
  8805                           fsr0h	equ	0xFEA
  8806                           fsr0l	equ	0xFE9
  8807                           wreg	equ	0xFE8
  8808                           postinc1	equ	0xFE6
  8809                           postdec1	equ	0xFE5
  8810                           plusw1	equ	0xFE3
  8811                           fsr1h	equ	0xFE2
  8812                           fsr1l	equ	0xFE1
  8813                           indf2	equ	0xFDF
  8814                           postinc2	equ	0xFDE
  8815                           postdec2	equ	0xFDD
  8816                           plusw2	equ	0xFDB
  8817                           fsr2h	equ	0xFDA
  8818                           fsr2l	equ	0xFD9
  8819                           status	equ	0xFD8
  8820                           
  8821 ;; *************** function _RADIO_DIO2 *****************
  8822 ;; Defined at:
  8823 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;		None
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  dioMapping      1   30[BANK0 ] unsigned char 
  8828 ;;  opMode          1    0        unsigned char 
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  1    wreg      void 
  8831 ;; Registers used:
  8832 ;;		wreg, status,2, status,0, cstack
  8833 ;; Tracked objects:
  8834 ;;		On entry : F/1
  8835 ;;		On exit  : 1/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;Total ram usage:        2 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; Hardware stack levels required when called:   12
  8845 ;; This function calls:
  8846 ;;		_RADIO_FHSSChangeChannel
  8847 ;;		_RADIO_RegisterRead
  8848 ;;		_RADIO_UnhandledInterrupt
  8849 ;; This function is called by:
  8850 ;;		_LORAWAN_Mainloop
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text46
  8855  0055DC                     __ptext46:
  8856                           	opt stack 0
  8857  0055DC                     _RADIO_DIO2:
  8858                           	opt stack 17
  8859                           
  8860                           ; BSR set to: 1
  8861                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  8862                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  8863                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  8864                           
  8865                           ;incstack = 0
  8866  0055DC  0E40               	movlw	64
  8867  0055DE  EC8D  F02E         	call	_RADIO_RegisterRead
  8868  0055E2  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  8869  0055E4  90D8               	bcf	status,0,c
  8870  0055E6  337D               	rrcf	??_RADIO_DIO2& (0+255),f,b
  8871  0055E8  90D8               	bcf	status,0,c
  8872  0055EA  317D               	rrcf	??_RADIO_DIO2& (0+255),w,b
  8873  0055EC  0B03               	andlw	3
  8874  0055EE  6F7E               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  8875                           
  8876                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  8877  0055F0  0E01               	movlw	1
  8878  0055F2  EC8D  F02E         	call	_RADIO_RegisterRead
  8879                           
  8880                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8881  0055F6  0E01               	movlw	1
  8882  0055F8  EC8D  F02E         	call	_RADIO_RegisterRead
  8883  0055FC  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  8884  0055FE  AF7D               	btfss	??_RADIO_DIO2& (0+255),7,b
  8885  005600  0012               	return	
  8886  005602  D003               	goto	l15492
  8887  005604                     l15488:
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8891  005604  0E01               	movlw	1
  8892  005606  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  8893  00560A                     l15492:
  8894                           
  8895                           ; BSR set to: 0
  8896  00560A  517E               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  8897                           
  8898                           ; Switch size 1, requested type "space"
  8899                           ; Number of cases is 3, Range of values is 0 to 2
  8900                           ; switch strategies available:
  8901                           ; Name         Instructions Cycles
  8902                           ; simple_byte           10     6 (average)
  8903                           ;	Chosen strategy is simple_byte
  8904  00560C  E102 EF39  F02D    	bz	_RADIO_FHSSChangeChannel
  8905  005612  0A01               	xorlw	1	; case 1
  8906  005614  E102 EF39  F02D    	bz	_RADIO_FHSSChangeChannel
  8907  00561A  0A03               	xorlw	3	; case 2
  8908  00561C  E102 EF39  F02D    	bz	_RADIO_FHSSChangeChannel
  8909  005622  D7F0               	goto	l15488
  8910  005624                     __end_of_RADIO_DIO2:
  8911                           	opt stack 0
  8912                           tosu	equ	0xFFF
  8913                           tosh	equ	0xFFE
  8914                           tosl	equ	0xFFD
  8915                           pclath	equ	0xFFA
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodh	equ	0xFF4
  8921                           prodl	equ	0xFF3
  8922                           intcon	equ	0xFF2
  8923                           indf0	equ	0xFEF
  8924                           postinc0	equ	0xFEE
  8925                           plusw0	equ	0xFEB
  8926                           fsr0h	equ	0xFEA
  8927                           fsr0l	equ	0xFE9
  8928                           wreg	equ	0xFE8
  8929                           postinc1	equ	0xFE6
  8930                           postdec1	equ	0xFE5
  8931                           plusw1	equ	0xFE3
  8932                           fsr1h	equ	0xFE2
  8933                           fsr1l	equ	0xFE1
  8934                           indf2	equ	0xFDF
  8935                           postinc2	equ	0xFDE
  8936                           postdec2	equ	0xFDD
  8937                           plusw2	equ	0xFDB
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _RADIO_DIO1 *****************
  8943 ;; Defined at:
  8944 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;		None
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  dioMapping      1  101[BANK0 ] unsigned char 
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  1    wreg      void 
  8951 ;; Registers used:
  8952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  8953 ;; Tracked objects:
  8954 ;;		On entry : F/1
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8962 ;;Total ram usage:        2 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:   17
  8965 ;; This function calls:
  8966 ;;		_RADIO_FHSSChangeChannel
  8967 ;;		_RADIO_RegisterRead
  8968 ;;		_RADIO_RxTimeout
  8969 ;;		_RADIO_UnhandledInterrupt
  8970 ;; This function is called by:
  8971 ;;		_LORAWAN_Mainloop
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text47
  8976  005864                     __ptext47:
  8977                           	opt stack 0
  8978  005864                     _RADIO_DIO1:
  8979                           	opt stack 12
  8980                           
  8981                           ; BSR set to: 1
  8982                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  8983                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  8984                           
  8985                           ;incstack = 0
  8986  005864  0E40               	movlw	64
  8987  005866  EC8D  F02E         	call	_RADIO_RegisterRead
  8988  00586A  6FC4               	movwf	??_RADIO_DIO1& (0+255),b
  8989  00586C  39C4               	swapf	??_RADIO_DIO1& (0+255),w,b
  8990  00586E  0B0F               	andlw	15
  8991  005870  0B03               	andlw	3
  8992  005872  6FC5               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  8993                           
  8994                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8995  005874  0E01               	movlw	1
  8996  005876  EC8D  F02E         	call	_RADIO_RegisterRead
  8997  00587A  6FC4               	movwf	??_RADIO_DIO1& (0+255),b
  8998  00587C  AFC4               	btfss	??_RADIO_DIO1& (0+255),7,b
  8999  00587E  D00D               	goto	l15480
  9000  005880  D003               	goto	l15476
  9001  005882                     l15472:
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9005  005882  0E01               	movlw	1
  9006  005884  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  9007  005888                     l15476:
  9008                           
  9009                           ; BSR set to: 0
  9010  005888  51C5               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9011                           
  9012                           ; Switch size 1, requested type "space"
  9013                           ; Number of cases is 2, Range of values is 0 to 1
  9014                           ; switch strategies available:
  9015                           ; Name         Instructions Cycles
  9016                           ; simple_byte            7     4 (average)
  9017                           ;	Chosen strategy is simple_byte
  9018  00588A  E102 EF95  F02D    	bz	_RADIO_RxTimeout
  9019  005890  0A01               	xorlw	1	; case 1
  9020  005892  E102 EF39  F02D    	bz	_RADIO_FHSSChangeChannel
  9021  005898  D7F4               	goto	l15472
  9022  00589A                     l15480:
  9023                           
  9024                           ; BSR set to: 0
  9025  00589A  51C5               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9026                           
  9027                           ; Switch size 1, requested type "space"
  9028                           ; Number of cases is 1, Range of values is 0 to 0
  9029                           ; switch strategies available:
  9030                           ; Name         Instructions Cycles
  9031                           ; simple_byte            4     3 (average)
  9032                           ;	Chosen strategy is simple_byte
  9033  00589C  0012               	return	
  9034  00589E                     __end_of_RADIO_DIO1:
  9035                           	opt stack 0
  9036                           tosu	equ	0xFFF
  9037                           tosh	equ	0xFFE
  9038                           tosl	equ	0xFFD
  9039                           pclath	equ	0xFFA
  9040                           tblptru	equ	0xFF8
  9041                           tblptrh	equ	0xFF7
  9042                           tblptrl	equ	0xFF6
  9043                           tablat	equ	0xFF5
  9044                           prodh	equ	0xFF4
  9045                           prodl	equ	0xFF3
  9046                           intcon	equ	0xFF2
  9047                           indf0	equ	0xFEF
  9048                           postinc0	equ	0xFEE
  9049                           plusw0	equ	0xFEB
  9050                           fsr0h	equ	0xFEA
  9051                           fsr0l	equ	0xFE9
  9052                           wreg	equ	0xFE8
  9053                           postinc1	equ	0xFE6
  9054                           postdec1	equ	0xFE5
  9055                           plusw1	equ	0xFE3
  9056                           fsr1h	equ	0xFE2
  9057                           fsr1l	equ	0xFE1
  9058                           indf2	equ	0xFDF
  9059                           postinc2	equ	0xFDE
  9060                           postdec2	equ	0xFDD
  9061                           plusw2	equ	0xFDB
  9062                           fsr2h	equ	0xFDA
  9063                           fsr2l	equ	0xFD9
  9064                           status	equ	0xFD8
  9065                           
  9066 ;; *************** function _RADIO_RxTimeout *****************
  9067 ;; Defined at:
  9068 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      void 
  9075 ;; Registers used:
  9076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  9077 ;; Tracked objects:
  9078 ;;		On entry : E/0
  9079 ;;		On exit  : C/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9086 ;;Total ram usage:        0 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:   16
  9089 ;; This function calls:
  9090 ;;		_LORAWAN_RxTimeout
  9091 ;;		_RADIO_RegisterWrite
  9092 ;;		_RADIO_WriteMode
  9093 ;;		_SwTimerStop
  9094 ;; This function is called by:
  9095 ;;		_RADIO_DIO1
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text48
  9100  005B2A                     __ptext48:
  9101                           	opt stack 0
  9102  005B2A                     _RADIO_RxTimeout:
  9103                           	opt stack 12
  9104                           
  9105                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9106                           
  9107                           ;incstack = 0
  9108  005B2A  0101               	movlb	1	; () banked
  9109  005B2C  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9110  005B2E  EC9E  F030         	call	_SwTimerStop
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  9114  005B32  0E80               	movlw	128
  9115  005B34  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9116  005B36  0E12               	movlw	18
  9117  005B38  EC79  F02F         	call	_RADIO_RegisterWrite
  9118                           
  9119                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9120  005B3C  D806               	call	PL86	;call to abstracted procedure
  9121  005B3E  EC75  F01B         	call	_RADIO_WriteMode
  9122                           
  9123                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  9124  005B42  0101               	movlb	1	; () banked
  9125  005B44  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9126                           
  9127                           ; BSR set to: 1
  9128                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  9129  005B46  EFCE  F00C         	goto	_LORAWAN_RxTimeout	;wreg free
  9130  005B4A                     __end_of_RADIO_RxTimeout:
  9131                           	opt stack 0
  9132  005B4A                     PL86:
  9133                           	opt stack 12
  9134  005B4A  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9135  005B4E  0E00               	movlw	0
  9136  005B50  0100               	movlb	0	; () banked
  9137  005B52  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9138  005B54  0C00               	retlw	0
  9139  005B56                     __end_ofPL86:
  9140                           	opt stack 0
  9141                           tosu	equ	0xFFF
  9142                           tosh	equ	0xFFE
  9143                           tosl	equ	0xFFD
  9144                           pclath	equ	0xFFA
  9145                           tblptru	equ	0xFF8
  9146                           tblptrh	equ	0xFF7
  9147                           tblptrl	equ	0xFF6
  9148                           tablat	equ	0xFF5
  9149                           prodh	equ	0xFF4
  9150                           prodl	equ	0xFF3
  9151                           intcon	equ	0xFF2
  9152                           indf0	equ	0xFEF
  9153                           postinc0	equ	0xFEE
  9154                           plusw0	equ	0xFEB
  9155                           fsr0h	equ	0xFEA
  9156                           fsr0l	equ	0xFE9
  9157                           wreg	equ	0xFE8
  9158                           postinc1	equ	0xFE6
  9159                           postdec1	equ	0xFE5
  9160                           plusw1	equ	0xFE3
  9161                           fsr1h	equ	0xFE2
  9162                           fsr1l	equ	0xFE1
  9163                           indf2	equ	0xFDF
  9164                           postinc2	equ	0xFDE
  9165                           postdec2	equ	0xFDD
  9166                           plusw2	equ	0xFDB
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _RADIO_FHSSChangeChannel *****************
  9172 ;; Defined at:
  9173 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  irqFlags        1    0        unsigned char 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      void 
  9180 ;; Registers used:
  9181 ;;		wreg, status,2, status,0, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : E/0
  9184 ;;		On exit  : 1/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:   11
  9194 ;; This function calls:
  9195 ;;		_RADIO_RegisterRead
  9196 ;;		_RADIO_RegisterWrite
  9197 ;;		_RADIO_WriteFrequency
  9198 ;; This function is called by:
  9199 ;;		_RADIO_DIO1
  9200 ;;		_RADIO_DIO2
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text49
  9205  005A72                     __ptext49:
  9206                           	opt stack 0
  9207  005A72                     _RADIO_FHSSChangeChannel:
  9208                           	opt stack 17
  9209                           
  9210                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  9211                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  9212                           
  9213                           ;incstack = 0
  9214  005A72  0E12               	movlw	18
  9215  005A74  EC8D  F02E         	call	_RADIO_RegisterRead
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  9219  005A78  0101               	movlb	1	; () banked
  9220  005A7A  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
  9221  005A7C  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  9222  005A7E  E00A               	bz	l613
  9223                           
  9224                           ; BSR set to: 1
  9225                           ;radio_driver_SX1276.c: 1164: {
  9226                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  9227  005A80  51A4               	movf	(_RadioConfiguration+47)& (0+255),w,b
  9228  005A82  11A5               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  9229  005A84  E007               	bz	l613
  9230                           
  9231                           ; BSR set to: 1
  9232                           ;radio_driver_SX1276.c: 1166: {
  9233                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9234  005A86  0100               	movlb	0	; () banked
  9235  005A88  6B71               	clrf	RADIO_WriteFrequency@frequency& (0+255),b
  9236  005A8A  6B72               	clrf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9237  005A8C  6B73               	clrf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9238  005A8E  6B74               	clrf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9239  005A90  ECE2  F01B         	call	_RADIO_WriteFrequency	;wreg free
  9240  005A94                     l613:
  9241                           
  9242                           ;radio_driver_SX1276.c: 1168: }
  9243                           ;radio_driver_SX1276.c: 1169: }
  9244                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  9245  005A94  0E02               	movlw	2
  9246  005A96  0100               	movlb	0	; () banked
  9247  005A98  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9248  005A9A  0E12               	movlw	18
  9249  005A9C  EF79  F02F         	goto	_RADIO_RegisterWrite
  9250  005AA0                     __end_of_RADIO_FHSSChangeChannel:
  9251                           	opt stack 0
  9252                           tosu	equ	0xFFF
  9253                           tosh	equ	0xFFE
  9254                           tosl	equ	0xFFD
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           indf0	equ	0xFEF
  9264                           postinc0	equ	0xFEE
  9265                           plusw0	equ	0xFEB
  9266                           fsr0h	equ	0xFEA
  9267                           fsr0l	equ	0xFE9
  9268                           wreg	equ	0xFE8
  9269                           postinc1	equ	0xFE6
  9270                           postdec1	equ	0xFE5
  9271                           plusw1	equ	0xFE3
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           plusw2	equ	0xFDB
  9278                           fsr2h	equ	0xFDA
  9279                           fsr2l	equ	0xFD9
  9280                           status	equ	0xFD8
  9281                           
  9282 ;; *************** function _RADIO_DIO0 *****************
  9283 ;; Defined at:
  9284 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;  opMode          1  146[BANK0 ] unsigned char 
  9289 ;;  dioMapping      1  145[BANK0 ] unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : F/1
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9302 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9303 ;;Total ram usage:        4 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:   17
  9306 ;; This function calls:
  9307 ;;		_RADIO_FSKPacketSent
  9308 ;;		_RADIO_FSKPayloadReady
  9309 ;;		_RADIO_RegisterRead
  9310 ;;		_RADIO_RxDone
  9311 ;;		_RADIO_TxDone
  9312 ;;		_RADIO_UnhandledInterrupt
  9313 ;; This function is called by:
  9314 ;;		_LORAWAN_Mainloop
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           	psect	text50
  9319  004D34                     __ptext50:
  9320                           	opt stack 0
  9321  004D34                     _RADIO_DIO0:
  9322                           	opt stack 12
  9323                           
  9324                           ; BSR set to: 1
  9325                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  9326                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  9327                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9328                           
  9329                           ;incstack = 0
  9330  004D34  0E40               	movlw	64
  9331  004D36  EC8D  F02E         	call	_RADIO_RegisterRead
  9332  004D3A  6FEF               	movwf	??_RADIO_DIO0& (0+255),b
  9333  004D3C  0E06               	movlw	6
  9334  004D3E  6FF0               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9335  004D40                     u18135:
  9336  004D40  90D8               	bcf	status,0,c
  9337  004D42  33EF               	rrcf	??_RADIO_DIO0& (0+255),f,b
  9338  004D44  2FF0               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9339  004D46  D7FC               	goto	u18135
  9340  004D48  51EF               	movf	??_RADIO_DIO0& (0+255),w,b
  9341  004D4A  0B03               	andlw	3
  9342  004D4C  6FF1               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9343                           
  9344                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  9345  004D4E  0E01               	movlw	1
  9346  004D50  EC8D  F02E         	call	_RADIO_RegisterRead
  9347  004D54  6FF2               	movwf	RADIO_DIO0@opMode& (0+255),b
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  9351  004D56  AFF2               	btfss	RADIO_DIO0@opMode& (0+255),7,b
  9352  004D58  D01C               	goto	l15462
  9353  004D5A  D003               	goto	l15446
  9354  004D5C                     l15442:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9358  004D5C  0E01               	movlw	1
  9359  004D5E  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  9360  004D62                     l15446:
  9361                           
  9362                           ; BSR set to: 0
  9363  004D62  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9364                           
  9365                           ; Switch size 1, requested type "space"
  9366                           ; Number of cases is 2, Range of values is 0 to 1
  9367                           ; switch strategies available:
  9368                           ; Name         Instructions Cycles
  9369                           ; simple_byte            7     4 (average)
  9370                           ;	Chosen strategy is simple_byte
  9371  004D64  E102 EF5D  F01F    	bz	_RADIO_RxDone
  9372  004D6A  0A01               	xorlw	1	; case 1
  9373  004D6C  E102 EF63  F022    	bz	_RADIO_TxDone
  9374  004D72  D7F4               	goto	l15442
  9375  004D74                     l15448:
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  9379  004D74  0E07               	movlw	7
  9380  004D76  17F2               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9381                           
  9382                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  9383  004D78  0E03               	movlw	3
  9384  004D7A  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9385  004D7C  E102               	bnz	l15452
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;radio_driver_SX1276.c: 1209: {
  9389                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  9390  004D7E  EFB2  F019         	goto	_RADIO_FSKPacketSent	;wreg free
  9391  004D82                     l15452:
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  9395  004D82  0E05               	movlw	5
  9396  004D84  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9397  004D86  E102               	bnz	l15458
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;radio_driver_SX1276.c: 1214: {
  9401                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  9402  004D88  EFB3  F022         	goto	_RADIO_FSKPayloadReady	;wreg free
  9403  004D8C                     l15458:
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9407  004D8C  0E00               	movlw	0
  9408  004D8E  EF3A  F02F         	goto	_RADIO_UnhandledInterrupt
  9409  004D92                     l15462:
  9410                           
  9411                           ; BSR set to: 0
  9412  004D92  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9413                           
  9414                           ; Switch size 1, requested type "space"
  9415                           ; Number of cases is 1, Range of values is 0 to 0
  9416                           ; switch strategies available:
  9417                           ; Name         Instructions Cycles
  9418                           ; simple_byte            4     3 (average)
  9419                           ;	Chosen strategy is simple_byte
  9420  004D94  E0EF               	bz	l15448
  9421  004D96  D7FA               	goto	l15458
  9422  004D98                     __end_of_RADIO_DIO0:
  9423                           	opt stack 0
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclath	equ	0xFFA
  9428                           tblptru	equ	0xFF8
  9429                           tblptrh	equ	0xFF7
  9430                           tblptrl	equ	0xFF6
  9431                           tablat	equ	0xFF5
  9432                           prodh	equ	0xFF4
  9433                           prodl	equ	0xFF3
  9434                           intcon	equ	0xFF2
  9435                           indf0	equ	0xFEF
  9436                           postinc0	equ	0xFEE
  9437                           plusw0	equ	0xFEB
  9438                           fsr0h	equ	0xFEA
  9439                           fsr0l	equ	0xFE9
  9440                           wreg	equ	0xFE8
  9441                           postinc1	equ	0xFE6
  9442                           postdec1	equ	0xFE5
  9443                           plusw1	equ	0xFE3
  9444                           fsr1h	equ	0xFE2
  9445                           fsr1l	equ	0xFE1
  9446                           indf2	equ	0xFDF
  9447                           postinc2	equ	0xFDE
  9448                           postdec2	equ	0xFDD
  9449                           plusw2	equ	0xFDB
  9450                           fsr2h	equ	0xFDA
  9451                           fsr2l	equ	0xFD9
  9452                           status	equ	0xFD8
  9453                           
  9454 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9455 ;; Defined at:
  9456 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  modulation      1    wreg     enum E16925
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;  modulation      1    8[BANK0 ] enum E16925
  9461 ;; Return value:  Size  Location     Type
  9462 ;;                  1    wreg      void 
  9463 ;; Registers used:
  9464 ;;		wreg, status,2, status,0, cstack
  9465 ;; Tracked objects:
  9466 ;;		On entry : E/0
  9467 ;;		On exit  : 1/0
  9468 ;;		Unchanged: 0/0
  9469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9474 ;;Total ram usage:        1 bytes
  9475 ;; Hardware stack levels used:    1
  9476 ;; Hardware stack levels required when called:   10
  9477 ;; This function calls:
  9478 ;;		_RADIO_RegisterWrite
  9479 ;; This function is called by:
  9480 ;;		_RADIO_DIO0
  9481 ;;		_RADIO_DIO1
  9482 ;;		_RADIO_DIO2
  9483 ;;		_RADIO_DIO3
  9484 ;;		_RADIO_DIO4
  9485 ;;		_RADIO_DIO5
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text51
  9490  005E74                     __ptext51:
  9491                           	opt stack 0
  9492  005E74                     _RADIO_UnhandledInterrupt:
  9493                           	opt stack 18
  9494                           
  9495                           ;incstack = 0
  9496                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  9497  005E74  0100               	movlb	0	; () banked
  9498  005E76  6F68               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  9499                           
  9500                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  9501  005E78  0568               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  9502  005E7A  E104               	bnz	l14958
  9503                           
  9504                           ; BSR set to: 0
  9505                           ;radio_driver_SX1276.c: 1145: {
  9506                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  9507  005E7C  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  9508  005E7E  0E12               	movlw	18
  9509  005E80  EF79  F02F         	goto	_RADIO_RegisterWrite
  9510  005E84                     l14958:
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;radio_driver_SX1276.c: 1148: else
  9514                           ;radio_driver_SX1276.c: 1149: {
  9515                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  9516  005E84  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  9517  005E86  0E3E               	movlw	62
  9518  005E88  EC79  F02F         	call	_RADIO_RegisterWrite
  9519                           
  9520                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  9521  005E8C  ECEE  F008         	call	PL464	;call to abstracted procedure
  9522  005E90  EF79  F02F         	goto	_RADIO_RegisterWrite
  9523  005E94                     __end_of_RADIO_UnhandledInterrupt:
  9524                           	opt stack 0
  9525                           tosu	equ	0xFFF
  9526                           tosh	equ	0xFFE
  9527                           tosl	equ	0xFFD
  9528                           pclath	equ	0xFFA
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           indf0	equ	0xFEF
  9537                           postinc0	equ	0xFEE
  9538                           plusw0	equ	0xFEB
  9539                           fsr0h	equ	0xFEA
  9540                           fsr0l	equ	0xFE9
  9541                           wreg	equ	0xFE8
  9542                           postinc1	equ	0xFE6
  9543                           postdec1	equ	0xFE5
  9544                           plusw1	equ	0xFE3
  9545                           fsr1h	equ	0xFE2
  9546                           fsr1l	equ	0xFE1
  9547                           indf2	equ	0xFDF
  9548                           postinc2	equ	0xFDE
  9549                           postdec2	equ	0xFDD
  9550                           plusw2	equ	0xFDB
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function _RADIO_TxDone *****************
  9556 ;; Defined at:
  9557 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;		None
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  timeOnAir       4  120[BANK0 ] unsigned long 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      void 
  9564 ;; Registers used:
  9565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : E/0
  9568 ;;		On exit  : C/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9572 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9574 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9575 ;;Total ram usage:        8 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:   15
  9578 ;; This function calls:
  9579 ;;		_LORAWAN_TxDone
  9580 ;;		_RADIO_RegisterWrite
  9581 ;;		_RADIO_WriteMode
  9582 ;;		_SwTimerReadValue
  9583 ;;		_SwTimerStop
  9584 ;;		___lmul
  9585 ;; This function is called by:
  9586 ;;		_RADIO_DIO0
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text52
  9591  0044C6                     __ptext52:
  9592                           	opt stack 0
  9593  0044C6                     _RADIO_TxDone:
  9594                           	opt stack 13
  9595                           
  9596                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
  9597                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9598                           
  9599                           ;incstack = 0
  9600  0044C6  0101               	movlb	1	; () banked
  9601  0044C8  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9602  0044CA  EC9E  F030         	call	_SwTimerStop
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
  9606  0044CE  0E08               	movlw	8
  9607  0044D0  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9608  0044D2  0E12               	movlw	18
  9609  0044D4  EC79  F02F         	call	_RADIO_RegisterWrite
  9610                           
  9611                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9612  0044D8  ECA5  F02D         	call	PL86	;call to abstracted procedure
  9613  0044DC  EC75  F01B         	call	_RADIO_WriteMode
  9614                           
  9615                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
  9616  0044E0  0101               	movlb	1	; () banked
  9617  0044E2  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  9618                           
  9619                           ; BSR set to: 1
  9620                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  9621  0044E4  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  9622  0044E6  0012               	return	
  9623                           
  9624                           ; BSR set to: 1
  9625                           ;radio_driver_SX1276.c: 1087: {
  9626                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  9627  0044E8  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9628  0044EA  ECF0  F02C         	call	_SwTimerReadValue
  9629  0044EE  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  9630  0044F0  E103               	bnz	u17330
  9631  0044F2  EC1A  F01A         	call	PL320	;call to abstracted procedure
  9632  0044F6  E30F               	bnc	l14924
  9633  0044F8                     u17330:
  9634                           
  9635                           ; BSR set to: 0
  9636  0044F8  0101               	movlb	1	; () banked
  9637  0044FA  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9638  0044FC  ECF0  F02C         	call	_SwTimerReadValue
  9639  004500  0E0D               	movlw	13
  9640  004502  D002               	goto	u17340
  9641  004504                     u17345:
  9642  004504  EC21  F01A         	call	PL350	;call to abstracted procedure
  9643  004508                     u17340:
  9644  004508  2EE8               	decfsz	wreg,f,c
  9645  00450A  D7FC               	goto	u17345
  9646  00450C  EC01  F01A         	call	PL38	;call to abstracted procedure
  9647  004510  EC34  F02A         	call	___lmul	;wreg free
  9648  004514  D00E               	goto	L4
  9649  004516                     l14924:
  9650                           
  9651                           ; BSR set to: 0
  9652  004516  0101               	movlb	1	; () banked
  9653  004518  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9654  00451A  ECF0  F02C         	call	_SwTimerReadValue
  9655  00451E  EC01  F01A         	call	PL38	;call to abstracted procedure
  9656  004522  EC34  F02A         	call	___lmul	;wreg free
  9657  004526  0E0D               	movlw	13
  9658  004528  D002               	goto	u17350
  9659  00452A                     u17355:
  9660  00452A  EC0F  F01A         	call	PL238	;call to abstracted procedure
  9661  00452E                     u17350:
  9662  00452E  2EE8               	decfsz	wreg,f,c
  9663  004530  D7FC               	goto	u17355
  9664  004532                     L4:
  9665  004532  C094  F0DC         	movff	?___lmul,_RADIO_TxDone$1071
  9666  004536  C095  F0DD         	movff	?___lmul+1,_RADIO_TxDone$1071+1
  9667  00453A  C096  F0DE         	movff	?___lmul+2,_RADIO_TxDone$1071+2
  9668  00453E  C097  F0DF         	movff	?___lmul+3,_RADIO_TxDone$1071+3
  9669                           
  9670                           ; BSR set to: 0
  9671  004542  51DC               	movf	_RADIO_TxDone$1071& (0+255),w,b
  9672  004544  0820               	sublw	32
  9673  004546  6FD8               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  9674  004548  0E4E               	movlw	78
  9675  00454A  55DD               	subfwb	(_RADIO_TxDone$1071+1)& (0+255),w,b
  9676  00454C  6FD9               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  9677  00454E  0E00               	movlw	0
  9678  004550  55DE               	subfwb	(_RADIO_TxDone$1071+2)& (0+255),w,b
  9679  004552  6FDA               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  9680  004554  0E00               	movlw	0
  9681  004556  55DF               	subfwb	(_RADIO_TxDone$1071+3)& (0+255),w,b
  9682  004558  6FDB               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
  9686  00455A  C0D8  F0B4         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  9687  00455E  C0D9  F0B5         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  9688  004562  EF75  F004         	goto	_LORAWAN_TxDone	;wreg free
  9689  004566                     __end_of_RADIO_TxDone:
  9690                           	opt stack 0
  9691                           tosu	equ	0xFFF
  9692                           tosh	equ	0xFFE
  9693                           tosl	equ	0xFFD
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           indf0	equ	0xFEF
  9703                           postinc0	equ	0xFEE
  9704                           plusw0	equ	0xFEB
  9705                           fsr0h	equ	0xFEA
  9706                           fsr0l	equ	0xFE9
  9707                           wreg	equ	0xFE8
  9708                           postinc1	equ	0xFE6
  9709                           postdec1	equ	0xFE5
  9710                           plusw1	equ	0xFE3
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           plusw2	equ	0xFDB
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _RADIO_RxDone *****************
  9722 ;; Defined at:
  9723 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  i               1  142[BANK0 ] unsigned char 
  9728 ;;  irqFlags        1  141[BANK0 ] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9733 ;; Tracked objects:
  9734 ;;		On entry : E/0
  9735 ;;		On exit  : C/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:   16
  9745 ;; This function calls:
  9746 ;;		_HALSPICSAssert
  9747 ;;		_HALSPICSDeassert
  9748 ;;		_HALSPISend
  9749 ;;		_LORAWAN_RxDone
  9750 ;;		_RADIO_RegisterRead
  9751 ;;		_RADIO_RegisterWrite
  9752 ;;		_RADIO_WriteMode
  9753 ;;		_SwTimerStop
  9754 ;;		___abdiv
  9755 ;; This function is called by:
  9756 ;;		_RADIO_DIO0
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text53
  9761  003EBA                     __ptext53:
  9762                           	opt stack 0
  9763  003EBA                     _RADIO_RxDone:
  9764                           	opt stack 12
  9765                           
  9766                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
  9767                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
  9768                           
  9769                           ;incstack = 0
  9770  003EBA  0E12               	movlw	18
  9771  003EBC  EC8D  F02E         	call	_RADIO_RegisterRead
  9772  003EC0  6FED               	movwf	RADIO_RxDone@irqFlags& (0+255),b
  9773                           
  9774                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  9775  003EC2  0E70               	movlw	112
  9776  003EC4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9777  003EC6  0E12               	movlw	18
  9778  003EC8  EC79  F02F         	call	_RADIO_RegisterWrite
  9779                           
  9780                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
  9781  003ECC  0100               	movlb	0	; () banked
  9782  003ECE  51ED               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  9783  003ED0  0B50               	andlw	80
  9784  003ED2  0A50               	xorlw	80
  9785  003ED4  A4D8               	btfss	status,2,c
  9786  003ED6  0012               	return	
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;radio_driver_SX1276.c: 969: {
  9790                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9791  003ED8  0101               	movlb	1	; () banked
  9792  003EDA  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9793  003EDC  EC9E  F030         	call	_SwTimerStop
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
  9797  003EE0  0E1C               	movlw	28
  9798  003EE2  EC8D  F02E         	call	_RADIO_RegisterRead
  9799  003EE6  6FEE               	movwf	RADIO_RxDone@i& (0+255),b
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
  9803  003EE8  0101               	movlb	1	; () banked
  9804  003EEA  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
  9805  003EEC  E004               	bz	l14826
  9806                           
  9807                           ; BSR set to: 1
  9808  003EEE  0100               	movlb	0	; () banked
  9809  003EF0  ABED               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  9810                           
  9811                           ; BSR set to: 0
  9812  003EF2  ADEE               	btfss	RADIO_RxDone@i& (0+255),6,b
  9813  003EF4  D031               	goto	l14848
  9814  003EF6                     l14826:
  9815                           
  9816                           ;radio_driver_SX1276.c: 976: {
  9817                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
  9818  003EF6  0E13               	movlw	19
  9819  003EF8  EC8D  F02E         	call	_RADIO_RegisterRead
  9820  003EFC  0101               	movlb	1	; () banked
  9821  003EFE  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
  9822                           
  9823                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
  9824  003F00  ECF1  F008         	call	PL474	;call to abstracted procedure
  9825  003F04  EC79  F02F         	call	_RADIO_RegisterWrite
  9826                           
  9827                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
  9828  003F08  EC48  F031         	call	_HALSPICSAssert	;wreg free
  9829                           
  9830                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
  9831  003F0C  0E00               	movlw	0
  9832  003F0E  ECFB  F030         	call	_HALSPISend
  9833                           
  9834                           ; BSR set to: 14
  9835                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9836  003F12  0100               	movlb	0	; () banked
  9837  003F14  6BEE               	clrf	RADIO_RxDone@i& (0+255),b
  9838  003F16  D008               	goto	l14838
  9839  003F18                     l14834:
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;radio_driver_SX1276.c: 990: {
  9843                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9844  003F18  51EE               	movf	RADIO_RxDone@i& (0+255),w,b
  9845  003F1A  ECF4  F022         	call	PL274	;call to abstracted procedure
  9846  003F1E  ECFB  F030         	call	_HALSPISend
  9847  003F22  6EDF               	movwf	indf2,c
  9848                           
  9849                           ; BSR set to: 14
  9850  003F24  0100               	movlb	0	; () banked
  9851  003F26  2BEE               	incf	RADIO_RxDone@i& (0+255),f,b
  9852  003F28                     l14838:
  9853                           
  9854                           ; BSR set to: 0
  9855  003F28  0101               	movlb	1	; () banked
  9856  003F2A  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
  9857  003F2C  0100               	movlb	0	; () banked
  9858  003F2E  5DEE               	subwf	RADIO_RxDone@i& (0+255),w,b
  9859  003F30  E3F3               	bnc	l14834
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;radio_driver_SX1276.c: 992: }
  9863                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
  9864  003F32  EC46  F031         	call	_HALSPICSDeassert	;wreg free
  9865                           
  9866                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
  9867  003F36  0101               	movlb	1	; () banked
  9868  003F38  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9869                           
  9870                           ; BSR set to: 1
  9871                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  9872  003F3A  0E19               	movlw	25
  9873  003F3C  EC8D  F02E         	call	_RADIO_RegisterRead
  9874  003F40  0101               	movlb	1	; () banked
  9875  003F42  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9876                           
  9877                           ; BSR set to: 1
  9878                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
  9879  003F44  0E04               	movlw	4
  9880  003F46  0100               	movlb	0	; () banked
  9881  003F48  6F64               	movwf	___abdiv@divisor& (0+255),b
  9882  003F4A  0101               	movlb	1	; () banked
  9883  003F4C  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
  9884  003F4E  ECF6  F028         	call	___abdiv
  9885  003F52  0101               	movlb	1	; () banked
  9886  003F54  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9887                           
  9888                           ;radio_driver_SX1276.c: 998: }
  9889  003F56  D002               	goto	l14850
  9890  003F58                     l14848:
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;radio_driver_SX1276.c: 999: else
  9894                           ;radio_driver_SX1276.c: 1000: {
  9895                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
  9896  003F58  0101               	movlb	1	; () banked
  9897  003F5A  8798               	bsf	(_RadioConfiguration+35)& (0+255),3,b
  9898  003F5C                     l14850:
  9899                           
  9900                           ; BSR set to: 1
  9901                           ;radio_driver_SX1276.c: 1003: }
  9902                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9903  003F5C  ECA5  F02D         	call	PL86	;call to abstracted procedure
  9904  003F60  EC75  F01B         	call	_RADIO_WriteMode
  9905                           
  9906                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
  9907  003F64  0101               	movlb	1	; () banked
  9908  003F66  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9909                           
  9910                           ; BSR set to: 1
  9911                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9912  003F68  ECFB  F022         	call	PL304	;call to abstracted procedure
  9913  003F6C  EF45  F000         	goto	_LORAWAN_RxDone	;wreg free
  9914  003F70                     __end_of_RADIO_RxDone:
  9915                           	opt stack 0
  9916                           tosu	equ	0xFFF
  9917                           tosh	equ	0xFFE
  9918                           tosl	equ	0xFFD
  9919                           pclath	equ	0xFFA
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           indf0	equ	0xFEF
  9928                           postinc0	equ	0xFEE
  9929                           plusw0	equ	0xFEB
  9930                           fsr0h	equ	0xFEA
  9931                           fsr0l	equ	0xFE9
  9932                           wreg	equ	0xFE8
  9933                           postinc1	equ	0xFE6
  9934                           postdec1	equ	0xFE5
  9935                           plusw1	equ	0xFE3
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           plusw2	equ	0xFDB
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function ___abdiv *****************
  9947 ;; Defined at:
  9948 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\abdiv.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  dividend        1    wreg     char 
  9951 ;;  divisor         1    4[BANK0 ] char 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  dividend        1    8[BANK0 ] char 
  9954 ;;  quotient        1    7[BANK0 ] char 
  9955 ;;  sign            1    6[BANK0 ] unsigned char 
  9956 ;;  counter         1    5[BANK0 ] unsigned char 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      char 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0
  9961 ;; Tracked objects:
  9962 ;;		On entry : F/1
  9963 ;;		On exit  : F/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9966 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9967 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9969 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9970 ;;Total ram usage:        5 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    7
  9973 ;; This function calls:
  9974 ;;		Nothing
  9975 ;; This function is called by:
  9976 ;;		_RADIO_RxDone
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	text54
  9981  0051EC                     __ptext54:
  9982                           	opt stack 0
  9983  0051EC                     ___abdiv:
  9984                           	opt stack 20
  9985                           
  9986                           ;incstack = 0
  9987                           ;___abdiv@dividend stored from wreg
  9988  0051EC  0100               	movlb	0	; () banked
  9989  0051EE  6F68               	movwf	___abdiv@dividend& (0+255),b
  9990  0051F0  6B66               	clrf	___abdiv@sign& (0+255),b
  9991                           
  9992                           ; BSR set to: 0
  9993  0051F2  AF64               	btfss	___abdiv@divisor& (0+255),7,b
  9994  0051F4  D003               	goto	l14718
  9995                           
  9996                           ; BSR set to: 0
  9997  0051F6  6D64               	negf	___abdiv@divisor& (0+255),b
  9998                           
  9999                           ; BSR set to: 0
 10000  0051F8  0E01               	movlw	1
 10001  0051FA  6F66               	movwf	___abdiv@sign& (0+255),b
 10002  0051FC                     l14718:
 10003                           
 10004                           ; BSR set to: 0
 10005  0051FC  AF68               	btfss	___abdiv@dividend& (0+255),7,b
 10006  0051FE  D003               	goto	l14724
 10007                           
 10008                           ; BSR set to: 0
 10009  005200  6D68               	negf	___abdiv@dividend& (0+255),b
 10010                           
 10011                           ; BSR set to: 0
 10012  005202  0E01               	movlw	1
 10013  005204  1B66               	xorwf	___abdiv@sign& (0+255),f,b
 10014  005206                     l14724:
 10015                           
 10016                           ; BSR set to: 0
 10017  005206  6B67               	clrf	___abdiv@quotient& (0+255),b
 10018                           
 10019                           ; BSR set to: 0
 10020  005208  5164               	movf	___abdiv@divisor& (0+255),w,b
 10021  00520A  E014               	bz	l14746
 10022                           
 10023                           ; BSR set to: 0
 10024  00520C  0E01               	movlw	1
 10025  00520E  6F65               	movwf	___abdiv@counter& (0+255),b
 10026  005210  D003               	goto	l14734
 10027  005212                     l14730:
 10028                           
 10029                           ; BSR set to: 0
 10030  005212  90D8               	bcf	status,0,c
 10031  005214  3764               	rlcf	___abdiv@divisor& (0+255),f,b
 10032                           
 10033                           ; BSR set to: 0
 10034  005216  2B65               	incf	___abdiv@counter& (0+255),f,b
 10035  005218                     l14734:
 10036                           
 10037                           ; BSR set to: 0
 10038  005218  AF64               	btfss	___abdiv@divisor& (0+255),7,b
 10039  00521A  D7FB               	goto	l14730
 10040  00521C                     l14736:
 10041                           
 10042                           ; BSR set to: 0
 10043  00521C  90D8               	bcf	status,0,c
 10044  00521E  3767               	rlcf	___abdiv@quotient& (0+255),f,b
 10045  005220  5164               	movf	___abdiv@divisor& (0+255),w,b
 10046  005222  5D68               	subwf	___abdiv@dividend& (0+255),w,b
 10047  005224  E303               	bnc	l14742
 10048                           
 10049                           ; BSR set to: 0
 10050  005226  5164               	movf	___abdiv@divisor& (0+255),w,b
 10051  005228  5F68               	subwf	___abdiv@dividend& (0+255),f,b
 10052                           
 10053                           ; BSR set to: 0
 10054  00522A  8167               	bsf	___abdiv@quotient& (0+255),0,b
 10055  00522C                     l14742:
 10056                           
 10057                           ; BSR set to: 0
 10058  00522C  90D8               	bcf	status,0,c
 10059  00522E  3364               	rrcf	___abdiv@divisor& (0+255),f,b
 10060                           
 10061                           ; BSR set to: 0
 10062  005230  2F65               	decfsz	___abdiv@counter& (0+255),f,b
 10063  005232  D7F4               	goto	l14736
 10064  005234                     l14746:
 10065                           
 10066                           ; BSR set to: 0
 10067  005234  5166               	movf	___abdiv@sign& (0+255),w,b
 10068  005236  E001               	bz	l14750
 10069                           
 10070                           ; BSR set to: 0
 10071  005238  6D67               	negf	___abdiv@quotient& (0+255),b
 10072  00523A                     l14750:
 10073                           
 10074                           ; BSR set to: 0
 10075  00523A  5167               	movf	___abdiv@quotient& (0+255),w,b
 10076                           
 10077                           ; BSR set to: 0
 10078  00523C  0012               	return		;funcret
 10079  00523E                     __end_of___abdiv:
 10080                           	opt stack 0
 10081                           tosu	equ	0xFFF
 10082                           tosh	equ	0xFFE
 10083                           tosl	equ	0xFFD
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           indf0	equ	0xFEF
 10093                           postinc0	equ	0xFEE
 10094                           plusw0	equ	0xFEB
 10095                           fsr0h	equ	0xFEA
 10096                           fsr0l	equ	0xFE9
 10097                           wreg	equ	0xFE8
 10098                           postinc1	equ	0xFE6
 10099                           postdec1	equ	0xFE5
 10100                           plusw1	equ	0xFE3
 10101                           fsr1h	equ	0xFE2
 10102                           fsr1l	equ	0xFE1
 10103                           indf2	equ	0xFDF
 10104                           postinc2	equ	0xFDE
 10105                           postdec2	equ	0xFDD
 10106                           plusw2	equ	0xFDB
 10107                           fsr2h	equ	0xFDA
 10108                           fsr2l	equ	0xFD9
 10109                           status	equ	0xFD8
 10110                           
 10111 ;; *************** function _RADIO_FSKPayloadReady *****************
 10112 ;; Defined at:
 10113 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  i               1  142[BANK0 ] unsigned char 
 10118 ;;  irqFlags        1  141[BANK0 ] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : F/0
 10125 ;;		On exit  : C/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10132 ;;Total ram usage:        2 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:   16
 10135 ;; This function calls:
 10136 ;;		_HALSPICSAssert
 10137 ;;		_HALSPICSDeassert
 10138 ;;		_HALSPISend
 10139 ;;		_LORAWAN_RxDone
 10140 ;;		_LORAWAN_RxTimeout
 10141 ;;		_RADIO_RegisterRead
 10142 ;;		_RADIO_WriteMode
 10143 ;;		_SwTimerStop
 10144 ;; This function is called by:
 10145 ;;		_RADIO_DIO0
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           	psect	text55
 10150  004566                     __ptext55:
 10151                           	opt stack 0
 10152  004566                     _RADIO_FSKPayloadReady:
 10153                           	opt stack 12
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
 10157                           ;radio_driver_SX1276.c: 1013: uint8_t i;
 10158                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;incstack = 0
 10162  004566  0E3F               	movlw	63
 10163  004568  EC8D  F02E         	call	_RADIO_RegisterRead
 10164  00456C  6FED               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10165                           
 10166                           ; BSR set to: 0
 10167                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10168  00456E  A5ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10169  004570  0012               	return	
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;radio_driver_SX1276.c: 1017: {
 10173                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10174  004572  0101               	movlb	1	; () banked
 10175  004574  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10176  004576  EC9E  F030         	call	_SwTimerStop
 10177                           
 10178                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10179  00457A  0101               	movlb	1	; () banked
 10180  00457C  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 10181  00457E  EC9E  F030         	call	_SwTimerStop
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
 10185  004582  EC48  F031         	call	_HALSPICSAssert	;wreg free
 10186                           
 10187                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
 10188  004586  0E00               	movlw	0
 10189  004588  ECFB  F030         	call	_HALSPISend
 10190                           
 10191                           ; BSR set to: 14
 10192                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10193  00458C  0EFF               	movlw	255
 10194  00458E  ECFB  F030         	call	_HALSPISend
 10195  004592  0101               	movlb	1	; () banked
 10196  004594  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
 10197                           
 10198                           ; BSR set to: 1
 10199                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10200  004596  0100               	movlb	0	; () banked
 10201  004598  6BEE               	clrf	RADIO_FSKPayloadReady@i& (0+255),b
 10202  00459A  D007               	goto	l14874
 10203  00459C                     l14870:
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;radio_driver_SX1276.c: 1029: {
 10207                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10208  00459C  51EE               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10209  00459E  D824               	call	PL274	;call to abstracted procedure
 10210  0045A0  ECFB  F030         	call	_HALSPISend
 10211  0045A4  6EDF               	movwf	indf2,c
 10212                           
 10213                           ; BSR set to: 14
 10214  0045A6  0100               	movlb	0	; () banked
 10215  0045A8  2BEE               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10216  0045AA                     l14874:
 10217                           
 10218                           ; BSR set to: 0
 10219  0045AA  0101               	movlb	1	; () banked
 10220  0045AC  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10221  0045AE  0100               	movlb	0	; () banked
 10222  0045B0  5DEE               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10223  0045B2  E3F4               	bnc	l14870
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;radio_driver_SX1276.c: 1031: }
 10227                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
 10228  0045B4  EC46  F031         	call	_HALSPICSDeassert	;wreg free
 10229                           
 10230                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10231  0045B8  ECA5  F02D         	call	PL86	;call to abstracted procedure
 10232  0045BC  EC75  F01B         	call	_RADIO_WriteMode
 10233                           
 10234                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
 10235  0045C0  0101               	movlb	1	; () banked
 10236  0045C2  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10237                           
 10238                           ; BSR set to: 1
 10239                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
 10240  0045C4  0E80               	movlw	128
 10241  0045C6  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
 10242                           
 10243                           ; BSR set to: 1
 10244                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
 10245  0045C8  0591               	decf	(_RadioConfiguration+28)& (0+255),w,b
 10246  0045CA  E103               	bnz	l14888
 10247                           
 10248                           ; BSR set to: 1
 10249                           ;radio_driver_SX1276.c: 1040: {
 10250                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10251  0045CC  0100               	movlb	0	; () banked
 10252  0045CE  A3ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10253  0045D0  D003               	goto	l14890
 10254  0045D2                     l14888:
 10255                           
 10256                           ;radio_driver_SX1276.c: 1042: {
 10257                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
 10258  0045D2  0101               	movlb	1	; () banked
 10259  0045D4  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10260                           
 10261                           ;radio_driver_SX1276.c: 1044: }
 10262  0045D6  D002               	goto	l14894
 10263  0045D8                     l14890:
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;radio_driver_SX1276.c: 1045: else
 10267                           ;radio_driver_SX1276.c: 1046: {
 10268                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
 10269  0045D8  0101               	movlb	1	; () banked
 10270  0045DA  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10271  0045DC                     l14894:
 10272                           
 10273                           ; BSR set to: 1
 10274                           ;radio_driver_SX1276.c: 1053: }
 10275                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10276  0045DC  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10277  0045DE  EFCE  F00C         	goto	_LORAWAN_RxTimeout
 10278                           
 10279                           ; BSR set to: 1
 10280                           ;radio_driver_SX1276.c: 1056: {
 10281                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10282  0045E2  D809               	call	PL304	;call to abstracted procedure
 10283  0045E4  EF45  F000         	goto	_LORAWAN_RxDone	;wreg free
 10284  0045E8                     __end_of_RADIO_FSKPayloadReady:
 10285                           	opt stack 0
 10286  0045E8                     PL274:
 10287                           	opt stack 12
 10288  0045E8  0101               	movlb	1	; () banked
 10289  0045EA  259A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10290  0045EC  6ED9               	movwf	fsr2l,c
 10291  0045EE  0E00               	movlw	0
 10292  0045F0  219B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10293  0045F2  6EDA               	movwf	fsr2h,c
 10294  0045F4  0CFF               	retlw	255
 10295  0045F6                     __end_ofPL274:
 10296                           	opt stack 0
 10297  0045F6                     PL304:
 10298                           	opt stack 12
 10299  0045F6  C19A  F16B         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10300  0045FA  C19B  F16C         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10301  0045FE  C199  F16D         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10302  004602  0012               	return	
 10303  004604                     __end_ofPL304:
 10304                           	opt stack 0
 10305                           tosu	equ	0xFFF
 10306                           tosh	equ	0xFFE
 10307                           tosl	equ	0xFFD
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           indf0	equ	0xFEF
 10317                           postinc0	equ	0xFEE
 10318                           plusw0	equ	0xFEB
 10319                           fsr0h	equ	0xFEA
 10320                           fsr0l	equ	0xFE9
 10321                           wreg	equ	0xFE8
 10322                           postinc1	equ	0xFE6
 10323                           postdec1	equ	0xFE5
 10324                           plusw1	equ	0xFE3
 10325                           fsr1h	equ	0xFE2
 10326                           fsr1l	equ	0xFE1
 10327                           indf2	equ	0xFDF
 10328                           postinc2	equ	0xFDE
 10329                           postdec2	equ	0xFDD
 10330                           plusw2	equ	0xFDB
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function _LORAWAN_RxTimeout *****************
 10336 ;; Defined at:
 10337 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  minim           4   95[BANK0 ] unsigned long 
 10342 ;;  i               1   99[BANK0 ] unsigned char 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      void 
 10345 ;; Registers used:
 10346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : F/1
 10349 ;;		On exit  : C/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10353 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10354 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10355 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10356 ;;Total ram usage:        9 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:   15
 10359 ;; This function calls:
 10360 ;;		_LORAWAN_ReceiveWindow2Callback
 10361 ;;		_RADIO_Transmit
 10362 ;;		_ResetParametersForConfirmedTransmission
 10363 ;;		_ResetParametersForUnconfirmedTransmission
 10364 ;;		_RxDataDone
 10365 ;;		_SelectChannelForTransmission
 10366 ;;		_SetJoinFailState
 10367 ;;		_SwTimerSetTimeout
 10368 ;;		_SwTimerStart
 10369 ;;		___lldiv
 10370 ;; This function is called by:
 10371 ;;		_RADIO_FSKPayloadReady
 10372 ;;		_RADIO_RxTimeout
 10373 ;;		_RADIO_RxFSKTimeout
 10374 ;;		_RADIO_WatchdogTimeout
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text56
 10379  00199C                     __ptext56:
 10380                           	opt stack 0
 10381  00199C                     _LORAWAN_RxTimeout:
 10382                           	opt stack 12
 10383                           
 10384                           ; BSR set to: 1
 10385                           ;lorawan_eu.c: 466: uint8_t i;
 10386                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
 10387                           
 10388                           ;incstack = 0
 10389  00199C  0100               	movlb	0	; () banked
 10390  00199E  69BF               	setf	LORAWAN_RxTimeout@minim& (0+255),b
 10391  0019A0  69C0               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
 10392  0019A2  69C1               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
 10393  0019A4  69C2               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
 10394                           
 10395                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
 10396  0019A6  0102               	movlb	2	; () banked
 10397  0019A8  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10398  0019AA  D0EB               	goto	l14610
 10399                           
 10400                           ; BSR set to: 2
 10401                           ;lorawan_eu.c: 470: {
 10402                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
 10403  0019AC  5102               	movf	(_loRa+2)& (0+255),w,b
 10404  0019AE  0B0F               	andlw	15
 10405  0019B0  0A03               	xorlw	3
 10406  0019B2  E10E               	bnz	l1070
 10407                           
 10408                           ; BSR set to: 2
 10409                           ;lorawan_eu.c: 473: {
 10410                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
 10411  0019B4  5112               	movf	(_loRa+18)& (0+255),w,b
 10412  0019B6  E105               	bnz	l14546
 10413                           
 10414                           ; BSR set to: 2
 10415                           ;lorawan_eu.c: 475: {
 10416                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 10417  0019B8  5102               	movf	(_loRa+2)& (0+255),w,b
 10418  0019BA  0BF0               	andlw	-16
 10419  0019BC  0904               	iorlw	4
 10420  0019BE  6F02               	movwf	(_loRa+2)& (0+255),b
 10421                           
 10422                           ;lorawan_eu.c: 477: }
 10423  0019C0  0012               	return	
 10424  0019C2                     l14546:
 10425                           
 10426                           ; BSR set to: 2
 10427                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
 10428  0019C2  0E02               	movlw	2
 10429  0019C4  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10430  0019C6  A4D8               	btfss	status,2,c
 10431  0019C8  0012               	return	
 10432                           
 10433                           ; BSR set to: 2
 10434                           ;lorawan_eu.c: 479: {
 10435                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
 10436  0019CA  6AE6               	clrf	postinc1,c
 10437  0019CC  EF02  F01F         	goto	_LORAWAN_ReceiveWindow2Callback	;wreg free
 10438  0019D0                     l1070:
 10439                           
 10440                           ; BSR set to: 2
 10441                           ;lorawan_eu.c: 483: else
 10442                           ;lorawan_eu.c: 484: {
 10443                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
 10444  0019D0  B500               	btfsc	_loRa& (0+255),2,b
 10445                           
 10446                           ; BSR set to: 2
 10447                           ;lorawan_eu.c: 487: {
 10448                           ;lorawan_eu.c: 488: SetJoinFailState();
 10449  0019D2  EFA0  F02E         	goto	_SetJoinFailState	;wreg free
 10450                           
 10451                           ; BSR set to: 2
 10452                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
 10453                           
 10454                           ;lorawan_eu.c: 489: }
 10455  0019D6  A902               	btfss	(_loRa+2)& (0+255),4,b
 10456  0019D8  0012               	return	
 10457                           
 10458                           ; BSR set to: 2
 10459                           ;lorawan_eu.c: 492: {
 10460                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 10461  0019DA  A100               	btfss	_loRa& (0+255),0,b
 10462  0019DC  D03B               	goto	l14568
 10463                           
 10464                           ; BSR set to: 2
 10465                           ;lorawan_eu.c: 494: {
 10466                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
 10467  0019DE  51D9               	movf	(_loRa+217)& (0+255),w,b
 10468  0019E0  5DD7               	subwf	(_loRa+215)& (0+255),w,b
 10469  0019E2  E325               	bnc	l14562
 10470                           
 10471                           ; BSR set to: 2
 10472                           ;lorawan_eu.c: 496: {
 10473                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10474  0019E4  D8E3               	call	PL254	;call to abstracted procedure
 10475                           
 10476                           ; BSR set to: 2
 10477                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
 10478  0019E6  51A0               	movf	(_loRa+160)& (0+255),w,b
 10479  0019E8  0100               	movlb	0	; () banked
 10480  0019EA  6FBB               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10481  0019EC  0102               	movlb	2	; () banked
 10482  0019EE  51A1               	movf	(_loRa+161)& (0+255),w,b
 10483  0019F0  0100               	movlb	0	; () banked
 10484  0019F2  6FBC               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
 10485  0019F4  6BBD               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
 10486  0019F6  6BBE               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
 10487  0019F8  0E0C               	movlw	12
 10488  0019FA                     u16695:
 10489  0019FA  90D8               	bcf	status,0,c
 10490  0019FC  D8E0               	call	PL438	;call to abstracted procedure
 10491  0019FE  2EE8               	decfsz	wreg,f,c
 10492  001A00  D7FC               	goto	u16695
 10493  001A02  C0BB  F064         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
 10494  001A06  C0BC  F065         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
 10495  001A0A  C0BD  F066         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
 10496  001A0E  C0BE  F067         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
 10497  001A12  0E7D               	movlw	125
 10498  001A14  EC99  F011         	call	PL32	;call to abstracted procedure
 10499  001A18  EC55  F025         	call	___lldiv	;wreg free
 10500  001A1C  EC93  F006         	call	PL22	;call to abstracted procedure
 10501  001A20  51E8               	movf	(_loRa+232)& (0+255),w,b
 10502  001A22  EC4F  F02C         	call	_SwTimerSetTimeout
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
 10506  001A26  0102               	movlb	2	; () banked
 10507  001A28  51E8               	movf	(_loRa+232)& (0+255),w,b
 10508  001A2A  EFFE  F025         	goto	_SwTimerStart
 10509  001A2E                     l14562:
 10510                           
 10511                           ; BSR set to: 2
 10512                           ;lorawan_eu.c: 501: else
 10513                           ;lorawan_eu.c: 502: {
 10514                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
 10515  001A2E  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 10516                           
 10517                           ; BSR set to: 2
 10518                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
 10519  001A32  0101               	movlb	1	; () banked
 10520  001A34  516E               	movf	_rxPayload& (0+255),w,b
 10521  001A36  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10522  001A38  B4D8               	btfsc	status,2,c
 10523  001A3A  0012               	return	
 10524  001A3C                     l14566:
 10525                           
 10526                           ; BSR set to: 1
 10527                           ;lorawan_eu.c: 505: {
 10528                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 10529  001A3C  D8B2               	call	PL82	;call to abstracted procedure
 10530  001A3E  6B67               	clrf	RxDataDone@status& (0+255),b
 10531  001A40  0005               	push	
 10532  001A42  6AFA               	clrf	pclath,c
 10533  001A44  0101               	movlb	1	; () banked
 10534  001A46  516E               	movf	_rxPayload& (0+255),w,b
 10535  001A48  6EFD               	movwf	tosl,c
 10536  001A4A  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10537  001A4C  6EFE               	movwf	tosh,c
 10538  001A4E  6AFF               	clrf	tosu,c
 10539  001A50  50FA               	movf	pclath,w,c
 10540  001A52  0012               	return		;indir
 10541  001A54                     l14568:
 10542                           
 10543                           ; BSR set to: 2
 10544                           ;lorawan_eu.c: 511: else
 10545                           ;lorawan_eu.c: 512: {
 10546                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
 10547  001A54  51D8               	movf	(_loRa+216)& (0+255),w,b
 10548  001A56  5DD6               	subwf	(_loRa+214)& (0+255),w,b
 10549  001A58  E201 D081          	bnc	l14604
 10550                           
 10551                           ; BSR set to: 2
 10552                           ;lorawan_eu.c: 514: {
 10553                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10554  001A5C  D8A7               	call	PL254	;call to abstracted procedure
 10555                           
 10556                           ; BSR set to: 2
 10557                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
 10558  001A5E  0E01               	movlw	1
 10559  001A60  ECCC  F026         	call	_SelectChannelForTransmission
 10560  001A64  0900               	iorlw	0
 10561  001A66  E113               	bnz	l1084
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;lorawan_eu.c: 517: {
 10565                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 10566  001A68  0EF0               	movlw	low (_macBuffer+16)
 10567  001A6A  ECB7  F025         	call	PL194	;call to abstracted procedure
 10568  001A6E  ECF0  F00E         	call	_RADIO_Transmit	;wreg free
 10569  001A72  51AA               	movf	?_RADIO_Transmit& (0+255),w,b
 10570  001A74  11AB               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 10571  001A76  E104               	bnz	l14580
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;lorawan_eu.c: 520: {
 10575                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 10576  001A78  0102               	movlb	2	; () banked
 10577  001A7A  2BD8               	incf	(_loRa+216)& (0+255),f,b
 10578                           
 10579                           ; BSR set to: 2
 10580                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 10581  001A7C  EFBD  F025         	goto	PL288	;call to abstracted procedure
 10582  001A80                     l14580:
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;lorawan_eu.c: 524: else
 10586                           ;lorawan_eu.c: 526: {
 10587                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
 10588  001A80  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10589                           
 10590                           ; BSR set to: 2
 10591                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
 10592  001A84  0101               	movlb	1	; () banked
 10593  001A86  516E               	movf	_rxPayload& (0+255),w,b
 10594  001A88  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10595  001A8A  E1D8               	bnz	l14566
 10596  001A8C  0012               	return	
 10597  001A8E                     l1084:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;lorawan_eu.c: 534: else
 10601                           ;lorawan_eu.c: 535: {
 10602                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
 10603  001A8E  6BC3               	clrf	LORAWAN_RxTimeout@i& (0+255),b
 10604  001A90  D03A               	goto	l14600
 10605  001A92                     l14586:
 10606                           
 10607                           ; BSR set to: 2
 10608                           ;lorawan_eu.c: 538: {
 10609                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 10610  001A92  0100               	movlb	0	; () banked
 10611  001A94  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10612  001A96  ECB7  F021         	call	PL12	;call to abstracted procedure
 10613  001A9A  E133               	bnz	l14598
 10614                           
 10615                           ; BSR set to: 0
 10616  001A9C  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10617  001A9E  EC71  F006         	call	PL4	;call to abstracted procedure
 10618  001AA2  ECDD  F00E         	call	PL140	;call to abstracted procedure
 10619  001AA6  E02D               	bz	l14598
 10620                           
 10621                           ; BSR set to: 0
 10622  001AA8  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10623  001AAA  EC71  F006         	call	PL4	;call to abstracted procedure
 10624  001AAE  50DE               	movf	postinc2,w,c
 10625  001AB0  5DBF               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
 10626  001AB2  50DE               	movf	postinc2,w,c
 10627  001AB4  59C0               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
 10628  001AB6  50DE               	movf	postinc2,w,c
 10629  001AB8  59C1               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
 10630  001ABA  50DE               	movf	postinc2,w,c
 10631  001ABC  59C2               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
 10632  001ABE  E321               	bnc	l14598
 10633                           
 10634                           ; BSR set to: 0
 10635  001AC0  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10636  001AC2  ECAF  F021         	call	PL6	;call to abstracted procedure
 10637  001AC6  50DF               	movf	223,w,c
 10638  001AC8  0B0F               	andlw	15
 10639  001ACA  6FBB               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10640  001ACC  51BB               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
 10641  001ACE  0102               	movlb	2	; () banked
 10642  001AD0  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 10643  001AD2  E317               	bnc	l14598
 10644                           
 10645                           ; BSR set to: 2
 10646  001AD4  0100               	movlb	0	; () banked
 10647  001AD6  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10648  001AD8  ECAF  F021         	call	PL6	;call to abstracted procedure
 10649  001ADC  38DF               	swapf	223,w,c
 10650  001ADE  0B0F               	andlw	15
 10651  001AE0  6FBB               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10652  001AE2  0102               	movlb	2	; () banked
 10653  001AE4  51DF               	movf	(_loRa+223)& (0+255),w,b
 10654  001AE6  0100               	movlb	0	; () banked
 10655  001AE8  5DBB               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10656  001AEA  E30B               	bnc	l14598
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;lorawan_eu.c: 540: {
 10660                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
 10661  001AEC  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10662  001AEE  EC71  F006         	call	PL4	;call to abstracted procedure
 10663  001AF2  CFDE F0BF          	movff	postinc2,LORAWAN_RxTimeout@minim
 10664  001AF6  CFDE F0C0          	movff	postinc2,LORAWAN_RxTimeout@minim+1
 10665  001AFA  CFDE F0C1          	movff	postinc2,LORAWAN_RxTimeout@minim+2
 10666  001AFE  CFDE F0C2          	movff	postinc2,LORAWAN_RxTimeout@minim+3
 10667  001B02                     l14598:
 10668  001B02  0100               	movlb	0	; () banked
 10669  001B04  2BC3               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
 10670  001B06                     l14600:
 10671                           
 10672                           ; BSR set to: 0
 10673  001B06  51C3               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10674  001B08  0102               	movlb	2	; () banked
 10675  001B0A  5DED               	subwf	(_loRa+237)& (0+255),w,b
 10676  001B0C  E2C2               	bc	l14586
 10677                           
 10678                           ; BSR set to: 2
 10679                           ;lorawan_eu.c: 542: }
 10680                           ;lorawan_eu.c: 543: }
 10681                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
 10682  001B0E  C0BF  F0BB         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
 10683  001B12  C0C0  F0BC         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
 10684  001B16  C0C1  F0BD         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
 10685  001B1A  C0C2  F0BE         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
 10686  001B1E  0E0C               	movlw	12
 10687  001B20                     u16825:
 10688  001B20  90D8               	bcf	status,0,c
 10689  001B22  0100               	movlb	0	; () banked
 10690  001B24  D84C               	call	PL438	;call to abstracted procedure
 10691  001B26  2EE8               	decfsz	wreg,f,c
 10692  001B28  D7FB               	goto	u16825
 10693  001B2A  0E00               	movlw	0
 10694  001B2C  25BB               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10695  001B2E  6F64               	movwf	___lldiv@dividend& (0+255),b
 10696  001B30  0E20               	movlw	32
 10697  001B32  21BC               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
 10698  001B34  6F65               	movwf	(___lldiv@dividend+1)& (0+255),b
 10699  001B36  0E03               	movlw	3
 10700  001B38  21BD               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
 10701  001B3A  6F66               	movwf	(___lldiv@dividend+2)& (0+255),b
 10702  001B3C  0E00               	movlw	0
 10703  001B3E  21BE               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
 10704  001B40  6F67               	movwf	(___lldiv@dividend+3)& (0+255),b
 10705  001B42  0E7D               	movlw	125
 10706  001B44  EC99  F011         	call	PL32	;call to abstracted procedure
 10707  001B48  EC55  F025         	call	___lldiv	;wreg free
 10708  001B4C  EC93  F006         	call	PL22	;call to abstracted procedure
 10709  001B50  51EA               	movf	(_loRa+234)& (0+255),w,b
 10710  001B52  EC4F  F02C         	call	_SwTimerSetTimeout
 10711                           
 10712                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
 10713  001B56  0102               	movlb	2	; () banked
 10714  001B58  51EA               	movf	(_loRa+234)& (0+255),w,b
 10715  001B5A  EFFE  F025         	goto	_SwTimerStart
 10716  001B5E                     l14604:
 10717                           
 10718                           ; BSR set to: 2
 10719                           ;lorawan_eu.c: 548: else
 10720                           ;lorawan_eu.c: 549: {
 10721                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
 10722  001B5E  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10723                           
 10724                           ; BSR set to: 2
 10725                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
 10726  001B62  D829               	call	PL390	;call to abstracted procedure
 10727  001B64  B4D8               	btfsc	status,2,c
 10728  001B66  0012               	return	
 10729                           
 10730                           ; BSR set to: 1
 10731                           ;lorawan_eu.c: 552: {
 10732                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
 10733  001B68  D81C               	call	PL82	;call to abstracted procedure
 10734  001B6A  0E01               	movlw	1
 10735  001B6C  6F67               	movwf	RxDataDone@status& (0+255),b
 10736  001B6E  0005               	push	
 10737  001B70  6EFA               	movwf	pclath,c
 10738  001B72  0101               	movlb	1	; () banked
 10739  001B74  516E               	movf	_rxPayload& (0+255),w,b
 10740  001B76  6EFD               	movwf	tosl,c
 10741  001B78  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10742  001B7A  6EFE               	movwf	tosh,c
 10743  001B7C  6AFF               	clrf	tosu,c
 10744  001B7E  50FA               	movf	pclath,w,c
 10745  001B80  0012               	return		;indir
 10746  001B82                     l14610:
 10747                           
 10748                           ; BSR set to: 2
 10749                           ;lorawan_eu.c: 560: else
 10750                           ;lorawan_eu.c: 561: {
 10751                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
 10752  001B82  D819               	call	PL390	;call to abstracted procedure
 10753  001B84  B4D8               	btfsc	status,2,c
 10754  001B86  0012               	return	
 10755                           
 10756                           ; BSR set to: 1
 10757                           ;lorawan_eu.c: 564: {
 10758                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 10759  001B88  D80C               	call	PL82	;call to abstracted procedure
 10760  001B8A  0E02               	movlw	2
 10761  001B8C  6F67               	movwf	RxDataDone@status& (0+255),b
 10762  001B8E  0005               	push	
 10763  001B90  6EFA               	movwf	pclath,c
 10764  001B92  0101               	movlb	1	; () banked
 10765  001B94  516E               	movf	_rxPayload& (0+255),w,b
 10766  001B96  6EFD               	movwf	tosl,c
 10767  001B98  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10768  001B9A  6EFE               	movwf	tosh,c
 10769  001B9C  6AFF               	clrf	tosu,c
 10770  001B9E  50FA               	movf	pclath,w,c
 10771  001BA0  0012               	return		;indir
 10772  001BA2                     __end_of_LORAWAN_RxTimeout:
 10773                           	opt stack 0
 10774  001BA2                     PL82:
 10775                           	opt stack 15
 10776  001BA2  0100               	movlb	0	; () banked
 10777  001BA4  6B64               	clrf	RxDataDone@pData& (0+255),b
 10778  001BA6  6B65               	clrf	(RxDataDone@pData+1)& (0+255),b
 10779  001BA8  6B66               	clrf	RxDataDone@dataLength& (0+255),b
 10780  001BAA  0012               	return	
 10781  001BAC                     __end_ofPL82:
 10782                           	opt stack 0
 10783  001BAC                     PL254:
 10784                           	opt stack 12
 10785  001BAC  5102               	movf	(_loRa+2)& (0+255),w,b
 10786  001BAE  0BF0               	andlw	-16
 10787  001BB0  0906               	iorlw	6
 10788  001BB2  6F02               	movwf	(_loRa+2)& (0+255),b
 10789  001BB4  0012               	return	
 10790  001BB6                     __end_ofPL254:
 10791                           	opt stack 0
 10792  001BB6                     PL390:
 10793                           	opt stack 12
 10794  001BB6  0101               	movlb	1	; () banked
 10795  001BB8  516E               	movf	_rxPayload& (0+255),w,b
 10796  001BBA  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10797  001BBC  0012               	return	
 10798  001BBE                     __end_ofPL390:
 10799                           	opt stack 0
 10800  001BBE                     PL438:
 10801                           	opt stack 12
 10802  001BBE  37BB               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 10803  001BC0  37BC               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 10804  001BC2  37BD               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 10805  001BC4  37BE               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 10806  001BC6  0012               	return	
 10807  001BC8                     __end_ofPL438:
 10808                           	opt stack 0
 10809                           tosu	equ	0xFFF
 10810                           tosh	equ	0xFFE
 10811                           tosl	equ	0xFFD
 10812                           pclath	equ	0xFFA
 10813                           tblptru	equ	0xFF8
 10814                           tblptrh	equ	0xFF7
 10815                           tblptrl	equ	0xFF6
 10816                           tablat	equ	0xFF5
 10817                           prodh	equ	0xFF4
 10818                           prodl	equ	0xFF3
 10819                           intcon	equ	0xFF2
 10820                           indf0	equ	0xFEF
 10821                           postinc0	equ	0xFEE
 10822                           plusw0	equ	0xFEB
 10823                           fsr0h	equ	0xFEA
 10824                           fsr0l	equ	0xFE9
 10825                           wreg	equ	0xFE8
 10826                           postinc1	equ	0xFE6
 10827                           postdec1	equ	0xFE5
 10828                           plusw1	equ	0xFE3
 10829                           fsr1h	equ	0xFE2
 10830                           fsr1l	equ	0xFE1
 10831                           indf2	equ	0xFDF
 10832                           postinc2	equ	0xFDE
 10833                           postdec2	equ	0xFDD
 10834                           plusw2	equ	0xFDB
 10835                           fsr2h	equ	0xFDA
 10836                           fsr2l	equ	0xFD9
 10837                           status	equ	0xFD8
 10838                           
 10839 ;; *************** function _LORAWAN_RxDone *****************
 10840 ;; Defined at:
 10841 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;  buffer          2  107[BANK1 ] PTR unsigned char 
 10844 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10845 ;;  bufferLength    1  109[BANK1 ] unsigned char 
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;  hdr             2   18[BANK3 ] PTR struct .
 10848 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10849 ;;  joinAccept      2   15[BANK3 ] PTR struct .
 10850 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10851 ;;  computedMic     4   11[BANK3 ] unsigned long 
 10852 ;;  extractedMic    4    3[BANK3 ] unsigned long 
 10853 ;;  packet          2    9[BANK3 ] PTR unsigned char 
 10854 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 10855 ;;  frmPayloadLe    1   17[BANK3 ] unsigned char 
 10856 ;;  temp            1    8[BANK3 ] unsigned char 
 10857 ;;  bufferIndex     1    7[BANK3 ] unsigned char 
 10858 ;;  mhdr            1    2[BANK3 ] struct .
 10859 ;;  channelIndex    1    1[BANK3 ] unsigned char 
 10860 ;;  fPort           1    0[BANK3 ] unsigned char 
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      enum E17365
 10863 ;; Registers used:
 10864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10865 ;; Tracked objects:
 10866 ;;		On entry : F/1
 10867 ;;		On exit  : C/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10870 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10871 ;;      Locals:         0       0       0       0      20       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;      Totals:         0       5       3       0      20       0       0       0       0       0       0       0       
      +0       0       0
 10874 ;;Total ram usage:       28 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:   15
 10877 ;; This function calls:
 10878 ;;		_AESCmac
 10879 ;;		_AESEncodeLoRa
 10880 ;;		_AssembleEncryptionBlock
 10881 ;;		_CheckFlags
 10882 ;;		_CheckMcastFlags
 10883 ;;		_ComputeMic
 10884 ;;		_ComputeSessionKeys
 10885 ;;		_EncryptFRMPayload
 10886 ;;		_ExtractMic
 10887 ;;		_LORAWAN_EnterContinuousReceive
 10888 ;;		_LORAWAN_Send
 10889 ;;		_MacExecuteCommands
 10890 ;;		_RADIO_GetStatus
 10891 ;;		_RADIO_ReleaseData
 10892 ;;		_RxDataDone
 10893 ;;		_SearchAvailableChannel
 10894 ;;		_SetJoinFailState
 10895 ;;		_SetReceptionNotOkState
 10896 ;;		_StartReTxTimer
 10897 ;;		_SwTimerStop
 10898 ;;		_UpdateCfList
 10899 ;;		_UpdateDLSettings
 10900 ;;		_UpdateJoinSuccessState
 10901 ;;		_UpdateReceiveDelays
 10902 ;;		_UpdateRetransmissionAckTimeoutState
 10903 ;;		_memcpy
 10904 ;; This function is called by:
 10905 ;;		_RADIO_RxDone
 10906 ;;		_RADIO_FSKPayloadReady
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	text57
 10911  00008A                     __ptext57:
 10912                           	opt stack 0
 10913  00008A                     _LORAWAN_RxDone:
 10914                           	opt stack 12
 10915                           
 10916                           ; BSR set to: 1
 10917                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 10918                           ;lorawan.c: 1124: Mhdr_t mhdr;
 10919                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 10920                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 10921                           ;lorawan.c: 1127: uint8_t *packet;
 10922                           ;lorawan.c: 1128: uint8_t temp;
 10923                           ;lorawan.c: 1130: RADIO_ReleaseData();
 10924                           
 10925                           ;incstack = 0
 10926  00008A  EC30  F031         	call	_RADIO_ReleaseData	;wreg free
 10927                           
 10928                           ; BSR set to: 1
 10929                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 10930  00008E  0102               	movlb	2	; () banked
 10931  000090  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10932  000092  D306               	goto	l14528
 10933                           
 10934                           ; BSR set to: 2
 10935                           ;lorawan.c: 1133: {
 10936                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 10937  000094  DBCC               	call	PL204	;call to abstracted procedure
 10938  000096  6FA2               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 10939                           
 10940                           ; BSR set to: 3
 10941                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 10942  000098  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10943  00009A  32E8               	rrcf	wreg,f,c
 10944  00009C  0B07               	andlw	7
 10945  00009E  06E8               	decf	wreg,f,c
 10946  0000A0  E001 D0A0          	bnz	l14200
 10947                           
 10948                           ; BSR set to: 3
 10949  0000A4  0102               	movlb	2	; () banked
 10950  0000A6  511D               	movf	(_loRa+29)& (0+255),w,b
 10951  0000A8  E001 D09C          	bnz	l14200
 10952                           
 10953                           ; BSR set to: 2
 10954                           ;lorawan.c: 1136: {
 10955                           ;lorawan.c: 1137: temp = bufferLength - 1;
 10956  0000AC  0101               	movlb	1	; () banked
 10957  0000AE  056D               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10958  0000B0  0103               	movlb	3	; () banked
 10959  0000B2  6FA8               	movwf	LORAWAN_RxDone@temp& (0+255),b
 10960                           
 10961                           ;lorawan.c: 1138: while (temp > 0)
 10962  0000B4  D01D               	goto	l14156
 10963  0000B6                     l14150:
 10964                           
 10965                           ; BSR set to: 3
 10966                           ;lorawan.c: 1139: {
 10967                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 10968  0000B6  0101               	movlb	1	; () banked
 10969  0000B8  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10970  0000BA  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10971  0000BC  0100               	movlb	0	; () banked
 10972  0000BE  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 10973  0000C0  0E00               	movlw	0
 10974  0000C2  0101               	movlb	1	; () banked
 10975  0000C4  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10976  0000C6  0100               	movlb	0	; () banked
 10977  0000C8  6FE9               	movwf	(??_LORAWAN_RxDone+1)& (0+255),b
 10978  0000CA  0103               	movlb	3	; () banked
 10979  0000CC  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10980  0000CE  0100               	movlb	0	; () banked
 10981  0000D0  5DE8               	subwf	??_LORAWAN_RxDone& (0+255),w,b
 10982  0000D2  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 10983  0000D4  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10984  0000D6  A0D8               	btfss	status,0,c
 10985  0000D8  05E9               	decf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10986  0000DA  EC61  F026         	call	PL252	;call to abstracted procedure
 10987  0000DE  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;lorawan.c: 1142: if (temp > 16)
 10991  0000E2  0E10               	movlw	16
 10992  0000E4  0103               	movlb	3	; () banked
 10993  0000E6  65A8               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 10994  0000E8  D002               	goto	l2146
 10995                           
 10996                           ; BSR set to: 3
 10997                           ;lorawan.c: 1143: {
 10998                           ;lorawan.c: 1144: temp -= 16;
 10999  0000EA  5FA8               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 11000                           
 11001                           ;lorawan.c: 1145: }
 11002  0000EC  D001               	goto	l14156
 11003  0000EE                     l2146:
 11004                           
 11005                           ; BSR set to: 3
 11006                           ;lorawan.c: 1146: else
 11007                           ;lorawan.c: 1147: {
 11008                           ;lorawan.c: 1148: temp = 0;
 11009  0000EE  6BA8               	clrf	LORAWAN_RxDone@temp& (0+255),b
 11010  0000F0                     l14156:
 11011                           
 11012                           ; BSR set to: 3
 11013  0000F0  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 11014  0000F2  E1E1               	bnz	l14150
 11015                           
 11016                           ; BSR set to: 3
 11017                           ;lorawan.c: 1149: }
 11018                           ;lorawan.c: 1150: }
 11019                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 11020  0000F4  0E42               	movlw	low (_loRa+66)
 11021  0000F6  0100               	movlb	0	; () banked
 11022  0000F8  6FDA               	movwf	ComputeMic@key& (0+255),b
 11023  0000FA  0E02               	movlw	high (_loRa+66)
 11024  0000FC  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
 11025  0000FE  C16B  F0DC         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 11026  000102  C16C  F0DD         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 11027  000106  0101               	movlb	1	; () banked
 11028  000108  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11029  00010A  0FFC               	addlw	252
 11030  00010C  0100               	movlb	0	; () banked
 11031  00010E  6FDE               	movwf	ComputeMic@bufferLength& (0+255),b
 11032  000110  EC1F  F029         	call	_ComputeMic	;wreg free
 11033  000114  C0DA  F3AB         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 11034  000118  C0DB  F3AC         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 11035  00011C  C0DC  F3AD         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 11036  000120  C0DD  F3AE         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 11040  000124  DB7D               	call	PL198	;call to abstracted procedure
 11041  000126  ECB8  F02B         	call	_ExtractMic	;wreg free
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 11045  00012A  DB2C               	call	PL106	;call to abstracted procedure
 11046  00012C  51AB               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11047  00012E  19A3               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11048  000130  E109               	bnz	u15950
 11049  000132  51AC               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11050  000134  19A4               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11051  000136  E106               	bnz	u15950
 11052  000138  51AD               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11053  00013A  19A5               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11054  00013C  E103               	bnz	u15950
 11055  00013E  51AE               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11056  000140  19A6               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11057  000142  E00F               	bz	l14174
 11058  000144                     u15950:
 11059                           
 11060                           ; BSR set to: 3
 11061                           ;lorawan.c: 1156: {
 11062                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11063  000144  EC95  F026         	call	PL430	;call to abstracted procedure
 11064  000148  E102 EFA0  F02E    	bz	_SetJoinFailState
 11065                           
 11066                           ; BSR set to: 2
 11067  00014E  5102               	movf	(_loRa+2)& (0+255),w,b
 11068  000150  0B0F               	andlw	15
 11069  000152  0A03               	xorlw	3
 11070  000154  A4D8               	btfss	status,2,c
 11071  000156  0012               	return	
 11072                           
 11073                           ; BSR set to: 2
 11074  000158  51F1               	movf	(_loRa+241)& (0+255),w,b
 11075  00015A  B4D8               	btfsc	status,2,c
 11076  00015C  0012               	return	
 11077                           
 11078                           ; BSR set to: 2
 11079                           ;lorawan.c: 1158: {
 11080                           ;lorawan.c: 1159: SetJoinFailState();
 11081  00015E  EFA0  F02E         	goto	_SetJoinFailState	;wreg free
 11082  000162                     l14174:
 11083                           
 11084                           ; BSR set to: 3
 11085                           ;lorawan.c: 1163: }
 11086                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11087  000162  0102               	movlb	2	; () banked
 11088  000164  5102               	movf	(_loRa+2)& (0+255),w,b
 11089  000166  0B0F               	andlw	15
 11090  000168  0A03               	xorlw	3
 11091  00016A  E103               	bnz	l14178
 11092                           
 11093                           ; BSR set to: 2
 11094                           ;lorawan.c: 1167: {
 11095                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11096  00016C  51E3               	movf	(_loRa+227)& (0+255),w,b
 11097  00016E  EC9E  F030         	call	_SwTimerStop
 11098  000172                     l14178:
 11099                           
 11100                           ;lorawan.c: 1169: }
 11101                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11102                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11103  000172  C16B  F3AF         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11104  000176  C16C  F3B0         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11105                           
 11106                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11107  00017A  0103               	movlb	3	; () banked
 11108  00017C  EE20 F007          	lfsr	2,7
 11109  000180  DB75               	call	PL256	;call to abstracted procedure
 11110  000182  CFDE F21E          	movff	postinc2,_loRa+30
 11111  000186  CFDE F21F          	movff	postinc2,_loRa+31
 11112  00018A  CFDE F220          	movff	postinc2,_loRa+32
 11113  00018E  CFDE F221          	movff	postinc2,_loRa+33
 11114                           
 11115                           ; BSR set to: 3
 11116                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11117  000192  EE20 F00C          	lfsr	2,12
 11118  000196  DB6A               	call	PL256	;call to abstracted procedure
 11119  000198  50DF               	movf	indf2,w,c
 11120  00019A  0B0F               	andlw	15
 11121  00019C  EC86  F02C         	call	_UpdateReceiveDelays
 11122                           
 11123                           ; BSR set to: 2
 11124                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11125  0001A0  DB75               	call	PL290	;call to abstracted procedure
 11126  0001A2  DB64               	call	PL256	;call to abstracted procedure
 11127  0001A4  38DF               	swapf	223,w,c
 11128  0001A6  0B07               	andlw	7
 11129  0001A8  0100               	movlb	0	; () banked
 11130  0001AA  6F64               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11131  0001AC  DB6F               	call	PL290	;call to abstracted procedure
 11132  0001AE  DB5E               	call	PL256	;call to abstracted procedure
 11133  0001B0  50DF               	movf	223,w,c
 11134  0001B2  0B0F               	andlw	15
 11135  0001B4  ECBF  F02F         	call	_UpdateDLSettings
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 11139  0001B8  C3AF  F0A0         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 11140  0001BC  C3B0  F0A1         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 11141  0001C0  0101               	movlb	1	; () banked
 11142  0001C2  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11143  0001C4  ECB2  F014         	call	_UpdateCfList
 11144                           
 11145                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 11146  0001C8  C3AF  F0A4         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 11147  0001CC  C3B0  F0A5         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 11148  0001D0  EC33  F026         	call	_ComputeSessionKeys	;wreg free
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 11152  0001D4  6AE6               	clrf	postinc1,c
 11153  0001D6  ECE8  F01D         	call	_UpdateJoinSuccessState	;wreg free
 11154                           
 11155                           ; BSR set to: 1
 11156                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 11157  0001DA  0102               	movlb	2	; () banked
 11158  0001DC  ECAD  F014         	call	PL394	;call to abstracted procedure
 11159                           
 11160                           ; BSR set to: 2
 11161                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 11162  0001E0  EFA8  F014         	goto	PL376	;call to abstracted procedure
 11163  0001E4                     l14200:
 11164                           
 11165                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 11166  0001E4  0103               	movlb	3	; () banked
 11167  0001E6  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11168  0001E8  32E8               	rrcf	wreg,f,c
 11169  0001EA  0B07               	andlw	7
 11170  0001EC  0A03               	xorlw	3
 11171  0001EE  E007               	bz	l2158
 11172                           
 11173                           ; BSR set to: 3
 11174  0001F0  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11175  0001F2  32E8               	rrcf	wreg,f,c
 11176  0001F4  0B07               	andlw	7
 11177  0001F6  0A05               	xorlw	5
 11178  0001F8  E002 EF67  F026    	bnz	_SetReceptionNotOkState
 11179  0001FE                     l2158:
 11180                           
 11181                           ; BSR set to: 3
 11182                           ;lorawan.c: 1192: {
 11183                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 11184  0001FE  0102               	movlb	2	; () banked
 11185  000200  6BA7               	clrf	(_loRa+167)& (0+255),b
 11186                           
 11187                           ; BSR set to: 2
 11188                           ;lorawan.c: 1195: Hdr_t *hdr;
 11189                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 11190  000202  C16B  F3B2         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 11191  000206  C16C  F3B3         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 11192                           
 11193                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 11194  00020A  0E02               	movlw	2
 11195  00020C  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11196  00020E  E001 D0DA          	bnz	l14318
 11197                           
 11198                           ; BSR set to: 2
 11199  000212  DB28               	call	PL226	;call to abstracted procedure
 11200  000214  DA83               	call	PL42	;call to abstracted procedure
 11201  000216  0102               	movlb	2	; () banked
 11202  000218  5162               	movf	(_loRa+98)& (0+255),w,b
 11203  00021A  18DE               	xorwf	postinc2,w,c
 11204  00021C  E109               	bnz	u16031
 11205  00021E  5163               	movf	(_loRa+99)& (0+255),w,b
 11206  000220  18DE               	xorwf	postinc2,w,c
 11207  000222  E106               	bnz	u16031
 11208  000224  5164               	movf	(_loRa+100)& (0+255),w,b
 11209  000226  18DE               	xorwf	postinc2,w,c
 11210  000228  E103               	bnz	u16031
 11211  00022A  5165               	movf	(_loRa+101)& (0+255),w,b
 11212  00022C  18DE               	xorwf	postinc2,w,c
 11213  00022E  A4D8               	btfss	status,2,c
 11214  000230                     u16031:
 11215  000230  D0CA               	goto	l14318
 11216                           
 11217                           ; BSR set to: 2
 11218  000232  A504               	btfss	(_loRa+4)& (0+255),2,b
 11219  000234  D0C8               	goto	l14318
 11220                           
 11221                           ; BSR set to: 2
 11222                           ;lorawan.c: 1200: {
 11223                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 11224  000236  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 11225  00023A  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 11226  00023E  EC74  F028         	call	_CheckMcastFlags	;wreg free
 11227  000242  0900               	iorlw	0
 11228  000244  E104               	bnz	l14218
 11229  000246                     l14212:
 11230                           
 11231                           ;lorawan.c: 1203: {
 11232                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11233  000246  0102               	movlb	2	; () banked
 11234  000248  DB2C               	call	PL328	;call to abstracted procedure
 11235                           
 11236                           ; BSR set to: 2
 11237                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 11238  00024A  EF60  F027         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 11239  00024E                     l14218:
 11240                           
 11241                           ;lorawan.c: 1207: }
 11242                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 11243  00024E  DA4D               	call	PL24	;call to abstracted procedure
 11244  000250  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 11245  000254  DA75               	call	PL96	;call to abstracted procedure
 11246  000256  0E01               	movlw	1
 11247  000258  6F74               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11248  00025A  ECC0  F021         	call	_AssembleEncryptionBlock
 11249                           
 11250                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11251  00025E  DAC1               	call	PL166	;call to abstracted procedure
 11252  000260  DA68               	call	PL92	;call to abstracted procedure
 11253  000262  0E10               	movlw	16
 11254  000264  6F68               	movwf	memcpy@n& (0+255),b
 11255  000266  ECA0  F028         	call	_memcpy	;wreg free
 11256                           
 11257                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11258  00026A  DA7B               	call	PL102	;call to abstracted procedure
 11259  00026C  ECA0  F028         	call	_memcpy	;wreg free
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11263  000270  0E66               	movlw	low (_loRa+102)
 11264  000272  6FCC               	movwf	AESCmac@key& (0+255),b
 11265  000274  0E02               	movlw	high (_loRa+102)
 11266  000276  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 11267  000278  0EAB               	movlw	low _aesBuffer
 11268  00027A  DA9E               	call	PL146	;call to abstracted procedure
 11269  00027C  ECF4  F008         	call	_AESCmac	;wreg free
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11273  000280  DAB4               	call	PL168	;call to abstracted procedure
 11274  000282  DA57               	call	PL92	;call to abstracted procedure
 11275  000284  0E04               	movlw	4
 11276  000286  6F68               	movwf	memcpy@n& (0+255),b
 11277  000288  ECA0  F028         	call	_memcpy	;wreg free
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11281  00028C  DAC9               	call	PL198	;call to abstracted procedure
 11282  00028E  ECB8  F02B         	call	_ExtractMic	;wreg free
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 11286  000292  DA78               	call	PL106	;call to abstracted procedure
 11287  000294  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11288  000296  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11289  000298  E1D6               	bnz	l14212
 11290  00029A  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11291  00029C  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11292  00029E  E1D3               	bnz	l14212
 11293  0002A0  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11294  0002A2  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11295  0002A4  E1D0               	bnz	l14212
 11296  0002A6  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11297  0002A8  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11298  0002AA  E1CD               	bnz	l14212
 11299                           
 11300                           ; BSR set to: 3
 11301                           ;lorawan.c: 1222: }
 11302                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 11303  0002AC  DA26               	call	PL28	;call to abstracted procedure
 11304  0002AE  510E               	movf	(_loRa+14)& (0+255),w,b
 11305  0002B0  5CDE               	subwf	postinc2,w,c
 11306  0002B2  510F               	movf	(_loRa+15)& (0+255),w,b
 11307  0002B4  58DE               	subwfb	postinc2,w,c
 11308  0002B6  E31F               	bnc	l14252
 11309                           
 11310                           ; BSR set to: 2
 11311                           ;lorawan.c: 1225: {
 11312                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 11313  0002B8  DA18               	call	PL24	;call to abstracted procedure
 11314  0002BA  DAE2               	call	PL278	;call to abstracted procedure
 11315  0002BC  510E               	movf	(_loRa+14)& (0+255),w,b
 11316  0002BE  0100               	movlb	0	; () banked
 11317  0002C0  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11318  0002C2  0102               	movlb	2	; () banked
 11319  0002C4  510F               	movf	(_loRa+15)& (0+255),w,b
 11320  0002C6  DB02               	call	PL392	;call to abstracted procedure
 11321  0002C8  5D9E               	subwf	(_loRa+158)& (0+255),w,b
 11322  0002CA  0100               	movlb	0	; () banked
 11323  0002CC  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11324  0002CE  0102               	movlb	2	; () banked
 11325  0002D0  599F               	subwfb	(_loRa+159)& (0+255),w,b
 11326  0002D2  E20B               	bc	l14250
 11327  0002D4                     l14238:
 11328                           
 11329                           ; BSR set to: 2
 11330                           ;lorawan.c: 1227: {
 11331                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 11332  0002D4  0101               	movlb	1	; () banked
 11333  0002D6  516E               	movf	_rxPayload& (0+255),w,b
 11334  0002D8  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11335  0002DA  E0B5               	bz	l14212
 11336                           
 11337                           ; BSR set to: 1
 11338                           ;lorawan.c: 1229: {
 11339                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11340  0002DC  ECD1  F00D         	call	PL82	;call to abstracted procedure
 11341  0002E0  0E05               	movlw	5
 11342  0002E2  6F67               	movwf	RxDataDone@status& (0+255),b
 11343  0002E4  D801               	call	u16108
 11344  0002E6  D7AF               	goto	l14212
 11345  0002E8                     u16108:
 11346  0002E8  D064               	goto	u16208
 11347  0002EA                     l14250:
 11348                           
 11349                           ; BSR set to: 2
 11350                           ;lorawan.c: 1237: else
 11351                           ;lorawan.c: 1238: {
 11352                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 11353  0002EA  D9FF               	call	PL24	;call to abstracted procedure
 11354  0002EC  CFDE F20E          	movff	postinc2,_loRa+14
 11355  0002F0  CFDD F20F          	movff	postdec2,_loRa+15
 11356  0002F4  D00D               	goto	l14270
 11357  0002F6                     l14252:
 11358                           
 11359                           ; BSR set to: 2
 11360                           ;lorawan.c: 1242: else
 11361                           ;lorawan.c: 1243: {
 11362                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 11363  0002F6  D9F9               	call	PL24	;call to abstracted procedure
 11364  0002F8  50DE               	movf	postinc2,w,c
 11365  0002FA  10DE               	iorwf	postinc2,w,c
 11366  0002FC  E1EB               	bnz	l14238
 11367                           
 11368                           ; BSR set to: 3
 11369  0002FE  0102               	movlb	2	; () banked
 11370  000300  290E               	incf	(_loRa+14)& (0+255),w,b
 11371  000302  E1E8               	bnz	l14238
 11372  000304  290F               	incf	(_loRa+15)& (0+255),w,b
 11373  000306  E1E6               	bnz	l14238
 11374                           
 11375                           ; BSR set to: 2
 11376                           ;lorawan.c: 1245: {
 11377                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 11378  000308  6B0E               	clrf	(_loRa+14)& (0+255),b
 11379  00030A  6B0F               	clrf	(_loRa+15)& (0+255),b
 11380                           
 11381                           ; BSR set to: 2
 11382                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 11383  00030C  4B10               	infsnz	(_loRa+16)& (0+255),f,b
 11384  00030E  2B11               	incf	(_loRa+17)& (0+255),f,b
 11385  000310                     l14270:
 11386                           
 11387                           ;lorawan.c: 1259: }
 11388                           ;lorawan.c: 1260: }
 11389                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 11390  000310  0102               	movlb	2	; () banked
 11391  000312  290E               	incf	(_loRa+14)& (0+255),w,b
 11392  000314  E107               	bnz	l14282
 11393  000316  290F               	incf	(_loRa+15)& (0+255),w,b
 11394  000318  E105               	bnz	l14282
 11395  00031A  2910               	incf	(_loRa+16)& (0+255),w,b
 11396  00031C  E103               	bnz	l14282
 11397  00031E  2911               	incf	(_loRa+17)& (0+255),w,b
 11398  000320  E101               	bnz	l14282
 11399  000322  D7D8               	goto	l14238
 11400  000324                     l14282:
 11401                           
 11402                           ; BSR set to: 2
 11403                           ;lorawan.c: 1272: }
 11404                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 11405  000324  5102               	movf	(_loRa+2)& (0+255),w,b
 11406  000326  0B0F               	andlw	15
 11407  000328  0A08               	xorlw	8
 11408  00032A  E108               	bnz	l14286
 11409                           
 11410                           ; BSR set to: 2
 11411                           ;lorawan.c: 1275: {
 11412                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 11413  00032C  51E4               	movf	(_loRa+228)& (0+255),w,b
 11414  00032E  EC9E  F030         	call	_SwTimerStop
 11415                           
 11416                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 11417  000332  0102               	movlb	2	; () banked
 11418  000334  51E5               	movf	(_loRa+229)& (0+255),w,b
 11419  000336  EC9E  F030         	call	_SwTimerStop
 11420                           
 11421                           ;lorawan.c: 1278: }
 11422  00033A  D007               	goto	l14290
 11423  00033C                     l14286:
 11424                           
 11425                           ; BSR set to: 2
 11426                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 11427  00033C  5102               	movf	(_loRa+2)& (0+255),w,b
 11428  00033E  0B0F               	andlw	15
 11429  000340  0A03               	xorlw	3
 11430  000342  E103               	bnz	l14290
 11431                           
 11432                           ; BSR set to: 2
 11433                           ;lorawan.c: 1280: {
 11434                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 11435  000344  51E5               	movf	(_loRa+229)& (0+255),w,b
 11436  000346  EC9E  F030         	call	_SwTimerStop
 11437  00034A                     l14290:
 11438                           
 11439                           ;lorawan.c: 1282: }
 11440                           ;lorawan.c: 1284: buffer = buffer + 8;
 11441  00034A  DAB5               	call	PL356	;call to abstracted procedure
 11442                           
 11443                           ; BSR set to: 1
 11444                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11445  00034C  D9EC               	call	PL52	;call to abstracted procedure
 11446  00034E  D9DD               	call	PL34	;call to abstracted procedure
 11447  000350  DA75               	call	PL212	;call to abstracted procedure
 11448  000352  E103               	bnz	u16180
 11449  000354  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11450  000356  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11451  000358  E023               	bz	l2175
 11452  00035A                     u16180:
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;lorawan.c: 1287: {
 11456                           ;lorawan.c: 1288: fPort = *(buffer++);
 11457  00035A  DA69               	call	PL204	;call to abstracted procedure
 11458  00035C  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11459                           
 11460                           ; BSR set to: 3
 11461  00035E  0101               	movlb	1	; () banked
 11462  000360  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11463  000362  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11464                           
 11465                           ; BSR set to: 1
 11466                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 11467  000364  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11468  000366  0FF4               	addlw	244
 11469  000368  0103               	movlb	3	; () banked
 11470  00036A  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11471                           
 11472                           ; BSR set to: 3
 11473                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 11474  00036C  0E19               	movlw	25
 11475  00036E  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11476                           
 11477                           ; BSR set to: 3
 11478                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 11479  000370  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11480  000374  DA80               	call	PL264	;call to abstracted procedure
 11481  000376  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11482  000378  0E01               	movlw	1
 11483  00037A  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 11484  00037C  C20E  F0A8         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 11485  000380  C20F  F0A9         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 11486  000384  C210  F0AA         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 11487  000388  C211  F0AB         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 11488  00038C  0E76               	movlw	low (_loRa+118)
 11489  00038E  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 11490  000390  0E02               	movlw	high (_loRa+118)
 11491  000392  DA1F               	call	PL162	;call to abstracted procedure
 11492  000394  0E01               	movlw	1
 11493  000396  6FB1               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 11494  000398  EC8F  F016         	call	_EncryptFRMPayload	;wreg free
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;lorawan.c: 1294: packet = buffer - 1;
 11498  00039C  DA36               	call	PL186	;call to abstracted procedure
 11499                           
 11500                           ;lorawan.c: 1295: }
 11501  00039E  D001               	goto	l2176
 11502  0003A0                     l2175:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;lorawan.c: 1296: else
 11506                           ;lorawan.c: 1297: {
 11507                           ;lorawan.c: 1298: frmPayloadLength = 0;
 11508                           
 11509                           ;lorawan.c: 1299: packet = (0);
 11510  0003A0  DA90               	call	PL370	;call to abstracted procedure
 11511  0003A2                     l2176:
 11512                           
 11513                           ; BSR set to: 3
 11514                           ;lorawan.c: 1300: }
 11515                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 11516  0003A2  0102               	movlb	2	; () banked
 11517  0003A4  8303               	bsf	(_loRa+3)& (0+255),1,b
 11518                           
 11519                           ; BSR set to: 2
 11520                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 11521                           
 11522                           ; BSR set to: 2
 11523                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 11524  0003A6  DA02               	call	PL144	;call to abstracted procedure
 11525  0003A8  E101 D74D          	bz	l14212
 11526                           
 11527                           ; BSR set to: 1
 11528                           ;lorawan.c: 1306: {
 11529                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11530  0003AC  D9F5               	call	PL108	;call to abstracted procedure
 11531  0003AE  D801               	call	u16208
 11532  0003B0  D74A               	goto	l14212
 11533  0003B2                     u16208:
 11534  0003B2  0005               	push	
 11535  0003B4  6EFA               	movwf	pclath,c
 11536  0003B6  0101               	movlb	1	; () banked
 11537  0003B8  516E               	movf	_rxPayload& (0+255),w,b
 11538  0003BA  6EFD               	movwf	tosl,c
 11539  0003BC  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11540  0003BE  6EFE               	movwf	tosh,c
 11541  0003C0  6AFF               	clrf	tosu,c
 11542  0003C2  50FA               	movf	pclath,w,c
 11543  0003C4  0012               	return		;indir
 11544  0003C6                     l14318:
 11545                           
 11546                           ; BSR set to: 2
 11547                           ;lorawan.c: 1313: }
 11548                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 11549  0003C6  DA4E               	call	PL226	;call to abstracted procedure
 11550  0003C8  D9A9               	call	PL42	;call to abstracted procedure
 11551  0003CA  0102               	movlb	2	; () banked
 11552  0003CC  511E               	movf	(_loRa+30)& (0+255),w,b
 11553  0003CE  18DE               	xorwf	postinc2,w,c
 11554  0003D0  E109               	bnz	u16210
 11555  0003D2  511F               	movf	(_loRa+31)& (0+255),w,b
 11556  0003D4  18DE               	xorwf	postinc2,w,c
 11557  0003D6  E106               	bnz	u16210
 11558  0003D8  5120               	movf	(_loRa+32)& (0+255),w,b
 11559  0003DA  18DE               	xorwf	postinc2,w,c
 11560  0003DC  E103               	bnz	u16210
 11561  0003DE  5121               	movf	(_loRa+33)& (0+255),w,b
 11562  0003E0  18DE               	xorwf	postinc2,w,c
 11563  0003E2  E008               	bz	l14330
 11564  0003E4                     u16210:
 11565                           
 11566                           ; BSR set to: 2
 11567                           ;lorawan.c: 1317: {
 11568                           ;lorawan.c: 1318: SetReceptionNotOkState();
 11569  0003E4  EC67  F026         	call	_SetReceptionNotOkState	;wreg free
 11570  0003E8                     l14322:
 11571                           
 11572                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 11573  0003E8  0E02               	movlw	2
 11574  0003EA  0102               	movlb	2	; () banked
 11575  0003EC                     L5:
 11576  0003EC  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11577  0003EE  E101 D72A          	bz	l14212
 11578  0003F2  0012               	return	
 11579  0003F4                     l14330:
 11580                           
 11581                           ; BSR set to: 2
 11582                           ;lorawan.c: 1325: }
 11583                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 11584  0003F4  D97A               	call	PL24	;call to abstracted procedure
 11585  0003F6  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 11586  0003FA  D9A2               	call	PL96	;call to abstracted procedure
 11587  0003FC  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11588  0003FE  0E01               	movlw	1
 11589  000400  ECC0  F021         	call	_AssembleEncryptionBlock
 11590                           
 11591                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11592  000404  D9EE               	call	PL166	;call to abstracted procedure
 11593  000406  D995               	call	PL92	;call to abstracted procedure
 11594  000408  0E10               	movlw	16
 11595  00040A  6F68               	movwf	memcpy@n& (0+255),b
 11596  00040C  ECA0  F028         	call	_memcpy	;wreg free
 11597                           
 11598                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11599  000410  D9A8               	call	PL102	;call to abstracted procedure
 11600  000412  ECA0  F028         	call	_memcpy	;wreg free
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11604  000416  EC9F  F00B         	call	PL234	;call to abstracted procedure
 11605  00041A  D9CE               	call	PL146	;call to abstracted procedure
 11606  00041C  ECF4  F008         	call	_AESCmac	;wreg free
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11610  000420  D9E4               	call	PL168	;call to abstracted procedure
 11611  000422  D987               	call	PL92	;call to abstracted procedure
 11612  000424  0E04               	movlw	4
 11613  000426  6F68               	movwf	memcpy@n& (0+255),b
 11614  000428  ECA0  F028         	call	_memcpy	;wreg free
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11618  00042C  D9F9               	call	PL198	;call to abstracted procedure
 11619  00042E  ECB8  F02B         	call	_ExtractMic	;wreg free
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 11623  000432  D9A8               	call	PL106	;call to abstracted procedure
 11624  000434  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11625  000436  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11626  000438  E109               	bnz	u16230
 11627  00043A  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11628  00043C  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11629  00043E  E106               	bnz	u16230
 11630  000440  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11631  000442  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11632  000444  E103               	bnz	u16230
 11633  000446  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11634  000448  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11635  00044A  E003               	bz	l14350
 11636  00044C                     u16230:
 11637                           
 11638                           ; BSR set to: 3
 11639                           ;lorawan.c: 1337: {
 11640                           ;lorawan.c: 1338: SetReceptionNotOkState();
 11641  00044C  EC67  F026         	call	_SetReceptionNotOkState	;wreg free
 11642  000450  D7CB               	goto	l14322
 11643  000452                     l14350:
 11644                           
 11645                           ; BSR set to: 3
 11646                           ;lorawan.c: 1345: }
 11647                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 11648  000452  D953               	call	PL28	;call to abstracted procedure
 11649  000454  510A               	movf	(_loRa+10)& (0+255),w,b
 11650  000456  5CDE               	subwf	postinc2,w,c
 11651  000458  510B               	movf	(_loRa+11)& (0+255),w,b
 11652  00045A  58DE               	subwfb	postinc2,w,c
 11653  00045C  E328               	bnc	l14380
 11654                           
 11655                           ; BSR set to: 2
 11656                           ;lorawan.c: 1349: {
 11657                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 11658  00045E  D945               	call	PL24	;call to abstracted procedure
 11659  000460  DA0F               	call	PL278	;call to abstracted procedure
 11660  000462  510A               	movf	(_loRa+10)& (0+255),w,b
 11661  000464  0100               	movlb	0	; () banked
 11662  000466  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11663  000468  0102               	movlb	2	; () banked
 11664  00046A  510B               	movf	(_loRa+11)& (0+255),w,b
 11665  00046C  DA2F               	call	PL392	;call to abstracted procedure
 11666  00046E  5D9C               	subwf	(_loRa+156)& (0+255),w,b
 11667  000470  0100               	movlb	0	; () banked
 11668  000472  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11669  000474  0102               	movlb	2	; () banked
 11670  000476  599D               	subwfb	(_loRa+157)& (0+255),w,b
 11671  000478  E217               	bc	l14378
 11672                           
 11673                           ; BSR set to: 2
 11674                           ;lorawan.c: 1351: {
 11675                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11676  00047A  9100               	bcf	_loRa& (0+255),0,b
 11677                           
 11678                           ; BSR set to: 2
 11679                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 11680                           
 11681                           ; BSR set to: 2
 11682                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 11683  00047C  D997               	call	PL144	;call to abstracted procedure
 11684  00047E  E011               	bz	l14364
 11685                           
 11686                           ; BSR set to: 1
 11687                           ;lorawan.c: 1355: {
 11688                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 11689                           
 11690                           ; BSR set to: 2
 11691                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11692  000480  EC92  F026         	call	PL236	;call to abstracted procedure
 11693  000484  ECD1  F00D         	call	PL82	;call to abstracted procedure
 11694  000488  6B67               	clrf	RxDataDone@status& (0+255),b
 11695  00048A  D801               	call	u16288
 11696  00048C  D00A               	goto	l14364
 11697  00048E                     u16288:
 11698  00048E  0005               	push	
 11699  000490  6EFA               	movwf	pclath,c
 11700  000492  0101               	movlb	1	; () banked
 11701  000494  516E               	movf	_rxPayload& (0+255),w,b
 11702  000496  6EFD               	movwf	tosl,c
 11703  000498  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11704  00049A  6EFE               	movwf	tosh,c
 11705  00049C  6AFF               	clrf	tosu,c
 11706  00049E  50FA               	movf	pclath,w,c
 11707  0004A0  0012               	return		;indir
 11708  0004A2                     l14364:
 11709                           
 11710                           ; BSR set to: 1
 11711                           ;lorawan.c: 1358: }
 11712                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 11713  0004A2  0102               	movlb	2	; () banked
 11714  0004A4  9303               	bcf	(_loRa+3)& (0+255),1,b
 11715  0004A6  D01E               	goto	l14400
 11716  0004A8                     l14378:
 11717                           
 11718                           ; BSR set to: 2
 11719                           ;lorawan.c: 1370: else
 11720                           ;lorawan.c: 1371: {
 11721                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11722  0004A8  D920               	call	PL24	;call to abstracted procedure
 11723  0004AA  DA15               	call	PL432	;call to abstracted procedure
 11724  0004AC  D012               	goto	l14398
 11725  0004AE                     l14380:
 11726                           
 11727                           ; BSR set to: 2
 11728                           ;lorawan.c: 1375: else
 11729                           ;lorawan.c: 1376: {
 11730                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 11731  0004AE  D91D               	call	PL24	;call to abstracted procedure
 11732  0004B0  50DE               	movf	postinc2,w,c
 11733  0004B2  10DE               	iorwf	postinc2,w,c
 11734  0004B4  E10B               	bnz	l14388
 11735                           
 11736                           ; BSR set to: 3
 11737  0004B6  0102               	movlb	2	; () banked
 11738  0004B8  290A               	incf	(_loRa+10)& (0+255),w,b
 11739  0004BA  E108               	bnz	l14388
 11740  0004BC  290B               	incf	(_loRa+11)& (0+255),w,b
 11741  0004BE  E106               	bnz	l14388
 11742                           
 11743                           ; BSR set to: 2
 11744                           ;lorawan.c: 1378: {
 11745                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11746  0004C0  D914               	call	PL24	;call to abstracted procedure
 11747  0004C2  DA09               	call	PL432	;call to abstracted procedure
 11748                           
 11749                           ; BSR set to: 3
 11750                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 11751  0004C4  0102               	movlb	2	; () banked
 11752  0004C6  4B0C               	infsnz	(_loRa+12)& (0+255),f,b
 11753  0004C8  2B0D               	incf	(_loRa+13)& (0+255),f,b
 11754                           
 11755                           ;lorawan.c: 1382: }
 11756  0004CA  D003               	goto	l14398
 11757  0004CC                     l14388:
 11758                           
 11759                           ;lorawan.c: 1383: else
 11760                           ;lorawan.c: 1384: {
 11761                           ;lorawan.c: 1385: SetReceptionNotOkState();
 11762  0004CC  EC67  F026         	call	_SetReceptionNotOkState	;wreg free
 11763  0004D0  D78B               	goto	l14322
 11764  0004D2                     l14398:
 11765                           
 11766                           ;lorawan.c: 1393: }
 11767                           ;lorawan.c: 1394: }
 11768                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 11769  0004D2  0102               	movlb	2	; () banked
 11770  0004D4  290A               	incf	(_loRa+10)& (0+255),w,b
 11771  0004D6  E109               	bnz	l14410
 11772  0004D8  290B               	incf	(_loRa+11)& (0+255),w,b
 11773  0004DA  E107               	bnz	l14410
 11774  0004DC  290C               	incf	(_loRa+12)& (0+255),w,b
 11775  0004DE  E105               	bnz	l14410
 11776  0004E0  290D               	incf	(_loRa+13)& (0+255),w,b
 11777  0004E2  E103               	bnz	l14410
 11778  0004E4                     l14400:
 11779                           
 11780                           ; BSR set to: 2
 11781                           ;lorawan.c: 1397: {
 11782                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 11783  0004E4  8304               	bsf	(_loRa+4)& (0+255),1,b
 11784                           
 11785                           ; BSR set to: 2
 11786                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 11787  0004E6  0E02               	movlw	2
 11788  0004E8  D781               	goto	L5
 11789  0004EA                     l14410:
 11790                           
 11791                           ; BSR set to: 2
 11792                           ;lorawan.c: 1407: }
 11793                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 11794  0004EA  5102               	movf	(_loRa+2)& (0+255),w,b
 11795  0004EC  0B0F               	andlw	15
 11796  0004EE  0A03               	xorlw	3
 11797  0004F0  E103               	bnz	l14414
 11798                           
 11799                           ; BSR set to: 2
 11800                           ;lorawan.c: 1411: {
 11801                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 11802  0004F2  51E5               	movf	(_loRa+229)& (0+255),w,b
 11803  0004F4  EC9E  F030         	call	_SwTimerStop
 11804  0004F8                     l14414:
 11805                           
 11806                           ;lorawan.c: 1413: }
 11807                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11808  0004F8  0E01               	movlw	1
 11809  0004FA  0102               	movlb	2	; () banked
 11810  0004FC  6FD8               	movwf	(_loRa+216)& (0+255),b
 11811                           
 11812                           ; BSR set to: 2
 11813                           ;lorawan.c: 1417: CheckFlags (hdr);
 11814  0004FE  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 11815  000502  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 11816  000506  EC7F  F02A         	call	_CheckFlags	;wreg free
 11817                           
 11818                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 11819  00050A  0103               	movlb	3	; () banked
 11820  00050C  D8FE               	call	PL34	;call to abstracted procedure
 11821  00050E  E011               	bz	l14422
 11822                           
 11823                           ; BSR set to: 3
 11824                           ;lorawan.c: 1420: {
 11825                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 11826  000510  0E08               	movlw	8
 11827  000512  25B2               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 11828  000514  0100               	movlb	0	; () banked
 11829  000516  6FA8               	movwf	MacExecuteCommands@buffer& (0+255),b
 11830  000518  0E00               	movlw	0
 11831  00051A  0103               	movlb	3	; () banked
 11832  00051C  21B3               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11833  00051E  0100               	movlb	0	; () banked
 11834  000520  6FA9               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 11835  000522  0103               	movlb	3	; () banked
 11836  000524  D8F2               	call	PL34	;call to abstracted procedure
 11837  000526  0100               	movlb	0	; () banked
 11838  000528  6FAA               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11839  00052A  EC81  F012         	call	_MacExecuteCommands	;wreg free
 11840  00052E  D9D8               	call	PL446	;call to abstracted procedure
 11841                           
 11842                           ;lorawan.c: 1422: }
 11843  000530  D001               	goto	l14424
 11844  000532                     l14422:
 11845                           
 11846                           ; BSR set to: 3
 11847                           ;lorawan.c: 1423: else
 11848                           ;lorawan.c: 1424: {
 11849                           ;lorawan.c: 1425: buffer = buffer + 8;
 11850  000532  D9C1               	call	PL356	;call to abstracted procedure
 11851  000534                     l14424:
 11852                           
 11853                           ;lorawan.c: 1426: }
 11854                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11855  000534  0101               	movlb	1	; () banked
 11856  000536  D8F7               	call	PL52	;call to abstracted procedure
 11857  000538  D8E8               	call	PL34	;call to abstracted procedure
 11858  00053A  D980               	call	PL212	;call to abstracted procedure
 11859  00053C  E103               	bnz	u16370
 11860  00053E  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11861  000540  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11862  000542  E04C               	bz	l2196
 11863  000544                     u16370:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;lorawan.c: 1428: {
 11867                           ;lorawan.c: 1429: fPort = *(buffer++);
 11868  000544  D974               	call	PL204	;call to abstracted procedure
 11869  000546  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11870                           
 11871                           ; BSR set to: 3
 11872  000548  0101               	movlb	1	; () banked
 11873  00054A  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11874  00054C  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11875                           
 11876                           ; BSR set to: 1
 11877                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 11878  00054E  0103               	movlb	3	; () banked
 11879  000550  D8DC               	call	PL34	;call to abstracted procedure
 11880  000552  0100               	movlb	0	; () banked
 11881  000554  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11882  000556  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11883  000558  0101               	movlb	1	; () banked
 11884  00055A  5D6D               	subwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11885  00055C  0FF4               	addlw	244
 11886  00055E  0103               	movlb	3	; () banked
 11887  000560  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11888                           
 11889                           ; BSR set to: 3
 11890                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 11891  000562  D8D3               	call	PL34	;call to abstracted procedure
 11892  000564  0F19               	addlw	25
 11893  000566  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11894                           
 11895                           ; BSR set to: 3
 11896                           ;lorawan.c: 1434: if (fPort != 0)
 11897  000568  51A0               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 11898  00056A  E00C               	bz	l14440
 11899                           
 11900                           ; BSR set to: 3
 11901                           ;lorawan.c: 1435: {
 11902                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 11903  00056C  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11904  000570  D982               	call	PL264	;call to abstracted procedure
 11905  000572  D93F               	call	PL170	;call to abstracted procedure
 11906  000574  ECAF  F00B         	call	PL382	;call to abstracted procedure
 11907  000578  D92C               	call	PL162	;call to abstracted procedure
 11908  00057A  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11909  00057C  EC8F  F016         	call	_EncryptFRMPayload	;wreg free
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;lorawan.c: 1437: packet = buffer - 1;
 11913  000580  D944               	call	PL186	;call to abstracted procedure
 11914                           
 11915                           ;lorawan.c: 1438: }
 11916  000582  D02D               	goto	l14450
 11917  000584                     l14440:
 11918                           
 11919                           ; BSR set to: 3
 11920                           ;lorawan.c: 1439: else
 11921                           ;lorawan.c: 1440: {
 11922                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 11923  000584  0101               	movlb	1	; () banked
 11924  000586  D8CF               	call	PL52	;call to abstracted procedure
 11925  000588  D8C0               	call	PL34	;call to abstracted procedure
 11926  00058A  0100               	movlb	0	; () banked
 11927  00058C  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11928  00058E  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11929  000590  0E0D               	movlw	13
 11930  000592  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11931  000594  0E00               	movlw	0
 11932  000596  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11933  000598  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11934  00059A  5DEA               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11935  00059C  51EB               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11936  00059E  0A80               	xorlw	128
 11937  0005A0  6FEC               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 11938  0005A2  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11939  0005A4  0A80               	xorlw	128
 11940  0005A6  59EC               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 11941  0005A8  E219               	bc	l2196
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;lorawan.c: 1443: {
 11945                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 11946  0005AA  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11947  0005AE  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11948  0005B2  0103               	movlb	3	; () banked
 11949  0005B4  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11950  0005B6  0100               	movlb	0	; () banked
 11951  0005B8  D91C               	call	PL170	;call to abstracted procedure
 11952  0005BA  ECAB  F00B         	call	PL380	;call to abstracted procedure
 11953  0005BE  D909               	call	PL162	;call to abstracted procedure
 11954  0005C0  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11955  0005C2  EC8F  F016         	call	_EncryptFRMPayload	;wreg free
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 11959  0005C6  C16B  F0A8         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 11960  0005CA  C16C  F0A9         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 11961  0005CE  0103               	movlb	3	; () banked
 11962  0005D0  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11963  0005D2  0100               	movlb	0	; () banked
 11964  0005D4  6FAA               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11965  0005D6  EC81  F012         	call	_MacExecuteCommands	;wreg free
 11966  0005DA  D982               	call	PL446	;call to abstracted procedure
 11967  0005DC                     l2196:
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;lorawan.c: 1453: else
 11971                           ;lorawan.c: 1454: {
 11972                           ;lorawan.c: 1455: frmPayloadLength = 0;
 11973                           
 11974                           ;lorawan.c: 1456: packet = (0);
 11975  0005DC  D972               	call	PL370	;call to abstracted procedure
 11976  0005DE                     l14450:
 11977                           
 11978                           ; BSR set to: 3
 11979                           ;lorawan.c: 1457: }
 11980                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11981  0005DE  0E01               	movlw	1
 11982  0005E0  0102               	movlb	2	; () banked
 11983  0005E2  6FD8               	movwf	(_loRa+216)& (0+255),b
 11984                           
 11985                           ; BSR set to: 2
 11986                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 11987  0005E4  6BD0               	clrf	(_loRa+208)& (0+255),b
 11988  0005E6  6BD1               	clrf	(_loRa+209)& (0+255),b
 11989                           
 11990                           ; BSR set to: 2
 11991                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 11992  0005E8  6BEE               	clrf	(_loRa+238)& (0+255),b
 11993                           
 11994                           ; BSR set to: 2
 11995                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 11996  0005EA  9900               	bcf	_loRa& (0+255),4,b
 11997                           
 11998                           ; BSR set to: 2
 11999                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 12000  0005EC  8303               	bsf	(_loRa+3)& (0+255),1,b
 12001                           
 12002                           ; BSR set to: 2
 12003                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 12004  0005EE  A100               	btfss	_loRa& (0+255),0,b
 12005  0005F0  D034               	goto	l14494
 12006                           
 12007                           ; BSR set to: 2
 12008                           ;lorawan.c: 1468: {
 12009                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 12010  0005F2  0103               	movlb	3	; () banked
 12011  0005F4  EE20 F005          	lfsr	2,5
 12012  0005F8  D891               	call	PL42	;call to abstracted procedure
 12013  0005FA  AADF               	btfss	indf2,5,c
 12014  0005FC  D02B               	goto	l14492
 12015                           
 12016                           ; BSR set to: 3
 12017                           ;lorawan.c: 1470: {
 12018                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12019  0005FE  0102               	movlb	2	; () banked
 12020  000600  9100               	bcf	_loRa& (0+255),0,b
 12021                           
 12022                           ; BSR set to: 2
 12023                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 12024                           
 12025                           ; BSR set to: 2
 12026                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 12027  000602  D8D4               	call	PL144	;call to abstracted procedure
 12028  000604  E00F               	bz	l14474
 12029                           
 12030                           ; BSR set to: 1
 12031                           ;lorawan.c: 1474: {
 12032                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 12033  000606  0102               	movlb	2	; () banked
 12034  000608  9B00               	bcf	_loRa& (0+255),5,b
 12035                           
 12036                           ; BSR set to: 2
 12037                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12038  00060A  D8C6               	call	PL108	;call to abstracted procedure
 12039  00060C  D801               	call	u16438
 12040  00060E  D00A               	goto	l14474
 12041  000610                     u16438:
 12042  000610  0005               	push	
 12043  000612  6EFA               	movwf	pclath,c
 12044  000614  0101               	movlb	1	; () banked
 12045  000616  516E               	movf	_rxPayload& (0+255),w,b
 12046  000618  6EFD               	movwf	tosl,c
 12047  00061A  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12048  00061C  6EFE               	movwf	tosh,c
 12049  00061E  6AFF               	clrf	tosu,c
 12050  000620  50FA               	movf	pclath,w,c
 12051  000622  0012               	return		;indir
 12052  000624                     l14474:
 12053                           
 12054                           ; BSR set to: 1
 12055                           ;lorawan.c: 1477: }
 12056                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 12057  000624  0102               	movlb	2	; () banked
 12058  000626  9303               	bcf	(_loRa+3)& (0+255),1,b
 12059                           
 12060                           ; BSR set to: 2
 12061                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12062  000628  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12063                           
 12064                           ; BSR set to: 2
 12065  00062A  BB00               	btfsc	_loRa& (0+255),5,b
 12066  00062C  D6DD               	goto	l14322
 12067                           
 12068                           ; BSR set to: 2
 12069  00062E  B300               	btfsc	_loRa& (0+255),1,b
 12070  000630  D002               	goto	l14484
 12071                           
 12072                           ; BSR set to: 2
 12073  000632  A700               	btfss	_loRa& (0+255),3,b
 12074  000634  D6D9               	goto	l14322
 12075  000636                     l14484:
 12076                           
 12077                           ; BSR set to: 2
 12078                           ;lorawan.c: 1480: {
 12079                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12080  000636  D90C               	call	PL216	;call to abstracted procedure
 12081  000638  EC11  F020         	call	_SearchAvailableChannel
 12082  00063C  0900               	iorlw	0
 12083  00063E  E107               	bnz	l14490
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;lorawan.c: 1482: {
 12087                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 12088  000640  0E00               	movlw	0
 12089  000642  D934               	call	PL334	;call to abstracted procedure
 12090  000644  ECB8  F01F         	call	_LORAWAN_Send
 12091  000648                     l14488:
 12092                           
 12093                           ;lorawan.c: 1484: loRa.lorawanMacStatus.fPending = 0;
 12094  000648  0102               	movlb	2	; () banked
 12095  00064A  9700               	bcf	_loRa& (0+255),3,b
 12096                           
 12097                           ;lorawan.c: 1485: }
 12098  00064C  D6CD               	goto	l14322
 12099  00064E                     l14490:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;lorawan.c: 1486: else
 12103                           ;lorawan.c: 1487: {
 12104                           ;lorawan.c: 1489: StartReTxTimer();
 12105  00064E  EC07  F01B         	call	_StartReTxTimer	;wreg free
 12106  000652  D6CA               	goto	l14322
 12107  000654                     l14492:
 12108                           
 12109                           ; BSR set to: 3
 12110                           ;lorawan.c: 1494: else
 12111                           ;lorawan.c: 1495: {
 12112                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 12113  000654  ECCC  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 12114  000658  D6C7               	goto	l14322
 12115  00065A                     l14494:
 12116                           
 12117                           ; BSR set to: 2
 12118                           ;lorawan.c: 1499: else
 12119                           ;lorawan.c: 1500: {
 12120                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 12121                           
 12122                           ; BSR set to: 2
 12123                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 12124  00065A  D8A8               	call	PL144	;call to abstracted procedure
 12125  00065C  E00F               	bz	l14502
 12126                           
 12127                           ; BSR set to: 1
 12128                           ;lorawan.c: 1504: {
 12129                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 12130  00065E  0102               	movlb	2	; () banked
 12131  000660  9B00               	bcf	_loRa& (0+255),5,b
 12132                           
 12133                           ; BSR set to: 2
 12134                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12135  000662  D89A               	call	PL108	;call to abstracted procedure
 12136  000664  D801               	call	u16508
 12137  000666  D00A               	goto	l14502
 12138  000668                     u16508:
 12139  000668  0005               	push	
 12140  00066A  6EFA               	movwf	pclath,c
 12141  00066C  0101               	movlb	1	; () banked
 12142  00066E  516E               	movf	_rxPayload& (0+255),w,b
 12143  000670  6EFD               	movwf	tosl,c
 12144  000672  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12145  000674  6EFE               	movwf	tosh,c
 12146  000676  6AFF               	clrf	tosu,c
 12147  000678  50FA               	movf	pclath,w,c
 12148  00067A  0012               	return		;indir
 12149  00067C                     l14502:
 12150                           
 12151                           ; BSR set to: 1
 12152                           ;lorawan.c: 1507: }
 12153                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12154  00067C  0102               	movlb	2	; () banked
 12155  00067E  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12156                           
 12157                           ; BSR set to: 2
 12158  000680  BB00               	btfsc	_loRa& (0+255),5,b
 12159  000682  D6B2               	goto	l14322
 12160                           
 12161                           ; BSR set to: 2
 12162  000684  B300               	btfsc	_loRa& (0+255),1,b
 12163  000686  D002               	goto	l14510
 12164                           
 12165                           ; BSR set to: 2
 12166  000688  A700               	btfss	_loRa& (0+255),3,b
 12167  00068A  D6AE               	goto	l14322
 12168  00068C                     l14510:
 12169                           
 12170                           ; BSR set to: 2
 12171                           ;lorawan.c: 1510: {
 12172                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12173  00068C  D8E1               	call	PL216	;call to abstracted procedure
 12174  00068E  EC11  F020         	call	_SearchAvailableChannel
 12175  000692  0900               	iorlw	0
 12176  000694  E1DC               	bnz	l14490
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;lorawan.c: 1512: {
 12180                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 12181  000696  0E00               	movlw	0
 12182  000698  D909               	call	PL334	;call to abstracted procedure
 12183  00069A  ECB8  F01F         	call	_LORAWAN_Send
 12184  00069E  D7D4               	goto	l14488
 12185  0006A0                     l14528:
 12186                           
 12187                           ; BSR set to: 2
 12188                           ;lorawan.c: 1537: else
 12189                           ;lorawan.c: 1538: {
 12190                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 12191  0006A0  0101               	movlb	1	; () banked
 12192  0006A2  516E               	movf	_rxPayload& (0+255),w,b
 12193  0006A4  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 12194  0006A6  B4D8               	btfsc	status,2,c
 12195  0006A8  0012               	return	
 12196                           
 12197                           ; BSR set to: 1
 12198                           ;lorawan.c: 1541: {
 12199                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 12200  0006AA  EC2D  F031         	call	_RADIO_GetStatus	;wreg free
 12201  0006AE  0100               	movlb	0	; () banked
 12202  0006B0  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 12203  0006B2  B7E8               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 12204  0006B4  D00D               	goto	l14534
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;lorawan.c: 1543: {
 12208                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 12209  0006B6  D8EE               	call	PL294	;call to abstracted procedure
 12210  0006B8  0E03               	movlw	3
 12211  0006BA  6F67               	movwf	RxDataDone@status& (0+255),b
 12212  0006BC  0005               	push	
 12213  0006BE  6EFA               	movwf	pclath,c
 12214  0006C0  0101               	movlb	1	; () banked
 12215  0006C2  516E               	movf	_rxPayload& (0+255),w,b
 12216  0006C4  6EFD               	movwf	tosl,c
 12217  0006C6  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12218  0006C8  6EFE               	movwf	tosh,c
 12219  0006CA  6AFF               	clrf	tosu,c
 12220  0006CC  50FA               	movf	pclath,w,c
 12221  0006CE  0012               	return		;indir
 12222  0006D0                     l14534:
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;lorawan.c: 1546: else
 12226                           ;lorawan.c: 1547: {
 12227                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 12228  0006D0  D8E1               	call	PL294	;call to abstracted procedure
 12229  0006D2  0E02               	movlw	2
 12230  0006D4  6F67               	movwf	RxDataDone@status& (0+255),b
 12231  0006D6  0005               	push	
 12232  0006D8  6EFA               	movwf	pclath,c
 12233  0006DA  0101               	movlb	1	; () banked
 12234  0006DC  516E               	movf	_rxPayload& (0+255),w,b
 12235  0006DE  6EFD               	movwf	tosl,c
 12236  0006E0  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12237  0006E2  6EFE               	movwf	tosh,c
 12238  0006E4  6AFF               	clrf	tosu,c
 12239  0006E6  50FA               	movf	pclath,w,c
 12240  0006E8  0012               	return		;indir
 12241  0006EA                     __end_of_LORAWAN_RxDone:
 12242                           	opt stack 0
 12243  0006EA                     PL24:
 12244                           	opt stack 12
 12245  0006EA  0103               	movlb	3	; () banked
 12246  0006EC  EE20 F006          	lfsr	2,6
 12247  0006F0  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12248  0006F2  26D9               	addwf	fsr2l,f,c
 12249  0006F4  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12250  0006F6  22DA               	addwfc	fsr2h,f,c
 12251  0006F8  0012               	return	
 12252  0006FA                     __end_ofPL24:
 12253                           	opt stack 0
 12254  0006FA                     PL28:
 12255                           	opt stack 12
 12256  0006FA  EE20 F006          	lfsr	2,6
 12257  0006FE  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12258  000700  26D9               	addwf	fsr2l,f,c
 12259  000702  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12260  000704  22DA               	addwfc	fsr2h,f,c
 12261  000706  0102               	movlb	2	; () banked
 12262  000708  0012               	return	
 12263  00070A                     __end_ofPL28:
 12264                           	opt stack 0
 12265  00070A                     PL34:
 12266                           	opt stack 12
 12267  00070A  EE20 F005          	lfsr	2,5
 12268  00070E  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12269  000710  26D9               	addwf	fsr2l,f,c
 12270  000712  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12271  000714  22DA               	addwfc	fsr2h,f,c
 12272  000716  50DF               	movf	223,w,c
 12273  000718  0B0F               	andlw	15
 12274  00071A  0012               	return	
 12275  00071C                     __end_ofPL34:
 12276                           	opt stack 0
 12277  00071C                     PL42:
 12278                           	opt stack 12
 12279  00071C  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12280  00071E  26D9               	addwf	fsr2l,f,c
 12281  000720  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12282  000722  22DA               	addwfc	fsr2h,f,c
 12283  000724  0012               	return	
 12284  000726                     __end_ofPL42:
 12285                           	opt stack 0
 12286  000726                     PL52:
 12287                           	opt stack 12
 12288  000726  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12289  000728  0100               	movlb	0	; () banked
 12290  00072A  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 12291  00072C  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12292  00072E  0103               	movlb	3	; () banked
 12293  000730  0012               	return	
 12294  000732                     __end_ofPL52:
 12295                           	opt stack 0
 12296  000732                     PL92:
 12297                           	opt stack 12
 12298  000732  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 12299  000734  0EAB               	movlw	low _aesBuffer
 12300  000736  6F66               	movwf	memcpy@s1& (0+255),b
 12301  000738  0E01               	movlw	high _aesBuffer
 12302  00073A  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 12303  00073C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 12304  00073E  0012               	return	
 12305  000740                     __end_ofPL92:
 12306                           	opt stack 0
 12307  000740                     PL96:
 12308                           	opt stack 12
 12309  000740  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 12310  000744  C0E8  F06E         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12311  000748  C0E9  F06F         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12312  00074C  0100               	movlb	0	; () banked
 12313  00074E  6B70               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12314  000750  6B71               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12315  000752  0101               	movlb	1	; () banked
 12316  000754  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12317  000756  0FFC               	addlw	252
 12318  000758  0100               	movlb	0	; () banked
 12319  00075A  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12320  00075C  0E49               	movlw	73
 12321  00075E  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12322  000760  0C49               	retlw	73
 12323  000762                     __end_ofPL96:
 12324                           	opt stack 0
 12325  000762                     PL102:
 12326                           	opt stack 12
 12327  000762  0EFF               	movlw	low (_radioBuffer+16)
 12328  000764  6F64               	movwf	memcpy@d1& (0+255),b
 12329  000766  0E05               	movlw	high (_radioBuffer+16)
 12330  000768  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 12331  00076A  C16B  F066         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12332  00076E  C16C  F067         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12333  000772  0EFC               	movlw	252
 12334  000774  0101               	movlb	1	; () banked
 12335  000776  256D               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12336  000778  0100               	movlb	0	; () banked
 12337  00077A  6F68               	movwf	memcpy@n& (0+255),b
 12338  00077C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 12339  00077E  0EFF               	movlw	255
 12340  000780  2369               	addwfc	(memcpy@n+1)& (0+255),f,b
 12341  000782  0CFF               	retlw	255
 12342  000784                     __end_ofPL102:
 12343                           	opt stack 0
 12344  000784                     PL106:
 12345                           	opt stack 12
 12346  000784  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12347  000788  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12348  00078C  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12349  000790  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12350  000794  0103               	movlb	3	; () banked
 12351  000796  0012               	return	
 12352  000798                     __end_ofPL106:
 12353                           	opt stack 0
 12354  000798                     PL108:
 12355                           	opt stack 12
 12356  000798  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 12357  00079C  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 12358  0007A0  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 12359  0007A4  0E01               	movlw	1
 12360  0007A6  0100               	movlb	0	; () banked
 12361  0007A8  6F67               	movwf	RxDataDone@status& (0+255),b
 12362  0007AA  0C01               	retlw	1
 12363  0007AC                     __end_ofPL108:
 12364                           	opt stack 0
 12365  0007AC                     PL144:
 12366                           	opt stack 12
 12367  0007AC  0EF0               	movlw	-16
 12368  0007AE  1702               	andwf	(_loRa+2)& (0+255),f,b
 12369  0007B0  0101               	movlb	1	; () banked
 12370  0007B2  516E               	movf	_rxPayload& (0+255),w,b
 12371  0007B4  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 12372  0007B6  0012               	return	
 12373  0007B8                     __end_ofPL144:
 12374                           	opt stack 0
 12375  0007B8                     PL146:
 12376                           	opt stack 12
 12377  0007B8  6FCE               	movwf	AESCmac@output& (0+255),b
 12378  0007BA  0E01               	movlw	high _aesBuffer
 12379  0007BC  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 12380  0007BE  0EEF               	movlw	low _radioBuffer
 12381  0007C0  6FD0               	movwf	AESCmac@input& (0+255),b
 12382  0007C2  0E05               	movlw	high _radioBuffer
 12383  0007C4  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 12384  0007C6  0101               	movlb	1	; () banked
 12385  0007C8  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12386  0007CA  0F0C               	addlw	12
 12387  0007CC  0100               	movlb	0	; () banked
 12388  0007CE  6FD2               	movwf	AESCmac@size& (0+255),b
 12389  0007D0  0012               	return	
 12390  0007D2                     __end_ofPL146:
 12391                           	opt stack 0
 12392  0007D2                     PL162:
 12393                           	opt stack 12
 12394  0007D2  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12395  0007D4  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12396  0007D8  0EEF               	movlw	low _radioBuffer
 12397  0007DA  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12398  0007DC  0E05               	movlw	high _radioBuffer
 12399  0007DE  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12400  0007E0  0012               	return	
 12401  0007E2                     __end_ofPL162:
 12402                           	opt stack 0
 12403  0007E2                     PL166:
 12404                           	opt stack 12
 12405  0007E2  0EEF               	movlw	low _radioBuffer
 12406  0007E4  6F64               	movwf	memcpy@d1& (0+255),b
 12407  0007E6  0E05               	movlw	high _radioBuffer
 12408  0007E8  0012               	return	
 12409  0007EA                     __end_ofPL166:
 12410                           	opt stack 0
 12411  0007EA                     PL168:
 12412                           	opt stack 12
 12413  0007EA  0EAB               	movlw	low LORAWAN_RxDone@computedMic
 12414  0007EC  6F64               	movwf	memcpy@d1& (0+255),b
 12415  0007EE  0E03               	movlw	high LORAWAN_RxDone@computedMic
 12416  0007F0  0012               	return	
 12417  0007F2                     __end_ofPL168:
 12418                           	opt stack 0
 12419  0007F2                     PL170:
 12420                           	opt stack 12
 12421  0007F2  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12422  0007F4  0E01               	movlw	1
 12423  0007F6  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 12424  0007F8  C20A  F0A8         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 12425  0007FC  C20B  F0A9         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 12426  000800  C20C  F0AA         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 12427  000804  C20D  F0AB         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 12428  000808  0C01               	retlw	1
 12429  00080A                     __end_ofPL170:
 12430                           	opt stack 0
 12431  00080A                     PL186:
 12432                           	opt stack 12
 12433  00080A  0EFF               	movlw	255
 12434  00080C  0101               	movlb	1	; () banked
 12435  00080E  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12436  000810  0103               	movlb	3	; () banked
 12437  000812  6FA9               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12438  000814  0EFF               	movlw	255
 12439  000816  0101               	movlb	1	; () banked
 12440  000818  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12441  00081A  0103               	movlb	3	; () banked
 12442  00081C  6FAA               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12443  00081E  0012               	return	
 12444  000820                     __end_ofPL186:
 12445                           	opt stack 0
 12446  000820                     PL198:
 12447                           	opt stack 12
 12448  000820  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12449  000824  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12450  000828  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12451  00082C  0012               	return	
 12452  00082E                     __end_ofPL198:
 12453                           	opt stack 0
 12454  00082E                     PL204:
 12455                           	opt stack 12
 12456  00082E  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12457  000832  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12458  000836  50DF               	movf	indf2,w,c
 12459  000838  0103               	movlb	3	; () banked
 12460  00083A  0012               	return	
 12461  00083C                     __end_ofPL204:
 12462                           	opt stack 0
 12463  00083C                     PL212:
 12464                           	opt stack 12
 12465  00083C  0100               	movlb	0	; () banked
 12466  00083E  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12467  000840  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12468  000842  0E0C               	movlw	12
 12469  000844  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12470  000846  0E00               	movlw	0
 12471  000848  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12472  00084A  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12473  00084C  19EA               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12474  00084E  0012               	return	
 12475  000850                     __end_ofPL212:
 12476                           	opt stack 0
 12477  000850                     PL216:
 12478                           	opt stack 12
 12479  000850  0E01               	movlw	1
 12480  000852  0100               	movlb	0	; () banked
 12481  000854  6FA9               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 12482  000856  0EA1               	movlw	low LORAWAN_RxDone@channelIndex
 12483  000858  6FAA               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 12484  00085A  0E03               	movlw	high LORAWAN_RxDone@channelIndex
 12485  00085C  6FAB               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 12486  00085E  0102               	movlb	2	; () banked
 12487  000860  51ED               	movf	(_loRa+237)& (0+255),w,b
 12488  000862  0012               	return	
 12489  000864                     __end_ofPL216:
 12490                           	opt stack 0
 12491  000864                     PL226:
 12492                           	opt stack 12
 12493  000864  0103               	movlb	3	; () banked
 12494  000866  EE20 F001          	lfsr	2,1
 12495  00086A  0012               	return	
 12496  00086C                     __end_ofPL226:
 12497                           	opt stack 0
 12498  00086C                     PL256:
 12499                           	opt stack 12
 12500  00086C  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 12501  00086E  26D9               	addwf	fsr2l,f,c
 12502  000870  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 12503  000872  22DA               	addwfc	fsr2h,f,c
 12504  000874  0012               	return	
 12505  000876                     __end_ofPL256:
 12506                           	opt stack 0
 12507  000876                     PL264:
 12508                           	opt stack 12
 12509  000876  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12510  00087A  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12511  00087C  0100               	movlb	0	; () banked
 12512  00087E  0012               	return	
 12513  000880                     __end_ofPL264:
 12514                           	opt stack 0
 12515  000880                     PL278:
 12516                           	opt stack 12
 12517  000880  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 12518  000884  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 12519  000888  0102               	movlb	2	; () banked
 12520  00088A  0012               	return	
 12521  00088C                     __end_ofPL278:
 12522                           	opt stack 0
 12523  00088C                     PL290:
 12524                           	opt stack 12
 12525  00088C  0103               	movlb	3	; () banked
 12526  00088E  EE20 F00B          	lfsr	2,11
 12527  000892  0012               	return	
 12528  000894                     __end_ofPL290:
 12529                           	opt stack 0
 12530  000894                     PL294:
 12531                           	opt stack 12
 12532  000894  C16B  F064         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 12533  000898  C16C  F065         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 12534  00089C  C16D  F066         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 12535  0008A0  0012               	return	
 12536  0008A2                     __end_ofPL294:
 12537                           	opt stack 0
 12538  0008A2                     PL328:
 12539                           	opt stack 12
 12540  0008A2  5102               	movf	(_loRa+2)& (0+255),w,b
 12541  0008A4  0BF0               	andlw	-16
 12542  0008A6  0909               	iorlw	9
 12543  0008A8  6F02               	movwf	(_loRa+2)& (0+255),b
 12544  0008AA  0012               	return	
 12545  0008AC                     __end_ofPL328:
 12546                           	opt stack 0
 12547  0008AC                     PL334:
 12548                           	opt stack 14
 12549  0008AC  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
 12550  0008AE  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
 12551  0008B0  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 12552  0008B2  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 12553  0008B4  0012               	return	
 12554  0008B6                     __end_ofPL334:
 12555                           	opt stack 0
 12556  0008B6                     PL356:
 12557                           	opt stack 12
 12558  0008B6  0E08               	movlw	8
 12559  0008B8  0101               	movlb	1	; () banked
 12560  0008BA  276B               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 12561  0008BC  0E00               	movlw	0
 12562  0008BE  236C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12563  0008C0  0C00               	retlw	0
 12564  0008C2                     __end_ofPL356:
 12565                           	opt stack 0
 12566  0008C2                     PL370:
 12567                           	opt stack 12
 12568  0008C2  0103               	movlb	3	; () banked
 12569  0008C4  6BB1               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12570  0008C6  6BA9               	clrf	LORAWAN_RxDone@packet& (0+255),b
 12571  0008C8  6BAA               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12572  0008CA  0012               	return	
 12573  0008CC                     __end_ofPL370:
 12574                           	opt stack 0
 12575  0008CC                     PL392:
 12576                           	opt stack 12
 12577  0008CC  0100               	movlb	0	; () banked
 12578  0008CE  5BE9               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 12579  0008D0  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12580  0008D2  0102               	movlb	2	; () banked
 12581  0008D4  0012               	return	
 12582  0008D6                     __end_ofPL392:
 12583                           	opt stack 0
 12584  0008D6                     PL432:
 12585                           	opt stack 12
 12586  0008D6  CFDE F20A          	movff	postinc2,_loRa+10
 12587  0008DA  CFDD F20B          	movff	postdec2,_loRa+11
 12588  0008DE  0012               	return	
 12589  0008E0                     __end_ofPL432:
 12590                           	opt stack 0
 12591  0008E0                     PL446:
 12592                           	opt stack 12
 12593  0008E0  C0A8  F16B         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 12594  0008E4  C0A9  F16C         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 12595  0008E8  0012               	return	
 12596  0008EA                     __end_ofPL446:
 12597                           	opt stack 0
 12598                           tosu	equ	0xFFF
 12599                           tosh	equ	0xFFE
 12600                           tosl	equ	0xFFD
 12601                           pclath	equ	0xFFA
 12602                           tblptru	equ	0xFF8
 12603                           tblptrh	equ	0xFF7
 12604                           tblptrl	equ	0xFF6
 12605                           tablat	equ	0xFF5
 12606                           prodh	equ	0xFF4
 12607                           prodl	equ	0xFF3
 12608                           intcon	equ	0xFF2
 12609                           indf0	equ	0xFEF
 12610                           postinc0	equ	0xFEE
 12611                           plusw0	equ	0xFEB
 12612                           fsr0h	equ	0xFEA
 12613                           fsr0l	equ	0xFE9
 12614                           wreg	equ	0xFE8
 12615                           postinc1	equ	0xFE6
 12616                           postdec1	equ	0xFE5
 12617                           plusw1	equ	0xFE3
 12618                           fsr1h	equ	0xFE2
 12619                           fsr1l	equ	0xFE1
 12620                           indf2	equ	0xFDF
 12621                           postinc2	equ	0xFDE
 12622                           postdec2	equ	0xFDD
 12623                           plusw2	equ	0xFDB
 12624                           fsr2h	equ	0xFDA
 12625                           fsr2l	equ	0xFD9
 12626                           status	equ	0xFD8
 12627                           
 12628 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 12629 ;; Defined at:
 12630 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;		None
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;		None
 12635 ;; Return value:  Size  Location     Type
 12636 ;;                  1    wreg      void 
 12637 ;; Registers used:
 12638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12639 ;; Tracked objects:
 12640 ;;		On entry : C/0
 12641 ;;		On exit  : F/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12646 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12647 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12648 ;;Total ram usage:        4 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:   11
 12651 ;; This function calls:
 12652 ;;		_SwTimerSetTimeout
 12653 ;;		_SwTimerStart
 12654 ;;		___lldiv
 12655 ;; This function is called by:
 12656 ;;		_AckRetransmissionCallback
 12657 ;;		_LORAWAN_RxDone
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text58
 12662  005198                     __ptext58:
 12663                           	opt stack 0
 12664  005198                     _UpdateRetransmissionAckTimeoutState:
 12665                           	opt stack 16
 12666                           
 12667                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 12668                           
 12669                           ;incstack = 0
 12670  005198  0102               	movlb	2	; () banked
 12671  00519A  ECD6  F00D         	call	PL254	;call to abstracted procedure
 12672                           
 12673                           ; BSR set to: 2
 12674                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 12675  00519E  51A0               	movf	(_loRa+160)& (0+255),w,b
 12676  0051A0  0100               	movlb	0	; () banked
 12677  0051A2  6F94               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 12678  0051A4  0102               	movlb	2	; () banked
 12679  0051A6  51A1               	movf	(_loRa+161)& (0+255),w,b
 12680  0051A8  0100               	movlb	0	; () banked
 12681  0051AA  6F95               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 12682  0051AC  6B96               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 12683  0051AE  6B97               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 12684  0051B0  0E0C               	movlw	12
 12685  0051B2                     u15615:
 12686  0051B2  90D8               	bcf	status,0,c
 12687  0051B4  3794               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 12688  0051B6  3795               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 12689  0051B8  3796               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 12690  0051BA  3797               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 12691  0051BC  2EE8               	decfsz	wreg,f,c
 12692  0051BE  D7F9               	goto	u15615
 12693  0051C0  C094  F064         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 12694  0051C4  C095  F065         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 12695  0051C8  C096  F066         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 12696  0051CC  C097  F067         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 12697  0051D0  0E7D               	movlw	125
 12698  0051D2  EC99  F011         	call	PL32	;call to abstracted procedure
 12699  0051D6  EC55  F025         	call	___lldiv	;wreg free
 12700  0051DA  EC93  F006         	call	PL22	;call to abstracted procedure
 12701  0051DE  51E8               	movf	(_loRa+232)& (0+255),w,b
 12702  0051E0  EC4F  F02C         	call	_SwTimerSetTimeout
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 12706  0051E4  0102               	movlb	2	; () banked
 12707  0051E6  51E8               	movf	(_loRa+232)& (0+255),w,b
 12708  0051E8  EFFE  F025         	goto	_SwTimerStart
 12709  0051EC                     __end_of_UpdateRetransmissionAckTimeoutState:
 12710                           	opt stack 0
 12711                           tosu	equ	0xFFF
 12712                           tosh	equ	0xFFE
 12713                           tosl	equ	0xFFD
 12714                           pclath	equ	0xFFA
 12715                           tblptru	equ	0xFF8
 12716                           tblptrh	equ	0xFF7
 12717                           tblptrl	equ	0xFF6
 12718                           tablat	equ	0xFF5
 12719                           prodh	equ	0xFF4
 12720                           prodl	equ	0xFF3
 12721                           intcon	equ	0xFF2
 12722                           indf0	equ	0xFEF
 12723                           postinc0	equ	0xFEE
 12724                           plusw0	equ	0xFEB
 12725                           fsr0h	equ	0xFEA
 12726                           fsr0l	equ	0xFE9
 12727                           wreg	equ	0xFE8
 12728                           postinc1	equ	0xFE6
 12729                           postdec1	equ	0xFE5
 12730                           plusw1	equ	0xFE3
 12731                           fsr1h	equ	0xFE2
 12732                           fsr1l	equ	0xFE1
 12733                           indf2	equ	0xFDF
 12734                           postinc2	equ	0xFDE
 12735                           postdec2	equ	0xFDD
 12736                           plusw2	equ	0xFDB
 12737                           fsr2h	equ	0xFDA
 12738                           fsr2l	equ	0xFD9
 12739                           status	equ	0xFD8
 12740                           
 12741 ;; *************** function _UpdateDLSettings *****************
 12742 ;; Defined at:
 12743 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12744 ;; Parameters:    Size  Location     Type
 12745 ;;  dlRx2Dr         1    wreg     unsigned char 
 12746 ;;  dlRx1DrOffse    1    4[BANK0 ] unsigned char 
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;  dlRx2Dr         1    5[BANK0 ] unsigned char 
 12749 ;; Return value:  Size  Location     Type
 12750 ;;                  1    wreg      void 
 12751 ;; Registers used:
 12752 ;;		wreg, status,2, status,0
 12753 ;; Tracked objects:
 12754 ;;		On entry : F/3
 12755 ;;		On exit  : F/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12758 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12762 ;;Total ram usage:        2 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    7
 12765 ;; This function calls:
 12766 ;;		Nothing
 12767 ;; This function is called by:
 12768 ;;		_LORAWAN_RxDone
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           	psect	text59
 12773  005F7E                     __ptext59:
 12774                           	opt stack 0
 12775  005F7E                     _UpdateDLSettings:
 12776                           	opt stack 19
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;incstack = 0
 12780                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 12781  005F7E  0100               	movlb	0	; () banked
 12782  005F80  6F65               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 12783                           
 12784                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 12785  005F82  0E08               	movlw	8
 12786  005F84  6165               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 12787  005F86  D002               	goto	l13856
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;lorawan_eu.c: 891: {
 12791                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 12792  005F88  C065  F21C         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 12793  005F8C                     l13856:
 12794                           
 12795                           ; BSR set to: 0
 12796                           ;lorawan_eu.c: 893: }
 12797                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 12798  005F8C  0E06               	movlw	6
 12799  005F8E  6164               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 12800  005F90  0C06               	retlw	6
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;lorawan_eu.c: 896: {
 12804                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 12805  005F92  C064  F2EF         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 12806                           
 12807                           ; BSR set to: 0
 12808  005F96  0C06               	retlw	6	;funcret
 12809  005F98                     __end_of_UpdateDLSettings:
 12810                           	opt stack 0
 12811                           tosu	equ	0xFFF
 12812                           tosh	equ	0xFFE
 12813                           tosl	equ	0xFFD
 12814                           pclath	equ	0xFFA
 12815                           tblptru	equ	0xFF8
 12816                           tblptrh	equ	0xFF7
 12817                           tblptrl	equ	0xFF6
 12818                           tablat	equ	0xFF5
 12819                           prodh	equ	0xFF4
 12820                           prodl	equ	0xFF3
 12821                           intcon	equ	0xFF2
 12822                           indf0	equ	0xFEF
 12823                           postinc0	equ	0xFEE
 12824                           plusw0	equ	0xFEB
 12825                           fsr0h	equ	0xFEA
 12826                           fsr0l	equ	0xFE9
 12827                           wreg	equ	0xFE8
 12828                           postinc1	equ	0xFE6
 12829                           postdec1	equ	0xFE5
 12830                           plusw1	equ	0xFE3
 12831                           fsr1h	equ	0xFE2
 12832                           fsr1l	equ	0xFE1
 12833                           indf2	equ	0xFDF
 12834                           postinc2	equ	0xFDE
 12835                           postdec2	equ	0xFDD
 12836                           plusw2	equ	0xFDB
 12837                           fsr2h	equ	0xFDA
 12838                           fsr2l	equ	0xFD9
 12839                           status	equ	0xFD8
 12840                           
 12841 ;; *************** function _UpdateCfList *****************
 12842 ;; Defined at:
 12843 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12844 ;; Parameters:    Size  Location     Type
 12845 ;;  bufferLength    1    wreg     unsigned char 
 12846 ;;  joinAccept      2   64[BANK0 ] PTR struct .
 12847 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 12848 ;; Auto vars:     Size  Location     Type
 12849 ;;  bufferLength    1   68[BANK0 ] unsigned char 
 12850 ;;  frequency       4   69[BANK0 ] unsigned long 
 12851 ;;  i               1   74[BANK0 ] unsigned char 
 12852 ;;  channelIndex    1   73[BANK0 ] unsigned char 
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : F/1
 12859 ;;		On exit  : D/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12863 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12865 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12866 ;;Total ram usage:       11 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    9
 12869 ;; This function calls:
 12870 ;;		_LORAWAN_SetChannelIdStatus
 12871 ;;		_ValidateFrequency
 12872 ;;		___lmul
 12873 ;;		_memcpy
 12874 ;; This function is called by:
 12875 ;;		_LORAWAN_RxDone
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           	psect	text60
 12880  002964                     __ptext60:
 12881                           	opt stack 0
 12882  002964                     _UpdateCfList:
 12883                           	opt stack 17
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;incstack = 0
 12887                           ;UpdateCfList@bufferLength stored from wreg
 12888  002964  0100               	movlb	0	; () banked
 12889  002966  6FA4               	movwf	UpdateCfList@bufferLength& (0+255),b
 12890                           
 12891                           ;lorawan_eu.c: 826: uint8_t i;
 12892                           ;lorawan_eu.c: 827: uint32_t frequency;
 12893                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 12894                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 12895  002968  0E21               	movlw	33
 12896  00296A  19A4               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 12897  00296C  A4D8               	btfss	status,2,c
 12898  00296E  0012               	return	
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;lorawan_eu.c: 831: {
 12902                           ;lorawan_eu.c: 833: channelIndex = 3;
 12903  002970  0E03               	movlw	3
 12904  002972  6FA9               	movwf	UpdateCfList@channelIndex& (0+255),b
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 12908  002974  6BAA               	clrf	UpdateCfList@i& (0+255),b
 12909  002976                     l1172:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;lorawan_eu.c: 836: {
 12913                           ;lorawan_eu.c: 837: frequency = 0;
 12914  002976  6BA5               	clrf	UpdateCfList@frequency& (0+255),b
 12915  002978  6BA6               	clrf	(UpdateCfList@frequency+1)& (0+255),b
 12916  00297A  6BA7               	clrf	(UpdateCfList@frequency+2)& (0+255),b
 12917  00297C  6BA8               	clrf	(UpdateCfList@frequency+3)& (0+255),b
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 12921  00297E  0EA5               	movlw	low UpdateCfList@frequency
 12922  002980  6F64               	movwf	memcpy@d1& (0+255),b
 12923  002982  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 12924  002984  51AA               	movf	UpdateCfList@i& (0+255),w,b
 12925  002986  0D03               	mullw	3
 12926  002988  C0A0  F0A2         	movff	UpdateCfList@joinAccept,??_UpdateCfList
 12927  00298C  C0A1  F0A3         	movff	UpdateCfList@joinAccept+1,??_UpdateCfList+1
 12928  002990  50F3               	movf	prodl,w,c
 12929  002992  27A2               	addwf	??_UpdateCfList& (0+255),f,b
 12930  002994  50F4               	movf	prodh,w,c
 12931  002996  23A3               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12932  002998  D88B               	call	PL418	;call to abstracted procedure
 12933  00299A  51A2               	movf	??_UpdateCfList& (0+255),w,b
 12934  00299C  6F66               	movwf	memcpy@s1& (0+255),b
 12935  00299E  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 12936  0029A0  EC17  F028         	call	PL448	;call to abstracted procedure
 12937  0029A4  ECA0  F028         	call	_memcpy	;wreg free
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;lorawan_eu.c: 839: frequency *= 100;
 12941  0029A8  C0A5  F094         	movff	UpdateCfList@frequency,___lmul@multiplier
 12942  0029AC  C0A6  F095         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 12943  0029B0  C0A7  F096         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 12944  0029B4  C0A8  F097         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 12945  0029B8  0E64               	movlw	100
 12946  0029BA  ECC2  F006         	call	PL88	;call to abstracted procedure
 12947  0029BE  EC34  F02A         	call	___lmul	;wreg free
 12948  0029C2  C094  F0A5         	movff	?___lmul,UpdateCfList@frequency
 12949  0029C6  C095  F0A6         	movff	?___lmul+1,UpdateCfList@frequency+1
 12950  0029CA  C096  F0A7         	movff	?___lmul+2,UpdateCfList@frequency+2
 12951  0029CE  C097  F0A8         	movff	?___lmul+3,UpdateCfList@frequency+3
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;lorawan_eu.c: 840: if (frequency != 0)
 12955  0029D2  51A5               	movf	UpdateCfList@frequency& (0+255),w,b
 12956  0029D4  11A6               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 12957  0029D6  11A7               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 12958  0029D8  11A8               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 12959  0029DA  E041               	bz	l13846
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;lorawan_eu.c: 841: {
 12963                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 12964  0029DC  C0A5  F064         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 12965  0029E0  C0A6  F065         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 12966  0029E4  C0A7  F066         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 12967  0029E8  C0A8  F067         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 12968  0029EC  ECBF  F027         	call	_ValidateFrequency	;wreg free
 12969  0029F0  0900               	iorlw	0
 12970  0029F2  E13A               	bnz	l13848
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;lorawan_eu.c: 843: {
 12974                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 12975  0029F4  D856               	call	PL90	;call to abstracted procedure
 12976  0029F6  50F3               	movf	prodl,w,c
 12977  0029F8  D83F               	call	PL30	;call to abstracted procedure
 12978  0029FA  C0A5  FFDE         	movff	UpdateCfList@frequency,postinc2
 12979  0029FE  C0A6  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 12980  002A02  C0A7  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 12981  002A06  C0A8  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 12982                           
 12983                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 12984  002A0A  51AA               	movf	UpdateCfList@i& (0+255),w,b
 12985  002A0C  0D0E               	mullw	14
 12986  002A0E  0E00               	movlw	low _Channels
 12987  002A10  D83F               	call	PL80	;call to abstracted procedure
 12988  002A12  D832               	call	PL30	;call to abstracted procedure
 12989  002A14  50DF               	movf	223,w,c
 12990  002A16  0B0F               	andlw	-241
 12991  002A18  0950               	iorlw	80
 12992  002A1A  6EDF               	movwf	223,c
 12993                           
 12994                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 12995  002A1C  0100               	movlb	0	; () banked
 12996  002A1E  51AA               	movf	UpdateCfList@i& (0+255),w,b
 12997  002A20  0D0E               	mullw	14
 12998  002A22  0E00               	movlw	low _Channels
 12999  002A24  D835               	call	PL80	;call to abstracted procedure
 13000  002A26  D828               	call	PL30	;call to abstracted procedure
 13001  002A28  0EF0               	movlw	-16
 13002  002A2A  16DF               	andwf	223,f,c
 13003                           
 13004                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 13005  002A2C  D83A               	call	PL90	;call to abstracted procedure
 13006  002A2E  0E06               	movlw	6
 13007  002A30  27A2               	addwf	??_UpdateCfList& (0+255),f,b
 13008  002A32  0E00               	movlw	0
 13009  002A34  23A3               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13010  002A36  50F3               	movf	prodl,w,c
 13011  002A38  D81F               	call	PL30	;call to abstracted procedure
 13012  002A3A  0EE7               	movlw	231
 13013  002A3C  6EDE               	movwf	postinc2,c
 13014  002A3E  0E03               	movlw	3
 13015  002A40  6EDD               	movwf	postdec2,c
 13016                           
 13017                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 13018  002A42  D82F               	call	PL90	;call to abstracted procedure
 13019  002A44  D835               	call	PL418	;call to abstracted procedure
 13020  002A46  50F3               	movf	prodl,w,c
 13021  002A48  D817               	call	PL30	;call to abstracted procedure
 13022  002A4A  68DF               	setf	indf2,c
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 13026  002A4C  0E01               	movlw	1
 13027  002A4E  6F68               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 13028  002A50  51AA               	movf	UpdateCfList@i& (0+255),w,b
 13029  002A52  25A9               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 13030  002A54  EC50  F02D         	call	_LORAWAN_SetChannelIdStatus
 13031                           
 13032                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 13033  002A58  0102               	movlb	2	; () banked
 13034  002A5A  8703               	bsf	(_loRa+3)& (0+255),3,b
 13035  002A5C  D005               	goto	l13848
 13036  002A5E                     l13846:
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;lorawan_eu.c: 853: else
 13040                           ;lorawan_eu.c: 854: {
 13041                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 13042  002A5E  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 13043  002A60  51AA               	movf	UpdateCfList@i& (0+255),w,b
 13044  002A62  25A9               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 13045  002A64  EC50  F02D         	call	_LORAWAN_SetChannelIdStatus
 13046  002A68                     l13848:
 13047  002A68  0100               	movlb	0	; () banked
 13048  002A6A  2BAA               	incf	UpdateCfList@i& (0+255),f,b
 13049                           
 13050                           ; BSR set to: 0
 13051  002A6C  0E04               	movlw	4
 13052  002A6E  65AA               	cpfsgt	UpdateCfList@i& (0+255),b
 13053  002A70  D782               	goto	l1172
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;lorawan_eu.c: 856: }
 13057                           ;lorawan_eu.c: 857: }
 13058                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 13059  002A72  0102               	movlb	2	; () banked
 13060  002A74  8703               	bsf	(_loRa+3)& (0+255),3,b
 13061  002A76  0C04               	retlw	4	;funcret
 13062  002A78                     __end_of_UpdateCfList:
 13063                           	opt stack 0
 13064  002A78                     PL30:
 13065                           	opt stack 17
 13066  002A78  27A2               	addwf	??_UpdateCfList& (0+255),f,b
 13067  002A7A  50F4               	movf	prodh,w,c
 13068  002A7C  23A3               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13069  002A7E  51A9               	movf	UpdateCfList@channelIndex& (0+255),w,b
 13070  002A80  0D0E               	mullw	14
 13071  002A82  50F3               	movf	prodl,w,c
 13072  002A84  25A2               	addwf	??_UpdateCfList& (0+255),w,b
 13073  002A86  6ED9               	movwf	fsr2l,c
 13074  002A88  50F4               	movf	prodh,w,c
 13075  002A8A  21A3               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 13076  002A8C  6EDA               	movwf	fsr2h,c
 13077  002A8E  0012               	return	
 13078  002A90                     __end_ofPL30:
 13079                           	opt stack 0
 13080  002A90                     PL80:
 13081                           	opt stack 17
 13082  002A90  6FA2               	movwf	??_UpdateCfList& (0+255),b
 13083  002A92  0E04               	movlw	high _Channels
 13084  002A94  6FA3               	movwf	(??_UpdateCfList+1)& (0+255),b
 13085  002A96  0E05               	movlw	5
 13086  002A98  27A2               	addwf	??_UpdateCfList& (0+255),f,b
 13087  002A9A  0E00               	movlw	0
 13088  002A9C  23A3               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13089  002A9E  50F3               	movf	prodl,w,c
 13090  002AA0  0012               	return	
 13091  002AA2                     __end_ofPL80:
 13092                           	opt stack 0
 13093  002AA2                     PL90:
 13094                           	opt stack 17
 13095  002AA2  51AA               	movf	UpdateCfList@i& (0+255),w,b
 13096  002AA4  0D0E               	mullw	14
 13097  002AA6  0E00               	movlw	low _Channels
 13098  002AA8  6FA2               	movwf	??_UpdateCfList& (0+255),b
 13099  002AAA  0E04               	movlw	high _Channels
 13100  002AAC  6FA3               	movwf	(??_UpdateCfList+1)& (0+255),b
 13101  002AAE  0012               	return	
 13102  002AB0                     __end_ofPL90:
 13103                           	opt stack 0
 13104  002AB0                     PL418:
 13105                           	opt stack 17
 13106  002AB0  0E0D               	movlw	13
 13107  002AB2  27A2               	addwf	??_UpdateCfList& (0+255),f,b
 13108  002AB4  0E00               	movlw	0
 13109  002AB6  23A3               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13110  002AB8  0C00               	retlw	0
 13111  002ABA                     __end_ofPL418:
 13112                           	opt stack 0
 13113                           tosu	equ	0xFFF
 13114                           tosh	equ	0xFFE
 13115                           tosl	equ	0xFFD
 13116                           pclath	equ	0xFFA
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           indf0	equ	0xFEF
 13125                           postinc0	equ	0xFEE
 13126                           plusw0	equ	0xFEB
 13127                           fsr0h	equ	0xFEA
 13128                           fsr0l	equ	0xFE9
 13129                           wreg	equ	0xFE8
 13130                           postinc1	equ	0xFE6
 13131                           postdec1	equ	0xFE5
 13132                           plusw1	equ	0xFE3
 13133                           fsr1h	equ	0xFE2
 13134                           fsr1l	equ	0xFE1
 13135                           indf2	equ	0xFDF
 13136                           postinc2	equ	0xFDE
 13137                           postdec2	equ	0xFDD
 13138                           plusw2	equ	0xFDB
 13139                           fsr2h	equ	0xFDA
 13140                           fsr2l	equ	0xFD9
 13141                           status	equ	0xFD8
 13142                           
 13143 ;; *************** function _StartReTxTimer *****************
 13144 ;; Defined at:
 13145 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;		None
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;  minim           4   56[BANK0 ] unsigned long 
 13150 ;;  i               1   60[BANK0 ] unsigned char 
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : E/0
 13157 ;;		On exit  : F/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13161 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13162 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13163 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13164 ;;Total ram usage:        9 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:   11
 13167 ;; This function calls:
 13168 ;;		_SwTimerSetTimeout
 13169 ;;		_SwTimerStart
 13170 ;;		___lldiv
 13171 ;; This function is called by:
 13172 ;;		_LORAWAN_RxDone
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           	psect	text61
 13177  00360E                     __ptext61:
 13178                           	opt stack 0
 13179  00360E                     _StartReTxTimer:
 13180                           	opt stack 15
 13181                           
 13182                           ;lorawan_eu.c: 904: uint8_t i;
 13183                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 13184                           
 13185                           ;incstack = 0
 13186  00360E  0100               	movlb	0	; () banked
 13187  003610  6998               	setf	StartReTxTimer@minim& (0+255),b
 13188  003612  6999               	setf	(StartReTxTimer@minim+1)& (0+255),b
 13189  003614  699A               	setf	(StartReTxTimer@minim+2)& (0+255),b
 13190  003616  699B               	setf	(StartReTxTimer@minim+3)& (0+255),b
 13191                           
 13192                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 13193  003618  6B9C               	clrf	StartReTxTimer@i& (0+255),b
 13194  00361A  D03A               	goto	l13876
 13195  00361C                     l13862:
 13196                           
 13197                           ; BSR set to: 2
 13198                           ;lorawan_eu.c: 908: {
 13199                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 13200  00361C  0100               	movlb	0	; () banked
 13201  00361E  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13202  003620  ECB7  F021         	call	PL12	;call to abstracted procedure
 13203  003624  E133               	bnz	l13874
 13204                           
 13205                           ; BSR set to: 0
 13206  003626  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13207  003628  EC71  F006         	call	PL4	;call to abstracted procedure
 13208  00362C  ECDD  F00E         	call	PL140	;call to abstracted procedure
 13209  003630  E02D               	bz	l13874
 13210                           
 13211                           ; BSR set to: 0
 13212  003632  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13213  003634  EC71  F006         	call	PL4	;call to abstracted procedure
 13214  003638  50DE               	movf	postinc2,w,c
 13215  00363A  5D98               	subwf	StartReTxTimer@minim& (0+255),w,b
 13216  00363C  50DE               	movf	postinc2,w,c
 13217  00363E  5999               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 13218  003640  50DE               	movf	postinc2,w,c
 13219  003642  599A               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 13220  003644  50DE               	movf	postinc2,w,c
 13221  003646  599B               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 13222  003648  E321               	bnc	l13874
 13223                           
 13224                           ; BSR set to: 0
 13225  00364A  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13226  00364C  ECAF  F021         	call	PL6	;call to abstracted procedure
 13227  003650  50DF               	movf	223,w,c
 13228  003652  0B0F               	andlw	15
 13229  003654  6F94               	movwf	??_StartReTxTimer& (0+255),b
 13230  003656  5194               	movf	??_StartReTxTimer& (0+255),w,b
 13231  003658  0102               	movlb	2	; () banked
 13232  00365A  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 13233  00365C  E317               	bnc	l13874
 13234                           
 13235                           ; BSR set to: 2
 13236  00365E  0100               	movlb	0	; () banked
 13237  003660  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13238  003662  ECAF  F021         	call	PL6	;call to abstracted procedure
 13239  003666  38DF               	swapf	223,w,c
 13240  003668  0B0F               	andlw	15
 13241  00366A  6F94               	movwf	??_StartReTxTimer& (0+255),b
 13242  00366C  0102               	movlb	2	; () banked
 13243  00366E  51DF               	movf	(_loRa+223)& (0+255),w,b
 13244  003670  0100               	movlb	0	; () banked
 13245  003672  5D94               	subwf	??_StartReTxTimer& (0+255),w,b
 13246  003674  E30B               	bnc	l13874
 13247                           
 13248                           ; BSR set to: 0
 13249                           ;lorawan_eu.c: 910: {
 13250                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 13251  003676  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13252  003678  EC71  F006         	call	PL4	;call to abstracted procedure
 13253  00367C  CFDE F098          	movff	postinc2,StartReTxTimer@minim
 13254  003680  CFDE F099          	movff	postinc2,StartReTxTimer@minim+1
 13255  003684  CFDE F09A          	movff	postinc2,StartReTxTimer@minim+2
 13256  003688  CFDE F09B          	movff	postinc2,StartReTxTimer@minim+3
 13257  00368C                     l13874:
 13258  00368C  0100               	movlb	0	; () banked
 13259  00368E  2B9C               	incf	StartReTxTimer@i& (0+255),f,b
 13260  003690                     l13876:
 13261                           
 13262                           ; BSR set to: 0
 13263  003690  519C               	movf	StartReTxTimer@i& (0+255),w,b
 13264  003692  0102               	movlb	2	; () banked
 13265  003694  5DED               	subwf	(_loRa+237)& (0+255),w,b
 13266  003696  E2C2               	bc	l13862
 13267                           
 13268                           ; BSR set to: 2
 13269                           ;lorawan_eu.c: 912: }
 13270                           ;lorawan_eu.c: 913: }
 13271                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 13272  003698  ECD6  F00D         	call	PL254	;call to abstracted procedure
 13273                           
 13274                           ; BSR set to: 2
 13275                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 13276  00369C  C098  F094         	movff	StartReTxTimer@minim,??_StartReTxTimer
 13277  0036A0  C099  F095         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 13278  0036A4  C09A  F096         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 13279  0036A8  C09B  F097         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 13280  0036AC  0E0C               	movlw	12
 13281  0036AE                     u15475:
 13282  0036AE  90D8               	bcf	status,0,c
 13283  0036B0  0100               	movlb	0	; () banked
 13284  0036B2  3794               	rlcf	??_StartReTxTimer& (0+255),f,b
 13285  0036B4  3795               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 13286  0036B6  3796               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 13287  0036B8  3797               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 13288  0036BA  2EE8               	decfsz	wreg,f,c
 13289  0036BC  D7F8               	goto	u15475
 13290  0036BE  C094  F064         	movff	??_StartReTxTimer,___lldiv@dividend
 13291  0036C2  C095  F065         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 13292  0036C6  C096  F066         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 13293  0036CA  C097  F067         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 13294  0036CE  0E7D               	movlw	125
 13295  0036D0  EC99  F011         	call	PL32	;call to abstracted procedure
 13296  0036D4  EC55  F025         	call	___lldiv	;wreg free
 13297  0036D8  EC93  F006         	call	PL22	;call to abstracted procedure
 13298  0036DC  51E6               	movf	(_loRa+230)& (0+255),w,b
 13299  0036DE  EC4F  F02C         	call	_SwTimerSetTimeout
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 13303  0036E2  0102               	movlb	2	; () banked
 13304  0036E4  51E6               	movf	(_loRa+230)& (0+255),w,b
 13305  0036E6  EFFE  F025         	goto	_SwTimerStart
 13306  0036EA                     __end_of_StartReTxTimer:
 13307                           	opt stack 0
 13308                           tosu	equ	0xFFF
 13309                           tosh	equ	0xFFE
 13310                           tosl	equ	0xFFD
 13311                           pclath	equ	0xFFA
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           indf0	equ	0xFEF
 13320                           postinc0	equ	0xFEE
 13321                           plusw0	equ	0xFEB
 13322                           fsr0h	equ	0xFEA
 13323                           fsr0l	equ	0xFE9
 13324                           wreg	equ	0xFE8
 13325                           postinc1	equ	0xFE6
 13326                           postdec1	equ	0xFE5
 13327                           plusw1	equ	0xFE3
 13328                           fsr1h	equ	0xFE2
 13329                           fsr1l	equ	0xFE1
 13330                           indf2	equ	0xFDF
 13331                           postinc2	equ	0xFDE
 13332                           postdec2	equ	0xFDD
 13333                           plusw2	equ	0xFDB
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338 ;; *************** function _SetReceptionNotOkState *****************
 13339 ;; Defined at:
 13340 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;		None
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;		None
 13345 ;; Return value:  Size  Location     Type
 13346 ;;                  1    wreg      void 
 13347 ;; Registers used:
 13348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13349 ;; Tracked objects:
 13350 ;;		On entry : E/2
 13351 ;;		On exit  : C/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13358 ;;Total ram usage:        0 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:   14
 13361 ;; This function calls:
 13362 ;;		_LORAWAN_EnterContinuousReceive
 13363 ;;		_RxDataDone
 13364 ;; This function is called by:
 13365 ;;		_LORAWAN_RxDone
 13366 ;; This function uses a non-reentrant model
 13367 ;;
 13368                           
 13369                           	psect	text62
 13370  004CCE                     __ptext62:
 13371                           	opt stack 0
 13372  004CCE                     _SetReceptionNotOkState:
 13373                           	opt stack 0
 13374                           
 13375                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;incstack = 0
 13379  004CCE  D82D               	call	PL430	;call to abstracted procedure
 13380  004CD0  E006               	bz	l2332
 13381                           
 13382                           ; BSR set to: 2
 13383  004CD2  5102               	movf	(_loRa+2)& (0+255),w,b
 13384  004CD4  0B0F               	andlw	15
 13385  004CD6  0A03               	xorlw	3
 13386  004CD8  E11D               	bnz	l14040
 13387                           
 13388                           ; BSR set to: 2
 13389  004CDA  51F1               	movf	(_loRa+241)& (0+255),w,b
 13390  004CDC  E01B               	bz	l14040
 13391  004CDE                     l2332:
 13392                           
 13393                           ; BSR set to: 2
 13394                           ;lorawan.c: 2000: {
 13395                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13396  004CDE  9100               	bcf	_loRa& (0+255),0,b
 13397                           
 13398                           ; BSR set to: 2
 13399                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 13400  004CE0  0EF0               	movlw	-16
 13401  004CE2  1702               	andwf	(_loRa+2)& (0+255),f,b
 13402                           
 13403                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 13404  004CE4  5112               	movf	(_loRa+18)& (0+255),w,b
 13405  004CE6  E114               	bnz	l14038
 13406                           
 13407                           ; BSR set to: 2
 13408  004CE8  0101               	movlb	1	; () banked
 13409  004CEA  516E               	movf	_rxPayload& (0+255),w,b
 13410  004CEC  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 13411  004CEE  E010               	bz	l14038
 13412                           
 13413                           ; BSR set to: 1
 13414                           ;lorawan.c: 2005: {
 13415                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 13416                           
 13417                           ; BSR set to: 2
 13418                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13419  004CF0  D819               	call	PL236	;call to abstracted procedure
 13420  004CF2  ECD1  F00D         	call	PL82	;call to abstracted procedure
 13421  004CF6  6B67               	clrf	RxDataDone@status& (0+255),b
 13422  004CF8  D801               	call	u15798
 13423  004CFA  D00A               	goto	l14038
 13424  004CFC                     u15798:
 13425  004CFC  0005               	push	
 13426  004CFE  6EFA               	movwf	pclath,c
 13427  004D00  0101               	movlb	1	; () banked
 13428  004D02  516E               	movf	_rxPayload& (0+255),w,b
 13429  004D04  6EFD               	movwf	tosl,c
 13430  004D06  516F               	movf	(_rxPayload+1)& (0+255),w,b
 13431  004D08  6EFE               	movwf	tosh,c
 13432  004D0A  6AFF               	clrf	tosu,c
 13433  004D0C  50FA               	movf	pclath,w,c
 13434  004D0E  0012               	return		;indir
 13435  004D10                     l14038:
 13436                           
 13437                           ;lorawan.c: 2008: }
 13438                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 13439  004D10  0102               	movlb	2	; () banked
 13440  004D12  9303               	bcf	(_loRa+3)& (0+255),1,b
 13441  004D14                     l14040:
 13442                           
 13443                           ; BSR set to: 2
 13444                           ;lorawan.c: 2010: }
 13445                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 13446  004D14  0E02               	movlw	2
 13447  004D16  1912               	xorwf	(_loRa+18)& (0+255),w,b
 13448  004D18  A4D8               	btfss	status,2,c
 13449  004D1A  0012               	return	
 13450                           
 13451                           ; BSR set to: 2
 13452                           ;lorawan.c: 2013: {
 13453                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13454  004D1C  EC51  F004         	call	PL328	;call to abstracted procedure
 13455                           
 13456                           ; BSR set to: 2
 13457                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 13458  004D20  EF60  F027         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 13459  004D24                     __end_of_SetReceptionNotOkState:
 13460                           	opt stack 0
 13461  004D24                     PL236:
 13462                           	opt stack 12
 13463  004D24  0102               	movlb	2	; () banked
 13464  004D26  9B00               	bcf	_loRa& (0+255),5,b
 13465  004D28  0C00               	retlw	0
 13466  004D2A                     __end_ofPL236:
 13467                           	opt stack 0
 13468  004D2A                     PL430:
 13469                           	opt stack 12
 13470  004D2A  0102               	movlb	2	; () banked
 13471  004D2C  5102               	movf	(_loRa+2)& (0+255),w,b
 13472  004D2E  0B0F               	andlw	15
 13473  004D30  0A05               	xorlw	5
 13474  004D32  0012               	return	
 13475  004D34                     __end_ofPL430:
 13476                           	opt stack 0
 13477                           tosu	equ	0xFFF
 13478                           tosh	equ	0xFFE
 13479                           tosl	equ	0xFFD
 13480                           pclath	equ	0xFFA
 13481                           tblptru	equ	0xFF8
 13482                           tblptrh	equ	0xFF7
 13483                           tblptrl	equ	0xFF6
 13484                           tablat	equ	0xFF5
 13485                           prodh	equ	0xFF4
 13486                           prodl	equ	0xFF3
 13487                           intcon	equ	0xFF2
 13488                           indf0	equ	0xFEF
 13489                           postinc0	equ	0xFEE
 13490                           plusw0	equ	0xFEB
 13491                           fsr0h	equ	0xFEA
 13492                           fsr0l	equ	0xFE9
 13493                           wreg	equ	0xFE8
 13494                           postinc1	equ	0xFE6
 13495                           postdec1	equ	0xFE5
 13496                           plusw1	equ	0xFE3
 13497                           fsr1h	equ	0xFE2
 13498                           fsr1l	equ	0xFE1
 13499                           indf2	equ	0xFDF
 13500                           postinc2	equ	0xFDE
 13501                           postdec2	equ	0xFDD
 13502                           plusw2	equ	0xFDB
 13503                           fsr2h	equ	0xFDA
 13504                           fsr2l	equ	0xFD9
 13505                           status	equ	0xFD8
 13506                           
 13507 ;; *************** function _SetJoinFailState *****************
 13508 ;; Defined at:
 13509 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;		None
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;		None
 13514 ;; Return value:  Size  Location     Type
 13515 ;;                  1    wreg      void 
 13516 ;; Registers used:
 13517 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 13518 ;; Tracked objects:
 13519 ;;		On entry : F/2
 13520 ;;		On exit  : F/1
 13521 ;;		Unchanged: 0/0
 13522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13527 ;;Total ram usage:        0 bytes
 13528 ;; Hardware stack levels used:    1
 13529 ;; Hardware stack levels required when called:    8
 13530 ;; This function calls:
 13531 ;;		_RxJoinResponse
 13532 ;; This function is called by:
 13533 ;;		_LORAWAN_RxTimeout
 13534 ;;		_LORAWAN_RxDone
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538                           	psect	text63
 13539  005D40                     __ptext63:
 13540                           	opt stack 0
 13541  005D40                     _SetJoinFailState:
 13542                           	opt stack 18
 13543                           
 13544                           ; BSR set to: 2
 13545                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 13546                           
 13547                           ;incstack = 0
 13548  005D40  9902               	bcf	(_loRa+2)& (0+255),4,b
 13549                           
 13550                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 13551  005D42  9500               	bcf	_loRa& (0+255),2,b
 13552                           
 13553                           ; BSR set to: 2
 13554                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 13555  005D44  0EF0               	movlw	-16
 13556  005D46  1702               	andwf	(_loRa+2)& (0+255),f,b
 13557                           
 13558                           ; BSR set to: 2
 13559                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 13560  005D48  0101               	movlb	1	; () banked
 13561  005D4A  5170               	movf	(_rxPayload+2)& (0+255),w,b
 13562  005D4C  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
 13563  005D4E  B4D8               	btfsc	status,2,c
 13564  005D50  0012               	return	
 13565                           
 13566                           ; BSR set to: 1
 13567                           ;lorawan.c: 1110: {
 13568                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 13569  005D52  0005               	push	
 13570  005D54  6EFA               	movwf	pclath,c
 13571  005D56  5170               	movf	(_rxPayload+2)& (0+255),w,b
 13572  005D58  6EFD               	movwf	tosl,c
 13573  005D5A  5171               	movf	(_rxPayload+3)& (0+255),w,b
 13574  005D5C  6EFE               	movwf	tosh,c
 13575  005D5E  6AFF               	clrf	tosu,c
 13576  005D60  50FA               	movf	pclath,w,c
 13577  005D62  0C00               	retlw	0	;indir
 13578  005D64                     __end_of_SetJoinFailState:
 13579                           	opt stack 0
 13580                           tosu	equ	0xFFF
 13581                           tosh	equ	0xFFE
 13582                           tosl	equ	0xFFD
 13583                           pclath	equ	0xFFA
 13584                           tblptru	equ	0xFF8
 13585                           tblptrh	equ	0xFF7
 13586                           tblptrl	equ	0xFF6
 13587                           tablat	equ	0xFF5
 13588                           prodh	equ	0xFF4
 13589                           prodl	equ	0xFF3
 13590                           intcon	equ	0xFF2
 13591                           indf0	equ	0xFEF
 13592                           postinc0	equ	0xFEE
 13593                           plusw0	equ	0xFEB
 13594                           fsr0h	equ	0xFEA
 13595                           fsr0l	equ	0xFE9
 13596                           wreg	equ	0xFE8
 13597                           postinc1	equ	0xFE6
 13598                           postdec1	equ	0xFE5
 13599                           plusw1	equ	0xFE3
 13600                           fsr1h	equ	0xFE2
 13601                           fsr1l	equ	0xFE1
 13602                           indf2	equ	0xFDF
 13603                           postinc2	equ	0xFDE
 13604                           postdec2	equ	0xFDD
 13605                           plusw2	equ	0xFDB
 13606                           fsr2h	equ	0xFDA
 13607                           fsr2l	equ	0xFD9
 13608                           status	equ	0xFD8
 13609                           
 13610 ;; *************** function _RxJoinResponse *****************
 13611 ;; Defined at:
 13612 ;;		line 112 in file "main.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  status          1    wreg     unsigned char 
 13615 ;; Auto vars:     Size  Location     Type
 13616 ;;  status          1    0[COMRAM] unsigned char 
 13617 ;; Return value:  Size  Location     Type
 13618 ;;                  1    wreg      void 
 13619 ;; Registers used:
 13620 ;;		wreg, status,2
 13621 ;; Tracked objects:
 13622 ;;		On entry : F/1
 13623 ;;		On exit  : F/1
 13624 ;;		Unchanged: 0/0
 13625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13630 ;;Total ram usage:        0 bytes
 13631 ;; Hardware stack levels used:    1
 13632 ;; Hardware stack levels required when called:    7
 13633 ;; This function calls:
 13634 ;;		Nothing
 13635 ;; This function is called by:
 13636 ;;		_main
 13637 ;;		_SetJoinFailState
 13638 ;;		_UpdateJoinSuccessState
 13639 ;; This function uses a non-reentrant model
 13640 ;;
 13641                           
 13642                           	psect	text64
 13643  00624E                     __ptext64:
 13644                           	opt stack 0
 13645  00624E                     _RxJoinResponse:
 13646                           	opt stack 20
 13647                           
 13648                           ; BSR set to: 1
 13649                           ;main.c: 114: JoinedServer = 1;
 13650                           
 13651                           ; BSR set to: 1
 13652                           ;incstack = 0
 13653  00624E  0E01               	movlw	1
 13654  006250  6F72               	movwf	_JoinedServer& (0+255),b
 13655                           
 13656                           ; BSR set to: 1
 13657  006252  0C01               	retlw	1	;funcret
 13658  006254                     __end_of_RxJoinResponse:
 13659                           	opt stack 0
 13660                           tosu	equ	0xFFF
 13661                           tosh	equ	0xFFE
 13662                           tosl	equ	0xFFD
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           indf0	equ	0xFEF
 13672                           postinc0	equ	0xFEE
 13673                           plusw0	equ	0xFEB
 13674                           fsr0h	equ	0xFEA
 13675                           fsr0l	equ	0xFE9
 13676                           wreg	equ	0xFE8
 13677                           postinc1	equ	0xFE6
 13678                           postdec1	equ	0xFE5
 13679                           plusw1	equ	0xFE3
 13680                           fsr1h	equ	0xFE2
 13681                           fsr1l	equ	0xFE1
 13682                           indf2	equ	0xFDF
 13683                           postinc2	equ	0xFDE
 13684                           postdec2	equ	0xFDD
 13685                           plusw2	equ	0xFDB
 13686                           fsr2h	equ	0xFDA
 13687                           fsr2l	equ	0xFD9
 13688                           status	equ	0xFD8
 13689                           
 13690 ;; *************** function _MacExecuteCommands *****************
 13691 ;; Defined at:
 13692 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;  buffer          2   72[BANK0 ] PTR unsigned char 
 13695 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13696 ;;  fOptsLen        1   74[BANK0 ] unsigned char 
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  ptr             2   78[BANK0 ] PTR unsigned char 
 13699 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13700 ;;  done            1   77[BANK0 ] unsigned char 
 13701 ;; Return value:  Size  Location     Type
 13702 ;;                  2   72[BANK0 ] PTR unsigned char 
 13703 ;; Registers used:
 13704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13705 ;; Tracked objects:
 13706 ;;		On entry : F/0
 13707 ;;		On exit  : F/0
 13708 ;;		Unchanged: 0/0
 13709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13710 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13713 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13714 ;;Total ram usage:        8 bytes
 13715 ;; Hardware stack levels used:    1
 13716 ;; Hardware stack levels required when called:   11
 13717 ;; This function calls:
 13718 ;;		_ExecuteDevStatus
 13719 ;;		_ExecuteDutyCycle
 13720 ;;		_ExecuteLinkAdr
 13721 ;;		_ExecuteLinkCheck
 13722 ;;		_ExecuteNewChannel
 13723 ;;		_ExecuteRxParamSetupReq
 13724 ;;		_ExecuteRxTimingSetup
 13725 ;; This function is called by:
 13726 ;;		_LORAWAN_RxDone
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text65
 13731  002502                     __ptext65:
 13732                           	opt stack 0
 13733  002502                     _MacExecuteCommands:
 13734                           	opt stack 15
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;lorawan.c: 1577: bool done = 0;
 13738                           
 13739                           ; BSR set to: 1
 13740                           ;incstack = 0
 13741  002502  6BAD               	clrf	MacExecuteCommands@done& (0+255),b
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;lorawan.c: 1578: uint8_t *ptr;
 13745                           ;lorawan.c: 1579: ptr = buffer;
 13746  002504  C0A8  F0AE         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 13747  002508  C0A9  F0AF         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 13748                           
 13749                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 13750  00250C  D0A5               	goto	l14102
 13751  00250E                     l14066:
 13752                           
 13753                           ; BSR set to: 0
 13754                           ;lorawan.c: 1581: {
 13755                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 13756  00250E  0102               	movlb	2	; () banked
 13757  002510  51A7               	movf	(_loRa+167)& (0+255),w,b
 13758  002512  ECEB  F015         	call	PL2	;call to abstracted procedure
 13759  002516  90DF               	bcf	indf2,0,c
 13760                           
 13761                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 13762  002518  51A7               	movf	(_loRa+167)& (0+255),w,b
 13763  00251A  ECEB  F015         	call	PL2	;call to abstracted procedure
 13764  00251E  92DF               	bcf	indf2,1,c
 13765                           
 13766                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 13767  002520  51A7               	movf	(_loRa+167)& (0+255),w,b
 13768  002522  ECEB  F015         	call	PL2	;call to abstracted procedure
 13769  002526  94DF               	bcf	indf2,2,c
 13770                           
 13771                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 13772  002528  51A7               	movf	(_loRa+167)& (0+255),w,b
 13773  00252A  ECEB  F015         	call	PL2	;call to abstracted procedure
 13774  00252E  96DF               	bcf	indf2,3,c
 13775                           
 13776                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 13777  002530  51A7               	movf	(_loRa+167)& (0+255),w,b
 13778  002532  ECEB  F015         	call	PL2	;call to abstracted procedure
 13779  002536  98DF               	bcf	indf2,4,c
 13780                           
 13781                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 13782  002538  51A7               	movf	(_loRa+167)& (0+255),w,b
 13783  00253A  ECEB  F015         	call	PL2	;call to abstracted procedure
 13784  00253E  9ADF               	bcf	indf2,5,c
 13785                           
 13786                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 13787  002540  51A7               	movf	(_loRa+167)& (0+255),w,b
 13788  002542  ECEB  F015         	call	PL2	;call to abstracted procedure
 13789  002546  9CDF               	bcf	indf2,6,c
 13790                           
 13791                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 13792  002548  51A7               	movf	(_loRa+167)& (0+255),w,b
 13793  00254A  ECEB  F015         	call	PL2	;call to abstracted procedure
 13794  00254E  9EDF               	bcf	indf2,7,c
 13795                           
 13796                           ; BSR set to: 2
 13797                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 13798  002550  D897               	call	PL422	;call to abstracted procedure
 13799  002552  51A7               	movf	(_loRa+167)& (0+255),w,b
 13800  002554  0D02               	mullw	2
 13801  002556  0EA8               	movlw	low (_loRa+168)
 13802  002558  24F3               	addwf	prodl,w,c
 13803  00255A  6EE9               	movwf	fsr0l,c
 13804  00255C  0E02               	movlw	high (_loRa+168)
 13805  00255E  20F4               	addwfc	prodh,w,c
 13806  002560  ECD2  F010         	call	PL470	;call to abstracted procedure
 13807                           
 13808                           ;lorawan.c: 1595: switch (*ptr ++)
 13809  002564  D05B               	goto	l14094
 13810  002566                     l14070:
 13811                           
 13812                           ; BSR set to: 0
 13813                           ;lorawan.c: 1598: {
 13814                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 13815  002566  C0AE  F064         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 13816  00256A  C0AF  F065         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 13817  00256E  ECC1  F02D         	call	_ExecuteLinkCheck
 13818  002572  C064  F0AE         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 13819  002576  C065  F0AF         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 13820  00257A                     l14072:
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;lorawan.c: 1601: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 13824  00257A  0102               	movlb	2	; () banked
 13825  00257C  51A7               	movf	(_loRa+167)& (0+255),w,b
 13826  00257E  ECC5  F010         	call	PL16	;call to abstracted procedure
 13827  002582  68DF               	setf	indf2,c
 13828                           
 13829                           ;lorawan.c: 1602: } break;
 13830  002584  D05F               	goto	l14096
 13831  002586                     l14074:
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;lorawan.c: 1605: {
 13835                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 13836  002586  C0AE  F071         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 13837  00258A  C0AF  F072         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 13838  00258E  EC5D  F015         	call	_ExecuteLinkAdr	;wreg free
 13839  002592  C071  F0AE         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 13840  002596  C072  F0AF         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 13841                           
 13842                           ;lorawan.c: 1607: } break;
 13843  00259A  D054               	goto	l14096
 13844  00259C                     l14076:
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;lorawan.c: 1610: {
 13848                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 13849  00259C  C0AE  F064         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 13850  0025A0  C0AF  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 13851  0025A4  EC99  F029         	call	_ExecuteDutyCycle	;wreg free
 13852  0025A8  C064  F0AE         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 13853  0025AC  C065  F0AF         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 13854                           
 13855                           ;lorawan.c: 1612: } break;
 13856  0025B0  D049               	goto	l14096
 13857  0025B2                     l14078:
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;lorawan.c: 1615: {
 13861                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 13862  0025B2  C0AE  F0A0         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 13863  0025B6  C0AF  F0A1         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 13864  0025BA  EC31  F018         	call	_ExecuteRxParamSetupReq	;wreg free
 13865  0025BE  C0A0  F0AE         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 13866  0025C2  C0A1  F0AF         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 13867                           
 13868                           ;lorawan.c: 1617: } break;
 13869  0025C6  D03E               	goto	l14096
 13870  0025C8                     l14080:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;lorawan.c: 1620: {
 13874                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 13875  0025C8  C0AE  F064         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 13876  0025CC  C0AF  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 13877  0025D0  ECDD  F030         	call	_ExecuteDevStatus	;wreg free
 13878  0025D4  C064  F0AE         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 13879  0025D8  C065  F0AF         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 13880                           
 13881                           ;lorawan.c: 1622: } break;
 13882  0025DC  D033               	goto	l14096
 13883  0025DE                     l14082:
 13884                           
 13885                           ; BSR set to: 0
 13886                           ;lorawan.c: 1625: {
 13887                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 13888  0025DE  C0AE  F0A0         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 13889  0025E2  C0AF  F0A1         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 13890  0025E6  EC45  F013         	call	_ExecuteNewChannel	;wreg free
 13891  0025EA  C0A0  F0AE         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 13892  0025EE  C0A1  F0AF         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 13893                           
 13894                           ;lorawan.c: 1628: } break;
 13895  0025F2  D028               	goto	l14096
 13896  0025F4                     l14084:
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;lorawan.c: 1631: {
 13900                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 13901  0025F4  C0AE  F06B         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 13902  0025F8  C0AF  F06C         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 13903  0025FC  ECB2  F02E         	call	_ExecuteRxTimingSetup	;wreg free
 13904  002600  C06B  F0AE         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 13905  002604  C06C  F0AF         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 13906                           
 13907                           ;lorawan.c: 1633: } break;
 13908  002608  D01D               	goto	l14096
 13909  00260A                     l14086:
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;lorawan.c: 1636: {
 13913                           ;lorawan.c: 1637: done = 1;
 13914  00260A  0E01               	movlw	1
 13915  00260C  6FAD               	movwf	MacExecuteCommands@done& (0+255),b
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 13919  00260E  51AA               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13920  002610  25A8               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13921  002612  6FAE               	movwf	MacExecuteCommands@ptr& (0+255),b
 13922  002614  0E00               	movlw	0
 13923  002616  21A9               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13924  002618  6FAF               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 13925  00261A  D7AF               	goto	l14072
 13926  00261C                     l14094:
 13927                           
 13928                           ; BSR set to: 2
 13929  00261C  D831               	call	PL422	;call to abstracted procedure
 13930  00261E  0100               	movlb	0	; () banked
 13931  002620  4BAE               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 13932  002622  2BAF               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 13933  002624  50DF               	movf	indf2,w,c
 13934                           
 13935                           ; Switch size 1, requested type "space"
 13936                           ; Number of cases is 7, Range of values is 2 to 8
 13937                           ; switch strategies available:
 13938                           ; Name         Instructions Cycles
 13939                           ; simple_byte           22    12 (average)
 13940                           ;	Chosen strategy is simple_byte
 13941  002626  0A02               	xorlw	2	; case 2
 13942  002628  E09E               	bz	l14070
 13943  00262A  0A01               	xorlw	1	; case 3
 13944  00262C  E0AC               	bz	l14074
 13945  00262E  0A07               	xorlw	7	; case 4
 13946  002630  E0B5               	bz	l14076
 13947  002632  0A01               	xorlw	1	; case 5
 13948  002634  E0BE               	bz	l14078
 13949  002636  0A03               	xorlw	3	; case 6
 13950  002638  E0C7               	bz	l14080
 13951  00263A  0A01               	xorlw	1	; case 7
 13952  00263C  E0D0               	bz	l14082
 13953  00263E  0A0F               	xorlw	15	; case 8
 13954  002640  E0D9               	bz	l14084
 13955  002642  D7E3               	goto	l14086
 13956  002644                     l14096:
 13957                           
 13958                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 13959                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 13960  002644  0102               	movlb	2	; () banked
 13961  002646  51A7               	movf	(_loRa+167)& (0+255),w,b
 13962  002648  ECC5  F010         	call	PL16	;call to abstracted procedure
 13963  00264C  28DE               	incf	postinc2,w,c
 13964  00264E  E004               	bz	l14102
 13965                           
 13966                           ; BSR set to: 2
 13967  002650  0E10               	movlw	16
 13968  002652  61A7               	cpfslt	(_loRa+167)& (0+255),b
 13969  002654  D001               	goto	l14102
 13970                           
 13971                           ; BSR set to: 2
 13972                           ;lorawan.c: 1645: {
 13973                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 13974  002656  2BA7               	incf	(_loRa+167)& (0+255),f,b
 13975  002658                     l14102:
 13976  002658  0100               	movlb	0	; () banked
 13977  00265A  51AA               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13978  00265C  25A8               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13979  00265E  6FAB               	movwf	??_MacExecuteCommands& (0+255),b
 13980  002660  0E00               	movlw	0
 13981  002662  21A9               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13982  002664  6FAC               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 13983  002666  51AB               	movf	??_MacExecuteCommands& (0+255),w,b
 13984  002668  5DAE               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 13985  00266A  51AC               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 13986  00266C  59AF               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 13987  00266E  E203               	bc	l14106
 13988                           
 13989                           ; BSR set to: 0
 13990  002670  51AD               	movf	MacExecuteCommands@done& (0+255),w,b
 13991  002672  E101 D74C          	bz	l14066
 13992  002676                     l14106:
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;lorawan.c: 1647: }
 13996                           ;lorawan.c: 1648: }
 13997                           ;lorawan.c: 1649: return ptr;
 13998  002676  C0AE  F0A8         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 13999  00267A  C0AF  F0A9         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 14000                           
 14001                           ; BSR set to: 0
 14002  00267E  0012               	return		;funcret
 14003  002680                     __end_of_MacExecuteCommands:
 14004                           	opt stack 0
 14005  002680                     PL422:
 14006                           	opt stack 15
 14007  002680  C0AE  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 14008  002684  C0AF  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 14009  002688  0012               	return	
 14010  00268A                     __end_ofPL422:
 14011                           	opt stack 0
 14012                           tosu	equ	0xFFF
 14013                           tosh	equ	0xFFE
 14014                           tosl	equ	0xFFD
 14015                           pclath	equ	0xFFA
 14016                           tblptru	equ	0xFF8
 14017                           tblptrh	equ	0xFF7
 14018                           tblptrl	equ	0xFF6
 14019                           tablat	equ	0xFF5
 14020                           prodh	equ	0xFF4
 14021                           prodl	equ	0xFF3
 14022                           intcon	equ	0xFF2
 14023                           indf0	equ	0xFEF
 14024                           postinc0	equ	0xFEE
 14025                           plusw0	equ	0xFEB
 14026                           fsr0h	equ	0xFEA
 14027                           fsr0l	equ	0xFE9
 14028                           wreg	equ	0xFE8
 14029                           postinc1	equ	0xFE6
 14030                           postdec1	equ	0xFE5
 14031                           plusw1	equ	0xFE3
 14032                           fsr1h	equ	0xFE2
 14033                           fsr1l	equ	0xFE1
 14034                           indf2	equ	0xFDF
 14035                           postinc2	equ	0xFDE
 14036                           postdec2	equ	0xFDD
 14037                           plusw2	equ	0xFDB
 14038                           fsr2h	equ	0xFDA
 14039                           fsr2l	equ	0xFD9
 14040                           status	equ	0xFD8
 14041                           
 14042 ;; *************** function _ExecuteRxTimingSetup *****************
 14043 ;; Defined at:
 14044 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;  ptr             2   11[BANK0 ] PTR unsigned char 
 14047 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 14048 ;; Auto vars:     Size  Location     Type
 14049 ;;  delay           1   13[BANK0 ] unsigned char 
 14050 ;; Return value:  Size  Location     Type
 14051 ;;                  2   11[BANK0 ] PTR unsigned char 
 14052 ;; Registers used:
 14053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14054 ;; Tracked objects:
 14055 ;;		On entry : F/0
 14056 ;;		On exit  : F/2
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14059 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14062 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14063 ;;Total ram usage:        3 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    9
 14066 ;; This function calls:
 14067 ;;		_UpdateReceiveDelays
 14068 ;; This function is called by:
 14069 ;;		_MacExecuteCommands
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           	psect	text66
 14074  005D64                     __ptext66:
 14075                           	opt stack 0
 14076  005D64                     _ExecuteRxTimingSetup:
 14077                           	opt stack 16
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;lorawan.c: 1661: uint8_t delay;
 14081                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;incstack = 0
 14085  005D64  C06B  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 14086  005D68  C06C  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 14087  005D6C  50DF               	movf	indf2,w,c
 14088  005D6E  0B0F               	andlw	15
 14089  005D70  6F6D               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;lorawan.c: 1664: ptr++;
 14093  005D72  4B6B               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 14094  005D74  2B6C               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 14095                           
 14096                           ; BSR set to: 0
 14097                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 14098  005D76  516D               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 14099  005D78  EC86  F02C         	call	_UpdateReceiveDelays
 14100                           
 14101                           ; BSR set to: 2
 14102                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 14103  005D7C  8104               	bsf	(_loRa+4)& (0+255),0,b
 14104                           
 14105                           ; BSR set to: 2
 14106                           ;lorawan.c: 1669: return ptr;
 14107  005D7E  C06B  F06B         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 14108  005D82  C06C  F06C         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 14109                           
 14110                           ; BSR set to: 2
 14111  005D86  0012               	return		;funcret
 14112  005D88                     __end_of_ExecuteRxTimingSetup:
 14113                           	opt stack 0
 14114                           tosu	equ	0xFFF
 14115                           tosh	equ	0xFFE
 14116                           tosl	equ	0xFFD
 14117                           pclath	equ	0xFFA
 14118                           tblptru	equ	0xFF8
 14119                           tblptrh	equ	0xFF7
 14120                           tblptrl	equ	0xFF6
 14121                           tablat	equ	0xFF5
 14122                           prodh	equ	0xFF4
 14123                           prodl	equ	0xFF3
 14124                           intcon	equ	0xFF2
 14125                           indf0	equ	0xFEF
 14126                           postinc0	equ	0xFEE
 14127                           plusw0	equ	0xFEB
 14128                           fsr0h	equ	0xFEA
 14129                           fsr0l	equ	0xFE9
 14130                           wreg	equ	0xFE8
 14131                           postinc1	equ	0xFE6
 14132                           postdec1	equ	0xFE5
 14133                           plusw1	equ	0xFE3
 14134                           fsr1h	equ	0xFE2
 14135                           fsr1l	equ	0xFE1
 14136                           indf2	equ	0xFDF
 14137                           postinc2	equ	0xFDE
 14138                           postdec2	equ	0xFDD
 14139                           plusw2	equ	0xFDB
 14140                           fsr2h	equ	0xFDA
 14141                           fsr2l	equ	0xFD9
 14142                           status	equ	0xFD8
 14143                           
 14144 ;; *************** function _UpdateReceiveDelays *****************
 14145 ;; Defined at:
 14146 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  delay           1    wreg     unsigned char 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  delay           1   10[BANK0 ] unsigned char 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14155 ;; Tracked objects:
 14156 ;;		On entry : C/3
 14157 ;;		On exit  : F/2
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14164 ;;Total ram usage:        1 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    8
 14167 ;; This function calls:
 14168 ;;		___wmul
 14169 ;; This function is called by:
 14170 ;;		_LORAWAN_RxDone
 14171 ;;		_ExecuteRxTimingSetup
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           	psect	text67
 14176  00590C                     __ptext67:
 14177                           	opt stack 0
 14178  00590C                     _UpdateReceiveDelays:
 14179                           	opt stack 18
 14180                           
 14181                           ; BSR set to: 2
 14182                           ;incstack = 0
 14183                           ;UpdateReceiveDelays@delay stored from wreg
 14184  00590C  0100               	movlb	0	; () banked
 14185  00590E  6F6A               	movwf	UpdateReceiveDelays@delay& (0+255),b
 14186                           
 14187                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 14188  005910  C06A  F064         	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 14189  005914  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14190  005916  0E03               	movlw	3
 14191  005918  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14192  00591A  0EE8               	movlw	232
 14193  00591C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14194  00591E  EC41  F02E         	call	___wmul	;wreg free
 14195  005922  C064  F294         	movff	?___wmul,_loRa+148
 14196  005926  C065  F295         	movff	?___wmul+1,_loRa+149
 14197                           
 14198                           ; BSR set to: 0
 14199                           ;lorawan.c: 2029: if (delay == 0)
 14200  00592A  516A               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 14201  00592C  E102               	bnz	l13136
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;lorawan.c: 2030: {
 14205                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 14206  00592E  EC98  F014         	call	PL364	;call to abstracted procedure
 14207  005932                     l13136:
 14208                           
 14209                           ;lorawan.c: 2032: }
 14210                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 14211  005932  0EE8               	movlw	232
 14212  005934  0102               	movlb	2	; () banked
 14213  005936  2594               	addwf	(_loRa+148)& (0+255),w,b
 14214  005938  6F96               	movwf	(_loRa+150)& (0+255),b
 14215  00593A  0E03               	movlw	3
 14216  00593C  2195               	addwfc	(_loRa+149)& (0+255),w,b
 14217  00593E  6F97               	movwf	(_loRa+151)& (0+255),b
 14218                           
 14219                           ; BSR set to: 2
 14220  005940  0012               	return		;funcret
 14221  005942                     __end_of_UpdateReceiveDelays:
 14222                           	opt stack 0
 14223                           tosu	equ	0xFFF
 14224                           tosh	equ	0xFFE
 14225                           tosl	equ	0xFFD
 14226                           pclath	equ	0xFFA
 14227                           tblptru	equ	0xFF8
 14228                           tblptrh	equ	0xFF7
 14229                           tblptrl	equ	0xFF6
 14230                           tablat	equ	0xFF5
 14231                           prodh	equ	0xFF4
 14232                           prodl	equ	0xFF3
 14233                           intcon	equ	0xFF2
 14234                           indf0	equ	0xFEF
 14235                           postinc0	equ	0xFEE
 14236                           plusw0	equ	0xFEB
 14237                           fsr0h	equ	0xFEA
 14238                           fsr0l	equ	0xFE9
 14239                           wreg	equ	0xFE8
 14240                           postinc1	equ	0xFE6
 14241                           postdec1	equ	0xFE5
 14242                           plusw1	equ	0xFE3
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           plusw2	equ	0xFDB
 14249                           fsr2h	equ	0xFDA
 14250                           fsr2l	equ	0xFD9
 14251                           status	equ	0xFD8
 14252                           
 14253 ;; *************** function ___wmul *****************
 14254 ;; Defined at:
 14255 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;  multiplier      2    4[BANK0 ] unsigned int 
 14258 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  product         2    8[BANK0 ] unsigned int 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  2    4[BANK0 ] unsigned int 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2, status,0, prodl, prodh
 14265 ;; Tracked objects:
 14266 ;;		On entry : F/0
 14267 ;;		On exit  : F/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14274 ;;Total ram usage:        6 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    7
 14277 ;; This function calls:
 14278 ;;		Nothing
 14279 ;; This function is called by:
 14280 ;;		_UpdateReceiveDelays
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           	psect	text68
 14285  005C82                     __ptext68:
 14286                           	opt stack 0
 14287  005C82                     ___wmul:
 14288                           	opt stack 18
 14289                           
 14290                           ; BSR set to: 0
 14291                           
 14292                           ; BSR set to: 2
 14293                           ;incstack = 0
 14294  005C82  5164               	movf	___wmul@multiplier& (0+255),w,b
 14295  005C84  0366               	mulwf	___wmul@multiplicand& (0+255),b
 14296  005C86  CFF3 F068          	movff	prodl,___wmul@product
 14297  005C8A  CFF4 F069          	movff	prodh,___wmul@product+1
 14298  005C8E  5164               	movf	___wmul@multiplier& (0+255),w,b
 14299  005C90  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14300  005C92  50F3               	movf	prodl,w,c
 14301  005C94  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 14302  005C96  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14303  005C98  0366               	mulwf	___wmul@multiplicand& (0+255),b
 14304  005C9A  50F3               	movf	prodl,w,c
 14305  005C9C  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 14306                           
 14307                           ; BSR set to: 0
 14308  005C9E  C068  F064         	movff	___wmul@product,?___wmul
 14309  005CA2  C069  F065         	movff	___wmul@product+1,?___wmul+1
 14310                           
 14311                           ; BSR set to: 0
 14312  005CA6  0012               	return		;funcret
 14313  005CA8                     __end_of___wmul:
 14314                           	opt stack 0
 14315                           tosu	equ	0xFFF
 14316                           tosh	equ	0xFFE
 14317                           tosl	equ	0xFFD
 14318                           pclath	equ	0xFFA
 14319                           tblptru	equ	0xFF8
 14320                           tblptrh	equ	0xFF7
 14321                           tblptrl	equ	0xFF6
 14322                           tablat	equ	0xFF5
 14323                           prodh	equ	0xFF4
 14324                           prodl	equ	0xFF3
 14325                           intcon	equ	0xFF2
 14326                           indf0	equ	0xFEF
 14327                           postinc0	equ	0xFEE
 14328                           plusw0	equ	0xFEB
 14329                           fsr0h	equ	0xFEA
 14330                           fsr0l	equ	0xFE9
 14331                           wreg	equ	0xFE8
 14332                           postinc1	equ	0xFE6
 14333                           postdec1	equ	0xFE5
 14334                           plusw1	equ	0xFE3
 14335                           fsr1h	equ	0xFE2
 14336                           fsr1l	equ	0xFE1
 14337                           indf2	equ	0xFDF
 14338                           postinc2	equ	0xFDE
 14339                           postdec2	equ	0xFDD
 14340                           plusw2	equ	0xFDB
 14341                           fsr2h	equ	0xFDA
 14342                           fsr2l	equ	0xFD9
 14343                           status	equ	0xFD8
 14344                           
 14345 ;; *************** function _ExecuteRxParamSetupReq *****************
 14346 ;; Defined at:
 14347 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14348 ;; Parameters:    Size  Location     Type
 14349 ;;  ptr             2   64[BANK0 ] PTR unsigned char 
 14350 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  frequency       4   66[BANK0 ] unsigned long 
 14353 ;;  dlSettings      1   70[BANK0 ] struct .
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  2   64[BANK0 ] PTR unsigned char 
 14356 ;; Registers used:
 14357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14358 ;; Tracked objects:
 14359 ;;		On entry : F/0
 14360 ;;		On exit  : F/2
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14364 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14366 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14367 ;;Total ram usage:        7 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    8
 14370 ;; This function calls:
 14371 ;;		_UpdateReceiveWindow2Parameters
 14372 ;;		_ValidateDataRate
 14373 ;;		_ValidateFrequency
 14374 ;;		_ValidateRxOffset
 14375 ;;		___lmul
 14376 ;; This function is called by:
 14377 ;;		_MacExecuteCommands
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           	psect	text69
 14382  003062                     __ptext69:
 14383                           	opt stack 0
 14384  003062                     _ExecuteRxParamSetupReq:
 14385                           	opt stack 0
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 14389                           
 14390                           ; BSR set to: 0
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;incstack = 0
 14394  003062  D87D               	call	PL436	;call to abstracted procedure
 14395  003064  50DF               	movf	indf2,w,c
 14396  003066  6FA6               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 14397                           
 14398                           ; BSR set to: 0
 14399  003068  4BA0               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14400  00306A  2BA1               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14401                           
 14402                           ; BSR set to: 0
 14403                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14404  00306C  D878               	call	PL436	;call to abstracted procedure
 14405  00306E  0EFF               	movlw	255
 14406  003070  14DE               	andwf	postinc2,w,c
 14407  003072  6FA2               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 14408  003074  0EFF               	movlw	255
 14409  003076  14DE               	andwf	postinc2,w,c
 14410  003078  6FA3               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 14411  00307A  0EFF               	movlw	255
 14412  00307C  14DE               	andwf	postinc2,w,c
 14413  00307E  6FA4               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 14414  003080  0E00               	movlw	0
 14415  003082  14DE               	andwf	postinc2,w,c
 14416  003084  6FA5               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 14420  003086  C0A2  F094         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 14421  00308A  C0A3  F095         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 14422  00308E  C0A4  F096         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 14423  003092  C0A5  F097         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 14424  003096  0E64               	movlw	100
 14425  003098  ECC2  F006         	call	PL88	;call to abstracted procedure
 14426  00309C  EC34  F02A         	call	___lmul	;wreg free
 14427  0030A0  C094  F0A2         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 14428  0030A4  C095  F0A3         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 14429  0030A8  C096  F0A4         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 14430  0030AC  C097  F0A5         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 14434  0030B0  0E03               	movlw	3
 14435  0030B2  27A0               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14436  0030B4  0E00               	movlw	0
 14437  0030B6  23A1               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 14441  0030B8  C0A2  F064         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 14442  0030BC  C0A3  F065         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 14443  0030C0  C0A4  F066         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 14444  0030C4  C0A5  F067         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 14445  0030C8  ECBF  F027         	call	_ValidateFrequency	;wreg free
 14446  0030CC  0900               	iorlw	0
 14447  0030CE  E105               	bnz	l13572
 14448                           
 14449                           ; BSR set to: 0
 14450                           ;lorawan_eu.c: 754: {
 14451                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 14452  0030D0  0102               	movlb	2	; () banked
 14453  0030D2  51A7               	movf	(_loRa+167)& (0+255),w,b
 14454  0030D4  ECEB  F015         	call	PL2	;call to abstracted procedure
 14455  0030D8  86DF               	bsf	indf2,3,c
 14456  0030DA                     l13572:
 14457                           
 14458                           ;lorawan_eu.c: 756: }
 14459                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 14460  0030DA  0100               	movlb	0	; () banked
 14461  0030DC  51A6               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14462  0030DE  0B0F               	andlw	15
 14463  0030E0  EC6F  F030         	call	_ValidateDataRate
 14464  0030E4  0900               	iorlw	0
 14465  0030E6  E105               	bnz	l13576
 14466                           
 14467                           ; BSR set to: 0
 14468                           ;lorawan_eu.c: 759: {
 14469                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 14470  0030E8  0102               	movlb	2	; () banked
 14471  0030EA  51A7               	movf	(_loRa+167)& (0+255),w,b
 14472  0030EC  ECEB  F015         	call	PL2	;call to abstracted procedure
 14473  0030F0  88DF               	bsf	indf2,4,c
 14474  0030F2                     l13576:
 14475                           
 14476                           ;lorawan_eu.c: 761: }
 14477                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 14478  0030F2  0100               	movlb	0	; () banked
 14479  0030F4  39A6               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14480  0030F6  0B07               	andlw	7
 14481  0030F8  EC65  F030         	call	_ValidateRxOffset
 14482  0030FC  0900               	iorlw	0
 14483  0030FE  E105               	bnz	l1148
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;lorawan_eu.c: 764: {
 14487                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 14488  003100  0102               	movlb	2	; () banked
 14489  003102  51A7               	movf	(_loRa+167)& (0+255),w,b
 14490  003104  ECEB  F015         	call	PL2	;call to abstracted procedure
 14491  003108  8ADF               	bsf	indf2,5,c
 14492  00310A                     l1148:
 14493                           
 14494                           ;lorawan_eu.c: 766: }
 14495                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 14496  00310A  0102               	movlb	2	; () banked
 14497  00310C  51A7               	movf	(_loRa+167)& (0+255),w,b
 14498  00310E  ECEB  F015         	call	PL2	;call to abstracted procedure
 14499  003112  A8DF               	btfss	indf2,4,c
 14500  003114  D01F               	goto	l13590
 14501                           
 14502                           ; BSR set to: 2
 14503  003116  51A7               	movf	(_loRa+167)& (0+255),w,b
 14504  003118  ECEB  F015         	call	PL2	;call to abstracted procedure
 14505  00311C  A6DF               	btfss	indf2,3,c
 14506  00311E  D01A               	goto	l13590
 14507                           
 14508                           ; BSR set to: 2
 14509  003120  51A7               	movf	(_loRa+167)& (0+255),w,b
 14510  003122  ECEB  F015         	call	PL2	;call to abstracted procedure
 14511  003126  AADF               	btfss	indf2,5,c
 14512  003128  D015               	goto	l13590
 14513                           
 14514                           ; BSR set to: 2
 14515                           ;lorawan_eu.c: 769: {
 14516                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 14517  00312A  0100               	movlb	0	; () banked
 14518  00312C  39A6               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14519  00312E  0B07               	andlw	7
 14520  003130  0102               	movlb	2	; () banked
 14521  003132  6FEF               	movwf	(_loRa+239)& (0+255),b
 14522                           
 14523                           ; BSR set to: 2
 14524                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 14525  003134  C0A2  F064         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 14526  003138  C0A3  F065         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 14527  00313C  C0A4  F066         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 14528  003140  C0A5  F067         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 14529  003144  0100               	movlb	0	; () banked
 14530  003146  51A6               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14531  003148  0B0F               	andlw	15
 14532  00314A  6F68               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 14533  00314C  EC44  F030         	call	_UpdateReceiveWindow2Parameters	;wreg free
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 14537  003150  0102               	movlb	2	; () banked
 14538  003152  8F03               	bsf	(_loRa+3)& (0+255),7,b
 14539  003154                     l13590:
 14540                           
 14541                           ; BSR set to: 2
 14542                           ;lorawan_eu.c: 773: }
 14543                           ;lorawan_eu.c: 775: return ptr;
 14544  003154  C0A0  F0A0         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 14545  003158  C0A1  F0A1         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 14546                           
 14547                           ; BSR set to: 2
 14548  00315C  0012               	return		;funcret
 14549  00315E                     __end_of_ExecuteRxParamSetupReq:
 14550                           	opt stack 0
 14551  00315E                     PL436:
 14552                           	opt stack 17
 14553  00315E  C0A0  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 14554  003162  C0A1  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 14555  003166  0012               	return	
 14556  003168                     __end_ofPL436:
 14557                           	opt stack 0
 14558                           tosu	equ	0xFFF
 14559                           tosh	equ	0xFFE
 14560                           tosl	equ	0xFFD
 14561                           pclath	equ	0xFFA
 14562                           tblptru	equ	0xFF8
 14563                           tblptrh	equ	0xFF7
 14564                           tblptrl	equ	0xFF6
 14565                           tablat	equ	0xFF5
 14566                           prodh	equ	0xFF4
 14567                           prodl	equ	0xFF3
 14568                           intcon	equ	0xFF2
 14569                           indf0	equ	0xFEF
 14570                           postinc0	equ	0xFEE
 14571                           plusw0	equ	0xFEB
 14572                           fsr0h	equ	0xFEA
 14573                           fsr0l	equ	0xFE9
 14574                           wreg	equ	0xFE8
 14575                           postinc1	equ	0xFE6
 14576                           postdec1	equ	0xFE5
 14577                           plusw1	equ	0xFE3
 14578                           fsr1h	equ	0xFE2
 14579                           fsr1l	equ	0xFE1
 14580                           indf2	equ	0xFDF
 14581                           postinc2	equ	0xFDE
 14582                           postdec2	equ	0xFDD
 14583                           plusw2	equ	0xFDB
 14584                           fsr2h	equ	0xFDA
 14585                           fsr2l	equ	0xFD9
 14586                           status	equ	0xFD8
 14587                           
 14588 ;; *************** function _ValidateRxOffset *****************
 14589 ;; Defined at:
 14590 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;  rxOffset        1    wreg     unsigned char 
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;  rxOffset        1    4[BANK0 ] unsigned char 
 14595 ;;  result          1    5[BANK0 ] enum E17190
 14596 ;; Return value:  Size  Location     Type
 14597 ;;                  1    wreg      enum E17190
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0
 14600 ;; Tracked objects:
 14601 ;;		On entry : F/0
 14602 ;;		On exit  : F/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14606 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14608 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14609 ;;Total ram usage:        2 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    7
 14612 ;; This function calls:
 14613 ;;		Nothing
 14614 ;; This function is called by:
 14615 ;;		_ExecuteRxParamSetupReq
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           	psect	text70
 14620  0060CA                     __ptext70:
 14621                           	opt stack 0
 14622  0060CA                     _ValidateRxOffset:
 14623                           	opt stack 17
 14624                           
 14625                           ; BSR set to: 2
 14626                           ;incstack = 0
 14627                           ;ValidateRxOffset@rxOffset stored from wreg
 14628  0060CA  6F64               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 14629                           
 14630                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 14631  0060CC  0100               	movlb	0	; () banked
 14632  0060CE  6B65               	clrf	ValidateRxOffset@result& (0+255),b
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 14636  0060D0  0E05               	movlw	5
 14637  0060D2  6564               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 14638  0060D4  D002               	goto	l1244
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;lorawan_eu.c: 1081: {
 14642                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 14643  0060D6  0E03               	movlw	3
 14644  0060D8  6F65               	movwf	ValidateRxOffset@result& (0+255),b
 14645  0060DA                     l1244:
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;lorawan_eu.c: 1083: }
 14649                           ;lorawan_eu.c: 1085: return result;
 14650  0060DA  5165               	movf	ValidateRxOffset@result& (0+255),w,b
 14651                           
 14652                           ; BSR set to: 0
 14653  0060DC  0012               	return		;funcret
 14654  0060DE                     __end_of_ValidateRxOffset:
 14655                           	opt stack 0
 14656                           tosu	equ	0xFFF
 14657                           tosh	equ	0xFFE
 14658                           tosl	equ	0xFFD
 14659                           pclath	equ	0xFFA
 14660                           tblptru	equ	0xFF8
 14661                           tblptrh	equ	0xFF7
 14662                           tblptrl	equ	0xFF6
 14663                           tablat	equ	0xFF5
 14664                           prodh	equ	0xFF4
 14665                           prodl	equ	0xFF3
 14666                           intcon	equ	0xFF2
 14667                           indf0	equ	0xFEF
 14668                           postinc0	equ	0xFEE
 14669                           plusw0	equ	0xFEB
 14670                           fsr0h	equ	0xFEA
 14671                           fsr0l	equ	0xFE9
 14672                           wreg	equ	0xFE8
 14673                           postinc1	equ	0xFE6
 14674                           postdec1	equ	0xFE5
 14675                           plusw1	equ	0xFE3
 14676                           fsr1h	equ	0xFE2
 14677                           fsr1l	equ	0xFE1
 14678                           indf2	equ	0xFDF
 14679                           postinc2	equ	0xFDE
 14680                           postdec2	equ	0xFDD
 14681                           plusw2	equ	0xFDB
 14682                           fsr2h	equ	0xFDA
 14683                           fsr2l	equ	0xFD9
 14684                           status	equ	0xFD8
 14685                           
 14686 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 14687 ;; Defined at:
 14688 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  frequency       4    4[BANK0 ] unsigned long 
 14691 ;;  dataRate        1    8[BANK0 ] unsigned char 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;		None
 14694 ;; Return value:  Size  Location     Type
 14695 ;;                  1    wreg      void 
 14696 ;; Registers used:
 14697 ;;		None
 14698 ;; Tracked objects:
 14699 ;;		On entry : F/0
 14700 ;;		On exit  : F/0
 14701 ;;		Unchanged: F/0
 14702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14703 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14706 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14707 ;;Total ram usage:        5 bytes
 14708 ;; Hardware stack levels used:    1
 14709 ;; Hardware stack levels required when called:    7
 14710 ;; This function calls:
 14711 ;;		Nothing
 14712 ;; This function is called by:
 14713 ;;		_ExecuteRxParamSetupReq
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           	psect	text71
 14718  006088                     __ptext71:
 14719                           	opt stack 0
 14720  006088                     _UpdateReceiveWindow2Parameters:
 14721                           	opt stack 17
 14722                           
 14723                           ; BSR set to: 0
 14724                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;incstack = 0
 14728  006088  C068  F21C         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 14729                           
 14730                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 14731  00608C  C064  F218         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 14732  006090  C065  F219         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 14733  006094  C066  F21A         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 14734  006098  C067  F21B         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 14735                           
 14736                           ; BSR set to: 0
 14737  00609C  0012               	return		;funcret
 14738  00609E                     __end_of_UpdateReceiveWindow2Parameters:
 14739                           	opt stack 0
 14740                           tosu	equ	0xFFF
 14741                           tosh	equ	0xFFE
 14742                           tosl	equ	0xFFD
 14743                           pclath	equ	0xFFA
 14744                           tblptru	equ	0xFF8
 14745                           tblptrh	equ	0xFF7
 14746                           tblptrl	equ	0xFF6
 14747                           tablat	equ	0xFF5
 14748                           prodh	equ	0xFF4
 14749                           prodl	equ	0xFF3
 14750                           intcon	equ	0xFF2
 14751                           indf0	equ	0xFEF
 14752                           postinc0	equ	0xFEE
 14753                           plusw0	equ	0xFEB
 14754                           fsr0h	equ	0xFEA
 14755                           fsr0l	equ	0xFE9
 14756                           wreg	equ	0xFE8
 14757                           postinc1	equ	0xFE6
 14758                           postdec1	equ	0xFE5
 14759                           plusw1	equ	0xFE3
 14760                           fsr1h	equ	0xFE2
 14761                           fsr1l	equ	0xFE1
 14762                           indf2	equ	0xFDF
 14763                           postinc2	equ	0xFDE
 14764                           postdec2	equ	0xFDD
 14765                           plusw2	equ	0xFDB
 14766                           fsr2h	equ	0xFDA
 14767                           fsr2l	equ	0xFD9
 14768                           status	equ	0xFD8
 14769                           
 14770 ;; *************** function _ExecuteNewChannel *****************
 14771 ;; Defined at:
 14772 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14773 ;; Parameters:    Size  Location     Type
 14774 ;;  ptr             2   64[BANK0 ] PTR unsigned char 
 14775 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 14776 ;; Auto vars:     Size  Location     Type
 14777 ;;  frequency       4   67[BANK0 ] unsigned long 
 14778 ;;  channelIndex    1   71[BANK0 ] unsigned char 
 14779 ;;  drRange         1   66[BANK0 ] struct .
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  2   64[BANK0 ] PTR unsigned char 
 14782 ;; Registers used:
 14783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : F/0
 14786 ;;		On exit  : F/2
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14789 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14790 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14792 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14793 ;;Total ram usage:        8 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    9
 14796 ;; This function calls:
 14797 ;;		_LORAWAN_SetChannelIdStatus
 14798 ;;		_UpdateChannelIdStatus
 14799 ;;		_UpdateDataRange
 14800 ;;		_UpdateDutyCycle
 14801 ;;		_UpdateFrequency
 14802 ;;		_ValidateChannelId
 14803 ;;		_ValidateDataRange
 14804 ;;		_ValidateFrequency
 14805 ;;		___lmul
 14806 ;; This function is called by:
 14807 ;;		_MacExecuteCommands
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           	psect	text72
 14812  00268A                     __ptext72:
 14813                           	opt stack 0
 14814  00268A                     _ExecuteNewChannel:
 14815                           	opt stack 0
 14816                           
 14817                           ; BSR set to: 0
 14818                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 14819                           
 14820                           ; BSR set to: 0
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;incstack = 0
 14824  00268A  D8AF               	call	PL330	;call to abstracted procedure
 14825  00268C  50DF               	movf	indf2,w,c
 14826  00268E  6FA7               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 14827                           
 14828                           ; BSR set to: 0
 14829  002690  4BA0               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14830  002692  2BA1               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14834  002694  D8AA               	call	PL330	;call to abstracted procedure
 14835  002696  0EFF               	movlw	255
 14836  002698  14DE               	andwf	postinc2,w,c
 14837  00269A  6FA3               	movwf	ExecuteNewChannel@frequency& (0+255),b
 14838  00269C  0EFF               	movlw	255
 14839  00269E  14DE               	andwf	postinc2,w,c
 14840  0026A0  6FA4               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 14841  0026A2  0EFF               	movlw	255
 14842  0026A4  14DE               	andwf	postinc2,w,c
 14843  0026A6  6FA5               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 14844  0026A8  0E00               	movlw	0
 14845  0026AA  14DE               	andwf	postinc2,w,c
 14846  0026AC  6FA6               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 14850  0026AE  C0A3  F094         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 14851  0026B2  C0A4  F095         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 14852  0026B6  C0A5  F096         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 14853  0026BA  C0A6  F097         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 14854  0026BE  0E64               	movlw	100
 14855  0026C0  ECC2  F006         	call	PL88	;call to abstracted procedure
 14856  0026C4  EC34  F02A         	call	___lmul	;wreg free
 14857  0026C8  C094  F0A3         	movff	?___lmul,ExecuteNewChannel@frequency
 14858  0026CC  C095  F0A4         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 14859  0026D0  C096  F0A5         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 14860  0026D4  C097  F0A6         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 14864  0026D8  0E03               	movlw	3
 14865  0026DA  27A0               	addwf	ExecuteNewChannel@ptr& (0+255),f,b
 14866  0026DC  0E00               	movlw	0
 14867  0026DE  23A1               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 14871  0026E0  D884               	call	PL330	;call to abstracted procedure
 14872  0026E2  50DF               	movf	indf2,w,c
 14873  0026E4  6FA2               	movwf	ExecuteNewChannel@drRange& (0+255),b
 14874                           
 14875                           ; BSR set to: 0
 14876  0026E6  4BA0               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14877  0026E8  2BA1               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14878                           
 14879                           ; BSR set to: 0
 14880                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 14881  0026EA  6B64               	clrf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 14882  0026EC  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14883  0026EE  EC6A  F02F         	call	_ValidateChannelId
 14884  0026F2  0900               	iorlw	0
 14885  0026F4  E11E               	bnz	l1131
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;lorawan_eu.c: 692: {
 14889                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 14890  0026F6  C0A3  F064         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 14891  0026FA  C0A4  F065         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 14892  0026FE  C0A5  F066         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 14893  002702  C0A6  F067         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 14894  002706  ECBF  F027         	call	_ValidateFrequency	;wreg free
 14895  00270A  0900               	iorlw	0
 14896  00270C  E002               	bz	l13528
 14897                           
 14898                           ; BSR set to: 0
 14899  00270E  D872               	call	PL338	;call to abstracted procedure
 14900  002710  E105               	bnz	l13530
 14901  002712                     l13528:
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;lorawan_eu.c: 694: {
 14905                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 14906  002712  0102               	movlb	2	; () banked
 14907  002714  51A7               	movf	(_loRa+167)& (0+255),w,b
 14908  002716  ECEB  F015         	call	PL2	;call to abstracted procedure
 14909  00271A  8EDF               	bsf	indf2,7,c
 14910  00271C                     l13530:
 14911                           
 14912                           ;lorawan_eu.c: 696: }
 14913                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 14914  00271C  0100               	movlb	0	; () banked
 14915  00271E  51A2               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 14916  002720  ECD6  F02C         	call	_ValidateDataRange
 14917  002724  0900               	iorlw	0
 14918  002726  E105               	bnz	l1131
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;lorawan_eu.c: 699: {
 14922                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 14923  002728  0102               	movlb	2	; () banked
 14924  00272A  51A7               	movf	(_loRa+167)& (0+255),w,b
 14925  00272C  ECEB  F015         	call	PL2	;call to abstracted procedure
 14926  002730  8CDF               	bsf	indf2,6,c
 14927  002732                     l1131:
 14928                           
 14929                           ;lorawan_eu.c: 701: }
 14930                           ;lorawan_eu.c: 702: }
 14931                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 14932  002732  0102               	movlb	2	; () banked
 14933  002734  51A7               	movf	(_loRa+167)& (0+255),w,b
 14934  002736  ECEB  F015         	call	PL2	;call to abstracted procedure
 14935  00273A  AEDF               	btfss	indf2,7,c
 14936  00273C  D040               	goto	l13552
 14937                           
 14938                           ; BSR set to: 2
 14939  00273E  51A7               	movf	(_loRa+167)& (0+255),w,b
 14940  002740  ECEB  F015         	call	PL2	;call to abstracted procedure
 14941  002744  ACDF               	btfss	indf2,6,c
 14942  002746  D03B               	goto	l13552
 14943                           
 14944                           ; BSR set to: 2
 14945                           ;lorawan_eu.c: 705: {
 14946                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 14947  002748  0E10               	movlw	16
 14948  00274A  61DA               	cpfslt	(_loRa+218)& (0+255),b
 14949  00274C  D019               	goto	l13544
 14950                           
 14951                           ; BSR set to: 2
 14952                           ;lorawan_eu.c: 707: {
 14953                           ;lorawan_eu.c: 708: if (frequency != 0)
 14954  00274E  0100               	movlb	0	; () banked
 14955  002750  D851               	call	PL338	;call to abstracted procedure
 14956  002752  E011               	bz	l13542
 14957                           
 14958                           ; BSR set to: 0
 14959                           ;lorawan_eu.c: 709: {
 14960                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 14961  002754  D839               	call	PL210	;call to abstracted procedure
 14962  002756  EC54  F02E         	call	_UpdateFrequency
 14963                           
 14964                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 14965  00275A  C0A2  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14966  00275E  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14967  002760  EC6C  F021         	call	_UpdateDataRange
 14968                           
 14969                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 14970  002764  D83B               	call	PL308	;call to abstracted procedure
 14971  002766  ECAB  F02D         	call	_UpdateDutyCycle
 14972                           
 14973                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 14974  00276A  0E01               	movlw	1
 14975  00276C  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14976  00276E  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14977  002770  EC84  F01D         	call	_UpdateChannelIdStatus
 14978                           
 14979                           ;lorawan_eu.c: 714: }
 14980  002774  D022               	goto	l13550
 14981  002776                     l13542:
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;lorawan_eu.c: 715: else
 14985                           ;lorawan_eu.c: 716: {
 14986                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 14987  002776  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14988  002778  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14989  00277A  EC50  F02D         	call	_LORAWAN_SetChannelIdStatus
 14990  00277E  D01D               	goto	l13550
 14991  002780                     l13544:
 14992                           
 14993                           ; BSR set to: 2
 14994                           ;lorawan_eu.c: 720: else
 14995                           ;lorawan_eu.c: 721: {
 14996                           ;lorawan_eu.c: 722: if (frequency != 0)
 14997  002780  0100               	movlb	0	; () banked
 14998  002782  D838               	call	PL338	;call to abstracted procedure
 14999  002784  E015               	bz	l13548
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;lorawan_eu.c: 723: {
 15003                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 15004  002786  D820               	call	PL210	;call to abstracted procedure
 15005  002788  0F10               	addlw	16
 15006  00278A  EC54  F02E         	call	_UpdateFrequency
 15007                           
 15008                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 15009  00278E  C0A2  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 15010  002792  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15011  002794  0F10               	addlw	16
 15012  002796  EC6C  F021         	call	_UpdateDataRange
 15013                           
 15014                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 15015  00279A  D820               	call	PL308	;call to abstracted procedure
 15016  00279C  0F10               	addlw	16
 15017  00279E  ECAB  F02D         	call	_UpdateDutyCycle
 15018                           
 15019                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 15020  0027A2  0E01               	movlw	1
 15021  0027A4  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 15022  0027A6  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15023  0027A8  0F10               	addlw	16
 15024  0027AA  EC84  F01D         	call	_UpdateChannelIdStatus
 15025                           
 15026                           ;lorawan_eu.c: 728: }
 15027  0027AE  D005               	goto	l13550
 15028  0027B0                     l13548:
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;lorawan_eu.c: 729: else
 15032                           ;lorawan_eu.c: 730: {
 15033                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 15034  0027B0  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 15035  0027B2  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15036  0027B4  0F10               	addlw	16
 15037  0027B6  EC50  F02D         	call	_LORAWAN_SetChannelIdStatus
 15038  0027BA                     l13550:
 15039                           
 15040                           ;lorawan_eu.c: 732: }
 15041                           ;lorawan_eu.c: 733: }
 15042                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 15043  0027BA  0102               	movlb	2	; () banked
 15044  0027BC  8703               	bsf	(_loRa+3)& (0+255),3,b
 15045  0027BE                     l13552:
 15046                           
 15047                           ; BSR set to: 2
 15048                           ;lorawan_eu.c: 736: }
 15049                           ;lorawan_eu.c: 737: return ptr;
 15050  0027BE  C0A0  F0A0         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 15051  0027C2  C0A1  F0A1         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 15052                           
 15053                           ; BSR set to: 2
 15054  0027C6  0012               	return		;funcret
 15055  0027C8                     __end_of_ExecuteNewChannel:
 15056                           	opt stack 0
 15057  0027C8                     PL210:
 15058                           	opt stack 16
 15059  0027C8  C0A3  F064         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 15060  0027CC  C0A4  F065         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 15061  0027D0  C0A5  F066         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 15062  0027D4  C0A6  F067         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 15063  0027D8  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15064  0027DA  0012               	return	
 15065  0027DC                     __end_ofPL210:
 15066                           	opt stack 0
 15067  0027DC                     PL308:
 15068                           	opt stack 16
 15069  0027DC  0E01               	movlw	1
 15070  0027DE  0100               	movlb	0	; () banked
 15071  0027E0  6F65               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 15072  0027E2  0E2E               	movlw	46
 15073  0027E4  6F64               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 15074  0027E6  51A7               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15075  0027E8  0012               	return	
 15076  0027EA                     __end_ofPL308:
 15077                           	opt stack 0
 15078  0027EA                     PL330:
 15079                           	opt stack 16
 15080  0027EA  C0A0  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 15081  0027EE  C0A1  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 15082  0027F2  0012               	return	
 15083  0027F4                     __end_ofPL330:
 15084                           	opt stack 0
 15085  0027F4                     PL338:
 15086                           	opt stack 16
 15087  0027F4  51A3               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 15088  0027F6  11A4               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 15089  0027F8  11A5               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 15090  0027FA  11A6               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 15091  0027FC  0012               	return	
 15092  0027FE                     __end_ofPL338:
 15093                           	opt stack 0
 15094                           tosu	equ	0xFFF
 15095                           tosh	equ	0xFFE
 15096                           tosl	equ	0xFFD
 15097                           pclath	equ	0xFFA
 15098                           tblptru	equ	0xFF8
 15099                           tblptrh	equ	0xFF7
 15100                           tblptrl	equ	0xFF6
 15101                           tablat	equ	0xFF5
 15102                           prodh	equ	0xFF4
 15103                           prodl	equ	0xFF3
 15104                           intcon	equ	0xFF2
 15105                           indf0	equ	0xFEF
 15106                           postinc0	equ	0xFEE
 15107                           plusw0	equ	0xFEB
 15108                           fsr0h	equ	0xFEA
 15109                           fsr0l	equ	0xFE9
 15110                           wreg	equ	0xFE8
 15111                           postinc1	equ	0xFE6
 15112                           postdec1	equ	0xFE5
 15113                           plusw1	equ	0xFE3
 15114                           fsr1h	equ	0xFE2
 15115                           fsr1l	equ	0xFE1
 15116                           indf2	equ	0xFDF
 15117                           postinc2	equ	0xFDE
 15118                           postdec2	equ	0xFDD
 15119                           plusw2	equ	0xFDB
 15120                           fsr2h	equ	0xFDA
 15121                           fsr2l	equ	0xFD9
 15122                           status	equ	0xFD8
 15123                           
 15124 ;; *************** function _ValidateFrequency *****************
 15125 ;; Defined at:
 15126 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15127 ;; Parameters:    Size  Location     Type
 15128 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 15129 ;; Auto vars:     Size  Location     Type
 15130 ;;  result          1    8[BANK0 ] enum E17190
 15131 ;; Return value:  Size  Location     Type
 15132 ;;                  1    wreg      enum E17190
 15133 ;; Registers used:
 15134 ;;		wreg, status,2, status,0
 15135 ;; Tracked objects:
 15136 ;;		On entry : F/0
 15137 ;;		On exit  : F/0
 15138 ;;		Unchanged: 0/0
 15139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15143 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15144 ;;Total ram usage:        5 bytes
 15145 ;; Hardware stack levels used:    1
 15146 ;; Hardware stack levels required when called:    7
 15147 ;; This function calls:
 15148 ;;		Nothing
 15149 ;; This function is called by:
 15150 ;;		_ExecuteNewChannel
 15151 ;;		_ExecuteRxParamSetupReq
 15152 ;;		_UpdateCfList
 15153 ;; This function uses a non-reentrant model
 15154 ;;
 15155                           
 15156                           	psect	text73
 15157  004F7E                     __ptext73:
 15158                           	opt stack 0
 15159  004F7E                     _ValidateFrequency:
 15160                           	opt stack 18
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 15164                           
 15165                           ; BSR set to: 2
 15166                           ;incstack = 0
 15167  004F7E  6B68               	clrf	ValidateFrequency@result& (0+255),b
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 15171  004F80  0102               	movlb	2	; () banked
 15172  004F82  51A4               	movf	(_loRa+164)& (0+255),w,b
 15173  004F84  E116               	bnz	l12796
 15174                           
 15175                           ; BSR set to: 2
 15176                           ;lorawan_eu.c: 1093: {
 15177                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 15178  004F86  0E81               	movlw	129
 15179  004F88  0100               	movlb	0	; () banked
 15180  004F8A  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15181  004F8C  0E25               	movlw	37
 15182  004F8E  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15183  004F90  0EDB               	movlw	219
 15184  004F92  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15185  004F94  0E33               	movlw	51
 15186  004F96  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15187  004F98  E209               	bc	l12794
 15188                           
 15189                           ; BSR set to: 0
 15190  004F9A  0EC0               	movlw	192
 15191  004F9C  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15192  004F9E  0E55               	movlw	85
 15193  004FA0  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15194  004FA2  0E70               	movlw	112
 15195  004FA4  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15196  004FA6  0E33               	movlw	51
 15197  004FA8  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15198  004FAA  E215               	bc	l1252
 15199  004FAC                     l12794:
 15200                           
 15201                           ; BSR set to: 0
 15202                           ;lorawan_eu.c: 1095: {
 15203                           ;lorawan_eu.c: 1096: result = INVALID_PARAMETER ;
 15204  004FAC  0E03               	movlw	3
 15205  004FAE  6F68               	movwf	ValidateFrequency@result& (0+255),b
 15206  004FB0  D012               	goto	l1252
 15207  004FB2                     l12796:
 15208                           
 15209                           ; BSR set to: 2
 15210                           ;lorawan_eu.c: 1099: else
 15211                           ;lorawan_eu.c: 1100: {
 15212                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 15213  004FB2  0E71               	movlw	113
 15214  004FB4  0100               	movlb	0	; () banked
 15215  004FB6  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15216  004FB8  0E5E               	movlw	94
 15217  004FBA  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15218  004FBC  0EEA               	movlw	234
 15219  004FBE  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15220  004FC0  0E19               	movlw	25
 15221  004FC2  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15222  004FC4  E2F3               	bc	l12794
 15223                           
 15224                           ; BSR set to: 0
 15225  004FC6  0E90               	movlw	144
 15226  004FC8  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15227  004FCA  0ED1               	movlw	209
 15228  004FCC  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15229  004FCE  0ECF               	movlw	207
 15230  004FD0  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15231  004FD2  0E19               	movlw	25
 15232  004FD4  D7E9               	goto	L7
 15233  004FD6                     l1252:
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;lorawan_eu.c: 1104: }
 15237                           ;lorawan_eu.c: 1105: }
 15238                           ;lorawan_eu.c: 1107: return result;
 15239  004FD6  5168               	movf	ValidateFrequency@result& (0+255),w,b
 15240                           
 15241                           ; BSR set to: 0
 15242  004FD8  0012               	return		;funcret
 15243  004FDA                     __end_of_ValidateFrequency:
 15244                           	opt stack 0
 15245                           tosu	equ	0xFFF
 15246                           tosh	equ	0xFFE
 15247                           tosl	equ	0xFFD
 15248                           pclath	equ	0xFFA
 15249                           tblptru	equ	0xFF8
 15250                           tblptrh	equ	0xFF7
 15251                           tblptrl	equ	0xFF6
 15252                           tablat	equ	0xFF5
 15253                           prodh	equ	0xFF4
 15254                           prodl	equ	0xFF3
 15255                           intcon	equ	0xFF2
 15256                           indf0	equ	0xFEF
 15257                           postinc0	equ	0xFEE
 15258                           plusw0	equ	0xFEB
 15259                           fsr0h	equ	0xFEA
 15260                           fsr0l	equ	0xFE9
 15261                           wreg	equ	0xFE8
 15262                           postinc1	equ	0xFE6
 15263                           postdec1	equ	0xFE5
 15264                           plusw1	equ	0xFE3
 15265                           fsr1h	equ	0xFE2
 15266                           fsr1l	equ	0xFE1
 15267                           indf2	equ	0xFDF
 15268                           postinc2	equ	0xFDE
 15269                           postdec2	equ	0xFDD
 15270                           plusw2	equ	0xFDB
 15271                           fsr2h	equ	0xFDA
 15272                           fsr2l	equ	0xFD9
 15273                           status	equ	0xFD8
 15274                           
 15275 ;; *************** function _ValidateDataRange *****************
 15276 ;; Defined at:
 15277 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  dataRangeNew    1    wreg     unsigned char 
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  dataRangeNew    1    7[BANK0 ] unsigned char 
 15282 ;;  dataRateMin     1    9[BANK0 ] unsigned char 
 15283 ;;  dataRateMax     1    8[BANK0 ] unsigned char 
 15284 ;;  result          1    6[BANK0 ] enum E17190
 15285 ;; Return value:  Size  Location     Type
 15286 ;;                  1    wreg      enum E17190
 15287 ;; Registers used:
 15288 ;;		wreg, status,2, status,0, cstack
 15289 ;; Tracked objects:
 15290 ;;		On entry : F/0
 15291 ;;		On exit  : F/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15298 ;;Total ram usage:        4 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    8
 15301 ;; This function calls:
 15302 ;;		_ValidateDataRate
 15303 ;; This function is called by:
 15304 ;;		_ExecuteNewChannel
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text74
 15309  0059AC                     __ptext74:
 15310                           	opt stack 0
 15311  0059AC                     _ValidateDataRange:
 15312                           	opt stack 16
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;incstack = 0
 15316                           ;ValidateDataRange@dataRangeNew stored from wreg
 15317  0059AC  6F67               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 15318                           
 15319                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 15320  0059AE  0100               	movlb	0	; () banked
 15321  0059B0  6B66               	clrf	ValidateDataRange@result& (0+255),b
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 15325                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 15326  0059B2  5167               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15327  0059B4  0B0F               	andlw	15
 15328  0059B6  6F69               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 15329                           
 15330                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 15331  0059B8  3967               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15332  0059BA  0B0F               	andlw	15
 15333  0059BC  6F68               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 15334                           
 15335                           ; BSR set to: 0
 15336                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 15337  0059BE  5168               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 15338  0059C0  EC6F  F030         	call	_ValidateDataRate
 15339  0059C4  0900               	iorlw	0
 15340  0059C6  E108               	bnz	l12816
 15341                           
 15342                           ; BSR set to: 0
 15343  0059C8  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15344  0059CA  EC6F  F030         	call	_ValidateDataRate
 15345  0059CE  0900               	iorlw	0
 15346  0059D0  E103               	bnz	l12816
 15347                           
 15348                           ; BSR set to: 0
 15349  0059D2  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15350  0059D4  5D68               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 15351  0059D6  E202               	bc	l1259
 15352  0059D8                     l12816:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;lorawan_eu.c: 1119: {
 15356                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 15357  0059D8  0E03               	movlw	3
 15358  0059DA  6F66               	movwf	ValidateDataRange@result& (0+255),b
 15359  0059DC                     l1259:
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;lorawan_eu.c: 1121: }
 15363                           ;lorawan_eu.c: 1122: return result;
 15364  0059DC  5166               	movf	ValidateDataRange@result& (0+255),w,b
 15365                           
 15366                           ; BSR set to: 0
 15367  0059DE  0012               	return		;funcret
 15368  0059E0                     __end_of_ValidateDataRange:
 15369                           	opt stack 0
 15370                           tosu	equ	0xFFF
 15371                           tosh	equ	0xFFE
 15372                           tosl	equ	0xFFD
 15373                           pclath	equ	0xFFA
 15374                           tblptru	equ	0xFF8
 15375                           tblptrh	equ	0xFF7
 15376                           tblptrl	equ	0xFF6
 15377                           tablat	equ	0xFF5
 15378                           prodh	equ	0xFF4
 15379                           prodl	equ	0xFF3
 15380                           intcon	equ	0xFF2
 15381                           indf0	equ	0xFEF
 15382                           postinc0	equ	0xFEE
 15383                           plusw0	equ	0xFEB
 15384                           fsr0h	equ	0xFEA
 15385                           fsr0l	equ	0xFE9
 15386                           wreg	equ	0xFE8
 15387                           postinc1	equ	0xFE6
 15388                           postdec1	equ	0xFE5
 15389                           plusw1	equ	0xFE3
 15390                           fsr1h	equ	0xFE2
 15391                           fsr1l	equ	0xFE1
 15392                           indf2	equ	0xFDF
 15393                           postinc2	equ	0xFDE
 15394                           postdec2	equ	0xFDD
 15395                           plusw2	equ	0xFDB
 15396                           fsr2h	equ	0xFDA
 15397                           fsr2l	equ	0xFD9
 15398                           status	equ	0xFD8
 15399                           
 15400 ;; *************** function _UpdateFrequency *****************
 15401 ;; Defined at:
 15402 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15403 ;; Parameters:    Size  Location     Type
 15404 ;;  channelId       1    wreg     unsigned char 
 15405 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 15406 ;; Auto vars:     Size  Location     Type
 15407 ;;  channelId       1    8[BANK0 ] unsigned char 
 15408 ;; Return value:  Size  Location     Type
 15409 ;;                  1    wreg      void 
 15410 ;; Registers used:
 15411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15412 ;; Tracked objects:
 15413 ;;		On entry : F/0
 15414 ;;		On exit  : F/0
 15415 ;;		Unchanged: 0/0
 15416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15420 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15421 ;;Total ram usage:        5 bytes
 15422 ;; Hardware stack levels used:    1
 15423 ;; Hardware stack levels required when called:    7
 15424 ;; This function calls:
 15425 ;;		Nothing
 15426 ;; This function is called by:
 15427 ;;		_ExecuteNewChannel
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           	psect	text75
 15432  005CA8                     __ptext75:
 15433                           	opt stack 0
 15434  005CA8                     _UpdateFrequency:
 15435                           	opt stack 17
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;incstack = 0
 15439                           ;UpdateFrequency@channelId stored from wreg
 15440  005CA8  6F68               	movwf	UpdateFrequency@channelId& (0+255),b
 15441                           
 15442                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 15443  005CAA  0100               	movlb	0	; () banked
 15444  005CAC  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 15445  005CAE  ECF6  F026         	call	PL272	;call to abstracted procedure
 15446  005CB2  C064  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 15447  005CB6  C065  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 15448  005CBA  C066  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 15449  005CBE  C067  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 15450                           
 15451                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 15452  005CC2  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 15453  005CC4  ECB9  F02D         	call	PL72	;call to abstracted procedure
 15454  005CC8  0E00               	movlw	0
 15455  005CCA  80DB               	bsf	plusw2,0,c
 15456                           
 15457                           ; BSR set to: 0
 15458  005CCC  0C00               	retlw	0	;funcret
 15459  005CCE                     __end_of_UpdateFrequency:
 15460                           	opt stack 0
 15461                           tosu	equ	0xFFF
 15462                           tosh	equ	0xFFE
 15463                           tosl	equ	0xFFD
 15464                           pclath	equ	0xFFA
 15465                           tblptru	equ	0xFF8
 15466                           tblptrh	equ	0xFF7
 15467                           tblptrl	equ	0xFF6
 15468                           tablat	equ	0xFF5
 15469                           prodh	equ	0xFF4
 15470                           prodl	equ	0xFF3
 15471                           intcon	equ	0xFF2
 15472                           indf0	equ	0xFEF
 15473                           postinc0	equ	0xFEE
 15474                           plusw0	equ	0xFEB
 15475                           fsr0h	equ	0xFEA
 15476                           fsr0l	equ	0xFE9
 15477                           wreg	equ	0xFE8
 15478                           postinc1	equ	0xFE6
 15479                           postdec1	equ	0xFE5
 15480                           plusw1	equ	0xFE3
 15481                           fsr1h	equ	0xFE2
 15482                           fsr1l	equ	0xFE1
 15483                           indf2	equ	0xFDF
 15484                           postinc2	equ	0xFDE
 15485                           postdec2	equ	0xFDD
 15486                           plusw2	equ	0xFDB
 15487                           fsr2h	equ	0xFDA
 15488                           fsr2l	equ	0xFD9
 15489                           status	equ	0xFD8
 15490                           
 15491 ;; *************** function _UpdateDutyCycle *****************
 15492 ;; Defined at:
 15493 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;  channelId       1    wreg     unsigned char 
 15496 ;;  dutyCycleNew    2    4[BANK0 ] unsigned int 
 15497 ;; Auto vars:     Size  Location     Type
 15498 ;;  channelId       1    6[BANK0 ] unsigned char 
 15499 ;; Return value:  Size  Location     Type
 15500 ;;                  1    wreg      void 
 15501 ;; Registers used:
 15502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15503 ;; Tracked objects:
 15504 ;;		On entry : F/0
 15505 ;;		On exit  : F/0
 15506 ;;		Unchanged: 0/0
 15507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15508 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15511 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15512 ;;Total ram usage:        3 bytes
 15513 ;; Hardware stack levels used:    1
 15514 ;; Hardware stack levels required when called:    7
 15515 ;; This function calls:
 15516 ;;		Nothing
 15517 ;; This function is called by:
 15518 ;;		_ExecuteNewChannel
 15519 ;; This function uses a non-reentrant model
 15520 ;;
 15521                           
 15522                           	psect	text76
 15523  005B56                     __ptext76:
 15524                           	opt stack 0
 15525  005B56                     _UpdateDutyCycle:
 15526                           	opt stack 17
 15527                           
 15528                           ; BSR set to: 0
 15529                           ;incstack = 0
 15530                           ;UpdateDutyCycle@channelId stored from wreg
 15531  005B56  6F66               	movwf	UpdateDutyCycle@channelId& (0+255),b
 15532                           
 15533                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 15534  005B58  0100               	movlb	0	; () banked
 15535  005B5A  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15536  005B5C  ECCF  F006         	call	PL104	;call to abstracted procedure
 15537  005B60  C064  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 15538  005B64  C065  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 15539                           
 15540                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 15541  005B68  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15542  005B6A  D803               	call	PL72	;call to abstracted procedure
 15543  005B6C  0E00               	movlw	0
 15544  005B6E  84DB               	bsf	plusw2,2,c
 15545                           
 15546                           ; BSR set to: 0
 15547  005B70  0C00               	retlw	0	;funcret
 15548  005B72                     __end_of_UpdateDutyCycle:
 15549                           	opt stack 0
 15550  005B72                     PL72:
 15551                           	opt stack 17
 15552  005B72  0D0E               	mullw	14
 15553  005B74  0E0D               	movlw	low (_Channels+13)
 15554  005B76  24F3               	addwf	prodl,w,c
 15555  005B78  6ED9               	movwf	fsr2l,c
 15556  005B7A  0E04               	movlw	high (_Channels+13)
 15557  005B7C  20F4               	addwfc	prodh,w,c
 15558  005B7E  6EDA               	movwf	fsr2h,c
 15559  005B80  0012               	return	
 15560  005B82                     __end_ofPL72:
 15561                           	opt stack 0
 15562                           tosu	equ	0xFFF
 15563                           tosh	equ	0xFFE
 15564                           tosl	equ	0xFFD
 15565                           pclath	equ	0xFFA
 15566                           tblptru	equ	0xFF8
 15567                           tblptrh	equ	0xFF7
 15568                           tblptrl	equ	0xFF6
 15569                           tablat	equ	0xFF5
 15570                           prodh	equ	0xFF4
 15571                           prodl	equ	0xFF3
 15572                           intcon	equ	0xFF2
 15573                           indf0	equ	0xFEF
 15574                           postinc0	equ	0xFEE
 15575                           plusw0	equ	0xFEB
 15576                           fsr0h	equ	0xFEA
 15577                           fsr0l	equ	0xFE9
 15578                           wreg	equ	0xFE8
 15579                           postinc1	equ	0xFE6
 15580                           postdec1	equ	0xFE5
 15581                           plusw1	equ	0xFE3
 15582                           fsr1h	equ	0xFE2
 15583                           fsr1l	equ	0xFE1
 15584                           indf2	equ	0xFDF
 15585                           postinc2	equ	0xFDE
 15586                           postdec2	equ	0xFDD
 15587                           plusw2	equ	0xFDB
 15588                           fsr2h	equ	0xFDA
 15589                           fsr2l	equ	0xFD9
 15590                           status	equ	0xFD8
 15591                           
 15592 ;; *************** function _UpdateDataRange *****************
 15593 ;; Defined at:
 15594 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15595 ;; Parameters:    Size  Location     Type
 15596 ;;  channelId       1    wreg     unsigned char 
 15597 ;;  dataRangeNew    1    4[BANK0 ] unsigned char 
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;  channelId       1    6[BANK0 ] unsigned char 
 15600 ;;  i               1    7[BANK0 ] unsigned char 
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  1    wreg      void 
 15603 ;; Registers used:
 15604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15605 ;; Tracked objects:
 15606 ;;		On entry : F/0
 15607 ;;		On exit  : F/2
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15610 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15614 ;;Total ram usage:        4 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    7
 15617 ;; This function calls:
 15618 ;;		Nothing
 15619 ;; This function is called by:
 15620 ;;		_ExecuteNewChannel
 15621 ;; This function uses a non-reentrant model
 15622 ;;
 15623                           
 15624                           	psect	text77
 15625  0042D8                     __ptext77:
 15626                           	opt stack 0
 15627  0042D8                     _UpdateDataRange:
 15628                           	opt stack 17
 15629                           
 15630                           ; BSR set to: 0
 15631                           ;incstack = 0
 15632                           ;UpdateDataRange@channelId stored from wreg
 15633  0042D8  6F66               	movwf	UpdateDataRange@channelId& (0+255),b
 15634                           
 15635                           ;lorawan_eu.c: 1011: uint8_t i;
 15636                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 15637  0042DA  0E07               	movlw	7
 15638  0042DC  0102               	movlb	2	; () banked
 15639  0042DE  6FEB               	movwf	(_loRa+235)& (0+255),b
 15640                           
 15641                           ; BSR set to: 2
 15642                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 15643  0042E0  6BEC               	clrf	(_loRa+236)& (0+255),b
 15644                           
 15645                           ; BSR set to: 2
 15646                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 15647  0042E2  0100               	movlb	0	; () banked
 15648  0042E4  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 15649  0042E6  D83B               	call	PL6	;call to abstracted procedure
 15650  0042E8  C064  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 15651                           
 15652                           ; BSR set to: 0
 15653                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 15654  0042EC  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 15655  0042EE  ECB9  F02D         	call	PL72	;call to abstracted procedure
 15656  0042F2  0E00               	movlw	0
 15657  0042F4  82DB               	bsf	plusw2,1,c
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 15661  0042F6  6B67               	clrf	UpdateDataRange@i& (0+255),b
 15662  0042F8  D023               	goto	l12842
 15663  0042FA                     l12830:
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;lorawan_eu.c: 1020: {
 15667                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 15668  0042FA  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15669  0042FC  D830               	call	PL6	;call to abstracted procedure
 15670  0042FE  50DF               	movf	223,w,c
 15671  004300  0B0F               	andlw	15
 15672  004302  0100               	movlb	0	; () banked
 15673  004304  6F65               	movwf	??_UpdateDataRange& (0+255),b
 15674  004306  0102               	movlb	2	; () banked
 15675  004308  51EB               	movf	(_loRa+235)& (0+255),w,b
 15676  00430A  0100               	movlb	0	; () banked
 15677  00430C  5D65               	subwf	??_UpdateDataRange& (0+255),w,b
 15678  00430E  E207               	bc	l1225
 15679                           
 15680                           ; BSR set to: 0
 15681  004310  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15682  004312  D82D               	call	PL12	;call to abstracted procedure
 15683  004314  E104               	bnz	l1225
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;lorawan_eu.c: 1022: {
 15687                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 15688  004316  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15689  004318  D822               	call	PL6	;call to abstracted procedure
 15690  00431A  ECDA  F01D         	call	PL322	;call to abstracted procedure
 15691  00431E                     l1225:
 15692                           
 15693                           ;lorawan_eu.c: 1024: }
 15694                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 15695  00431E  0100               	movlb	0	; () banked
 15696  004320  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15697  004322  D81D               	call	PL6	;call to abstracted procedure
 15698  004324  ECE4  F01D         	call	PL452	;call to abstracted procedure
 15699  004328  61EC               	cpfslt	(_loRa+236)& (0+255),b
 15700  00432A  D008               	goto	l12840
 15701                           
 15702                           ; BSR set to: 2
 15703  00432C  0100               	movlb	0	; () banked
 15704  00432E  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15705  004330  D81E               	call	PL12	;call to abstracted procedure
 15706  004332  E104               	bnz	l12840
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;lorawan_eu.c: 1026: {
 15710                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 15711  004334  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15712  004336  D813               	call	PL6	;call to abstracted procedure
 15713  004338  ECDF  F01D         	call	PL336	;call to abstracted procedure
 15714  00433C                     l12840:
 15715  00433C  0100               	movlb	0	; () banked
 15716  00433E  2B67               	incf	UpdateDataRange@i& (0+255),f,b
 15717  004340                     l12842:
 15718                           
 15719                           ; BSR set to: 0
 15720  004340  0102               	movlb	2	; () banked
 15721  004342  51ED               	movf	(_loRa+237)& (0+255),w,b
 15722  004344  0100               	movlb	0	; () banked
 15723  004346  5D67               	subwf	UpdateDataRange@i& (0+255),w,b
 15724  004348  E3D8               	bnc	l12830
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;lorawan_eu.c: 1028: }
 15728                           ;lorawan_eu.c: 1029: }
 15729                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 15730  00434A  0102               	movlb	2	; () banked
 15731  00434C  51DF               	movf	(_loRa+223)& (0+255),w,b
 15732  00434E  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15733  004350  E302 EFD4  F01D    	bc	PL298
 15734                           
 15735                           ; BSR set to: 2
 15736                           ;lorawan_eu.c: 1032: {
 15737                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 15738  004356  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 15739  00435A                     l12848:
 15740                           
 15741                           ; BSR set to: 2
 15742                           ;lorawan_eu.c: 1034: }
 15743                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 15744                           
 15745                           ; BSR set to: 2
 15746                           ;lorawan_eu.c: 1037: {
 15747                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 15748                           
 15749                           ; BSR set to: 2
 15750  00435A  EFD4  F01D         	goto	PL298	;call to abstracted procedure
 15751  00435E                     __end_of_UpdateDataRange:
 15752                           	opt stack 0
 15753  00435E                     PL6:
 15754                           	opt stack 12
 15755  00435E  0D0E               	mullw	14
 15756  004360  0E05               	movlw	low (_Channels+5)
 15757  004362  24F3               	addwf	prodl,w,c
 15758  004364  6ED9               	movwf	fsr2l,c
 15759  004366  0E04               	movlw	high (_Channels+5)
 15760  004368  20F4               	addwfc	prodh,w,c
 15761  00436A  6EDA               	movwf	fsr2h,c
 15762  00436C  0012               	return	
 15763  00436E                     __end_ofPL6:
 15764                           	opt stack 0
 15765  00436E                     PL12:
 15766                           	opt stack 17
 15767  00436E  0D0E               	mullw	14
 15768  004370  0E04               	movlw	low (_Channels+4)
 15769  004372  24F3               	addwf	prodl,w,c
 15770  004374  6ED9               	movwf	fsr2l,c
 15771  004376  0E04               	movlw	high (_Channels+4)
 15772  004378  20F4               	addwfc	prodh,w,c
 15773  00437A  6EDA               	movwf	fsr2h,c
 15774  00437C  04DE               	decf	postinc2,w,c
 15775  00437E  0012               	return	
 15776  004380                     __end_ofPL12:
 15777                           	opt stack 0
 15778                           tosu	equ	0xFFF
 15779                           tosh	equ	0xFFE
 15780                           tosl	equ	0xFFD
 15781                           pclath	equ	0xFFA
 15782                           tblptru	equ	0xFF8
 15783                           tblptrh	equ	0xFF7
 15784                           tblptrl	equ	0xFF6
 15785                           tablat	equ	0xFF5
 15786                           prodh	equ	0xFF4
 15787                           prodl	equ	0xFF3
 15788                           intcon	equ	0xFF2
 15789                           indf0	equ	0xFEF
 15790                           postinc0	equ	0xFEE
 15791                           plusw0	equ	0xFEB
 15792                           fsr0h	equ	0xFEA
 15793                           fsr0l	equ	0xFE9
 15794                           wreg	equ	0xFE8
 15795                           postinc1	equ	0xFE6
 15796                           postdec1	equ	0xFE5
 15797                           plusw1	equ	0xFE3
 15798                           fsr1h	equ	0xFE2
 15799                           fsr1l	equ	0xFE1
 15800                           indf2	equ	0xFDF
 15801                           postinc2	equ	0xFDE
 15802                           postdec2	equ	0xFDD
 15803                           plusw2	equ	0xFDB
 15804                           fsr2h	equ	0xFDA
 15805                           fsr2l	equ	0xFD9
 15806                           status	equ	0xFD8
 15807                           
 15808 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 15809 ;; Defined at:
 15810 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15811 ;; Parameters:    Size  Location     Type
 15812 ;;  channelId       1    wreg     unsigned char 
 15813 ;;  statusNew       1    8[BANK0 ] unsigned char 
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;  channelId       1   10[BANK0 ] unsigned char 
 15816 ;;  result          1    0        enum E17190
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  1    wreg      enum E17190
 15819 ;; Registers used:
 15820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15821 ;; Tracked objects:
 15822 ;;		On entry : F/0
 15823 ;;		On exit  : D/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15827 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15829 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15830 ;;Total ram usage:        3 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; Hardware stack levels required when called:    8
 15833 ;; This function calls:
 15834 ;;		_UpdateChannelIdStatus
 15835 ;;		_ValidateChannelId
 15836 ;; This function is called by:
 15837 ;;		_ExecuteNewChannel
 15838 ;;		_UpdateCfList
 15839 ;; This function uses a non-reentrant model
 15840 ;;
 15841                           
 15842                           	psect	text78
 15843  005AA0                     __ptext78:
 15844                           	opt stack 0
 15845  005AA0                     _LORAWAN_SetChannelIdStatus:
 15846                           	opt stack 17
 15847                           
 15848                           ; BSR set to: 2
 15849                           ;incstack = 0
 15850                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 15851  005AA0  6F6A               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 15852                           
 15853                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 15854  005AA2  0E01               	movlw	1
 15855  005AA4  0100               	movlb	0	; () banked
 15856  005AA6  6F64               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 15857  005AA8  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15858  005AAA  EC6A  F02F         	call	_ValidateChannelId
 15859  005AAE  0900               	iorlw	0
 15860  005AB0  E001               	bz	l12858
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;lorawan_eu.c: 290: }
 15864  005AB2  0012               	return	
 15865  005AB4                     l12858:
 15866                           
 15867                           ; BSR set to: 0
 15868                           ;lorawan_eu.c: 292: else
 15869                           ;lorawan_eu.c: 293: {
 15870                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 15871  005AB4  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15872  005AB6  ECB9  F02D         	call	PL72	;call to abstracted procedure
 15873  005ABA  50DF               	movf	indf2,w,c
 15874  005ABC  0B07               	andlw	7
 15875  005ABE  0A07               	xorlw	7
 15876  005AC0  A4D8               	btfss	status,2,c
 15877  005AC2  0012               	return	
 15878                           
 15879                           ; BSR set to: 0
 15880                           ;lorawan_eu.c: 295: {
 15881                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 15882  005AC4  C068  F064         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 15883  005AC8  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15884  005ACA  EF84  F01D         	goto	_UpdateChannelIdStatus
 15885  005ACE                     __end_of_LORAWAN_SetChannelIdStatus:
 15886                           	opt stack 0
 15887                           tosu	equ	0xFFF
 15888                           tosh	equ	0xFFE
 15889                           tosl	equ	0xFFD
 15890                           pclath	equ	0xFFA
 15891                           tblptru	equ	0xFF8
 15892                           tblptrh	equ	0xFF7
 15893                           tblptrl	equ	0xFF6
 15894                           tablat	equ	0xFF5
 15895                           prodh	equ	0xFF4
 15896                           prodl	equ	0xFF3
 15897                           intcon	equ	0xFF2
 15898                           indf0	equ	0xFEF
 15899                           postinc0	equ	0xFEE
 15900                           plusw0	equ	0xFEB
 15901                           fsr0h	equ	0xFEA
 15902                           fsr0l	equ	0xFE9
 15903                           wreg	equ	0xFE8
 15904                           postinc1	equ	0xFE6
 15905                           postdec1	equ	0xFE5
 15906                           plusw1	equ	0xFE3
 15907                           fsr1h	equ	0xFE2
 15908                           fsr1l	equ	0xFE1
 15909                           indf2	equ	0xFDF
 15910                           postinc2	equ	0xFDE
 15911                           postdec2	equ	0xFDD
 15912                           plusw2	equ	0xFDB
 15913                           fsr2h	equ	0xFDA
 15914                           fsr2l	equ	0xFD9
 15915                           status	equ	0xFD8
 15916                           
 15917 ;; *************** function _ValidateChannelId *****************
 15918 ;; Defined at:
 15919 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15920 ;; Parameters:    Size  Location     Type
 15921 ;;  channelId       1    wreg     unsigned char 
 15922 ;;  allowedForDe    1    4[BANK0 ] unsigned char 
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;  channelId       1    6[BANK0 ] unsigned char 
 15925 ;;  result          1    5[BANK0 ] enum E17190
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  1    wreg      enum E17190
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0
 15930 ;; Tracked objects:
 15931 ;;		On entry : F/0
 15932 ;;		On exit  : F/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15939 ;;Total ram usage:        3 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    7
 15942 ;; This function calls:
 15943 ;;		Nothing
 15944 ;; This function is called by:
 15945 ;;		_LORAWAN_SetChannelIdStatus
 15946 ;;		_ExecuteNewChannel
 15947 ;; This function uses a non-reentrant model
 15948 ;;
 15949                           
 15950                           	psect	text79
 15951  005ED4                     __ptext79:
 15952                           	opt stack 0
 15953  005ED4                     _ValidateChannelId:
 15954                           	opt stack 17
 15955                           
 15956                           ;incstack = 0
 15957                           ;ValidateChannelId@channelId stored from wreg
 15958  005ED4  6F66               	movwf	ValidateChannelId@channelId& (0+255),b
 15959                           
 15960                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 15961  005ED6  0100               	movlb	0	; () banked
 15962  005ED8  6B65               	clrf	ValidateChannelId@result& (0+255),b
 15963                           
 15964                           ; BSR set to: 0
 15965                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 15966  005EDA  0E10               	movlw	16
 15967  005EDC  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15968  005EDE  D005               	goto	l12590
 15969                           
 15970                           ; BSR set to: 0
 15971  005EE0  5164               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 15972  005EE2  E105               	bnz	l1265
 15973                           
 15974                           ; BSR set to: 0
 15975  005EE4  0E03               	movlw	3
 15976  005EE6  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15977  005EE8  D002               	goto	l1265
 15978  005EEA                     l12590:
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;lorawan_eu.c: 1130: {
 15982                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 15983  005EEA  0E03               	movlw	3
 15984  005EEC  6F65               	movwf	ValidateChannelId@result& (0+255),b
 15985  005EEE                     l1265:
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;lorawan_eu.c: 1132: }
 15989                           ;lorawan_eu.c: 1134: return result;
 15990  005EEE  5165               	movf	ValidateChannelId@result& (0+255),w,b
 15991                           
 15992                           ; BSR set to: 0
 15993  005EF0  0012               	return		;funcret
 15994  005EF2                     __end_of_ValidateChannelId:
 15995                           	opt stack 0
 15996                           tosu	equ	0xFFF
 15997                           tosh	equ	0xFFE
 15998                           tosl	equ	0xFFD
 15999                           pclath	equ	0xFFA
 16000                           tblptru	equ	0xFF8
 16001                           tblptrh	equ	0xFF7
 16002                           tblptrl	equ	0xFF6
 16003                           tablat	equ	0xFF5
 16004                           prodh	equ	0xFF4
 16005                           prodl	equ	0xFF3
 16006                           intcon	equ	0xFF2
 16007                           indf0	equ	0xFEF
 16008                           postinc0	equ	0xFEE
 16009                           plusw0	equ	0xFEB
 16010                           fsr0h	equ	0xFEA
 16011                           fsr0l	equ	0xFE9
 16012                           wreg	equ	0xFE8
 16013                           postinc1	equ	0xFE6
 16014                           postdec1	equ	0xFE5
 16015                           plusw1	equ	0xFE3
 16016                           fsr1h	equ	0xFE2
 16017                           fsr1l	equ	0xFE1
 16018                           indf2	equ	0xFDF
 16019                           postinc2	equ	0xFDE
 16020                           postdec2	equ	0xFDD
 16021                           plusw2	equ	0xFDB
 16022                           fsr2h	equ	0xFDA
 16023                           fsr2l	equ	0xFD9
 16024                           status	equ	0xFD8
 16025                           
 16026 ;; *************** function _ExecuteLinkCheck *****************
 16027 ;; Defined at:
 16028 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 16031 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16032 ;; Auto vars:     Size  Location     Type
 16033 ;;		None
 16034 ;; Return value:  Size  Location     Type
 16035 ;;                  2    4[BANK0 ] PTR unsigned char 
 16036 ;; Registers used:
 16037 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16038 ;; Tracked objects:
 16039 ;;		On entry : F/0
 16040 ;;		On exit  : F/0
 16041 ;;		Unchanged: 0/0
 16042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16047 ;;Total ram usage:        2 bytes
 16048 ;; Hardware stack levels used:    1
 16049 ;; Hardware stack levels required when called:    7
 16050 ;; This function calls:
 16051 ;;		Nothing
 16052 ;; This function is called by:
 16053 ;;		_MacExecuteCommands
 16054 ;; This function uses a non-reentrant model
 16055 ;;
 16056                           
 16057                           	psect	text80
 16058  005B82                     __ptext80:
 16059                           	opt stack 0
 16060  005B82                     _ExecuteLinkCheck:
 16061                           	opt stack 0
 16062                           
 16063                           ; BSR set to: 0
 16064                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;incstack = 0
 16068  005B82  D80E               	call	PL300	;call to abstracted procedure
 16069  005B84  6FDD               	movwf	(_loRa+221)& (0+255),b
 16070                           
 16071                           ; BSR set to: 2
 16072  005B86  0100               	movlb	0	; () banked
 16073  005B88  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16074  005B8A  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 16078  005B8C  D809               	call	PL300	;call to abstracted procedure
 16079  005B8E  6FDE               	movwf	(_loRa+222)& (0+255),b
 16080  005B90  0100               	movlb	0	; () banked
 16081  005B92  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16082  005B94  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;lorawan.c: 1656: return ptr;
 16086  005B96  C064  F064         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 16087  005B9A  C065  F065         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 16088                           
 16089                           ; BSR set to: 0
 16090  005B9E  0012               	return		;funcret
 16091  005BA0                     __end_of_ExecuteLinkCheck:
 16092                           	opt stack 0
 16093  005BA0                     PL300:
 16094                           	opt stack 18
 16095  005BA0  C064  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 16096  005BA4  C065  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 16097  005BA8  50DF               	movf	indf2,w,c
 16098  005BAA  0102               	movlb	2	; () banked
 16099  005BAC  0012               	return	
 16100  005BAE                     __end_ofPL300:
 16101                           	opt stack 0
 16102                           tosu	equ	0xFFF
 16103                           tosh	equ	0xFFE
 16104                           tosl	equ	0xFFD
 16105                           pclath	equ	0xFFA
 16106                           tblptru	equ	0xFF8
 16107                           tblptrh	equ	0xFF7
 16108                           tblptrl	equ	0xFF6
 16109                           tablat	equ	0xFF5
 16110                           prodh	equ	0xFF4
 16111                           prodl	equ	0xFF3
 16112                           intcon	equ	0xFF2
 16113                           indf0	equ	0xFEF
 16114                           postinc0	equ	0xFEE
 16115                           plusw0	equ	0xFEB
 16116                           fsr0h	equ	0xFEA
 16117                           fsr0l	equ	0xFE9
 16118                           wreg	equ	0xFE8
 16119                           postinc1	equ	0xFE6
 16120                           postdec1	equ	0xFE5
 16121                           plusw1	equ	0xFE3
 16122                           fsr1h	equ	0xFE2
 16123                           fsr1l	equ	0xFE1
 16124                           indf2	equ	0xFDF
 16125                           postinc2	equ	0xFDE
 16126                           postdec2	equ	0xFDD
 16127                           plusw2	equ	0xFDB
 16128                           fsr2h	equ	0xFDA
 16129                           fsr2l	equ	0xFD9
 16130                           status	equ	0xFD8
 16131                           
 16132 ;; *************** function _ExecuteLinkAdr *****************
 16133 ;; Defined at:
 16134 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;  ptr             2   17[BANK0 ] PTR unsigned char 
 16137 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16138 ;; Auto vars:     Size  Location     Type
 16139 ;;  redundancy      2   23[BANK0 ] PTR struct .
 16140 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16141 ;;  channelMask     2   20[BANK0 ] unsigned int 
 16142 ;;  dataRate        1   25[BANK0 ] unsigned char 
 16143 ;;  txPower         1   22[BANK0 ] unsigned char 
 16144 ;; Return value:  Size  Location     Type
 16145 ;;                  2   17[BANK0 ] PTR unsigned char 
 16146 ;; Registers used:
 16147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16148 ;; Tracked objects:
 16149 ;;		On entry : F/0
 16150 ;;		On exit  : F/2
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16153 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16154 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16156 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16157 ;;Total ram usage:        9 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:   10
 16160 ;; This function calls:
 16161 ;;		_EnableChannels
 16162 ;;		_UpdateCurrentDataRate
 16163 ;;		_UpdateTxPower
 16164 ;;		_ValidateChannelMask
 16165 ;;		_ValidateChannelMaskCntl
 16166 ;;		_ValidateDataRate
 16167 ;;		_ValidateTxPower
 16168 ;; This function is called by:
 16169 ;;		_MacExecuteCommands
 16170 ;; This function uses a non-reentrant model
 16171 ;;
 16172                           
 16173                           	psect	text81
 16174  002ABA                     __ptext81:
 16175                           	opt stack 0
 16176  002ABA                     _ExecuteLinkAdr:
 16177                           	opt stack 0
 16178                           
 16179                           ; BSR set to: 0
 16180                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 16181                           ;lorawan_eu.c: 616: uint16_t channelMask;
 16182                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;incstack = 0
 16186  002ABA  D89A               	call	PL332	;call to abstracted procedure
 16187  002ABC  50DF               	movf	indf2,w,c
 16188  002ABE  0B0F               	andlw	15
 16189  002AC0  6F76               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 16190                           
 16191                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 16192  002AC2  D896               	call	PL332	;call to abstracted procedure
 16193  002AC4  50DF               	movf	indf2,w,c
 16194  002AC6  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 16195  002AC8  3973               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 16196  002ACA  0B0F               	andlw	15
 16197  002ACC  6F79               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;lorawan_eu.c: 620: ptr++;
 16201  002ACE  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16202  002AD0  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16203                           
 16204                           ; BSR set to: 0
 16205                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 16206  002AD2  D88E               	call	PL332	;call to abstracted procedure
 16207  002AD4  CFDE F074          	movff	postinc2,ExecuteLinkAdr@channelMask
 16208  002AD8  CFDD F075          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 16212  002ADC  0E02               	movlw	2
 16213  002ADE  2771               	addwf	ExecuteLinkAdr@ptr& (0+255),f,b
 16214  002AE0  0E00               	movlw	0
 16215  002AE2  2372               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 16219                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 16220  002AE4  C071  F077         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 16221  002AE8  C072  F078         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 16222                           
 16223                           ; BSR set to: 0
 16224  002AEC  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16225  002AEE  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 16229  002AF0  0102               	movlb	2	; () banked
 16230  002AF2  AD02               	btfss	(_loRa+2)& (0+255),6,b
 16231  002AF4  D062               	goto	l13496
 16232                           
 16233                           ; BSR set to: 2
 16234                           ;lorawan_eu.c: 627: {
 16235                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 16236  002AF6  D877               	call	PL286	;call to abstracted procedure
 16237  002AF8  0100               	movlb	0	; () banked
 16238  002AFA  38DF               	swapf	223,w,c
 16239  002AFC  0B07               	andlw	7
 16240  002AFE  EC09  F030         	call	_ValidateChannelMaskCntl
 16241  002B02  0900               	iorlw	0
 16242  002B04  E10C               	bnz	l13464
 16243                           
 16244                           ; BSR set to: 0
 16245  002B06  C074  F064         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 16246  002B0A  C075  F065         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 16247  002B0E  EC67  F02D         	call	_ValidateChannelMask	;wreg free
 16248  002B12  0900               	iorlw	0
 16249  002B14  E104               	bnz	l13464
 16250                           
 16251                           ; BSR set to: 0
 16252                           ;lorawan_eu.c: 629: {
 16253                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 16254  002B16  0102               	movlb	2	; () banked
 16255  002B18  51A7               	movf	(_loRa+167)& (0+255),w,b
 16256  002B1A  D85D               	call	PL2	;call to abstracted procedure
 16257  002B1C  80DF               	bsf	indf2,0,c
 16258  002B1E                     l13464:
 16259                           
 16260                           ;lorawan_eu.c: 631: }
 16261                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 16262  002B1E  0100               	movlb	0	; () banked
 16263  002B20  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16264  002B22  EC6F  F030         	call	_ValidateDataRate
 16265  002B26  0900               	iorlw	0
 16266  002B28  E10C               	bnz	l13472
 16267                           
 16268                           ; BSR set to: 0
 16269  002B2A  0102               	movlb	2	; () banked
 16270  002B2C  51EB               	movf	(_loRa+235)& (0+255),w,b
 16271  002B2E  0100               	movlb	0	; () banked
 16272  002B30  5D79               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16273  002B32  E307               	bnc	l13472
 16274                           
 16275                           ; BSR set to: 0
 16276  002B34  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16277  002B36  0102               	movlb	2	; () banked
 16278  002B38  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 16279  002B3A  E303               	bnc	l13472
 16280                           
 16281                           ; BSR set to: 2
 16282                           ;lorawan_eu.c: 634: {
 16283                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 16284  002B3C  51A7               	movf	(_loRa+167)& (0+255),w,b
 16285  002B3E  D84B               	call	PL2	;call to abstracted procedure
 16286  002B40  82DF               	bsf	indf2,1,c
 16287  002B42                     l13472:
 16288                           
 16289                           ;lorawan_eu.c: 636: }
 16290                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 16291  002B42  0100               	movlb	0	; () banked
 16292  002B44  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16293  002B46  ECE8  F02E         	call	_ValidateTxPower
 16294  002B4A  0900               	iorlw	0
 16295  002B4C  E104               	bnz	l1120
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;lorawan_eu.c: 639: {
 16299                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 16300  002B4E  0102               	movlb	2	; () banked
 16301  002B50  51A7               	movf	(_loRa+167)& (0+255),w,b
 16302  002B52  D841               	call	PL2	;call to abstracted procedure
 16303  002B54  84DF               	bsf	indf2,2,c
 16304  002B56                     l1120:
 16305                           
 16306                           ;lorawan_eu.c: 641: }
 16307                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 16308  002B56  0102               	movlb	2	; () banked
 16309  002B58  51A7               	movf	(_loRa+167)& (0+255),w,b
 16310  002B5A  D83D               	call	PL2	;call to abstracted procedure
 16311  002B5C  A4DF               	btfss	indf2,2,c
 16312  002B5E  D036               	goto	l13498
 16313                           
 16314                           ; BSR set to: 2
 16315  002B60  51A7               	movf	(_loRa+167)& (0+255),w,b
 16316  002B62  D839               	call	PL2	;call to abstracted procedure
 16317  002B64  A2DF               	btfss	indf2,1,c
 16318  002B66  D032               	goto	l13498
 16319                           
 16320                           ; BSR set to: 2
 16321  002B68  51A7               	movf	(_loRa+167)& (0+255),w,b
 16322  002B6A  D835               	call	PL2	;call to abstracted procedure
 16323  002B6C  A0DF               	btfss	indf2,0,c
 16324  002B6E  D02E               	goto	l13498
 16325                           
 16326                           ; BSR set to: 2
 16327                           ;lorawan_eu.c: 644: {
 16328                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 16329  002B70  C074  F06E         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 16330  002B74  C075  F06F         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 16331  002B78  D836               	call	PL286	;call to abstracted procedure
 16332  002B7A  0100               	movlb	0	; () banked
 16333  002B7C  38DF               	swapf	223,w,c
 16334  002B7E  0B07               	andlw	7
 16335  002B80  6F70               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 16336  002B82  EC4F  F030         	call	_EnableChannels	;wreg free
 16337                           
 16338                           ; BSR set to: 0
 16339                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 16340  002B86  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16341  002B88  EC08  F031         	call	_UpdateTxPower
 16342                           
 16343                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 16344  002B8C  0102               	movlb	2	; () banked
 16345  002B8E  8903               	bsf	(_loRa+3)& (0+255),4,b
 16346                           
 16347                           ; BSR set to: 2
 16348                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 16349  002B90  0100               	movlb	0	; () banked
 16350  002B92  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16351  002B94  EC0C  F031         	call	_UpdateCurrentDataRate
 16352                           
 16353                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 16354  002B98  D826               	call	PL286	;call to abstracted procedure
 16355  002B9A  0100               	movlb	0	; () banked
 16356  002B9C  50DF               	movf	223,w,c
 16357  002B9E  0B0F               	andlw	15
 16358  002BA0  E103               	bnz	l13492
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;lorawan_eu.c: 652: {
 16362                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 16363  002BA2  0102               	movlb	2	; () banked
 16364  002BA4  6BD6               	clrf	(_loRa+214)& (0+255),b
 16365                           
 16366                           ;lorawan_eu.c: 654: }
 16367  002BA6  D007               	goto	l13494
 16368  002BA8                     l13492:
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;lorawan_eu.c: 655: else
 16372                           ;lorawan_eu.c: 656: {
 16373                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 16374  002BA8  D81E               	call	PL286	;call to abstracted procedure
 16375  002BAA  50DF               	movf	223,w,c
 16376  002BAC  0B0F               	andlw	15
 16377  002BAE  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 16378  002BB0  0573               	decf	??_ExecuteLinkAdr& (0+255),w,b
 16379  002BB2  0102               	movlb	2	; () banked
 16380  002BB4  6FD6               	movwf	(_loRa+214)& (0+255),b
 16381  002BB6                     l13494:
 16382                           
 16383                           ; BSR set to: 2
 16384                           ;lorawan_eu.c: 658: }
 16385                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 16386  002BB6  8B03               	bsf	(_loRa+3)& (0+255),5,b
 16387  002BB8  D009               	goto	l13498
 16388  002BBA                     l13496:
 16389                           
 16390                           ; BSR set to: 2
 16391                           ;lorawan_eu.c: 662: else
 16392                           ;lorawan_eu.c: 663: {
 16393                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 16394  002BBA  51A7               	movf	(_loRa+167)& (0+255),w,b
 16395  002BBC  D80C               	call	PL2	;call to abstracted procedure
 16396  002BBE  90DF               	bcf	indf2,0,c
 16397                           
 16398                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 16399  002BC0  51A7               	movf	(_loRa+167)& (0+255),w,b
 16400  002BC2  D809               	call	PL2	;call to abstracted procedure
 16401  002BC4  92DF               	bcf	indf2,1,c
 16402                           
 16403                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 16404  002BC6  51A7               	movf	(_loRa+167)& (0+255),w,b
 16405  002BC8  D806               	call	PL2	;call to abstracted procedure
 16406  002BCA  94DF               	bcf	indf2,2,c
 16407  002BCC                     l13498:
 16408                           
 16409                           ; BSR set to: 2
 16410                           ;lorawan_eu.c: 667: }
 16411                           ;lorawan_eu.c: 669: return ptr;
 16412  002BCC  C071  F071         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 16413  002BD0  C072  F072         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 16414                           
 16415                           ; BSR set to: 2
 16416  002BD4  0012               	return		;funcret
 16417  002BD6                     __end_of_ExecuteLinkAdr:
 16418                           	opt stack 0
 16419  002BD6                     PL2:
 16420                           	opt stack 15
 16421  002BD6  0D02               	mullw	2
 16422  002BD8  0EA9               	movlw	low (_loRa+169)
 16423  002BDA  24F3               	addwf	prodl,w,c
 16424  002BDC  6ED9               	movwf	fsr2l,c
 16425  002BDE  0E02               	movlw	high (_loRa+169)
 16426  002BE0  20F4               	addwfc	prodh,w,c
 16427  002BE2  6EDA               	movwf	fsr2h,c
 16428  002BE4  0012               	return	
 16429  002BE6                     __end_ofPL2:
 16430                           	opt stack 0
 16431  002BE6                     PL286:
 16432                           	opt stack 15
 16433  002BE6  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 16434  002BEA  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 16435  002BEE  0012               	return	
 16436  002BF0                     __end_ofPL286:
 16437                           	opt stack 0
 16438  002BF0                     PL332:
 16439                           	opt stack 15
 16440  002BF0  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 16441  002BF4  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 16442  002BF8  0012               	return	
 16443  002BFA                     __end_ofPL332:
 16444                           	opt stack 0
 16445                           tosu	equ	0xFFF
 16446                           tosh	equ	0xFFE
 16447                           tosl	equ	0xFFD
 16448                           pclath	equ	0xFFA
 16449                           tblptru	equ	0xFF8
 16450                           tblptrh	equ	0xFF7
 16451                           tblptrl	equ	0xFF6
 16452                           tablat	equ	0xFF5
 16453                           prodh	equ	0xFF4
 16454                           prodl	equ	0xFF3
 16455                           intcon	equ	0xFF2
 16456                           indf0	equ	0xFEF
 16457                           postinc0	equ	0xFEE
 16458                           plusw0	equ	0xFEB
 16459                           fsr0h	equ	0xFEA
 16460                           fsr0l	equ	0xFE9
 16461                           wreg	equ	0xFE8
 16462                           postinc1	equ	0xFE6
 16463                           postdec1	equ	0xFE5
 16464                           plusw1	equ	0xFE3
 16465                           fsr1h	equ	0xFE2
 16466                           fsr1l	equ	0xFE1
 16467                           indf2	equ	0xFDF
 16468                           postinc2	equ	0xFDE
 16469                           postdec2	equ	0xFDD
 16470                           plusw2	equ	0xFDB
 16471                           fsr2h	equ	0xFDA
 16472                           fsr2l	equ	0xFD9
 16473                           status	equ	0xFD8
 16474                           
 16475 ;; *************** function _ValidateTxPower *****************
 16476 ;; Defined at:
 16477 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  txPowerNew      1    wreg     unsigned char 
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;  txPowerNew      1    5[BANK0 ] unsigned char 
 16482 ;;  result          1    4[BANK0 ] enum E17190
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  1    wreg      enum E17190
 16485 ;; Registers used:
 16486 ;;		wreg, status,2, status,0
 16487 ;; Tracked objects:
 16488 ;;		On entry : F/0
 16489 ;;		On exit  : F/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16496 ;;Total ram usage:        2 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    7
 16499 ;; This function calls:
 16500 ;;		Nothing
 16501 ;; This function is called by:
 16502 ;;		_ExecuteLinkAdr
 16503 ;; This function uses a non-reentrant model
 16504 ;;
 16505                           
 16506                           	psect	text82
 16507  005DD0                     __ptext82:
 16508                           	opt stack 0
 16509  005DD0                     _ValidateTxPower:
 16510                           	opt stack 17
 16511                           
 16512                           ; BSR set to: 2
 16513                           ;incstack = 0
 16514                           ;ValidateTxPower@txPowerNew stored from wreg
 16515  005DD0  6F65               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 16516                           
 16517                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 16518  005DD2  0100               	movlb	0	; () banked
 16519  005DD4  6B64               	clrf	ValidateTxPower@result& (0+255),b
 16520                           
 16521                           ; BSR set to: 0
 16522                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 16523  005DD6  0102               	movlb	2	; () banked
 16524  005DD8  51A4               	movf	(_loRa+164)& (0+255),w,b
 16525  005DDA  E103               	bnz	l12884
 16526                           
 16527                           ; BSR set to: 2
 16528  005DDC  0100               	movlb	0	; () banked
 16529  005DDE  5165               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 16530  005DE0  E004               	bz	l12886
 16531  005DE2                     l12884:
 16532  005DE2  0E05               	movlw	5
 16533  005DE4  0100               	movlb	0	; () banked
 16534  005DE6  6565               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 16535  005DE8  D002               	goto	l1104
 16536  005DEA                     l12886:
 16537                           
 16538                           ; BSR set to: 0
 16539                           ;lorawan_eu.c: 587: {
 16540                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 16541  005DEA  0E03               	movlw	3
 16542  005DEC  6F64               	movwf	ValidateTxPower@result& (0+255),b
 16543  005DEE                     l1104:
 16544                           
 16545                           ; BSR set to: 0
 16546                           ;lorawan_eu.c: 589: }
 16547                           ;lorawan_eu.c: 591: return result;
 16548  005DEE  5164               	movf	ValidateTxPower@result& (0+255),w,b
 16549                           
 16550                           ; BSR set to: 0
 16551  005DF0  0012               	return		;funcret
 16552  005DF2                     __end_of_ValidateTxPower:
 16553                           	opt stack 0
 16554                           tosu	equ	0xFFF
 16555                           tosh	equ	0xFFE
 16556                           tosl	equ	0xFFD
 16557                           pclath	equ	0xFFA
 16558                           tblptru	equ	0xFF8
 16559                           tblptrh	equ	0xFF7
 16560                           tblptrl	equ	0xFF6
 16561                           tablat	equ	0xFF5
 16562                           prodh	equ	0xFF4
 16563                           prodl	equ	0xFF3
 16564                           intcon	equ	0xFF2
 16565                           indf0	equ	0xFEF
 16566                           postinc0	equ	0xFEE
 16567                           plusw0	equ	0xFEB
 16568                           fsr0h	equ	0xFEA
 16569                           fsr0l	equ	0xFE9
 16570                           wreg	equ	0xFE8
 16571                           postinc1	equ	0xFE6
 16572                           postdec1	equ	0xFE5
 16573                           plusw1	equ	0xFE3
 16574                           fsr1h	equ	0xFE2
 16575                           fsr1l	equ	0xFE1
 16576                           indf2	equ	0xFDF
 16577                           postinc2	equ	0xFDE
 16578                           postdec2	equ	0xFDD
 16579                           plusw2	equ	0xFDB
 16580                           fsr2h	equ	0xFDA
 16581                           fsr2l	equ	0xFD9
 16582                           status	equ	0xFD8
 16583                           
 16584 ;; *************** function _ValidateDataRate *****************
 16585 ;; Defined at:
 16586 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  dataRate        1    wreg     unsigned char 
 16589 ;; Auto vars:     Size  Location     Type
 16590 ;;  dataRate        1    4[BANK0 ] unsigned char 
 16591 ;;  result          1    5[BANK0 ] enum E17190
 16592 ;; Return value:  Size  Location     Type
 16593 ;;                  1    wreg      enum E17190
 16594 ;; Registers used:
 16595 ;;		wreg, status,2, status,0
 16596 ;; Tracked objects:
 16597 ;;		On entry : F/0
 16598 ;;		On exit  : F/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16605 ;;Total ram usage:        2 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; Hardware stack levels required when called:    7
 16608 ;; This function calls:
 16609 ;;		Nothing
 16610 ;; This function is called by:
 16611 ;;		_ExecuteLinkAdr
 16612 ;;		_ExecuteRxParamSetupReq
 16613 ;;		_ValidateDataRange
 16614 ;; This function uses a non-reentrant model
 16615 ;;
 16616                           
 16617                           	psect	text83
 16618  0060DE                     __ptext83:
 16619                           	opt stack 0
 16620  0060DE                     _ValidateDataRate:
 16621                           	opt stack 17
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;incstack = 0
 16625                           ;ValidateDataRate@dataRate stored from wreg
 16626  0060DE  6F64               	movwf	ValidateDataRate@dataRate& (0+255),b
 16627                           
 16628                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 16629  0060E0  0100               	movlb	0	; () banked
 16630  0060E2  6B65               	clrf	ValidateDataRate@result& (0+255),b
 16631                           
 16632                           ; BSR set to: 0
 16633                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 16634  0060E4  0E07               	movlw	7
 16635  0060E6  6564               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 16636  0060E8  D002               	goto	l1100
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;lorawan_eu.c: 575: {
 16640                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 16641  0060EA  0E03               	movlw	3
 16642  0060EC  6F65               	movwf	ValidateDataRate@result& (0+255),b
 16643  0060EE                     l1100:
 16644                           
 16645                           ; BSR set to: 0
 16646                           ;lorawan_eu.c: 577: }
 16647                           ;lorawan_eu.c: 579: return result;
 16648  0060EE  5165               	movf	ValidateDataRate@result& (0+255),w,b
 16649                           
 16650                           ; BSR set to: 0
 16651  0060F0  0012               	return		;funcret
 16652  0060F2                     __end_of_ValidateDataRate:
 16653                           	opt stack 0
 16654                           tosu	equ	0xFFF
 16655                           tosh	equ	0xFFE
 16656                           tosl	equ	0xFFD
 16657                           pclath	equ	0xFFA
 16658                           tblptru	equ	0xFF8
 16659                           tblptrh	equ	0xFF7
 16660                           tblptrl	equ	0xFF6
 16661                           tablat	equ	0xFF5
 16662                           prodh	equ	0xFF4
 16663                           prodl	equ	0xFF3
 16664                           intcon	equ	0xFF2
 16665                           indf0	equ	0xFEF
 16666                           postinc0	equ	0xFEE
 16667                           plusw0	equ	0xFEB
 16668                           fsr0h	equ	0xFEA
 16669                           fsr0l	equ	0xFE9
 16670                           wreg	equ	0xFE8
 16671                           postinc1	equ	0xFE6
 16672                           postdec1	equ	0xFE5
 16673                           plusw1	equ	0xFE3
 16674                           fsr1h	equ	0xFE2
 16675                           fsr1l	equ	0xFE1
 16676                           indf2	equ	0xFDF
 16677                           postinc2	equ	0xFDE
 16678                           postdec2	equ	0xFDD
 16679                           plusw2	equ	0xFDB
 16680                           fsr2h	equ	0xFDA
 16681                           fsr2l	equ	0xFD9
 16682                           status	equ	0xFD8
 16683                           
 16684 ;; *************** function _ValidateChannelMaskCntl *****************
 16685 ;; Defined at:
 16686 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;  channelMaskC    1    wreg     unsigned char 
 16689 ;; Auto vars:     Size  Location     Type
 16690 ;;  channelMaskC    1    5[BANK0 ] unsigned char 
 16691 ;;  result          1    4[BANK0 ] enum E17190
 16692 ;; Return value:  Size  Location     Type
 16693 ;;                  1    wreg      enum E17190
 16694 ;; Registers used:
 16695 ;;		wreg, status,2, status,0
 16696 ;; Tracked objects:
 16697 ;;		On entry : F/0
 16698 ;;		On exit  : F/0
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16705 ;;Total ram usage:        2 bytes
 16706 ;; Hardware stack levels used:    1
 16707 ;; Hardware stack levels required when called:    7
 16708 ;; This function calls:
 16709 ;;		Nothing
 16710 ;; This function is called by:
 16711 ;;		_ExecuteLinkAdr
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           	psect	text84
 16716  006012                     __ptext84:
 16717                           	opt stack 0
 16718  006012                     _ValidateChannelMaskCntl:
 16719                           	opt stack 17
 16720                           
 16721                           ; BSR set to: 0
 16722                           ;incstack = 0
 16723                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 16724  006012  6F65               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 16725                           
 16726                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 16727  006014  0100               	movlb	0	; () banked
 16728  006016  6B64               	clrf	ValidateChannelMaskCntl@result& (0+255),b
 16729                           
 16730                           ; BSR set to: 0
 16731                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 16732  006018  5165               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16733  00601A  E005               	bz	l1271
 16734                           
 16735                           ; BSR set to: 0
 16736  00601C  0E06               	movlw	6
 16737  00601E  1965               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16738  006020  E002               	bz	l1271
 16739                           
 16740                           ; BSR set to: 0
 16741                           ;lorawan_eu.c: 1142: {
 16742                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 16743  006022  0E03               	movlw	3
 16744  006024  6F64               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 16745  006026                     l1271:
 16746                           
 16747                           ; BSR set to: 0
 16748                           ;lorawan_eu.c: 1144: }
 16749                           ;lorawan_eu.c: 1146: return result;
 16750  006026  5164               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 16751                           
 16752                           ; BSR set to: 0
 16753  006028  0012               	return		;funcret
 16754  00602A                     __end_of_ValidateChannelMaskCntl:
 16755                           	opt stack 0
 16756                           tosu	equ	0xFFF
 16757                           tosh	equ	0xFFE
 16758                           tosl	equ	0xFFD
 16759                           pclath	equ	0xFFA
 16760                           tblptru	equ	0xFF8
 16761                           tblptrh	equ	0xFF7
 16762                           tblptrl	equ	0xFF6
 16763                           tablat	equ	0xFF5
 16764                           prodh	equ	0xFF4
 16765                           prodl	equ	0xFF3
 16766                           intcon	equ	0xFF2
 16767                           indf0	equ	0xFEF
 16768                           postinc0	equ	0xFEE
 16769                           plusw0	equ	0xFEB
 16770                           fsr0h	equ	0xFEA
 16771                           fsr0l	equ	0xFE9
 16772                           wreg	equ	0xFE8
 16773                           postinc1	equ	0xFE6
 16774                           postdec1	equ	0xFE5
 16775                           plusw1	equ	0xFE3
 16776                           fsr1h	equ	0xFE2
 16777                           fsr1l	equ	0xFE1
 16778                           indf2	equ	0xFDF
 16779                           postinc2	equ	0xFDE
 16780                           postdec2	equ	0xFDD
 16781                           plusw2	equ	0xFDB
 16782                           fsr2h	equ	0xFDA
 16783                           fsr2l	equ	0xFD9
 16784                           status	equ	0xFD8
 16785                           
 16786 ;; *************** function _ValidateChannelMask *****************
 16787 ;; Defined at:
 16788 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16789 ;; Parameters:    Size  Location     Type
 16790 ;;  channelMask     2    4[BANK0 ] unsigned int 
 16791 ;; Auto vars:     Size  Location     Type
 16792 ;;  i               1    6[BANK0 ] unsigned char 
 16793 ;; Return value:  Size  Location     Type
 16794 ;;                  1    wreg      enum E17190
 16795 ;; Registers used:
 16796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16797 ;; Tracked objects:
 16798 ;;		On entry : F/0
 16799 ;;		On exit  : F/0
 16800 ;;		Unchanged: 0/0
 16801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16802 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16806 ;;Total ram usage:        3 bytes
 16807 ;; Hardware stack levels used:    1
 16808 ;; Hardware stack levels required when called:    7
 16809 ;; This function calls:
 16810 ;;		Nothing
 16811 ;; This function is called by:
 16812 ;;		_ExecuteLinkAdr
 16813 ;; This function uses a non-reentrant model
 16814 ;;
 16815                           
 16816                           	psect	text85
 16817  005ACE                     __ptext85:
 16818                           	opt stack 0
 16819  005ACE                     _ValidateChannelMask:
 16820                           	opt stack 17
 16821                           
 16822                           ; BSR set to: 0
 16823                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 16824                           
 16825                           ; BSR set to: 0
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;incstack = 0
 16829  005ACE  5164               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 16830  005AD0  1165               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 16831  005AD2  B4D8               	btfsc	status,2,c
 16832  005AD4  0C03               	retlw	3
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;lorawan_eu.c: 1171: {
 16836                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 16837  005AD6  6B66               	clrf	ValidateChannelMask@i& (0+255),b
 16838  005AD8                     l1285:
 16839                           
 16840                           ; BSR set to: 0
 16841                           ;lorawan_eu.c: 1173: {
 16842                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 16843  005AD8  A164               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 16844  005ADA  D008               	goto	l12918
 16845                           
 16846                           ; BSR set to: 0
 16847  005ADC  5166               	movf	ValidateChannelMask@i& (0+255),w,b
 16848  005ADE  ECB9  F02D         	call	PL72	;call to abstracted procedure
 16849  005AE2  50DF               	movf	indf2,w,c
 16850  005AE4  0B07               	andlw	7
 16851  005AE6  0A07               	xorlw	7
 16852  005AE8  E001               	bz	l12918
 16853                           
 16854                           ; BSR set to: 0
 16855                           ;lorawan_eu.c: 1175: {
 16856                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 16857  005AEA  0C03               	retlw	3
 16858  005AEC                     l12918:
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;lorawan_eu.c: 1178: else
 16862                           ;lorawan_eu.c: 1179: {
 16863                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 16864  005AEC  90D8               	bcf	status,0,c
 16865  005AEE  3365               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),f,b
 16866  005AF0  3364               	rrcf	ValidateChannelMask@channelMask& (0+255),f,b
 16867                           
 16868                           ; BSR set to: 0
 16869  005AF2  2B66               	incf	ValidateChannelMask@i& (0+255),f,b
 16870                           
 16871                           ; BSR set to: 0
 16872  005AF4  0E0F               	movlw	15
 16873  005AF6  6566               	cpfsgt	ValidateChannelMask@i& (0+255),b
 16874  005AF8  D7EF               	goto	l1285
 16875  005AFA  0C00               	retlw	0
 16876  005AFC                     __end_of_ValidateChannelMask:
 16877                           	opt stack 0
 16878                           tosu	equ	0xFFF
 16879                           tosh	equ	0xFFE
 16880                           tosl	equ	0xFFD
 16881                           pclath	equ	0xFFA
 16882                           tblptru	equ	0xFF8
 16883                           tblptrh	equ	0xFF7
 16884                           tblptrl	equ	0xFF6
 16885                           tablat	equ	0xFF5
 16886                           prodh	equ	0xFF4
 16887                           prodl	equ	0xFF3
 16888                           intcon	equ	0xFF2
 16889                           indf0	equ	0xFEF
 16890                           postinc0	equ	0xFEE
 16891                           plusw0	equ	0xFEB
 16892                           fsr0h	equ	0xFEA
 16893                           fsr0l	equ	0xFE9
 16894                           wreg	equ	0xFE8
 16895                           postinc1	equ	0xFE6
 16896                           postdec1	equ	0xFE5
 16897                           plusw1	equ	0xFE3
 16898                           fsr1h	equ	0xFE2
 16899                           fsr1l	equ	0xFE1
 16900                           indf2	equ	0xFDF
 16901                           postinc2	equ	0xFDE
 16902                           postdec2	equ	0xFDD
 16903                           plusw2	equ	0xFDB
 16904                           fsr2h	equ	0xFDA
 16905                           fsr2l	equ	0xFD9
 16906                           status	equ	0xFD8
 16907                           
 16908 ;; *************** function _UpdateTxPower *****************
 16909 ;; Defined at:
 16910 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16911 ;; Parameters:    Size  Location     Type
 16912 ;;  txPowerNew      1    wreg     unsigned char 
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;  txPowerNew      1    4[BANK0 ] unsigned char 
 16915 ;; Return value:  Size  Location     Type
 16916 ;;                  1    wreg      void 
 16917 ;; Registers used:
 16918 ;;		wreg
 16919 ;; Tracked objects:
 16920 ;;		On entry : F/0
 16921 ;;		On exit  : 0/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 16924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16928 ;;Total ram usage:        1 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    7
 16931 ;; This function calls:
 16932 ;;		Nothing
 16933 ;; This function is called by:
 16934 ;;		_ExecuteLinkAdr
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           	psect	text86
 16939  006210                     __ptext86:
 16940                           	opt stack 0
 16941  006210                     _UpdateTxPower:
 16942                           	opt stack 17
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;incstack = 0
 16946                           ;UpdateTxPower@txPowerNew stored from wreg
 16947  006210  6F64               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 16948                           
 16949                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 16950  006212  C064  F2E1         	movff	UpdateTxPower@txPowerNew,_loRa+225
 16951  006216  0012               	return		;funcret
 16952  006218                     __end_of_UpdateTxPower:
 16953                           	opt stack 0
 16954                           tosu	equ	0xFFF
 16955                           tosh	equ	0xFFE
 16956                           tosl	equ	0xFFD
 16957                           pclath	equ	0xFFA
 16958                           tblptru	equ	0xFF8
 16959                           tblptrh	equ	0xFF7
 16960                           tblptrl	equ	0xFF6
 16961                           tablat	equ	0xFF5
 16962                           prodh	equ	0xFF4
 16963                           prodl	equ	0xFF3
 16964                           intcon	equ	0xFF2
 16965                           indf0	equ	0xFEF
 16966                           postinc0	equ	0xFEE
 16967                           plusw0	equ	0xFEB
 16968                           fsr0h	equ	0xFEA
 16969                           fsr0l	equ	0xFE9
 16970                           wreg	equ	0xFE8
 16971                           postinc1	equ	0xFE6
 16972                           postdec1	equ	0xFE5
 16973                           plusw1	equ	0xFE3
 16974                           fsr1h	equ	0xFE2
 16975                           fsr1l	equ	0xFE1
 16976                           indf2	equ	0xFDF
 16977                           postinc2	equ	0xFDE
 16978                           postdec2	equ	0xFDD
 16979                           plusw2	equ	0xFDB
 16980                           fsr2h	equ	0xFDA
 16981                           fsr2l	equ	0xFD9
 16982                           status	equ	0xFD8
 16983                           
 16984 ;; *************** function _UpdateCurrentDataRate *****************
 16985 ;; Defined at:
 16986 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16987 ;; Parameters:    Size  Location     Type
 16988 ;;  valueNew        1    wreg     unsigned char 
 16989 ;; Auto vars:     Size  Location     Type
 16990 ;;  valueNew        1    4[BANK0 ] unsigned char 
 16991 ;; Return value:  Size  Location     Type
 16992 ;;                  1    wreg      void 
 16993 ;; Registers used:
 16994 ;;		wreg
 16995 ;; Tracked objects:
 16996 ;;		On entry : F/0
 16997 ;;		On exit  : 0/0
 16998 ;;		Unchanged: 0/0
 16999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17004 ;;Total ram usage:        1 bytes
 17005 ;; Hardware stack levels used:    1
 17006 ;; Hardware stack levels required when called:    7
 17007 ;; This function calls:
 17008 ;;		Nothing
 17009 ;; This function is called by:
 17010 ;;		_ExecuteLinkAdr
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           	psect	text87
 17015  006218                     __ptext87:
 17016                           	opt stack 0
 17017  006218                     _UpdateCurrentDataRate:
 17018                           	opt stack 17
 17019                           
 17020                           ;incstack = 0
 17021                           ;UpdateCurrentDataRate@valueNew stored from wreg
 17022  006218  6F64               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 17023                           
 17024                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 17025  00621A  C064  F2DF         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 17026  00621E  0012               	return		;funcret
 17027  006220                     __end_of_UpdateCurrentDataRate:
 17028                           	opt stack 0
 17029                           tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclath	equ	0xFFA
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           indf0	equ	0xFEF
 17041                           postinc0	equ	0xFEE
 17042                           plusw0	equ	0xFEB
 17043                           fsr0h	equ	0xFEA
 17044                           fsr0l	equ	0xFE9
 17045                           wreg	equ	0xFE8
 17046                           postinc1	equ	0xFE6
 17047                           postdec1	equ	0xFE5
 17048                           plusw1	equ	0xFE3
 17049                           fsr1h	equ	0xFE2
 17050                           fsr1l	equ	0xFE1
 17051                           indf2	equ	0xFDF
 17052                           postinc2	equ	0xFDE
 17053                           postdec2	equ	0xFDD
 17054                           plusw2	equ	0xFDB
 17055                           fsr2h	equ	0xFDA
 17056                           fsr2l	equ	0xFD9
 17057                           status	equ	0xFD8
 17058                           
 17059 ;; *************** function _EnableChannels *****************
 17060 ;; Defined at:
 17061 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17062 ;; Parameters:    Size  Location     Type
 17063 ;;  channelMask     2   14[BANK0 ] unsigned int 
 17064 ;;  channelMaskC    1   16[BANK0 ] unsigned char 
 17065 ;; Auto vars:     Size  Location     Type
 17066 ;;		None
 17067 ;; Return value:  Size  Location     Type
 17068 ;;                  1    wreg      void 
 17069 ;; Registers used:
 17070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17071 ;; Tracked objects:
 17072 ;;		On entry : F/0
 17073 ;;		On exit  : F/0
 17074 ;;		Unchanged: 0/0
 17075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17076 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17080 ;;Total ram usage:        3 bytes
 17081 ;; Hardware stack levels used:    1
 17082 ;; Hardware stack levels required when called:    9
 17083 ;; This function calls:
 17084 ;;		_EnableChannels1
 17085 ;; This function is called by:
 17086 ;;		_ExecuteLinkAdr
 17087 ;; This function uses a non-reentrant model
 17088 ;;
 17089                           
 17090                           	psect	text88
 17091  00609E                     __ptext88:
 17092                           	opt stack 0
 17093  00609E                     _EnableChannels:
 17094                           	opt stack 15
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 17098                           
 17099                           ;incstack = 0
 17100  00609E  C06E  F068         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 17101  0060A2  C06F  F069         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 17102  0060A6  C070  F06A         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 17103  0060AA  6B6B               	clrf	EnableChannels1@channelIndexMin& (0+255),b
 17104  0060AC  0E10               	movlw	16
 17105  0060AE  6F6C               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 17106  0060B0  EF48  F028         	goto	_EnableChannels1	;wreg free
 17107  0060B4                     __end_of_EnableChannels:
 17108                           	opt stack 0
 17109                           tosu	equ	0xFFF
 17110                           tosh	equ	0xFFE
 17111                           tosl	equ	0xFFD
 17112                           pclath	equ	0xFFA
 17113                           tblptru	equ	0xFF8
 17114                           tblptrh	equ	0xFF7
 17115                           tblptrl	equ	0xFF6
 17116                           tablat	equ	0xFF5
 17117                           prodh	equ	0xFF4
 17118                           prodl	equ	0xFF3
 17119                           intcon	equ	0xFF2
 17120                           indf0	equ	0xFEF
 17121                           postinc0	equ	0xFEE
 17122                           plusw0	equ	0xFEB
 17123                           fsr0h	equ	0xFEA
 17124                           fsr0l	equ	0xFE9
 17125                           wreg	equ	0xFE8
 17126                           postinc1	equ	0xFE6
 17127                           postdec1	equ	0xFE5
 17128                           plusw1	equ	0xFE3
 17129                           fsr1h	equ	0xFE2
 17130                           fsr1l	equ	0xFE1
 17131                           indf2	equ	0xFDF
 17132                           postinc2	equ	0xFDE
 17133                           postdec2	equ	0xFDD
 17134                           plusw2	equ	0xFDB
 17135                           fsr2h	equ	0xFDA
 17136                           fsr2l	equ	0xFD9
 17137                           status	equ	0xFD8
 17138                           
 17139 ;; *************** function _EnableChannels1 *****************
 17140 ;; Defined at:
 17141 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;  channelMask     2    8[BANK0 ] unsigned int 
 17144 ;;  channelMaskC    1   10[BANK0 ] unsigned char 
 17145 ;;  channelIndex    1   11[BANK0 ] unsigned char 
 17146 ;;  channelIndex    1   12[BANK0 ] unsigned char 
 17147 ;; Auto vars:     Size  Location     Type
 17148 ;;  i               1   13[BANK0 ] unsigned char 
 17149 ;; Return value:  Size  Location     Type
 17150 ;;                  1    wreg      void 
 17151 ;; Registers used:
 17152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17153 ;; Tracked objects:
 17154 ;;		On entry : F/0
 17155 ;;		On exit  : F/0
 17156 ;;		Unchanged: 0/0
 17157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17158 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17162 ;;Total ram usage:        6 bytes
 17163 ;; Hardware stack levels used:    1
 17164 ;; Hardware stack levels required when called:    8
 17165 ;; This function calls:
 17166 ;;		_UpdateChannelIdStatus
 17167 ;; This function is called by:
 17168 ;;		_EnableChannels
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text89
 17173  005090                     __ptext89:
 17174                           	opt stack 0
 17175  005090                     _EnableChannels1:
 17176                           	opt stack 15
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;lorawan_eu.c: 1195: uint8_t i;
 17180                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;incstack = 0
 17184  005090  0E06               	movlw	6
 17185  005092  196A               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17186  005094  E10C               	bnz	l12622
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;lorawan_eu.c: 1198: {
 17190                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17191  005096  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17192  00509A  D005               	goto	l12620
 17193  00509C                     l12616:
 17194                           
 17195                           ; BSR set to: 0
 17196                           ;lorawan_eu.c: 1200: {
 17197                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 17198  00509C  D821               	call	PL466	;call to abstracted procedure
 17199  00509E  EC84  F01D         	call	_UpdateChannelIdStatus
 17200                           
 17201                           ; BSR set to: 2
 17202  0050A2  0100               	movlb	0	; () banked
 17203  0050A4  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 17204  0050A6                     l12620:
 17205                           
 17206                           ; BSR set to: 0
 17207  0050A6  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17208  0050A8  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 17209  0050AA  E3F8               	bnc	l12616
 17210  0050AC  0012               	return	
 17211  0050AE                     l12622:
 17212                           
 17213                           ; BSR set to: 0
 17214                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 17215  0050AE  516A               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17216  0050B0  A4D8               	btfss	status,2,c
 17217  0050B2  0012               	return	
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;lorawan_eu.c: 1205: {
 17221                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17222  0050B4  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17223  0050B8  D00F               	goto	l12634
 17224  0050BA                     l1300:
 17225                           
 17226                           ; BSR set to: 0
 17227                           ;lorawan_eu.c: 1207: {
 17228                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 17229  0050BA  A168               	btfss	EnableChannels1@channelMask& (0+255),0,b
 17230  0050BC  D004               	goto	l12628
 17231                           
 17232                           ; BSR set to: 0
 17233                           ;lorawan_eu.c: 1209: {
 17234                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 17235  0050BE  D810               	call	PL466	;call to abstracted procedure
 17236  0050C0  EC84  F01D         	call	_UpdateChannelIdStatus
 17237                           
 17238                           ;lorawan_eu.c: 1211: }
 17239  0050C4  D004               	goto	l12630
 17240  0050C6                     l12628:
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;lorawan_eu.c: 1212: else
 17244                           ;lorawan_eu.c: 1213: {
 17245                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 17246  0050C6  6B64               	clrf	UpdateChannelIdStatus@statusNew& (0+255),b
 17247  0050C8  516D               	movf	EnableChannels1@i& (0+255),w,b
 17248  0050CA  EC84  F01D         	call	_UpdateChannelIdStatus
 17249  0050CE                     l12630:
 17250                           
 17251                           ; BSR set to: 2
 17252                           ;lorawan_eu.c: 1215: }
 17253                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 17254  0050CE  0100               	movlb	0	; () banked
 17255  0050D0  90D8               	bcf	status,0,c
 17256  0050D2  3369               	rrcf	(EnableChannels1@channelMask+1)& (0+255),f,b
 17257  0050D4  3368               	rrcf	EnableChannels1@channelMask& (0+255),f,b
 17258                           
 17259                           ; BSR set to: 0
 17260  0050D6  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 17261  0050D8                     l12634:
 17262                           
 17263                           ; BSR set to: 0
 17264  0050D8  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17265  0050DA  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 17266  0050DC  E3EE               	bnc	l1300
 17267                           
 17268                           ; BSR set to: 0
 17269  0050DE  0012               	return		;funcret
 17270  0050E0                     __end_of_EnableChannels1:
 17271                           	opt stack 0
 17272  0050E0                     PL466:
 17273                           	opt stack 15
 17274  0050E0  0E01               	movlw	1
 17275  0050E2  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 17276  0050E4  516D               	movf	EnableChannels1@i& (0+255),w,b
 17277  0050E6  0012               	return	
 17278  0050E8                     __end_ofPL466:
 17279                           	opt stack 0
 17280                           tosu	equ	0xFFF
 17281                           tosh	equ	0xFFE
 17282                           tosl	equ	0xFFD
 17283                           pclath	equ	0xFFA
 17284                           tblptru	equ	0xFF8
 17285                           tblptrh	equ	0xFF7
 17286                           tblptrl	equ	0xFF6
 17287                           tablat	equ	0xFF5
 17288                           prodh	equ	0xFF4
 17289                           prodl	equ	0xFF3
 17290                           intcon	equ	0xFF2
 17291                           indf0	equ	0xFEF
 17292                           postinc0	equ	0xFEE
 17293                           plusw0	equ	0xFEB
 17294                           fsr0h	equ	0xFEA
 17295                           fsr0l	equ	0xFE9
 17296                           wreg	equ	0xFE8
 17297                           postinc1	equ	0xFE6
 17298                           postdec1	equ	0xFE5
 17299                           plusw1	equ	0xFE3
 17300                           fsr1h	equ	0xFE2
 17301                           fsr1l	equ	0xFE1
 17302                           indf2	equ	0xFDF
 17303                           postinc2	equ	0xFDE
 17304                           postdec2	equ	0xFDD
 17305                           plusw2	equ	0xFDB
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310 ;; *************** function _UpdateChannelIdStatus *****************
 17311 ;; Defined at:
 17312 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17313 ;; Parameters:    Size  Location     Type
 17314 ;;  channelId       1    wreg     unsigned char 
 17315 ;;  statusNew       1    4[BANK0 ] unsigned char 
 17316 ;; Auto vars:     Size  Location     Type
 17317 ;;  channelId       1    6[BANK0 ] unsigned char 
 17318 ;;  i               1    7[BANK0 ] unsigned char 
 17319 ;; Return value:  Size  Location     Type
 17320 ;;                  1    wreg      void 
 17321 ;; Registers used:
 17322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17323 ;; Tracked objects:
 17324 ;;		On entry : F/0
 17325 ;;		On exit  : F/2
 17326 ;;		Unchanged: 0/0
 17327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17328 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17332 ;;Total ram usage:        4 bytes
 17333 ;; Hardware stack levels used:    1
 17334 ;; Hardware stack levels required when called:    7
 17335 ;; This function calls:
 17336 ;;		Nothing
 17337 ;; This function is called by:
 17338 ;;		_LORAWAN_SetChannelIdStatus
 17339 ;;		_ExecuteNewChannel
 17340 ;;		_EnableChannels1
 17341 ;; This function uses a non-reentrant model
 17342 ;;
 17343                           
 17344                           	psect	text90
 17345  003B08                     __ptext90:
 17346                           	opt stack 0
 17347  003B08                     _UpdateChannelIdStatus:
 17348                           	opt stack 17
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;incstack = 0
 17352                           ;UpdateChannelIdStatus@channelId stored from wreg
 17353  003B08  6F66               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 17354                           
 17355                           ;lorawan_eu.c: 1044: uint8_t i;
 17356                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 17357  003B0A  0100               	movlb	0	; () banked
 17358  003B0C  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17359  003B0E  0D0E               	mullw	14
 17360  003B10  D83F               	call	PL18	;call to abstracted procedure
 17361  003B12  C064  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 17362                           
 17363                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 17364  003B16  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17365  003B18  0D0E               	mullw	14
 17366  003B1A  D83A               	call	PL18	;call to abstracted procedure
 17367  003B1C  50DF               	movf	indf2,w,c
 17368  003B1E  E104               	bnz	l12332
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;lorawan_eu.c: 1048: {
 17372                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 17373  003B20  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17374  003B22  EC71  F006         	call	PL4	;call to abstracted procedure
 17375  003B26  D83B               	call	PL184	;call to abstracted procedure
 17376  003B28                     l12332:
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;lorawan_eu.c: 1051: }
 17380                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 17381  003B28  6B67               	clrf	UpdateChannelIdStatus@i& (0+255),b
 17382  003B2A  D026               	goto	l12346
 17383  003B2C                     l12334:
 17384                           
 17385                           ; BSR set to: 0
 17386                           ;lorawan_eu.c: 1054: {
 17387                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 17388  003B2C  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17389  003B2E  ECAF  F021         	call	PL6	;call to abstracted procedure
 17390  003B32  50DF               	movf	223,w,c
 17391  003B34  0B0F               	andlw	15
 17392  003B36  0100               	movlb	0	; () banked
 17393  003B38  6F65               	movwf	??_UpdateChannelIdStatus& (0+255),b
 17394  003B3A  0102               	movlb	2	; () banked
 17395  003B3C  51EB               	movf	(_loRa+235)& (0+255),w,b
 17396  003B3E  0100               	movlb	0	; () banked
 17397  003B40  5D65               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 17398  003B42  E208               	bc	l1236
 17399                           
 17400                           ; BSR set to: 0
 17401  003B44  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17402  003B46  ECB7  F021         	call	PL12	;call to abstracted procedure
 17403  003B4A  E104               	bnz	l1236
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;lorawan_eu.c: 1056: {
 17407                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 17408  003B4C  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17409  003B4E  ECAF  F021         	call	PL6	;call to abstracted procedure
 17410  003B52  D830               	call	PL322	;call to abstracted procedure
 17411  003B54                     l1236:
 17412                           
 17413                           ;lorawan_eu.c: 1058: }
 17414                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 17415  003B54  0100               	movlb	0	; () banked
 17416  003B56  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17417  003B58  ECAF  F021         	call	PL6	;call to abstracted procedure
 17418  003B5C  D835               	call	PL452	;call to abstracted procedure
 17419  003B5E  61EC               	cpfslt	(_loRa+236)& (0+255),b
 17420  003B60  D009               	goto	l12344
 17421                           
 17422                           ; BSR set to: 2
 17423  003B62  0100               	movlb	0	; () banked
 17424  003B64  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17425  003B66  ECB7  F021         	call	PL12	;call to abstracted procedure
 17426  003B6A  E104               	bnz	l12344
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;lorawan_eu.c: 1060: {
 17430                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 17431  003B6C  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17432  003B6E  ECAF  F021         	call	PL6	;call to abstracted procedure
 17433  003B72  D825               	call	PL336	;call to abstracted procedure
 17434  003B74                     l12344:
 17435  003B74  0100               	movlb	0	; () banked
 17436  003B76  2B67               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 17437  003B78                     l12346:
 17438                           
 17439                           ; BSR set to: 0
 17440  003B78  0102               	movlb	2	; () banked
 17441  003B7A  51ED               	movf	(_loRa+237)& (0+255),w,b
 17442  003B7C  0100               	movlb	0	; () banked
 17443  003B7E  5D67               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 17444  003B80  E3D5               	bnc	l12334
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;lorawan_eu.c: 1062: }
 17448                           ;lorawan_eu.c: 1063: }
 17449                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 17450  003B82  0102               	movlb	2	; () banked
 17451  003B84  51DF               	movf	(_loRa+223)& (0+255),w,b
 17452  003B86  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 17453  003B88  E20F               	bc	PL298
 17454                           
 17455                           ; BSR set to: 2
 17456                           ;lorawan_eu.c: 1066: {
 17457                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 17458  003B8A  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 17459  003B8E                     l12352:
 17460                           
 17461                           ; BSR set to: 2
 17462                           ;lorawan_eu.c: 1068: }
 17463                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 17464                           
 17465                           ; BSR set to: 2
 17466                           ;lorawan_eu.c: 1071: {
 17467                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 17468                           
 17469                           ; BSR set to: 2
 17470  003B8E  D00C               	goto	PL298	;call to abstracted procedure
 17471  003B90                     __end_of_UpdateChannelIdStatus:
 17472                           	opt stack 0
 17473  003B90                     PL18:
 17474                           	opt stack 17
 17475  003B90  0E04               	movlw	low (_Channels+4)
 17476  003B92  24F3               	addwf	prodl,w,c
 17477  003B94  6ED9               	movwf	fsr2l,c
 17478  003B96  0E04               	movlw	high (_Channels+4)
 17479  003B98  20F4               	addwfc	prodh,w,c
 17480  003B9A  6EDA               	movwf	fsr2h,c
 17481  003B9C  0012               	return	
 17482  003B9E                     __end_ofPL18:
 17483                           	opt stack 0
 17484  003B9E                     PL184:
 17485                           	opt stack 17
 17486  003B9E  6ADE               	clrf	postinc2,c
 17487  003BA0  6ADE               	clrf	postinc2,c
 17488  003BA2  6ADE               	clrf	postinc2,c
 17489  003BA4  6ADD               	clrf	postdec2,c
 17490  003BA6  0012               	return	
 17491  003BA8                     __end_ofPL184:
 17492                           	opt stack 0
 17493  003BA8                     PL298:
 17494                           	opt stack 17
 17495  003BA8  51EB               	movf	(_loRa+235)& (0+255),w,b
 17496  003BAA  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 17497  003BAC  A0D8               	btfss	status,0,c
 17498  003BAE  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 17499  003BB2  0012               	return		;funcret
 17500  003BB4                     __end_ofPL298:
 17501                           	opt stack 0
 17502  003BB4                     PL322:
 17503                           	opt stack 17
 17504  003BB4  50DF               	movf	223,w,c
 17505  003BB6  0B0F               	andlw	15
 17506  003BB8  0102               	movlb	2	; () banked
 17507  003BBA  6FEB               	movwf	(_loRa+235)& (0+255),b
 17508  003BBC  0012               	return	
 17509  003BBE                     __end_ofPL322:
 17510                           	opt stack 0
 17511  003BBE                     PL336:
 17512                           	opt stack 17
 17513  003BBE  38DF               	swapf	223,w,c
 17514  003BC0  0B0F               	andlw	15
 17515  003BC2  0102               	movlb	2	; () banked
 17516  003BC4  6FEC               	movwf	(_loRa+236)& (0+255),b
 17517  003BC6  0012               	return	
 17518  003BC8                     __end_ofPL336:
 17519                           	opt stack 0
 17520  003BC8                     PL452:
 17521                           	opt stack 17
 17522  003BC8  38DF               	swapf	223,w,c
 17523  003BCA  0B0F               	andlw	15
 17524  003BCC  0102               	movlb	2	; () banked
 17525  003BCE  0012               	return	
 17526  003BD0                     __end_ofPL452:
 17527                           	opt stack 0
 17528                           tosu	equ	0xFFF
 17529                           tosh	equ	0xFFE
 17530                           tosl	equ	0xFFD
 17531                           pclath	equ	0xFFA
 17532                           tblptru	equ	0xFF8
 17533                           tblptrh	equ	0xFF7
 17534                           tblptrl	equ	0xFF6
 17535                           tablat	equ	0xFF5
 17536                           prodh	equ	0xFF4
 17537                           prodl	equ	0xFF3
 17538                           intcon	equ	0xFF2
 17539                           indf0	equ	0xFEF
 17540                           postinc0	equ	0xFEE
 17541                           plusw0	equ	0xFEB
 17542                           fsr0h	equ	0xFEA
 17543                           fsr0l	equ	0xFE9
 17544                           wreg	equ	0xFE8
 17545                           postinc1	equ	0xFE6
 17546                           postdec1	equ	0xFE5
 17547                           plusw1	equ	0xFE3
 17548                           fsr1h	equ	0xFE2
 17549                           fsr1l	equ	0xFE1
 17550                           indf2	equ	0xFDF
 17551                           postinc2	equ	0xFDE
 17552                           postdec2	equ	0xFDD
 17553                           plusw2	equ	0xFDB
 17554                           fsr2h	equ	0xFDA
 17555                           fsr2l	equ	0xFD9
 17556                           status	equ	0xFD8
 17557                           
 17558 ;; *************** function _ExecuteDutyCycle *****************
 17559 ;; Defined at:
 17560 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 17563 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 17564 ;; Auto vars:     Size  Location     Type
 17565 ;;  maxDCycle       1    9[BANK0 ] unsigned char 
 17566 ;; Return value:  Size  Location     Type
 17567 ;;                  2    4[BANK0 ] PTR unsigned char 
 17568 ;; Registers used:
 17569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17570 ;; Tracked objects:
 17571 ;;		On entry : F/0
 17572 ;;		On exit  : D/0
 17573 ;;		Unchanged: 0/0
 17574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17575 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17577 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17579 ;;Total ram usage:        6 bytes
 17580 ;; Hardware stack levels used:    1
 17581 ;; Hardware stack levels required when called:    7
 17582 ;; This function calls:
 17583 ;;		Nothing
 17584 ;; This function is called by:
 17585 ;;		_MacExecuteCommands
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           	psect	text91
 17590  005332                     __ptext91:
 17591                           	opt stack 0
 17592  005332                     _ExecuteDutyCycle:
 17593                           	opt stack 18
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 17597                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 17598                           
 17599                           ; BSR set to: 2
 17600                           ;incstack = 0
 17601  005332  C064  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 17602  005336  C065  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 17603  00533A  50DF               	movf	indf2,w,c
 17604  00533C  6F69               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 17605                           
 17606                           ; BSR set to: 0
 17607  00533E  4B64               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 17608  005340  2B65               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 17609                           
 17610                           ; BSR set to: 0
 17611                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 17612  005342  0E0F               	movlw	15
 17613  005344  6169               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 17614  005346  D012               	goto	l1112
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;lorawan_eu.c: 600: {
 17618                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 17619  005348  C069  F066         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 17620  00534C  0E01               	movlw	1
 17621  00534E  6F67               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 17622  005350  6B68               	clrf	(??_ExecuteDutyCycle+2)& (0+255),b
 17623  005352  2B66               	incf	??_ExecuteDutyCycle& (0+255),f,b
 17624  005354  D003               	goto	u14814
 17625  005356                     u14815:
 17626  005356  90D8               	bcf	status,0,c
 17627  005358  3767               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 17628  00535A  3768               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 17629  00535C                     u14814:
 17630  00535C  2F66               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 17631  00535E  D7FB               	goto	u14815
 17632  005360  C067  F2DB         	movff	??_ExecuteDutyCycle+1,_loRa+219
 17633  005364  C068  F2DC         	movff	??_ExecuteDutyCycle+2,_loRa+220
 17634                           
 17635                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 17636  005368  0102               	movlb	2	; () banked
 17637  00536A  8D03               	bsf	(_loRa+3)& (0+255),6,b
 17638  00536C                     l1112:
 17639                           
 17640                           ;lorawan_eu.c: 603: }
 17641                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 17642  00536C  0100               	movlb	0	; () banked
 17643  00536E  2969               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 17644  005370  E102               	bnz	l13440
 17645                           
 17646                           ; BSR set to: 0
 17647                           ;lorawan_eu.c: 606: {
 17648                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 17649  005372  0102               	movlb	2	; () banked
 17650  005374  8F02               	bsf	(_loRa+2)& (0+255),7,b
 17651  005376                     l13440:
 17652                           
 17653                           ;lorawan_eu.c: 608: }
 17654                           ;lorawan_eu.c: 610: return ptr;
 17655  005376  C064  F064         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 17656  00537A  C065  F065         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 17657  00537E  0012               	return		;funcret
 17658  005380                     __end_of_ExecuteDutyCycle:
 17659                           	opt stack 0
 17660                           tosu	equ	0xFFF
 17661                           tosh	equ	0xFFE
 17662                           tosl	equ	0xFFD
 17663                           pclath	equ	0xFFA
 17664                           tblptru	equ	0xFF8
 17665                           tblptrh	equ	0xFF7
 17666                           tblptrl	equ	0xFF6
 17667                           tablat	equ	0xFF5
 17668                           prodh	equ	0xFF4
 17669                           prodl	equ	0xFF3
 17670                           intcon	equ	0xFF2
 17671                           indf0	equ	0xFEF
 17672                           postinc0	equ	0xFEE
 17673                           plusw0	equ	0xFEB
 17674                           fsr0h	equ	0xFEA
 17675                           fsr0l	equ	0xFE9
 17676                           wreg	equ	0xFE8
 17677                           postinc1	equ	0xFE6
 17678                           postdec1	equ	0xFE5
 17679                           plusw1	equ	0xFE3
 17680                           fsr1h	equ	0xFE2
 17681                           fsr1l	equ	0xFE1
 17682                           indf2	equ	0xFDF
 17683                           postinc2	equ	0xFDE
 17684                           postdec2	equ	0xFDD
 17685                           plusw2	equ	0xFDB
 17686                           fsr2h	equ	0xFDA
 17687                           fsr2l	equ	0xFD9
 17688                           status	equ	0xFD8
 17689                           
 17690 ;; *************** function _ExecuteDevStatus *****************
 17691 ;; Defined at:
 17692 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17693 ;; Parameters:    Size  Location     Type
 17694 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 17695 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 17696 ;; Auto vars:     Size  Location     Type
 17697 ;;		None
 17698 ;; Return value:  Size  Location     Type
 17699 ;;                  2    4[BANK0 ] PTR unsigned char 
 17700 ;; Registers used:
 17701 ;;		wreg, status,2, status,0
 17702 ;; Tracked objects:
 17703 ;;		On entry : F/0
 17704 ;;		On exit  : F/0
 17705 ;;		Unchanged: F/0
 17706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17711 ;;Total ram usage:        2 bytes
 17712 ;; Hardware stack levels used:    1
 17713 ;; Hardware stack levels required when called:    7
 17714 ;; This function calls:
 17715 ;;		Nothing
 17716 ;; This function is called by:
 17717 ;;		_MacExecuteCommands
 17718 ;; This function uses a non-reentrant model
 17719 ;;
 17720                           
 17721                           	psect	text92
 17722  0061BA                     __ptext92:
 17723                           	opt stack 0
 17724  0061BA                     _ExecuteDevStatus:
 17725                           	opt stack 18
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;lorawan_eu.c: 674: return ptr;
 17729                           
 17730                           ;incstack = 0
 17731  0061BA  C064  F064         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 17732  0061BE  C065  F065         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 17733                           
 17734                           ; BSR set to: 0
 17735  0061C2  0012               	return		;funcret
 17736  0061C4                     __end_of_ExecuteDevStatus:
 17737                           	opt stack 0
 17738                           tosu	equ	0xFFF
 17739                           tosh	equ	0xFFE
 17740                           tosl	equ	0xFFD
 17741                           pclath	equ	0xFFA
 17742                           tblptru	equ	0xFF8
 17743                           tblptrh	equ	0xFF7
 17744                           tblptrl	equ	0xFF6
 17745                           tablat	equ	0xFF5
 17746                           prodh	equ	0xFF4
 17747                           prodl	equ	0xFF3
 17748                           intcon	equ	0xFF2
 17749                           indf0	equ	0xFEF
 17750                           postinc0	equ	0xFEE
 17751                           plusw0	equ	0xFEB
 17752                           fsr0h	equ	0xFEA
 17753                           fsr0l	equ	0xFE9
 17754                           wreg	equ	0xFE8
 17755                           postinc1	equ	0xFE6
 17756                           postdec1	equ	0xFE5
 17757                           plusw1	equ	0xFE3
 17758                           fsr1h	equ	0xFE2
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           plusw2	equ	0xFDB
 17764                           fsr2h	equ	0xFDA
 17765                           fsr2l	equ	0xFD9
 17766                           status	equ	0xFD8
 17767                           
 17768 ;; *************** function _LORAWAN_Send *****************
 17769 ;; Defined at:
 17770 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  confirmed       1    wreg     enum E17158
 17773 ;;  port            1  129[BANK0 ] unsigned char 
 17774 ;;  buffer          2  130[BANK0 ] PTR void 
 17775 ;;		 -> payload(2), NULL(0), 
 17776 ;;  bufferLength    1  132[BANK0 ] unsigned char 
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  confirmed       1  135[BANK0 ] enum E17158
 17779 ;;  result          1  134[BANK0 ] enum E17131
 17780 ;; Return value:  Size  Location     Type
 17781 ;;                  1    wreg      enum E17131
 17782 ;; Registers used:
 17783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17784 ;; Tracked objects:
 17785 ;;		On entry : F/0
 17786 ;;		On exit  : D/0
 17787 ;;		Unchanged: 0/0
 17788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 17789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17792 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 17793 ;;Total ram usage:        7 bytes
 17794 ;; Hardware stack levels used:    1
 17795 ;; Hardware stack levels required when called:   13
 17796 ;; This function calls:
 17797 ;;		_AssemblePacket
 17798 ;;		_LORAWAN_GetMaxPayloadSize
 17799 ;;		_RADIO_ReceiveStop
 17800 ;;		_RADIO_Transmit
 17801 ;;		_SelectChannelForTransmission
 17802 ;; This function is called by:
 17803 ;;		_AutomaticReplyCallback
 17804 ;;		_LORAWAN_RxDone
 17805 ;;		_sendPacket
 17806 ;; This function uses a non-reentrant model
 17807 ;;
 17808                           
 17809                           	psect	text93
 17810  003F70                     __ptext93:
 17811                           	opt stack 0
 17812  003F70                     _LORAWAN_Send:
 17813                           	opt stack 16
 17814                           
 17815                           ; BSR set to: 0
 17816                           ;incstack = 0
 17817                           ;LORAWAN_Send@confirmed stored from wreg
 17818  003F70  6FE7               	movwf	LORAWAN_Send@confirmed& (0+255),b
 17819                           
 17820                           ;lorawan.c: 187: LorawanError_t result;
 17821                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 17822  003F72  0102               	movlb	2	; () banked
 17823  003F74  A103               	btfss	(_loRa+3)& (0+255),0,b
 17824                           
 17825                           ; BSR set to: 2
 17826                           ;lorawan.c: 192: }
 17827                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 17828  003F76  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 17829  003F78  0012               	return	
 17830                           
 17831                           ; BSR set to: 2
 17832                           ;lorawan.c: 197: }
 17833                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 17834  003F7A  A902               	btfss	(_loRa+2)& (0+255),4,b
 17835  003F7C  0012               	return	
 17836                           
 17837                           ; BSR set to: 2
 17838                           ;lorawan.c: 202: }
 17839                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 17840  003F7E  0100               	movlb	0	; () banked
 17841  003F80  51E1               	movf	LORAWAN_Send@port& (0+255),w,b
 17842  003F82  E103               	bnz	l13898
 17843                           
 17844                           ; BSR set to: 0
 17845  003F84  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17846  003F86  E001               	bz	l13898
 17847  003F88  0012               	return	
 17848  003F8A                     l13898:
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;lorawan.c: 207: }
 17852                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 17853  003F8A  EC14  F02C         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 17854  003F8E  6FE5               	movwf	??_LORAWAN_Send& (0+255),b
 17855  003F90  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17856  003F92  5DE5               	subwf	??_LORAWAN_Send& (0+255),w,b
 17857  003F94  E201               	bc	l13902
 17858  003F96  0012               	return	
 17859  003F98                     l13902:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;lorawan.c: 213: }
 17863                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 17864  003F98  0102               	movlb	2	; () banked
 17865  003F9A  2906               	incf	(_loRa+6)& (0+255),w,b
 17866  003F9C  E108               	bnz	l13906
 17867  003F9E  2907               	incf	(_loRa+7)& (0+255),w,b
 17868  003FA0  E106               	bnz	l13906
 17869  003FA2  2908               	incf	(_loRa+8)& (0+255),w,b
 17870  003FA4  E104               	bnz	l13906
 17871  003FA6  2909               	incf	(_loRa+9)& (0+255),w,b
 17872  003FA8  E102               	bnz	l13906
 17873                           
 17874                           ; BSR set to: 2
 17875                           ;lorawan.c: 216: {
 17876                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 17877  003FAA  8304               	bsf	(_loRa+4)& (0+255),1,b
 17878                           
 17879                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 17880                           ;	Return value of _LORAWAN_Send is never used
 17881  003FAC  0012               	return	
 17882  003FAE                     l13906:
 17883                           
 17884                           ; BSR set to: 2
 17885                           ;lorawan.c: 220: }
 17886                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 17887  003FAE  5102               	movf	(_loRa+2)& (0+255),w,b
 17888  003FB0  0B0F               	andlw	15
 17889  003FB2  E003               	bz	l13912
 17890                           
 17891                           ; BSR set to: 2
 17892  003FB4  5112               	movf	(_loRa+18)& (0+255),w,b
 17893  003FB6  E101               	bnz	l13912
 17894  003FB8  0012               	return	
 17895  003FBA                     l13912:
 17896                           
 17897                           ; BSR set to: 2
 17898                           ;lorawan.c: 225: }
 17899                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 17900  003FBA  0E01               	movlw	1
 17901  003FBC  ECCC  F026         	call	_SelectChannelForTransmission
 17902  003FC0  6FE6               	movwf	LORAWAN_Send@result& (0+255),b
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;lorawan.c: 228: if (result != OK)
 17906  003FC2  51E6               	movf	LORAWAN_Send@result& (0+255),w,b
 17907  003FC4  E001               	bz	l13920
 17908  003FC6  0012               	return	
 17909  003FC8                     l13920:
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;lorawan.c: 232: else
 17913                           ;lorawan.c: 233: {
 17914                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 17915  003FC8  0E02               	movlw	2
 17916  003FCA  0102               	movlb	2	; () banked
 17917  003FCC  1912               	xorwf	(_loRa+18)& (0+255),w,b
 17918  003FCE  E102               	bnz	l13924
 17919                           
 17920                           ; BSR set to: 2
 17921                           ;lorawan.c: 235: {
 17922                           ;lorawan.c: 236: RADIO_ReceiveStop();
 17923  003FD0  EC15  F030         	call	_RADIO_ReceiveStop	;wreg free
 17924  003FD4                     l13924:
 17925                           
 17926                           ;lorawan.c: 237: }
 17927                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 17928  003FD4  C0E1  F166         	movff	LORAWAN_Send@port,AssemblePacket@port
 17929  003FD8  C0E2  F167         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 17930  003FDC  C0E3  F168         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 17931  003FE0  C0E4  F169         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 17932  003FE4  0101               	movlb	1	; () banked
 17933  003FE6  6B6A               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 17934  003FE8  0100               	movlb	0	; () banked
 17935  003FEA  51E7               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 17936  003FEC  EC60  F00A         	call	_AssemblePacket
 17937                           
 17938                           ; BSR set to: 2
 17939                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 17940  003FF0  0EF0               	movlw	low (_macBuffer+16)
 17941  003FF2  0100               	movlb	0	; () banked
 17942  003FF4  ECB7  F025         	call	PL194	;call to abstracted procedure
 17943  003FF8  ECF0  F00E         	call	_RADIO_Transmit	;wreg free
 17944  003FFC  51AA               	movf	?_RADIO_Transmit& (0+255),w,b
 17945  003FFE  11AB               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 17946  004000  A4D8               	btfss	status,2,c
 17947  004002  0012               	return	
 17948                           
 17949                           ; BSR set to: 0
 17950                           ;lorawan.c: 242: {
 17951                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 17952  004004  0102               	movlb	2	; () banked
 17953  004006  2B06               	incf	(_loRa+6)& (0+255),f,b
 17954  004008  0E00               	movlw	0
 17955  00400A  2307               	addwfc	(_loRa+7)& (0+255),f,b
 17956  00400C  2308               	addwfc	(_loRa+8)& (0+255),f,b
 17957  00400E  2309               	addwfc	(_loRa+9)& (0+255),f,b
 17958                           
 17959                           ;lorawan.c: 245: if (CNF == confirmed)
 17960  004010  0100               	movlb	0	; () banked
 17961  004012  05E7               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 17962  004014  E102               	bnz	l1771
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;lorawan.c: 246: {
 17966                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17967  004016  0102               	movlb	2	; () banked
 17968  004018  8100               	bsf	_loRa& (0+255),0,b
 17969  00401A                     l1771:
 17970                           
 17971                           ;lorawan.c: 248: }
 17972                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 17973  00401A  0102               	movlb	2	; () banked
 17974  00401C  8B00               	bsf	_loRa& (0+255),5,b
 17975                           
 17976                           ; BSR set to: 2
 17977                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 17978  00401E  EFBD  F025         	goto	PL288	;call to abstracted procedure
 17979  004022                     __end_of_LORAWAN_Send:
 17980                           	opt stack 0
 17981                           tosu	equ	0xFFF
 17982                           tosh	equ	0xFFE
 17983                           tosl	equ	0xFFD
 17984                           pclath	equ	0xFFA
 17985                           tblptru	equ	0xFF8
 17986                           tblptrh	equ	0xFF7
 17987                           tblptrl	equ	0xFF6
 17988                           tablat	equ	0xFF5
 17989                           prodh	equ	0xFF4
 17990                           prodl	equ	0xFF3
 17991                           intcon	equ	0xFF2
 17992                           indf0	equ	0xFEF
 17993                           postinc0	equ	0xFEE
 17994                           plusw0	equ	0xFEB
 17995                           fsr0h	equ	0xFEA
 17996                           fsr0l	equ	0xFE9
 17997                           wreg	equ	0xFE8
 17998                           postinc1	equ	0xFE6
 17999                           postdec1	equ	0xFE5
 18000                           plusw1	equ	0xFE3
 18001                           fsr1h	equ	0xFE2
 18002                           fsr1l	equ	0xFE1
 18003                           indf2	equ	0xFDF
 18004                           postinc2	equ	0xFDE
 18005                           postdec2	equ	0xFDD
 18006                           plusw2	equ	0xFDB
 18007                           fsr2h	equ	0xFDA
 18008                           fsr2l	equ	0xFD9
 18009                           status	equ	0xFD8
 18010                           
 18011 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 18012 ;; Defined at:
 18013 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;		None
 18016 ;; Auto vars:     Size  Location     Type
 18017 ;;  result          1   14[BANK0 ] unsigned char 
 18018 ;;  macCommandsL    1   13[BANK0 ] unsigned char 
 18019 ;; Return value:  Size  Location     Type
 18020 ;;                  1    wreg      unsigned char 
 18021 ;; Registers used:
 18022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18023 ;; Tracked objects:
 18024 ;;		On entry : D/2
 18025 ;;		On exit  : F/0
 18026 ;;		Unchanged: 0/0
 18027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 18028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18029 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18031 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18032 ;;Total ram usage:        3 bytes
 18033 ;; Hardware stack levels used:    1
 18034 ;; Hardware stack levels required when called:    8
 18035 ;; This function calls:
 18036 ;;		_CountfOptsLength
 18037 ;; This function is called by:
 18038 ;;		_LORAWAN_Send
 18039 ;;		_AckRetransmissionCallback
 18040 ;; This function uses a non-reentrant model
 18041 ;;
 18042                           
 18043                           	psect	text94
 18044  005828                     __ptext94:
 18045                           	opt stack 0
 18046  005828                     _LORAWAN_GetMaxPayloadSize:
 18047                           	opt stack 20
 18048                           
 18049                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 18050                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 18051                           
 18052                           ;incstack = 0
 18053  005828  EC1D  F024         	call	_CountfOptsLength	;wreg free
 18054  00582C  6F6D               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 18058  00582E  0102               	movlb	2	; () banked
 18059  005830  51A7               	movf	(_loRa+167)& (0+255),w,b
 18060  005832  E106               	bnz	l13602
 18061                           
 18062                           ; BSR set to: 2
 18063                           ;lorawan.c: 1564: {
 18064                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 18065  005834  D811               	call	PL174	;call to abstracted procedure
 18066  005836  EC9D  F006         	call	PL48	;call to abstracted procedure
 18067  00583A  CFF5 F06E          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 18068                           
 18069                           ;lorawan.c: 1566: }
 18070  00583E  D009               	goto	l13604
 18071  005840                     l13602:
 18072                           
 18073                           ; BSR set to: 2
 18074                           ;lorawan.c: 1567: else
 18075                           ;lorawan.c: 1568: {
 18076                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 18077  005840  D80B               	call	PL174	;call to abstracted procedure
 18078  005842  EC9D  F006         	call	PL48	;call to abstracted procedure
 18079  005846  CFF5 F06C          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 18080  00584A  0100               	movlb	0	; () banked
 18081  00584C  516D               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 18082  00584E  5D6C               	subwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 18083  005850  6F6E               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 18084  005852                     l13604:
 18085                           
 18086                           ;lorawan.c: 1570: }
 18087                           ;lorawan.c: 1572: return result;
 18088  005852  0100               	movlb	0	; () banked
 18089  005854  516E               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 18090                           
 18091                           ; BSR set to: 0
 18092  005856  0012               	return		;funcret
 18093  005858                     __end_of_LORAWAN_GetMaxPayloadSize:
 18094                           	opt stack 0
 18095  005858                     PL174:
 18096                           	opt stack 20
 18097  005858  0E6D               	movlw	low _maxPayloadSize
 18098  00585A  25DF               	addwf	(_loRa+223)& (0+255),w,b
 18099  00585C  6EF6               	movwf	tblptrl,c
 18100  00585E  6AF7               	clrf	tblptrh,c
 18101  005860  0EFF               	movlw	high _maxPayloadSize
 18102  005862  0012               	return	
 18103  005864                     __end_ofPL174:
 18104                           	opt stack 0
 18105                           tosu	equ	0xFFF
 18106                           tosh	equ	0xFFE
 18107                           tosl	equ	0xFFD
 18108                           pclath	equ	0xFFA
 18109                           tblptru	equ	0xFF8
 18110                           tblptrh	equ	0xFF7
 18111                           tblptrl	equ	0xFF6
 18112                           tablat	equ	0xFF5
 18113                           prodh	equ	0xFF4
 18114                           prodl	equ	0xFF3
 18115                           intcon	equ	0xFF2
 18116                           indf0	equ	0xFEF
 18117                           postinc0	equ	0xFEE
 18118                           plusw0	equ	0xFEB
 18119                           fsr0h	equ	0xFEA
 18120                           fsr0l	equ	0xFE9
 18121                           wreg	equ	0xFE8
 18122                           postinc1	equ	0xFE6
 18123                           postdec1	equ	0xFE5
 18124                           plusw1	equ	0xFE3
 18125                           fsr1h	equ	0xFE2
 18126                           fsr1l	equ	0xFE1
 18127                           indf2	equ	0xFDF
 18128                           postinc2	equ	0xFDE
 18129                           postdec2	equ	0xFDD
 18130                           plusw2	equ	0xFDB
 18131                           fsr2h	equ	0xFDA
 18132                           fsr2l	equ	0xFD9
 18133                           status	equ	0xFD8
 18134                           
 18135 ;; *************** function _AssemblePacket *****************
 18136 ;; Defined at:
 18137 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18138 ;; Parameters:    Size  Location     Type
 18139 ;;  confirmed       1    wreg     unsigned char 
 18140 ;;  port            1  102[BANK1 ] unsigned char 
 18141 ;;  buffer          2  103[BANK1 ] PTR unsigned char 
 18142 ;;		 -> payload(2), NULL(0), 
 18143 ;;  bufferLength    2  105[BANK1 ] unsigned int 
 18144 ;; Auto vars:     Size  Location     Type
 18145 ;;  confirmed       1  124[BANK0 ] unsigned char 
 18146 ;;  bufferIndex     1  128[BANK0 ] unsigned char 
 18147 ;;  macCmdIdx       1  127[BANK0 ] unsigned char 
 18148 ;;  fCtrl           1  126[BANK0 ] struct .
 18149 ;;  mhdr            1  125[BANK0 ] struct .
 18150 ;; Return value:  Size  Location     Type
 18151 ;;                  1    wreg      void 
 18152 ;; Registers used:
 18153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18154 ;; Tracked objects:
 18155 ;;		On entry : F/0
 18156 ;;		On exit  : F/2
 18157 ;;		Unchanged: 0/0
 18158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 18159 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18160 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18162 ;;      Totals:         0       7       5       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18163 ;;Total ram usage:       12 bytes
 18164 ;; Hardware stack levels used:    1
 18165 ;; Hardware stack levels required when called:   12
 18166 ;; This function calls:
 18167 ;;		_AESCmac
 18168 ;;		_AssembleEncryptionBlock
 18169 ;;		_CountfOptsLength
 18170 ;;		_EncryptFRMPayload
 18171 ;;		_FindSmallestDataRate
 18172 ;;		_IncludeMacCommandsResponse
 18173 ;;		_memcpy
 18174 ;;		_memset
 18175 ;; This function is called by:
 18176 ;;		_LORAWAN_Send
 18177 ;; This function uses a non-reentrant model
 18178 ;;
 18179                           
 18180                           	psect	text95
 18181  0014C0                     __ptext95:
 18182                           	opt stack 0
 18183  0014C0                     _AssemblePacket:
 18184                           	opt stack 16
 18185                           
 18186                           ; BSR set to: 0
 18187                           ;incstack = 0
 18188                           ;AssemblePacket@confirmed stored from wreg
 18189  0014C0  6FDC               	movwf	AssemblePacket@confirmed& (0+255),b
 18190                           
 18191                           ;lorawan.c: 1674: Mhdr_t mhdr;
 18192                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 18193  0014C2  0E10               	movlw	16
 18194  0014C4  0100               	movlb	0	; () banked
 18195  0014C6  6FE0               	movwf	AssemblePacket@bufferIndex& (0+255),b
 18196                           
 18197                           ; BSR set to: 0
 18198                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 18199                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 18200  0014C8  6BDF               	clrf	AssemblePacket@macCmdIdx& (0+255),b
 18201                           
 18202                           ; BSR set to: 0
 18203                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 18204  0014CA  0EDD               	movlw	low AssemblePacket@mhdr
 18205  0014CC  6F64               	movwf	memset@p1& (0+255),b
 18206  0014CE  6B65               	clrf	(memset@p1+1)& (0+255),b
 18207  0014D0  6B67               	clrf	(memset@c+1)& (0+255),b
 18208  0014D2  6B66               	clrf	memset@c& (0+255),b
 18209  0014D4  6B69               	clrf	(memset@n+1)& (0+255),b
 18210  0014D6  0E01               	movlw	1
 18211  0014D8  6F68               	movwf	memset@n& (0+255),b
 18212  0014DA  EC18  F02E         	call	_memset	;wreg free
 18213                           
 18214                           ; BSR set to: 0
 18215                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 18216  0014DE  EC93  F017         	call	PL190	;call to abstracted procedure
 18217  0014E2  EC18  F02E         	call	_memset	;wreg free
 18218                           
 18219                           ; BSR set to: 0
 18220                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 18221  0014E6  EC02  F022         	call	PL214	;call to abstracted procedure
 18222  0014EA  ECF5  F021         	call	PL142	;call to abstracted procedure
 18223  0014EE  EC18  F02E         	call	_memset	;wreg free
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;lorawan.c: 1683: if (confirmed == 1)
 18227  0014F2  05DC               	decf	AssemblePacket@confirmed& (0+255),w,b
 18228  0014F4  E107               	bnz	l13624
 18229                           
 18230                           ; BSR set to: 0
 18231                           ;lorawan.c: 1684: {
 18232                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 18233  0014F6  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 18234  0014F8  0B1F               	andlw	-225
 18235  0014FA  0980               	iorlw	128
 18236  0014FC  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 18237                           
 18238                           ; BSR set to: 0
 18239                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 18240  0014FE  0102               	movlb	2	; () banked
 18241  001500  8100               	bsf	_loRa& (0+255),0,b
 18242                           
 18243                           ;lorawan.c: 1687: }
 18244  001502  D004               	goto	l2256
 18245  001504                     l13624:
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;lorawan.c: 1688: else
 18249                           ;lorawan.c: 1689: {
 18250                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 18251  001504  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 18252  001506  0B1F               	andlw	-225
 18253  001508  0940               	iorlw	64
 18254  00150A  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 18255  00150C                     l2256:
 18256                           
 18257                           ;lorawan.c: 1691: }
 18258                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 18259  00150C  0EFC               	movlw	-4
 18260  00150E  0100               	movlb	0	; () banked
 18261  001510  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18262                           
 18263                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 18264  001512  0EE3               	movlw	-29
 18265  001514  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18266                           
 18267                           ; BSR set to: 0
 18268                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 18269  001516  0EE0               	movlw	low _macBuffer
 18270  001518  D918               	call	PL250	;call to abstracted procedure
 18271  00151A  C0DD  FFDF         	movff	AssemblePacket@mhdr,indf2
 18272                           
 18273                           ; BSR set to: 0
 18274  00151E  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18275                           
 18276                           ; BSR set to: 0
 18277                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 18278  001520  0EE0               	movlw	low _macBuffer
 18279  001522  D8F4               	call	PL178	;call to abstracted procedure
 18280  001524  EC07  F022         	call	PL266	;call to abstracted procedure
 18281  001528  ECF0  F021         	call	PL130	;call to abstracted procedure
 18282  00152C  ECA0  F028         	call	_memcpy	;wreg free
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 18286  001530  0E04               	movlw	4
 18287  001532  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18288                           
 18289                           ; BSR set to: 0
 18290                           ;lorawan.c: 1699: fCtrl.value = 0;
 18291  001534  6BDE               	clrf	AssemblePacket@fCtrl& (0+255),b
 18292                           
 18293                           ; BSR set to: 0
 18294                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 18295  001536  0102               	movlb	2	; () banked
 18296  001538  AD02               	btfss	(_loRa+2)& (0+255),6,b
 18297  00153A  D030               	goto	l2257
 18298                           
 18299                           ; BSR set to: 2
 18300                           ;lorawan.c: 1702: {
 18301                           ;lorawan.c: 1703: fCtrl.adr = 1;
 18302  00153C  0100               	movlb	0	; () banked
 18303  00153E  8FDE               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 18304                           
 18305                           ; BSR set to: 0
 18306                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 18307  001540  0102               	movlb	2	; () banked
 18308  001542  51DF               	movf	(_loRa+223)& (0+255),w,b
 18309  001544  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18310  001546  E229               	bc	l2258
 18311                           
 18312                           ; BSR set to: 2
 18313                           ;lorawan.c: 1705: {
 18314                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 18315  001548  0100               	movlb	0	; () banked
 18316  00154A  8DDE               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 18317                           
 18318                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 18319  00154C  0102               	movlb	2	; () banked
 18320  00154E  8900               	bsf	_loRa& (0+255),4,b
 18321                           
 18322                           ; BSR set to: 2
 18323                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 18324  001550  4BD0               	infsnz	(_loRa+208)& (0+255),f,b
 18325  001552  2BD1               	incf	(_loRa+209)& (0+255),f,b
 18326                           
 18327                           ; BSR set to: 2
 18328                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 18329  001554  51A2               	movf	(_loRa+162)& (0+255),w,b
 18330  001556  19D0               	xorwf	(_loRa+208)& (0+255),w,b
 18331  001558  11D1               	iorwf	(_loRa+209)& (0+255),w,b
 18332  00155A  E102               	bnz	l13650
 18333                           
 18334                           ; BSR set to: 2
 18335                           ;lorawan.c: 1711: {
 18336                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 18337  00155C  6BEE               	clrf	(_loRa+238)& (0+255),b
 18338  00155E  D01A               	goto	L9
 18339  001560                     l13650:
 18340                           
 18341                           ; BSR set to: 2
 18342                           ;lorawan.c: 1716: else
 18343                           ;lorawan.c: 1717: {
 18344                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 18345  001560  51A2               	movf	(_loRa+162)& (0+255),w,b
 18346  001562  0100               	movlb	0	; () banked
 18347  001564  6FDA               	movwf	??_AssemblePacket& (0+255),b
 18348  001566  6BDB               	clrf	(??_AssemblePacket+1)& (0+255),b
 18349  001568  0102               	movlb	2	; () banked
 18350  00156A  51D0               	movf	(_loRa+208)& (0+255),w,b
 18351  00156C  0100               	movlb	0	; () banked
 18352  00156E  5DDA               	subwf	??_AssemblePacket& (0+255),w,b
 18353  001570  0102               	movlb	2	; () banked
 18354  001572  51D1               	movf	(_loRa+209)& (0+255),w,b
 18355  001574  0100               	movlb	0	; () banked
 18356  001576  59DB               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 18357  001578  E20E               	bc	l2261
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;lorawan.c: 1719: {
 18361                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 18362  00157A  0102               	movlb	2	; () banked
 18363  00157C  2BEE               	incf	(_loRa+238)& (0+255),f,b
 18364                           
 18365                           ; BSR set to: 2
 18366                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 18367  00157E  51EE               	movf	(_loRa+238)& (0+255),w,b
 18368  001580  5DA3               	subwf	(_loRa+163)& (0+255),w,b
 18369  001582  E20C               	bc	l2257
 18370                           
 18371                           ; BSR set to: 2
 18372                           ;lorawan.c: 1725: {
 18373                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 18374  001584  6BEE               	clrf	(_loRa+238)& (0+255),b
 18375                           
 18376                           ; BSR set to: 2
 18377                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 18378  001586  ECDA  F023         	call	_FindSmallestDataRate	;wreg free
 18379  00158A  0900               	iorlw	0
 18380  00158C  E107               	bnz	l2257
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;lorawan.c: 1729: {
 18384                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 18385  00158E  0102               	movlb	2	; () banked
 18386  001590  6BD0               	clrf	(_loRa+208)& (0+255),b
 18387  001592  6BD1               	clrf	(_loRa+209)& (0+255),b
 18388  001594                     L9:
 18389                           
 18390                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 18391  001594  0100               	movlb	0	; () banked
 18392  001596                     l2261:
 18393                           
 18394                           ; BSR set to: 0
 18395                           ;lorawan.c: 1737: else
 18396                           ;lorawan.c: 1738: {
 18397                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 18398  001596  9DDE               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 18399                           
 18400                           ;lorawan.c: 1740: loRa.lorawanMacStatus.adrAckRequest = 0;
 18401  001598  0102               	movlb	2	; () banked
 18402  00159A                     l2258:
 18403                           
 18404                           ; BSR set to: 2
 18405                           ;lorawan.c: 1744: else
 18406                           ;lorawan.c: 1745: {
 18407                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 18408  00159A  9900               	bcf	_loRa& (0+255),4,b
 18409  00159C                     l2257:
 18410                           
 18411                           ;lorawan.c: 1747: }
 18412                           ;lorawan.c: 1748: }
 18413                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 18414  00159C  0102               	movlb	2	; () banked
 18415  00159E  A300               	btfss	_loRa& (0+255),1,b
 18416  0015A0  D004               	goto	l2266
 18417                           
 18418                           ; BSR set to: 2
 18419                           ;lorawan.c: 1751: {
 18420                           ;lorawan.c: 1752: fCtrl.ack = 1;
 18421  0015A2  0100               	movlb	0	; () banked
 18422  0015A4  8BDE               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 18423                           
 18424                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 18425  0015A6  0102               	movlb	2	; () banked
 18426  0015A8  9300               	bcf	_loRa& (0+255),1,b
 18427  0015AA                     l2266:
 18428                           
 18429                           ; BSR set to: 2
 18430                           ;lorawan.c: 1754: }
 18431                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 18432  0015AA  0100               	movlb	0	; () banked
 18433  0015AC  99DE               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 18434                           
 18435                           ; BSR set to: 0
 18436                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 18437  0015AE  0102               	movlb	2	; () banked
 18438  0015B0  51A7               	movf	(_loRa+167)& (0+255),w,b
 18439  0015B2  E004               	bz	l13668
 18440                           
 18441                           ; BSR set to: 2
 18442  0015B4  0101               	movlb	1	; () banked
 18443  0015B6  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18444  0015B8  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18445  0015BA  E104               	bnz	l13670
 18446  0015BC                     l13668:
 18447                           
 18448                           ;lorawan.c: 1759: {
 18449                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 18450  0015BC  0EF0               	movlw	-16
 18451  0015BE  0100               	movlb	0	; () banked
 18452  0015C0  17DE               	andwf	AssemblePacket@fCtrl& (0+255),f,b
 18453                           
 18454                           ;lorawan.c: 1761: }
 18455  0015C2  D007               	goto	l13672
 18456  0015C4                     l13670:
 18457                           
 18458                           ; BSR set to: 1
 18459                           ;lorawan.c: 1763: else
 18460                           ;lorawan.c: 1764: {
 18461                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 18462  0015C4  EC1D  F024         	call	_CountfOptsLength	;wreg free
 18463  0015C8  6FDA               	movwf	??_AssemblePacket& (0+255),b
 18464  0015CA  19DE               	xorwf	AssemblePacket@fCtrl& (0+255),w,b
 18465  0015CC  0BF0               	andlw	-16
 18466  0015CE  19DA               	xorwf	??_AssemblePacket& (0+255),w,b
 18467  0015D0  6FDE               	movwf	AssemblePacket@fCtrl& (0+255),b
 18468  0015D2                     l13672:
 18469                           
 18470                           ; BSR set to: 0
 18471                           ;lorawan.c: 1766: }
 18472                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 18473  0015D2  0EE0               	movlw	low _macBuffer
 18474  0015D4  D8BA               	call	PL250	;call to abstracted procedure
 18475  0015D6  C0DE  FFDF         	movff	AssemblePacket@fCtrl,indf2
 18476                           
 18477                           ; BSR set to: 0
 18478  0015DA  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 18482  0015DC  0EE0               	movlw	low _macBuffer
 18483  0015DE  D896               	call	PL178	;call to abstracted procedure
 18484  0015E0  0E06               	movlw	low (_loRa+6)
 18485  0015E2  6F66               	movwf	memcpy@s1& (0+255),b
 18486  0015E4  0E02               	movlw	high (_loRa+6)
 18487  0015E6  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 18488  0015E8  6B69               	clrf	(memcpy@n+1)& (0+255),b
 18489  0015EA  0E02               	movlw	2
 18490  0015EC  6F68               	movwf	memcpy@n& (0+255),b
 18491  0015EE  ECA0  F028         	call	_memcpy	;wreg free
 18492                           
 18493                           ; BSR set to: 0
 18494                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 18495  0015F2  0E02               	movlw	2
 18496  0015F4  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18497                           
 18498                           ; BSR set to: 0
 18499                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 18500  0015F6  0102               	movlb	2	; () banked
 18501  0015F8  51A7               	movf	(_loRa+167)& (0+255),w,b
 18502  0015FA  E00F               	bz	l13686
 18503                           
 18504                           ; BSR set to: 2
 18505  0015FC  0101               	movlb	1	; () banked
 18506  0015FE  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18507  001600  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18508  001602  E00B               	bz	l13686
 18509                           
 18510                           ; BSR set to: 1
 18511                           ;lorawan.c: 1774: {
 18512                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 18513  001604  0EE0               	movlw	low _macBuffer
 18514  001606  0100               	movlb	0	; () banked
 18515  001608  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18516  00160A  0E04               	movlw	high _macBuffer
 18517  00160C  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18518  00160E  0EE0               	movlw	low AssemblePacket@bufferIndex
 18519  001610  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18520  001612  0E01               	movlw	1
 18521  001614  6F67               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18522  001616  ECE4  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18523  00161A                     l13686:
 18524                           
 18525                           ;lorawan.c: 1776: }
 18526                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 18527  00161A  0EE0               	movlw	low _macBuffer
 18528  00161C  0100               	movlb	0	; () banked
 18529  00161E  D895               	call	PL250	;call to abstracted procedure
 18530  001620  C166  FFDF         	movff	AssemblePacket@port,indf2
 18531                           
 18532                           ; BSR set to: 0
 18533  001624  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18534                           
 18535                           ; BSR set to: 0
 18536                           ;lorawan.c: 1780: if (bufferLength != 0)
 18537  001626  0101               	movlb	1	; () banked
 18538  001628  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18539  00162A  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18540  00162C  E01C               	bz	l13698
 18541                           
 18542                           ; BSR set to: 1
 18543                           ;lorawan.c: 1781: {
 18544                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 18545  00162E  0EE0               	movlw	low _macBuffer
 18546  001630  0100               	movlb	0	; () banked
 18547  001632  D86C               	call	PL178	;call to abstracted procedure
 18548  001634  C167  F066         	movff	AssemblePacket@buffer,memcpy@s1
 18549  001638  C168  F067         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 18550  00163C  C169  F068         	movff	AssemblePacket@bufferLength,memcpy@n
 18551  001640  C16A  F069         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 18552  001644  ECA0  F028         	call	_memcpy	;wreg free
 18553                           
 18554                           ; BSR set to: 0
 18555                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 18556  001648  C167  F0A4         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 18557  00164C  C168  F0A5         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 18558  001650  C169  F0A6         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 18559  001654  D861               	call	PL218	;call to abstracted procedure
 18560  001656  D883               	call	PL382	;call to abstracted procedure
 18561  001658  D869               	call	PL222	;call to abstracted procedure
 18562  00165A  EC8F  F016         	call	_EncryptFRMPayload	;wreg free
 18563                           
 18564                           ; BSR set to: 0
 18565                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 18566  00165E  0101               	movlb	1	; () banked
 18567  001660  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18568  001662  0100               	movlb	0	; () banked
 18569  001664  D019               	goto	L8
 18570  001666                     l13698:
 18571                           
 18572                           ; BSR set to: 1
 18573                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 18574  001666  0102               	movlb	2	; () banked
 18575  001668  51A7               	movf	(_loRa+167)& (0+255),w,b
 18576  00166A  E017               	bz	l13704
 18577                           
 18578                           ; BSR set to: 2
 18579                           ;lorawan.c: 1787: {
 18580                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 18581  00166C  0EEF               	movlw	low _radioBuffer
 18582  00166E  0100               	movlb	0	; () banked
 18583  001670  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18584  001672  0E05               	movlw	high _radioBuffer
 18585  001674  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18586  001676  0EDF               	movlw	low AssemblePacket@macCmdIdx
 18587  001678  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18588  00167A  6B67               	clrf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18589  00167C  ECE4  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18590                           
 18591                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 18592  001680  0EEF               	movlw	low _radioBuffer
 18593  001682  6FA4               	movwf	EncryptFRMPayload@buffer& (0+255),b
 18594  001684  0E05               	movlw	high _radioBuffer
 18595  001686  6FA5               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 18596  001688  C0DF  F0A6         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 18597  00168C  D845               	call	PL218	;call to abstracted procedure
 18598  00168E  D863               	call	PL380	;call to abstracted procedure
 18599  001690  D84D               	call	PL222	;call to abstracted procedure
 18600  001692  EC8F  F016         	call	_EncryptFRMPayload	;wreg free
 18601                           
 18602                           ; BSR set to: 0
 18603                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 18604  001696  51DF               	movf	AssemblePacket@macCmdIdx& (0+255),w,b
 18605  001698                     L8:
 18606  001698  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18607  00169A                     l13704:
 18608                           
 18609                           ;lorawan.c: 1793: }
 18610                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 18611  00169A  C206  F06E         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 18612  00169E  C207  F06F         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 18613  0016A2  C208  F070         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 18614  0016A6  C209  F071         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 18615  0016AA  0100               	movlb	0	; () banked
 18616  0016AC  51E0               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 18617  0016AE  0FF0               	addlw	240
 18618  0016B0  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 18619  0016B2  0E49               	movlw	73
 18620  0016B4  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 18621  0016B6  0E00               	movlw	0
 18622  0016B8  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 18623  0016BA  ECC0  F021         	call	_AssembleEncryptionBlock
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 18627  0016BE  0EE0               	movlw	low _macBuffer
 18628  0016C0  6F64               	movwf	memcpy@d1& (0+255),b
 18629  0016C2  0E04               	movlw	high _macBuffer
 18630  0016C4  EC99  F003         	call	PL92	;call to abstracted procedure
 18631  0016C8  0E10               	movlw	16
 18632  0016CA  6F68               	movwf	memcpy@n& (0+255),b
 18633  0016CC  ECA0  F028         	call	_memcpy	;wreg free
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 18637  0016D0  D836               	call	PL234	;call to abstracted procedure
 18638  0016D2  6FCE               	movwf	AESCmac@output& (0+255),b
 18639  0016D4  0E01               	movlw	high _aesBuffer
 18640  0016D6  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 18641  0016D8  0EE0               	movlw	low _macBuffer
 18642  0016DA  6FD0               	movwf	AESCmac@input& (0+255),b
 18643  0016DC  0E04               	movlw	high _macBuffer
 18644  0016DE  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 18645  0016E0  C0E0  F0D2         	movff	AssemblePacket@bufferIndex,AESCmac@size
 18646  0016E4  ECF4  F008         	call	_AESCmac	;wreg free
 18647                           
 18648                           ; BSR set to: 0
 18649                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 18650  0016E8  0EE0               	movlw	low _macBuffer
 18651  0016EA  D810               	call	PL178	;call to abstracted procedure
 18652  0016EC  EC44  F029         	call	PL160	;call to abstracted procedure
 18653  0016F0  ECF0  F021         	call	PL130	;call to abstracted procedure
 18654  0016F4  ECA0  F028         	call	_memcpy	;wreg free
 18655                           
 18656                           ; BSR set to: 0
 18657                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 18658  0016F8  0E04               	movlw	4
 18659  0016FA  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18660                           
 18661                           ; BSR set to: 0
 18662                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 18663  0016FC  0EF0               	movlw	240
 18664  0016FE  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18665  001700  0102               	movlb	2	; () banked
 18666  001702  6FD4               	movwf	(_loRa+212)& (0+255),b
 18667  001704  6BD5               	clrf	(_loRa+213)& (0+255),b
 18668  001706  0EFF               	movlw	255
 18669  001708  23D5               	addwfc	(_loRa+213)& (0+255),f,b
 18670                           
 18671                           ; BSR set to: 2
 18672  00170A  0CFF               	retlw	255	;funcret
 18673  00170C                     __end_of_AssemblePacket:
 18674                           	opt stack 0
 18675  00170C                     PL178:
 18676                           	opt stack 16
 18677  00170C  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18678  00170E  6F64               	movwf	memcpy@d1& (0+255),b
 18679  001710  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 18680  001712  0E04               	movlw	high _macBuffer
 18681  001714  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 18682  001716  0012               	return	
 18683  001718                     __end_ofPL178:
 18684                           	opt stack 0
 18685  001718                     PL218:
 18686                           	opt stack 16
 18687  001718  6BA7               	clrf	EncryptFRMPayload@dir& (0+255),b
 18688  00171A  C206  F0A8         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 18689  00171E  C207  F0A9         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 18690  001722  C208  F0AA         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 18691  001726  C209  F0AB         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 18692  00172A  0012               	return	
 18693  00172C                     __end_ofPL218:
 18694                           	opt stack 0
 18695  00172C                     PL222:
 18696                           	opt stack 16
 18697  00172C  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 18698  00172E  C0E0  F0AE         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 18699  001732  0EE0               	movlw	low _macBuffer
 18700  001734  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 18701  001736  0E04               	movlw	high _macBuffer
 18702  001738  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 18703  00173A  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 18704  00173C  0012               	return	
 18705  00173E                     __end_ofPL222:
 18706                           	opt stack 0
 18707  00173E                     PL234:
 18708                           	opt stack 12
 18709  00173E  0E22               	movlw	low (_loRa+34)
 18710  001740  6FCC               	movwf	AESCmac@key& (0+255),b
 18711  001742  0E02               	movlw	high (_loRa+34)
 18712  001744  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 18713  001746  0EAB               	movlw	low _aesBuffer
 18714  001748  0012               	return	
 18715  00174A                     __end_ofPL234:
 18716                           	opt stack 0
 18717  00174A                     PL250:
 18718                           	opt stack 16
 18719  00174A  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18720  00174C  6ED9               	movwf	fsr2l,c
 18721  00174E  6ADA               	clrf	fsr2h,c
 18722  001750  0E04               	movlw	high _macBuffer
 18723  001752  22DA               	addwfc	fsr2h,f,c
 18724  001754  0012               	return	
 18725  001756                     __end_ofPL250:
 18726                           	opt stack 0
 18727  001756                     PL380:
 18728                           	opt stack 12
 18729  001756  0E22               	movlw	low (_loRa+34)
 18730  001758  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 18731  00175A  0E02               	movlw	high (_loRa+34)
 18732  00175C  0012               	return	
 18733  00175E                     __end_ofPL380:
 18734                           	opt stack 0
 18735  00175E                     PL382:
 18736                           	opt stack 12
 18737  00175E  0E32               	movlw	low (_loRa+50)
 18738  001760  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 18739  001762  0E02               	movlw	high (_loRa+50)
 18740  001764  0012               	return	
 18741  001766                     __end_ofPL382:
 18742                           	opt stack 0
 18743                           tosu	equ	0xFFF
 18744                           tosh	equ	0xFFE
 18745                           tosl	equ	0xFFD
 18746                           pclath	equ	0xFFA
 18747                           tblptru	equ	0xFF8
 18748                           tblptrh	equ	0xFF7
 18749                           tblptrl	equ	0xFF6
 18750                           tablat	equ	0xFF5
 18751                           prodh	equ	0xFF4
 18752                           prodl	equ	0xFF3
 18753                           intcon	equ	0xFF2
 18754                           indf0	equ	0xFEF
 18755                           postinc0	equ	0xFEE
 18756                           plusw0	equ	0xFEB
 18757                           fsr0h	equ	0xFEA
 18758                           fsr0l	equ	0xFE9
 18759                           wreg	equ	0xFE8
 18760                           postinc1	equ	0xFE6
 18761                           postdec1	equ	0xFE5
 18762                           plusw1	equ	0xFE3
 18763                           fsr1h	equ	0xFE2
 18764                           fsr1l	equ	0xFE1
 18765                           indf2	equ	0xFDF
 18766                           postinc2	equ	0xFDE
 18767                           postdec2	equ	0xFDD
 18768                           plusw2	equ	0xFDB
 18769                           fsr2h	equ	0xFDA
 18770                           fsr2l	equ	0xFD9
 18771                           status	equ	0xFD8
 18772                           
 18773 ;; *************** function _IncludeMacCommandsResponse *****************
 18774 ;; Defined at:
 18775 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18776 ;; Parameters:    Size  Location     Type
 18777 ;;  macBuffer       2    4[BANK0 ] PTR unsigned char 
 18778 ;;		 -> macBuffer(271), radioBuffer(271), 
 18779 ;;  pBufferIndex    1    6[BANK0 ] PTR unsigned char 
 18780 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 18781 ;;  bIncludeInFo    1    7[BANK0 ] unsigned char 
 18782 ;; Auto vars:     Size  Location     Type
 18783 ;;  bufferIndex     1   15[BANK0 ] unsigned char 
 18784 ;;  i               1   14[BANK0 ] unsigned char 
 18785 ;; Return value:  Size  Location     Type
 18786 ;;                  1    wreg      void 
 18787 ;; Registers used:
 18788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18789 ;; Tracked objects:
 18790 ;;		On entry : F/0
 18791 ;;		On exit  : F/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 18794 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18796 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18797 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 18798 ;;Total ram usage:       12 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    8
 18801 ;; This function calls:
 18802 ;;		_RADIO_GetPacketSnr
 18803 ;; This function is called by:
 18804 ;;		_AssemblePacket
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808                           	psect	text96
 18809  001FC8                     __ptext96:
 18810                           	opt stack 0
 18811  001FC8                     _IncludeMacCommandsResponse:
 18812                           	opt stack 0
 18813                           
 18814                           ; BSR set to: 0
 18815                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 18816                           
 18817                           ; BSR set to: 0
 18818                           
 18819                           ; BSR set to: 2
 18820                           ;incstack = 0
 18821  001FC8  D8E8               	call	PL440	;call to abstracted procedure
 18822  001FCA  6F6F               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 18826  001FCC  6B6E               	clrf	IncludeMacCommandsResponse@i& (0+255),b
 18827  001FCE  D0CA               	goto	l13296
 18828  001FD0                     l13200:
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;lorawan.c: 1851: {
 18832                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 18833  001FD0  5167               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 18834  001FD2  E101 D0B4          	bz	l13292
 18835                           
 18836                           ; BSR set to: 0
 18837  001FD6  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18838  001FD8  D8D8               	call	PL16	;call to abstracted procedure
 18839  001FDA  28DE               	incf	postinc2,w,c
 18840  001FDC  E101 D0AF          	bz	l13292
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;lorawan.c: 1853: {
 18844                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 18845  001FE0  0EFE               	movlw	254
 18846  001FE2  6F68               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 18847  001FE4  6969               	setf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 18848  001FE6  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18849  001FE8  D8D0               	call	PL16	;call to abstracted procedure
 18850  001FEA  50DF               	movf	indf2,w,c
 18851  001FEC  6F6A               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 18852  001FEE  6B6B               	clrf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 18853  001FF0  5168               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 18854  001FF2  276A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),f,b
 18855  001FF4  5169               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 18856  001FF6  236B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),f,b
 18857  001FF8  0E94               	movlw	low _macEndDevCmdReplyLen
 18858  001FFA  256A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 18859  001FFC  6EF6               	movwf	tblptrl,c
 18860  001FFE  0EFF               	movlw	high _macEndDevCmdReplyLen
 18861  002000  216B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 18862  002002  6EF7               	movwf	tblptrh,c
 18863  002004  EC46  F024         	call	PL54	;call to abstracted procedure
 18864  002008  C06F  F06C         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+4
 18865  00200C  6B6D               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 18866  00200E  276C               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18867  002010  0E00               	movlw	0
 18868  002012  236D               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18869  002014  D8C2               	call	PL440	;call to abstracted procedure
 18870  002016  5F6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18871  002018  0E00               	movlw	0
 18872  00201A  5B6D               	subwfb	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18873  00201C  BF6D               	btfsc	(??_IncludeMacCommandsResponse+5)& (0+255),7,b
 18874  00201E  D08F               	goto	l13292
 18875  002020  516D               	movf	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 18876  002022  E105               	bnz	u14530
 18877  002024  0E10               	movlw	16
 18878  002026  5D6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 18879  002028  E301 D0A2          	bc	l13298
 18880  00202C  D088               	goto	l13292
 18881  00202E                     u14530:
 18882  00202E  D0A0               	goto	l13298
 18883  002030                     l13208:
 18884                           
 18885                           ; BSR set to: 0
 18886                           ;lorawan.c: 1862: {
 18887                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 18888  002030  D8A5               	call	PL14	;call to abstracted procedure
 18889  002032  0E03               	movlw	3
 18890  002034  6EDF               	movwf	indf2,c
 18891                           
 18892                           ; BSR set to: 0
 18893  002036  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 18897  002038  D8A1               	call	PL14	;call to abstracted procedure
 18898  00203A  6ADF               	clrf	indf2,c
 18899                           
 18900                           ; BSR set to: 0
 18901                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 18902  00203C  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18903  00203E  ECEB  F015         	call	PL2	;call to abstracted procedure
 18904  002042  A0DF               	btfss	indf2,0,c
 18905  002044  D004               	goto	l13218
 18906                           
 18907                           ; BSR set to: 2
 18908                           ;lorawan.c: 1866: {
 18909                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 18910  002046  0100               	movlb	0	; () banked
 18911  002048  D899               	call	PL14	;call to abstracted procedure
 18912  00204A  0E00               	movlw	0
 18913  00204C  80DB               	bsf	plusw2,0,c
 18914  00204E                     l13218:
 18915                           
 18916                           ;lorawan.c: 1868: }
 18917                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 18918  00204E  0100               	movlb	0	; () banked
 18919  002050  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18920  002052  ECEB  F015         	call	PL2	;call to abstracted procedure
 18921  002056  A2DF               	btfss	indf2,1,c
 18922  002058  D003               	goto	l13222
 18923                           
 18924                           ; BSR set to: 2
 18925                           ;lorawan.c: 1871: {
 18926                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 18927  00205A  D890               	call	PL14	;call to abstracted procedure
 18928  00205C  0E00               	movlw	0
 18929  00205E  82DB               	bsf	plusw2,1,c
 18930  002060                     l13222:
 18931                           
 18932                           ;lorawan.c: 1873: }
 18933                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 18934  002060  0100               	movlb	0	; () banked
 18935  002062  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18936  002064  ECEB  F015         	call	PL2	;call to abstracted procedure
 18937  002068  A4DF               	btfss	indf2,2,c
 18938  00206A  D004               	goto	l13226
 18939  00206C                     l13224:
 18940                           
 18941                           ; BSR set to: 2
 18942                           ;lorawan.c: 1876: {
 18943                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 18944  00206C  0100               	movlb	0	; () banked
 18945  00206E  D886               	call	PL14	;call to abstracted procedure
 18946  002070  0E00               	movlw	0
 18947  002072  84DB               	bsf	plusw2,2,c
 18948  002074                     l13226:
 18949                           
 18950                           ;lorawan.c: 1878: }
 18951                           ;lorawan.c: 1879: bufferIndex ++;
 18952  002074  0100               	movlb	0	; () banked
 18953  002076  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18954                           
 18955                           ;lorawan.c: 1880: }
 18956                           ;lorawan.c: 1881: break;
 18957  002078  D074               	goto	l13294
 18958  00207A                     l13228:
 18959                           
 18960                           ; BSR set to: 0
 18961                           ;lorawan.c: 1884: {
 18962                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 18963  00207A  D880               	call	PL14	;call to abstracted procedure
 18964  00207C  0E05               	movlw	5
 18965  00207E  6EDF               	movwf	indf2,c
 18966                           
 18967                           ; BSR set to: 0
 18968  002080  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18969                           
 18970                           ; BSR set to: 0
 18971                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 18972  002082  D87C               	call	PL14	;call to abstracted procedure
 18973  002084  6ADF               	clrf	indf2,c
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 18977  002086  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18978  002088  ECEB  F015         	call	PL2	;call to abstracted procedure
 18979  00208C  A6DF               	btfss	indf2,3,c
 18980  00208E  D004               	goto	l13238
 18981                           
 18982                           ; BSR set to: 2
 18983                           ;lorawan.c: 1888: {
 18984                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 18985  002090  0100               	movlb	0	; () banked
 18986  002092  D874               	call	PL14	;call to abstracted procedure
 18987  002094  0E00               	movlw	0
 18988  002096  80DB               	bsf	plusw2,0,c
 18989  002098                     l13238:
 18990                           
 18991                           ;lorawan.c: 1890: }
 18992                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 18993  002098  0100               	movlb	0	; () banked
 18994  00209A  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18995  00209C  ECEB  F015         	call	PL2	;call to abstracted procedure
 18996  0020A0  A8DF               	btfss	indf2,4,c
 18997  0020A2  D003               	goto	l13242
 18998                           
 18999                           ; BSR set to: 2
 19000                           ;lorawan.c: 1893: {
 19001                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 19002  0020A4  D86B               	call	PL14	;call to abstracted procedure
 19003  0020A6  0E00               	movlw	0
 19004  0020A8  82DB               	bsf	plusw2,1,c
 19005  0020AA                     l13242:
 19006                           
 19007                           ;lorawan.c: 1895: }
 19008                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 19009  0020AA  0100               	movlb	0	; () banked
 19010  0020AC  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19011  0020AE  ECEB  F015         	call	PL2	;call to abstracted procedure
 19012  0020B2  AADF               	btfss	indf2,5,c
 19013  0020B4  D7DF               	goto	l13226
 19014  0020B6  D7DA               	goto	l13224
 19015  0020B8                     l13248:
 19016                           
 19017                           ; BSR set to: 0
 19018                           ;lorawan.c: 1907: {
 19019                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 19020  0020B8  D861               	call	PL14	;call to abstracted procedure
 19021  0020BA  0E06               	movlw	6
 19022  0020BC  6EDF               	movwf	indf2,c
 19023                           
 19024                           ; BSR set to: 0
 19025  0020BE  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 19026                           
 19027                           ; BSR set to: 0
 19028                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 19029  0020C0  D85D               	call	PL14	;call to abstracted procedure
 19030  0020C2  C2E0  FFDF         	movff	_loRa+224,indf2
 19031  0020C6  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 19035  0020C8  EC2A  F031         	call	_RADIO_GetPacketSnr	;wreg free
 19036  0020CC  0A80               	xorlw	128
 19037  0020CE  0FA0               	addlw	160
 19038  0020D0  E305               	bnc	l13258
 19039                           
 19040                           ; BSR set to: 1
 19041  0020D2  EC2A  F031         	call	_RADIO_GetPacketSnr	;wreg free
 19042  0020D6  0A80               	xorlw	128
 19043  0020D8  0F60               	addlw	-160
 19044  0020DA  E304               	bnc	l13262
 19045  0020DC                     l13258:
 19046                           
 19047                           ; BSR set to: 1
 19048                           ;lorawan.c: 1911: {
 19049                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 19050  0020DC  0100               	movlb	0	; () banked
 19051  0020DE  D84E               	call	PL14	;call to abstracted procedure
 19052  0020E0  0E20               	movlw	32
 19053  0020E2  D005               	goto	L10
 19054  0020E4                     l13262:
 19055                           
 19056                           ; BSR set to: 1
 19057                           ;lorawan.c: 1914: else
 19058                           ;lorawan.c: 1915: {
 19059                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 19060  0020E4  0100               	movlb	0	; () banked
 19061  0020E6  D84A               	call	PL14	;call to abstracted procedure
 19062  0020E8  EC2A  F031         	call	_RADIO_GetPacketSnr	;wreg free
 19063  0020EC  0B3F               	andlw	63
 19064  0020EE                     L10:
 19065  0020EE  6EDF               	movwf	indf2,c
 19066  0020F0  D7C1               	goto	l13226
 19067  0020F2                     l13266:
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;lorawan.c: 1922: {
 19071                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 19072  0020F2  D844               	call	PL14	;call to abstracted procedure
 19073  0020F4  0E07               	movlw	7
 19074  0020F6  6EDF               	movwf	indf2,c
 19075                           
 19076                           ; BSR set to: 0
 19077  0020F8  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 19081  0020FA  D840               	call	PL14	;call to abstracted procedure
 19082  0020FC  6ADF               	clrf	indf2,c
 19083                           
 19084                           ; BSR set to: 0
 19085                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 19086  0020FE  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19087  002100  ECEB  F015         	call	PL2	;call to abstracted procedure
 19088  002104  AEDF               	btfss	indf2,7,c
 19089  002106  D004               	goto	l13276
 19090                           
 19091                           ; BSR set to: 2
 19092                           ;lorawan.c: 1926: {
 19093                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 19094  002108  0100               	movlb	0	; () banked
 19095  00210A  D838               	call	PL14	;call to abstracted procedure
 19096  00210C  0E00               	movlw	0
 19097  00210E  80DB               	bsf	plusw2,0,c
 19098  002110                     l13276:
 19099                           
 19100                           ;lorawan.c: 1928: }
 19101                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 19102  002110  0100               	movlb	0	; () banked
 19103  002112  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19104  002114  ECEB  F015         	call	PL2	;call to abstracted procedure
 19105  002118  ACDF               	btfss	indf2,6,c
 19106  00211A  D7AC               	goto	l13226
 19107                           
 19108                           ; BSR set to: 2
 19109                           ;lorawan.c: 1931: {
 19110                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 19111  00211C  D82F               	call	PL14	;call to abstracted procedure
 19112  00211E  0E00               	movlw	0
 19113  002120  82DB               	bsf	plusw2,1,c
 19114  002122  D7A8               	goto	l13226
 19115  002124                     l2308:
 19116                           
 19117                           ; BSR set to: 0
 19118                           ;lorawan.c: 1939: {
 19119                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 19120  002124  0102               	movlb	2	; () banked
 19121  002126  69DD               	setf	(_loRa+221)& (0+255),b
 19122                           
 19123                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 19124  002128  6BDE               	clrf	(_loRa+222)& (0+255),b
 19125  00212A                     l13282:
 19126                           
 19127                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 19128  00212A  0100               	movlb	0	; () banked
 19129  00212C  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19130  00212E  D82D               	call	PL16	;call to abstracted procedure
 19131  002130  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19132  002132  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19133  002134  6EE9               	movwf	fsr0l,c
 19134  002136  0E00               	movlw	0
 19135  002138  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19136  00213A  D834               	call	PL470	;call to abstracted procedure
 19137  00213C  D79B               	goto	l13226
 19138  00213E                     l13292:
 19139                           
 19140                           ; BSR set to: 0
 19141  00213E  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19142  002140  D824               	call	PL16	;call to abstracted procedure
 19143  002142  50DF               	movf	indf2,w,c
 19144                           
 19145                           ; Switch size 1, requested type "space"
 19146                           ; Number of cases is 7, Range of values is 2 to 8
 19147                           ; switch strategies available:
 19148                           ; Name         Instructions Cycles
 19149                           ; simple_byte           22    12 (average)
 19150                           ;	Chosen strategy is simple_byte
 19151  002144  0A02               	xorlw	2	; case 2
 19152  002146  E0EE               	bz	l2308
 19153  002148  0A01               	xorlw	1	; case 3
 19154  00214A  E101 D771          	bz	l13208
 19155  00214E  0A07               	xorlw	7	; case 4
 19156  002150  E0EC               	bz	l13282
 19157  002152  0A01               	xorlw	1	; case 5
 19158  002154  E092               	bz	l13228
 19159  002156  0A03               	xorlw	3	; case 6
 19160  002158  E0AF               	bz	l13248
 19161  00215A  0A01               	xorlw	1	; case 7
 19162  00215C  E0CA               	bz	l13266
 19163  00215E  0A0F               	xorlw	15	; case 8
 19164  002160  E0E4               	bz	l13282
 19165  002162                     l13294:
 19166                           
 19167                           ; BSR set to: 0
 19168  002162  2B6E               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 19169  002164                     l13296:
 19170                           
 19171                           ; BSR set to: 0
 19172  002164  0102               	movlb	2	; () banked
 19173  002166  51A7               	movf	(_loRa+167)& (0+255),w,b
 19174  002168  0100               	movlb	0	; () banked
 19175  00216A  5D6E               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 19176  00216C  E201 D730          	bnc	l13200
 19177  002170                     l13298:
 19178                           
 19179                           ; BSR set to: 0
 19180                           ;lorawan.c: 1957: }
 19181                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 19182  002170  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19183  002172  6ED9               	movwf	fsr2l,c
 19184  002174  6ADA               	clrf	fsr2h,c
 19185  002176  C06F  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 19186                           
 19187                           ; BSR set to: 0
 19188  00217A  0012               	return		;funcret
 19189  00217C                     __end_of_IncludeMacCommandsResponse:
 19190                           	opt stack 0
 19191  00217C                     PL14:
 19192                           	opt stack 19
 19193  00217C  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19194  00217E  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19195  002180  6ED9               	movwf	fsr2l,c
 19196  002182  0E00               	movlw	0
 19197  002184  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19198  002186  6EDA               	movwf	fsr2h,c
 19199  002188  0012               	return	
 19200  00218A                     __end_ofPL14:
 19201                           	opt stack 0
 19202  00218A                     PL16:
 19203                           	opt stack 17
 19204  00218A  0D02               	mullw	2
 19205  00218C  0EA8               	movlw	low (_loRa+168)
 19206  00218E  24F3               	addwf	prodl,w,c
 19207  002190  6ED9               	movwf	fsr2l,c
 19208  002192  0E02               	movlw	high (_loRa+168)
 19209  002194  20F4               	addwfc	prodh,w,c
 19210  002196  6EDA               	movwf	fsr2h,c
 19211  002198  0012               	return	
 19212  00219A                     __end_ofPL16:
 19213                           	opt stack 0
 19214  00219A                     PL440:
 19215                           	opt stack 19
 19216  00219A  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19217  00219C  6ED9               	movwf	fsr2l,c
 19218  00219E  6ADA               	clrf	fsr2h,c
 19219  0021A0  50DF               	movf	indf2,w,c
 19220  0021A2  0012               	return	
 19221  0021A4                     __end_ofPL440:
 19222                           	opt stack 0
 19223  0021A4                     PL470:
 19224                           	opt stack 15
 19225  0021A4  6EEA               	movwf	fsr0h,c
 19226  0021A6  CFDF FFEF          	movff	indf2,indf0
 19227  0021AA  0012               	return	
 19228  0021AC                     __end_ofPL470:
 19229                           	opt stack 0
 19230                           tosu	equ	0xFFF
 19231                           tosh	equ	0xFFE
 19232                           tosl	equ	0xFFD
 19233                           pclath	equ	0xFFA
 19234                           tblptru	equ	0xFF8
 19235                           tblptrh	equ	0xFF7
 19236                           tblptrl	equ	0xFF6
 19237                           tablat	equ	0xFF5
 19238                           prodh	equ	0xFF4
 19239                           prodl	equ	0xFF3
 19240                           intcon	equ	0xFF2
 19241                           indf0	equ	0xFEF
 19242                           postinc0	equ	0xFEE
 19243                           plusw0	equ	0xFEB
 19244                           fsr0h	equ	0xFEA
 19245                           fsr0l	equ	0xFE9
 19246                           wreg	equ	0xFE8
 19247                           postinc1	equ	0xFE6
 19248                           postdec1	equ	0xFE5
 19249                           plusw1	equ	0xFE3
 19250                           fsr1h	equ	0xFE2
 19251                           fsr1l	equ	0xFE1
 19252                           indf2	equ	0xFDF
 19253                           postinc2	equ	0xFDE
 19254                           postdec2	equ	0xFDD
 19255                           plusw2	equ	0xFDB
 19256                           fsr2h	equ	0xFDA
 19257                           fsr2l	equ	0xFD9
 19258                           status	equ	0xFD8
 19259                           
 19260 ;; *************** function _RADIO_GetPacketSnr *****************
 19261 ;; Defined at:
 19262 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 19263 ;; Parameters:    Size  Location     Type
 19264 ;;		None
 19265 ;; Auto vars:     Size  Location     Type
 19266 ;;		None
 19267 ;; Return value:  Size  Location     Type
 19268 ;;                  1    wreg      char 
 19269 ;; Registers used:
 19270 ;;		wreg, status,2
 19271 ;; Tracked objects:
 19272 ;;		On entry : E/0
 19273 ;;		On exit  : F/1
 19274 ;;		Unchanged: 0/0
 19275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 19276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19280 ;;Total ram usage:        0 bytes
 19281 ;; Hardware stack levels used:    1
 19282 ;; Hardware stack levels required when called:    7
 19283 ;; This function calls:
 19284 ;;		Nothing
 19285 ;; This function is called by:
 19286 ;;		_IncludeMacCommandsResponse
 19287 ;; This function uses a non-reentrant model
 19288 ;;
 19289                           
 19290                           	psect	text97
 19291  006254                     __ptext97:
 19292                           	opt stack 0
 19293  006254                     _RADIO_GetPacketSnr:
 19294                           	opt stack 19
 19295                           
 19296                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;incstack = 0
 19300  006254  0101               	movlb	1	; () banked
 19301  006256  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
 19302                           
 19303                           ; BSR set to: 1
 19304  006258  0012               	return		;funcret
 19305  00625A                     __end_of_RADIO_GetPacketSnr:
 19306                           	opt stack 0
 19307                           tosu	equ	0xFFF
 19308                           tosh	equ	0xFFE
 19309                           tosl	equ	0xFFD
 19310                           pclath	equ	0xFFA
 19311                           tblptru	equ	0xFF8
 19312                           tblptrh	equ	0xFF7
 19313                           tblptrl	equ	0xFF6
 19314                           tablat	equ	0xFF5
 19315                           prodh	equ	0xFF4
 19316                           prodl	equ	0xFF3
 19317                           intcon	equ	0xFF2
 19318                           indf0	equ	0xFEF
 19319                           postinc0	equ	0xFEE
 19320                           plusw0	equ	0xFEB
 19321                           fsr0h	equ	0xFEA
 19322                           fsr0l	equ	0xFE9
 19323                           wreg	equ	0xFE8
 19324                           postinc1	equ	0xFE6
 19325                           postdec1	equ	0xFE5
 19326                           plusw1	equ	0xFE3
 19327                           fsr1h	equ	0xFE2
 19328                           fsr1l	equ	0xFE1
 19329                           indf2	equ	0xFDF
 19330                           postinc2	equ	0xFDE
 19331                           postdec2	equ	0xFDD
 19332                           plusw2	equ	0xFDB
 19333                           fsr2h	equ	0xFDA
 19334                           fsr2l	equ	0xFD9
 19335                           status	equ	0xFD8
 19336                           
 19337 ;; *************** function _FindSmallestDataRate *****************
 19338 ;; Defined at:
 19339 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19340 ;; Parameters:    Size  Location     Type
 19341 ;;		None
 19342 ;; Auto vars:     Size  Location     Type
 19343 ;;  dataRate        1    7[BANK0 ] unsigned char 
 19344 ;;  i               1    6[BANK0 ] unsigned char 
 19345 ;;  found           1    5[BANK0 ] unsigned char 
 19346 ;; Return value:  Size  Location     Type
 19347 ;;                  1    wreg      unsigned char 
 19348 ;; Registers used:
 19349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19350 ;; Tracked objects:
 19351 ;;		On entry : F/2
 19352 ;;		On exit  : F/0
 19353 ;;		Unchanged: 0/0
 19354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 19355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19356 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19358 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19359 ;;Total ram usage:        4 bytes
 19360 ;; Hardware stack levels used:    1
 19361 ;; Hardware stack levels required when called:    7
 19362 ;; This function calls:
 19363 ;;		Nothing
 19364 ;; This function is called by:
 19365 ;;		_AckRetransmissionCallback
 19366 ;;		_AssemblePacket
 19367 ;; This function uses a non-reentrant model
 19368 ;;
 19369                           
 19370                           	psect	text98
 19371  0047B4                     __ptext98:
 19372                           	opt stack 0
 19373  0047B4                     _FindSmallestDataRate:
 19374                           	opt stack 20
 19375                           
 19376                           ; BSR set to: 2
 19377                           ;lorawan.c: 1966: bool found = 0;
 19378                           
 19379                           ; BSR set to: 1
 19380                           ;incstack = 0
 19381  0047B4  0100               	movlb	0	; () banked
 19382  0047B6  6B65               	clrf	FindSmallestDataRate@found& (0+255),b
 19383                           
 19384                           ; BSR set to: 0
 19385                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 19386  0047B8  0102               	movlb	2	; () banked
 19387  0047BA  51DF               	movf	(_loRa+223)& (0+255),w,b
 19388  0047BC  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19389  0047BE  E23A               	bc	l13126
 19390                           
 19391                           ; BSR set to: 2
 19392                           ;lorawan.c: 1969: {
 19393                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 19394  0047C0  05DF               	decf	(_loRa+223)& (0+255),w,b
 19395  0047C2  0100               	movlb	0	; () banked
 19396  0047C4  6F67               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 19397                           
 19398                           ;lorawan.c: 1972: while ( (found == 0) && (dataRate >= loRa.minDataRate) )
 19399  0047C6  D02A               	goto	l13118
 19400  0047C8                     l2317:
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;lorawan.c: 1973: {
 19404                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 19405  0047C8  6B66               	clrf	FindSmallestDataRate@i& (0+255),b
 19406  0047CA  D01B               	goto	l13110
 19407  0047CC                     l13100:
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;lorawan.c: 1975: {
 19411                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 19412  0047CC  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 19413  0047CE  ECAF  F021         	call	PL6	;call to abstracted procedure
 19414  0047D2  50DF               	movf	223,w,c
 19415  0047D4  0B0F               	andlw	15
 19416  0047D6  0100               	movlb	0	; () banked
 19417  0047D8  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 19418  0047DA  5164               	movf	??_FindSmallestDataRate& (0+255),w,b
 19419  0047DC  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19420  0047DE  E310               	bnc	l13108
 19421                           
 19422                           ; BSR set to: 0
 19423  0047E0  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 19424  0047E2  ECAF  F021         	call	PL6	;call to abstracted procedure
 19425  0047E6  38DF               	swapf	223,w,c
 19426  0047E8  0B0F               	andlw	15
 19427  0047EA  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 19428  0047EC  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19429  0047EE  5D64               	subwf	??_FindSmallestDataRate& (0+255),w,b
 19430  0047F0  E307               	bnc	l13108
 19431                           
 19432                           ; BSR set to: 0
 19433  0047F2  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 19434  0047F4  ECB7  F021         	call	PL12	;call to abstracted procedure
 19435  0047F8  E103               	bnz	l13108
 19436                           
 19437                           ; BSR set to: 0
 19438                           ;lorawan.c: 1977: {
 19439                           ;lorawan.c: 1978: found = 1;
 19440  0047FA  0E01               	movlw	1
 19441  0047FC  6F65               	movwf	FindSmallestDataRate@found& (0+255),b
 19442                           
 19443                           ;lorawan.c: 1979: break;
 19444  0047FE  D006               	goto	l13112
 19445  004800                     l13108:
 19446                           
 19447                           ; BSR set to: 0
 19448  004800  2B66               	incf	FindSmallestDataRate@i& (0+255),f,b
 19449  004802                     l13110:
 19450                           
 19451                           ; BSR set to: 0
 19452  004802  0102               	movlb	2	; () banked
 19453  004804  51ED               	movf	(_loRa+237)& (0+255),w,b
 19454  004806  0100               	movlb	0	; () banked
 19455  004808  5D66               	subwf	FindSmallestDataRate@i& (0+255),w,b
 19456  00480A  E3E0               	bnc	l13100
 19457  00480C                     l13112:
 19458                           
 19459                           ; BSR set to: 0
 19460                           ;lorawan.c: 1980: }
 19461                           ;lorawan.c: 1981: }
 19462                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 19463  00480C  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19464  00480E  E106               	bnz	l13118
 19465                           
 19466                           ; BSR set to: 0
 19467  004810  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19468  004812  0102               	movlb	2	; () banked
 19469  004814  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19470  004816  E202               	bc	l13118
 19471                           
 19472                           ; BSR set to: 2
 19473                           ;lorawan.c: 1983: {
 19474                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 19475  004818  0100               	movlb	0	; () banked
 19476  00481A  0767               	decf	FindSmallestDataRate@dataRate& (0+255),f,b
 19477  00481C                     l13118:
 19478  00481C  0100               	movlb	0	; () banked
 19479  00481E  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19480  004820  E105               	bnz	l13122
 19481                           
 19482                           ; BSR set to: 0
 19483  004822  0102               	movlb	2	; () banked
 19484  004824  51EB               	movf	(_loRa+235)& (0+255),w,b
 19485  004826  0100               	movlb	0	; () banked
 19486  004828  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19487  00482A  E2CE               	bc	l2317
 19488  00482C                     l13122:
 19489                           
 19490                           ; BSR set to: 0
 19491                           ;lorawan.c: 1985: }
 19492                           ;lorawan.c: 1986: }
 19493                           ;lorawan.c: 1988: if (found == 1)
 19494  00482C  0565               	decf	FindSmallestDataRate@found& (0+255),w,b
 19495  00482E  E102               	bnz	l13126
 19496                           
 19497                           ; BSR set to: 0
 19498                           ;lorawan.c: 1989: {
 19499                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 19500  004830  C067  F2DF         	movff	FindSmallestDataRate@dataRate,_loRa+223
 19501  004834                     l13126:
 19502                           
 19503                           ;lorawan.c: 1991: }
 19504                           ;lorawan.c: 1992: }
 19505                           ;lorawan.c: 1994: return found;
 19506  004834  0100               	movlb	0	; () banked
 19507  004836  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19508                           
 19509                           ; BSR set to: 0
 19510  004838  0012               	return		;funcret
 19511  00483A                     __end_of_FindSmallestDataRate:
 19512                           	opt stack 0
 19513                           tosu	equ	0xFFF
 19514                           tosh	equ	0xFFE
 19515                           tosl	equ	0xFFD
 19516                           pclath	equ	0xFFA
 19517                           tblptru	equ	0xFF8
 19518                           tblptrh	equ	0xFF7
 19519                           tblptrl	equ	0xFF6
 19520                           tablat	equ	0xFF5
 19521                           prodh	equ	0xFF4
 19522                           prodl	equ	0xFF3
 19523                           intcon	equ	0xFF2
 19524                           indf0	equ	0xFEF
 19525                           postinc0	equ	0xFEE
 19526                           plusw0	equ	0xFEB
 19527                           fsr0h	equ	0xFEA
 19528                           fsr0l	equ	0xFE9
 19529                           wreg	equ	0xFE8
 19530                           postinc1	equ	0xFE6
 19531                           postdec1	equ	0xFE5
 19532                           plusw1	equ	0xFE3
 19533                           fsr1h	equ	0xFE2
 19534                           fsr1l	equ	0xFE1
 19535                           indf2	equ	0xFDF
 19536                           postinc2	equ	0xFDE
 19537                           postdec2	equ	0xFDD
 19538                           plusw2	equ	0xFDB
 19539                           fsr2h	equ	0xFDA
 19540                           fsr2l	equ	0xFD9
 19541                           status	equ	0xFD8
 19542                           
 19543 ;; *************** function _EncryptFRMPayload *****************
 19544 ;; Defined at:
 19545 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19546 ;; Parameters:    Size  Location     Type
 19547 ;;  buffer          2   68[BANK0 ] PTR unsigned char 
 19548 ;;		 -> payload(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 19549 ;;  bufferLength    1   70[BANK0 ] unsigned char 
 19550 ;;  dir             1   71[BANK0 ] unsigned char 
 19551 ;;  frameCounter    4   72[BANK0 ] unsigned long 
 19552 ;;  key             2   76[BANK0 ] PTR unsigned char 
 19553 ;;		 -> loRa.activationParameters(105), loRa(245), 
 19554 ;;  macBufferInd    1   78[BANK0 ] unsigned char 
 19555 ;;  bufferToBeEn    2   79[BANK0 ] PTR unsigned char 
 19556 ;;		 -> macBuffer(271), radioBuffer(271), 
 19557 ;;  multicastSta    1   81[BANK0 ] unsigned char 
 19558 ;; Auto vars:     Size  Location     Type
 19559 ;;  j               1   89[BANK0 ] unsigned char 
 19560 ;;  i               1   88[BANK0 ] unsigned char 
 19561 ;;  k               1   87[BANK0 ] unsigned char 
 19562 ;; Return value:  Size  Location     Type
 19563 ;;                  1    wreg      void 
 19564 ;; Registers used:
 19565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19566 ;; Tracked objects:
 19567 ;;		On entry : F/0
 19568 ;;		On exit  : F/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 19571 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19572 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19573 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19574 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19575 ;;Total ram usage:       22 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:   10
 19578 ;; This function calls:
 19579 ;;		_AESEncodeLoRa
 19580 ;;		_AssembleEncryptionBlock
 19581 ;; This function is called by:
 19582 ;;		_LORAWAN_RxDone
 19583 ;;		_AssemblePacket
 19584 ;; This function uses a non-reentrant model
 19585 ;;
 19586                           
 19587                           	psect	text99
 19588  002D1E                     __ptext99:
 19589                           	opt stack 0
 19590  002D1E                     _EncryptFRMPayload:
 19591                           	opt stack 17
 19592                           
 19593                           ; BSR set to: 0
 19594                           
 19595                           ; BSR set to: 0
 19596                           ;incstack = 0
 19597  002D1E  6BB8               	clrf	EncryptFRMPayload@i& (0+255),b
 19598  002D20  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19599                           
 19600                           ; BSR set to: 0
 19601                           ;lorawan.c: 2209: k = bufferLength / 16;
 19602  002D22  39A6               	swapf	EncryptFRMPayload@bufferLength& (0+255),w,b
 19603  002D24  0B0F               	andlw	15
 19604  002D26  6FB7               	movwf	EncryptFRMPayload@k& (0+255),b
 19605                           
 19606                           ; BSR set to: 0
 19607                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 19608  002D28  0E01               	movlw	1
 19609  002D2A  6FB8               	movwf	EncryptFRMPayload@i& (0+255),b
 19610  002D2C  D031               	goto	l13162
 19611  002D2E                     l13144:
 19612                           
 19613                           ; BSR set to: 0
 19614                           ;lorawan.c: 2211: {
 19615                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19616  002D2E  D85B               	call	PL118	;call to abstracted procedure
 19617  002D30  ECC0  F021         	call	_AssembleEncryptionBlock
 19618                           
 19619                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 19620  002D34  D868               	call	PL232	;call to abstracted procedure
 19621  002D36  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 19622                           
 19623                           ; BSR set to: 0
 19624                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 19625  002D3A  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19626  002D3C                     l13152:
 19627                           
 19628                           ; BSR set to: 0
 19629                           ;lorawan.c: 2216: {
 19630                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 19631  002D3C  D875               	call	PL296	;call to abstracted procedure
 19632  002D3E  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19633  002D40  6FB2               	movwf	??_EncryptFRMPayload& (0+255),b
 19634  002D42  6BB3               	clrf	(??_EncryptFRMPayload+1)& (0+255),b
 19635  002D44  3BB2               	swapf	??_EncryptFRMPayload& (0+255),f,b
 19636  002D46  3BB3               	swapf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19637  002D48  0EF0               	movlw	240
 19638  002D4A  17B3               	andwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19639  002D4C  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19640  002D4E  0B0F               	andlw	15
 19641  002D50  13B3               	iorwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19642  002D52  0EF0               	movlw	240
 19643  002D54  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19644  002D56  C0A4  F0B4         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+2
 19645  002D5A  C0A5  F0B5         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+3
 19646  002D5E  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19647  002D60  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19648  002D62  51B3               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 19649  002D64  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19650  002D66  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19651  002D68  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19652  002D6A  0E00               	movlw	0
 19653  002D6C  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19654  002D6E  0EF0               	movlw	240
 19655  002D70  25B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19656  002D72  6EE9               	movwf	fsr0l,c
 19657  002D74  0EFF               	movlw	255
 19658  002D76  21B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),w,b
 19659  002D78  6EEA               	movwf	fsr0h,c
 19660  002D7A  50EF               	movf	indf0,w,c
 19661  002D7C  6FB6               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 19662  002D7E  D84C               	call	PL262	;call to abstracted procedure
 19663  002D80  19B6               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 19664  002D82  6EDF               	movwf	indf2,c
 19665                           
 19666                           ; BSR set to: 0
 19667  002D84  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19668                           
 19669                           ; BSR set to: 0
 19670  002D86  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19671                           
 19672                           ; BSR set to: 0
 19673  002D88  0E0F               	movlw	15
 19674  002D8A  65B9               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 19675  002D8C  D7D7               	goto	l13152
 19676                           
 19677                           ; BSR set to: 0
 19678  002D8E  2BB8               	incf	EncryptFRMPayload@i& (0+255),f,b
 19679  002D90                     l13162:
 19680                           
 19681                           ; BSR set to: 0
 19682  002D90  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19683  002D92  5DB7               	subwf	EncryptFRMPayload@k& (0+255),w,b
 19684  002D94  E2CC               	bc	l13144
 19685                           
 19686                           ; BSR set to: 0
 19687                           ;lorawan.c: 2218: }
 19688                           ;lorawan.c: 2219: }
 19689                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 19690  002D96  D84F               	call	PL400	;call to abstracted procedure
 19691  002D98  B4D8               	btfsc	status,2,c
 19692  002D9A  0C0F               	retlw	15
 19693                           
 19694                           ; BSR set to: 0
 19695                           ;lorawan.c: 2222: {
 19696                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19697  002D9C  D824               	call	PL118	;call to abstracted procedure
 19698  002D9E  ECC0  F021         	call	_AssembleEncryptionBlock
 19699                           
 19700                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 19701  002DA2  D831               	call	PL232	;call to abstracted procedure
 19702  002DA4  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 19703                           
 19704                           ; BSR set to: 0
 19705                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 19706  002DA8  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19707  002DAA  D018               	goto	l13176
 19708  002DAC                     l13170:
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;lorawan.c: 2227: {
 19712                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 19713  002DAC  D83D               	call	PL296	;call to abstracted procedure
 19714  002DAE  51B7               	movf	EncryptFRMPayload@k& (0+255),w,b
 19715  002DB0  0D10               	mullw	16
 19716  002DB2  C0A4  F0B2         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 19717  002DB6  C0A5  F0B3         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 19718  002DBA  50F3               	movf	prodl,w,c
 19719  002DBC  27B2               	addwf	??_EncryptFRMPayload& (0+255),f,b
 19720  002DBE  50F4               	movf	prodh,w,c
 19721  002DC0  23B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 19722  002DC2  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19723  002DC4  25B2               	addwf	??_EncryptFRMPayload& (0+255),w,b
 19724  002DC6  6EE9               	movwf	fsr0l,c
 19725  002DC8  0E00               	movlw	0
 19726  002DCA  21B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),w,b
 19727  002DCC  6EEA               	movwf	fsr0h,c
 19728  002DCE  50EF               	movf	indf0,w,c
 19729  002DD0  6FB4               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 19730  002DD2  D822               	call	PL262	;call to abstracted procedure
 19731  002DD4  19B4               	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19732  002DD6  6EDF               	movwf	indf2,c
 19733                           
 19734                           ; BSR set to: 0
 19735  002DD8  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19736                           
 19737                           ; BSR set to: 0
 19738  002DDA  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19739  002DDC                     l13176:
 19740                           
 19741                           ; BSR set to: 0
 19742  002DDC  D82C               	call	PL400	;call to abstracted procedure
 19743  002DDE  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19744  002DE0  5DB9               	subwf	EncryptFRMPayload@j& (0+255),w,b
 19745  002DE2  E3E4               	bnc	l13170
 19746                           
 19747                           ; BSR set to: 0
 19748  002DE4  0012               	return		;funcret
 19749  002DE6                     __end_of_EncryptFRMPayload:
 19750                           	opt stack 0
 19751  002DE6                     PL118:
 19752                           	opt stack 17
 19753  002DE6  C0A8  F06E         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19754  002DEA  C0A9  F06F         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19755  002DEE  C0AA  F070         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19756  002DF2  C0AB  F071         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19757  002DF6  C0B8  F072         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19758  002DFA  0E01               	movlw	1
 19759  002DFC  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19760  002DFE  C0B1  F074         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19761  002E02  51A7               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19762  002E04  0012               	return	
 19763  002E06                     __end_ofPL118:
 19764                           	opt stack 0
 19765  002E06                     PL232:
 19766                           	opt stack 17
 19767  002E06  0EAB               	movlw	low _aesBuffer
 19768  002E08  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19769  002E0A  0E01               	movlw	high _aesBuffer
 19770  002E0C  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19771  002E0E  C0AC  F092         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19772  002E12  C0AD  F093         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19773  002E16  0012               	return	
 19774  002E18                     __end_ofPL232:
 19775                           	opt stack 0
 19776  002E18                     PL262:
 19777                           	opt stack 17
 19778  002E18  0EAB               	movlw	low _aesBuffer
 19779  002E1A  25B9               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19780  002E1C  6EE9               	movwf	fsr0l,c
 19781  002E1E  6AEA               	clrf	fsr0h,c
 19782  002E20  0E01               	movlw	high _aesBuffer
 19783  002E22  22EA               	addwfc	fsr0h,f,c
 19784  002E24  50EF               	movf	indf0,w,c
 19785  002E26  0012               	return	
 19786  002E28                     __end_ofPL262:
 19787                           	opt stack 0
 19788  002E28                     PL296:
 19789                           	opt stack 17
 19790  002E28  51AE               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19791  002E2A  25AF               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19792  002E2C  6ED9               	movwf	fsr2l,c
 19793  002E2E  0E00               	movlw	0
 19794  002E30  21B0               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19795  002E32  6EDA               	movwf	fsr2h,c
 19796  002E34  0012               	return	
 19797  002E36                     __end_ofPL296:
 19798                           	opt stack 0
 19799  002E36                     PL400:
 19800                           	opt stack 17
 19801  002E36  C0A6  F0B2         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19802  002E3A  0E0F               	movlw	15
 19803  002E3C  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19804  002E3E  0C0F               	retlw	15
 19805  002E40                     __end_ofPL400:
 19806                           	opt stack 0
 19807                           tosu	equ	0xFFF
 19808                           tosh	equ	0xFFE
 19809                           tosl	equ	0xFFD
 19810                           pclath	equ	0xFFA
 19811                           tblptru	equ	0xFF8
 19812                           tblptrh	equ	0xFF7
 19813                           tblptrl	equ	0xFF6
 19814                           tablat	equ	0xFF5
 19815                           prodh	equ	0xFF4
 19816                           prodl	equ	0xFF3
 19817                           intcon	equ	0xFF2
 19818                           indf0	equ	0xFEF
 19819                           postinc0	equ	0xFEE
 19820                           plusw0	equ	0xFEB
 19821                           fsr0h	equ	0xFEA
 19822                           fsr0l	equ	0xFE9
 19823                           wreg	equ	0xFE8
 19824                           postinc1	equ	0xFE6
 19825                           postdec1	equ	0xFE5
 19826                           plusw1	equ	0xFE3
 19827                           fsr1h	equ	0xFE2
 19828                           fsr1l	equ	0xFE1
 19829                           indf2	equ	0xFDF
 19830                           postinc2	equ	0xFDE
 19831                           postdec2	equ	0xFDD
 19832                           plusw2	equ	0xFDB
 19833                           fsr2h	equ	0xFDA
 19834                           fsr2l	equ	0xFD9
 19835                           status	equ	0xFD8
 19836                           
 19837 ;; *************** function _AssembleEncryptionBlock *****************
 19838 ;; Defined at:
 19839 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19840 ;; Parameters:    Size  Location     Type
 19841 ;;  dir             1    wreg     unsigned char 
 19842 ;;  frameCounter    4   14[BANK0 ] unsigned long 
 19843 ;;  blockId         1   18[BANK0 ] unsigned char 
 19844 ;;  firstByte       1   19[BANK0 ] unsigned char 
 19845 ;;  multicastSta    1   20[BANK0 ] unsigned char 
 19846 ;; Auto vars:     Size  Location     Type
 19847 ;;  dir             1   21[BANK0 ] unsigned char 
 19848 ;;  bufferIndex     1   22[BANK0 ] unsigned char 
 19849 ;; Return value:  Size  Location     Type
 19850 ;;                  1    wreg      void 
 19851 ;; Registers used:
 19852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19853 ;; Tracked objects:
 19854 ;;		On entry : F/0
 19855 ;;		On exit  : F/0
 19856 ;;		Unchanged: 0/0
 19857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 19858 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19861 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19862 ;;Total ram usage:        9 bytes
 19863 ;; Hardware stack levels used:    1
 19864 ;; Hardware stack levels required when called:    8
 19865 ;; This function calls:
 19866 ;;		_memcpy
 19867 ;;		_memset
 19868 ;; This function is called by:
 19869 ;;		_LORAWAN_RxDone
 19870 ;;		_AssemblePacket
 19871 ;;		_EncryptFRMPayload
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           	psect	text100
 19876  004380                     __ptext100:
 19877                           	opt stack 0
 19878  004380                     _AssembleEncryptionBlock:
 19879                           	opt stack 18
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;incstack = 0
 19883                           ;AssembleEncryptionBlock@dir stored from wreg
 19884  004380  6F75               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 19885                           
 19886                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 19887  004382  0100               	movlb	0	; () banked
 19888  004384  6B76               	clrf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 19889                           
 19890                           ; BSR set to: 0
 19891                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 19892  004386  D83E               	call	PL214	;call to abstracted procedure
 19893  004388  D830               	call	PL142	;call to abstracted procedure
 19894  00438A  EC18  F02E         	call	_memset	;wreg free
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 19898  00438E  C073  F1AB         	movff	AssembleEncryptionBlock@firstByte,_aesBuffer
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 19902  004392  0E05               	movlw	5
 19903  004394  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 19907  004396  D83F               	call	PL306	;call to abstracted procedure
 19908  004398  C075  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 19909                           
 19910                           ; BSR set to: 0
 19911  00439C  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19912                           
 19913                           ; BSR set to: 0
 19914                           ;lorawan.c: 2168: if (0 == multicastStatus)
 19915  00439E  5174               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 19916  0043A0  E108               	bnz	l12698
 19917                           
 19918                           ; BSR set to: 0
 19919                           ;lorawan.c: 2169: {
 19920                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 19921  0043A2  D829               	call	PL200	;call to abstracted procedure
 19922  0043A4  D834               	call	PL266	;call to abstracted procedure
 19923  0043A6  D81C               	call	PL130	;call to abstracted procedure
 19924  0043A8  ECA0  F028         	call	_memcpy	;wreg free
 19925  0043AC                     l12696:
 19926                           
 19927                           ; BSR set to: 0
 19928                           ;lorawan.c: 2171: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.deviceAd
      +                          dress);
 19929  0043AC  0E04               	movlw	4
 19930  0043AE  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19931                           
 19932                           ;lorawan.c: 2172: }
 19933  0043B0  D008               	goto	l12702
 19934  0043B2                     l12698:
 19935                           
 19936                           ; BSR set to: 0
 19937                           ;lorawan.c: 2173: else
 19938                           ;lorawan.c: 2174: {
 19939                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 19940  0043B2  D821               	call	PL200	;call to abstracted procedure
 19941  0043B4  0E62               	movlw	low (_loRa+98)
 19942  0043B6  6F66               	movwf	memcpy@s1& (0+255),b
 19943  0043B8  0E02               	movlw	high (_loRa+98)
 19944  0043BA  D812               	call	PL130	;call to abstracted procedure
 19945  0043BC  ECA0  F028         	call	_memcpy	;wreg free
 19946  0043C0  D7F5               	goto	l12696
 19947  0043C2                     l12702:
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;lorawan.c: 2177: }
 19951                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 19952  0043C2  D819               	call	PL200	;call to abstracted procedure
 19953  0043C4  0E6E               	movlw	low AssembleEncryptionBlock@frameCounter
 19954  0043C6  6F66               	movwf	memcpy@s1& (0+255),b
 19955  0043C8  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 19956  0043CA  EC9E  F017         	call	PL270	;call to abstracted procedure
 19957  0043CE  ECA0  F028         	call	_memcpy	;wreg free
 19958                           
 19959                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 19960  0043D2  0E04               	movlw	4
 19961  0043D4  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19962                           
 19963                           ; BSR set to: 0
 19964                           ;lorawan.c: 2182: bufferIndex ++;
 19965  0043D6  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 19969  0043D8  D81E               	call	PL306	;call to abstracted procedure
 19970  0043DA  C072  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 19971                           
 19972                           ; BSR set to: 0
 19973  0043DE  0012               	return		;funcret
 19974  0043E0                     __end_of_AssembleEncryptionBlock:
 19975                           	opt stack 0
 19976  0043E0                     PL130:
 19977                           	opt stack 16
 19978  0043E0  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19979  0043E2  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19980  0043E4  0E04               	movlw	4
 19981  0043E6  6F68               	movwf	memcpy@n& (0+255),b
 19982  0043E8  0C04               	retlw	4
 19983  0043EA                     __end_ofPL130:
 19984                           	opt stack 0
 19985  0043EA                     PL142:
 19986                           	opt stack 16
 19987  0043EA  6B67               	clrf	(memset@c+1)& (0+255),b
 19988  0043EC  6B66               	clrf	memset@c& (0+255),b
 19989  0043EE  6B69               	clrf	(memset@n+1)& (0+255),b
 19990  0043F0  0E10               	movlw	16
 19991  0043F2  6F68               	movwf	memset@n& (0+255),b
 19992  0043F4  0C10               	retlw	16
 19993  0043F6                     __end_ofPL142:
 19994                           	opt stack 0
 19995  0043F6                     PL200:
 19996                           	opt stack 18
 19997  0043F6  0EAB               	movlw	low _aesBuffer
 19998  0043F8  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19999  0043FA  6F64               	movwf	memcpy@d1& (0+255),b
 20000  0043FC  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 20001  0043FE  0E01               	movlw	high _aesBuffer
 20002  004400  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 20003  004402  0012               	return	
 20004  004404                     __end_ofPL200:
 20005                           	opt stack 0
 20006  004404                     PL214:
 20007                           	opt stack 16
 20008  004404  0EAB               	movlw	low _aesBuffer
 20009  004406  6F64               	movwf	memset@p1& (0+255),b
 20010  004408  0E01               	movlw	high _aesBuffer
 20011  00440A  6F65               	movwf	(memset@p1+1)& (0+255),b
 20012  00440C  0012               	return	
 20013  00440E                     __end_ofPL214:
 20014                           	opt stack 0
 20015  00440E                     PL266:
 20016                           	opt stack 16
 20017  00440E  0E1E               	movlw	low (_loRa+30)
 20018  004410  6F66               	movwf	memcpy@s1& (0+255),b
 20019  004412  0E02               	movlw	high (_loRa+30)
 20020  004414  0012               	return	
 20021  004416                     __end_ofPL266:
 20022                           	opt stack 0
 20023  004416                     PL306:
 20024                           	opt stack 18
 20025  004416  0EAB               	movlw	low _aesBuffer
 20026  004418  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 20027  00441A  6ED9               	movwf	fsr2l,c
 20028  00441C  6ADA               	clrf	fsr2h,c
 20029  00441E  0E01               	movlw	high _aesBuffer
 20030  004420  22DA               	addwfc	fsr2h,f,c
 20031  004422  0012               	return	
 20032  004424                     __end_ofPL306:
 20033                           	opt stack 0
 20034                           tosu	equ	0xFFF
 20035                           tosh	equ	0xFFE
 20036                           tosl	equ	0xFFD
 20037                           pclath	equ	0xFFA
 20038                           tblptru	equ	0xFF8
 20039                           tblptrh	equ	0xFF7
 20040                           tblptrl	equ	0xFF6
 20041                           tablat	equ	0xFF5
 20042                           prodh	equ	0xFF4
 20043                           prodl	equ	0xFF3
 20044                           intcon	equ	0xFF2
 20045                           indf0	equ	0xFEF
 20046                           postinc0	equ	0xFEE
 20047                           plusw0	equ	0xFEB
 20048                           fsr0h	equ	0xFEA
 20049                           fsr0l	equ	0xFE9
 20050                           wreg	equ	0xFE8
 20051                           postinc1	equ	0xFE6
 20052                           postdec1	equ	0xFE5
 20053                           plusw1	equ	0xFE3
 20054                           fsr1h	equ	0xFE2
 20055                           fsr1l	equ	0xFE1
 20056                           indf2	equ	0xFDF
 20057                           postinc2	equ	0xFDE
 20058                           postdec2	equ	0xFDD
 20059                           plusw2	equ	0xFDB
 20060                           fsr2h	equ	0xFDA
 20061                           fsr2l	equ	0xFD9
 20062                           status	equ	0xFD8
 20063                           
 20064 ;; *************** function _CountfOptsLength *****************
 20065 ;; Defined at:
 20066 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20067 ;; Parameters:    Size  Location     Type
 20068 ;;		None
 20069 ;; Auto vars:     Size  Location     Type
 20070 ;;  i               1   11[BANK0 ] unsigned char 
 20071 ;;  macCommandLe    1   10[BANK0 ] unsigned char 
 20072 ;; Return value:  Size  Location     Type
 20073 ;;                  1    wreg      unsigned char 
 20074 ;; Registers used:
 20075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20076 ;; Tracked objects:
 20077 ;;		On entry : C/2
 20078 ;;		On exit  : F/0
 20079 ;;		Unchanged: 0/0
 20080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20083 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20084 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20085 ;;Total ram usage:        8 bytes
 20086 ;; Hardware stack levels used:    1
 20087 ;; Hardware stack levels required when called:    7
 20088 ;; This function calls:
 20089 ;;		Nothing
 20090 ;; This function is called by:
 20091 ;;		_LORAWAN_GetMaxPayloadSize
 20092 ;;		_AssemblePacket
 20093 ;; This function uses a non-reentrant model
 20094 ;;
 20095                           
 20096                           	psect	text101
 20097  00483A                     __ptext101:
 20098                           	opt stack 0
 20099  00483A                     _CountfOptsLength:
 20100                           	opt stack 20
 20101                           
 20102                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;incstack = 0
 20106  00483A  0100               	movlb	0	; () banked
 20107  00483C  6B6A               	clrf	CountfOptsLength@macCommandLength& (0+255),b
 20108                           
 20109                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 20110  00483E  6B6B               	clrf	CountfOptsLength@i& (0+255),b
 20111  004840  D01E               	goto	l13188
 20112  004842                     l13180:
 20113                           
 20114                           ; BSR set to: 0
 20115                           ;lorawan.c: 2139: {
 20116                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 20117  004842  516B               	movf	CountfOptsLength@i& (0+255),w,b
 20118  004844  ECC5  F010         	call	PL16	;call to abstracted procedure
 20119  004848  28DE               	incf	postinc2,w,c
 20120  00484A  E018               	bz	l13186
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;lorawan.c: 2141: {
 20124                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 20125  00484C  D825               	call	PL56	;call to abstracted procedure
 20126  00484E  ECC5  F010         	call	PL16	;call to abstracted procedure
 20127  004852  D827               	call	PL84	;call to abstracted procedure
 20128  004854  D81B               	call	PL54	;call to abstracted procedure
 20129  004856  C06A  F068         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 20130  00485A  6B69               	clrf	(??_CountfOptsLength+5)& (0+255),b
 20131  00485C  2768               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 20132  00485E  0E00               	movlw	0
 20133  004860  2369               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 20134  004862  BF69               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 20135  004864  D005               	goto	l13184
 20136  004866  5169               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 20137  004868  E10F               	bnz	l13190
 20138  00486A  0E10               	movlw	16
 20139  00486C  5D68               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 20140  00486E  E20C               	bc	l13190
 20141  004870                     l13184:
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;lorawan.c: 2143: {
 20145                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 20146  004870  D813               	call	PL56	;call to abstracted procedure
 20147  004872  ECC5  F010         	call	PL16	;call to abstracted procedure
 20148  004876  D815               	call	PL84	;call to abstracted procedure
 20149  004878  D809               	call	PL54	;call to abstracted procedure
 20150  00487A  276A               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 20151  00487C                     l13186:
 20152                           
 20153                           ; BSR set to: 0
 20154  00487C  2B6B               	incf	CountfOptsLength@i& (0+255),f,b
 20155  00487E                     l13188:
 20156                           
 20157                           ; BSR set to: 0
 20158  00487E  0102               	movlb	2	; () banked
 20159  004880  51A7               	movf	(_loRa+167)& (0+255),w,b
 20160  004882  0100               	movlb	0	; () banked
 20161  004884  5D6B               	subwf	CountfOptsLength@i& (0+255),w,b
 20162  004886  E3DD               	bnc	l13180
 20163  004888                     l13190:
 20164                           
 20165                           ; BSR set to: 0
 20166                           ;lorawan.c: 2149: }
 20167                           ;lorawan.c: 2150: }
 20168                           ;lorawan.c: 2151: }
 20169                           ;lorawan.c: 2153: return macCommandLength;
 20170  004888  516A               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 20171                           
 20172                           ; BSR set to: 0
 20173  00488A  0012               	return		;funcret
 20174  00488C                     __end_of_CountfOptsLength:
 20175                           	opt stack 0
 20176  00488C                     PL54:
 20177                           	opt stack 19
 20178  00488C                     	if	1	;There are 3 active tblptr bytes
 20179  00488C  6AF8               	clrf	tblptru,c
 20180  00488E  0E00               	movlw	low (__mediumconst shr (0+16))
 20181  004890  22F8               	addwfc	tblptru,f,c
 20182  004892                     	endif
 20183  004892  0008               	tblrd		*
 20184  004894  50F5               	movf	tablat,w,c
 20185  004896  0012               	return	
 20186  004898                     __end_ofPL54:
 20187                           	opt stack 0
 20188  004898                     PL56:
 20189                           	opt stack 20
 20190  004898  0EFE               	movlw	254
 20191  00489A  6F64               	movwf	??_CountfOptsLength& (0+255),b
 20192  00489C  6965               	setf	(??_CountfOptsLength+1)& (0+255),b
 20193  00489E  516B               	movf	CountfOptsLength@i& (0+255),w,b
 20194  0048A0  0012               	return	
 20195  0048A2                     __end_ofPL56:
 20196                           	opt stack 0
 20197  0048A2                     PL84:
 20198                           	opt stack 20
 20199  0048A2  50DF               	movf	indf2,w,c
 20200  0048A4  6F66               	movwf	(??_CountfOptsLength+2)& (0+255),b
 20201  0048A6  6B67               	clrf	(??_CountfOptsLength+3)& (0+255),b
 20202  0048A8  5164               	movf	??_CountfOptsLength& (0+255),w,b
 20203  0048AA  2766               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 20204  0048AC  5165               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 20205  0048AE  2367               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 20206  0048B0  0E94               	movlw	low _macEndDevCmdReplyLen
 20207  0048B2  2566               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 20208  0048B4  6EF6               	movwf	tblptrl,c
 20209  0048B6  0EFF               	movlw	high _macEndDevCmdReplyLen
 20210  0048B8  2167               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 20211  0048BA  6EF7               	movwf	tblptrh,c
 20212  0048BC  0012               	return	
 20213  0048BE                     __end_ofPL84:
 20214                           	opt stack 0
 20215                           tosu	equ	0xFFF
 20216                           tosh	equ	0xFFE
 20217                           tosl	equ	0xFFD
 20218                           pclath	equ	0xFFA
 20219                           tblptru	equ	0xFF8
 20220                           tblptrh	equ	0xFF7
 20221                           tblptrl	equ	0xFF6
 20222                           tablat	equ	0xFF5
 20223                           prodh	equ	0xFF4
 20224                           prodl	equ	0xFF3
 20225                           intcon	equ	0xFF2
 20226                           indf0	equ	0xFEF
 20227                           postinc0	equ	0xFEE
 20228                           plusw0	equ	0xFEB
 20229                           fsr0h	equ	0xFEA
 20230                           fsr0l	equ	0xFE9
 20231                           wreg	equ	0xFE8
 20232                           postinc1	equ	0xFE6
 20233                           postdec1	equ	0xFE5
 20234                           plusw1	equ	0xFE3
 20235                           fsr1h	equ	0xFE2
 20236                           fsr1l	equ	0xFE1
 20237                           indf2	equ	0xFDF
 20238                           postinc2	equ	0xFDE
 20239                           postdec2	equ	0xFDD
 20240                           plusw2	equ	0xFDB
 20241                           fsr2h	equ	0xFDA
 20242                           fsr2l	equ	0xFD9
 20243                           status	equ	0xFD8
 20244                           
 20245 ;; *************** function _ExtractMic *****************
 20246 ;; Defined at:
 20247 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20248 ;; Parameters:    Size  Location     Type
 20249 ;;  buffer          2   14[BANK0 ] PTR unsigned char 
 20250 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20251 ;;  bufferLength    1   16[BANK0 ] unsigned char 
 20252 ;; Auto vars:     Size  Location     Type
 20253 ;;  mic             4   20[BANK0 ] unsigned long 
 20254 ;; Return value:  Size  Location     Type
 20255 ;;                  4   14[BANK0 ] unsigned long 
 20256 ;; Registers used:
 20257 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20258 ;; Tracked objects:
 20259 ;;		On entry : F/0
 20260 ;;		On exit  : F/0
 20261 ;;		Unchanged: 0/0
 20262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20263 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20264 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20266 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20267 ;;Total ram usage:       10 bytes
 20268 ;; Hardware stack levels used:    1
 20269 ;; Hardware stack levels required when called:    8
 20270 ;; This function calls:
 20271 ;;		_memcpy
 20272 ;; This function is called by:
 20273 ;;		_LORAWAN_RxDone
 20274 ;; This function uses a non-reentrant model
 20275 ;;
 20276                           
 20277                           	psect	text102
 20278  005770                     __ptext102:
 20279                           	opt stack 0
 20280  005770                     _ExtractMic:
 20281                           	opt stack 18
 20282                           
 20283                           ; BSR set to: 0
 20284                           ;lorawan.c: 2189: uint32_t mic = 0;
 20285                           
 20286                           ; BSR set to: 0
 20287                           ;incstack = 0
 20288  005770  6B74               	clrf	ExtractMic@mic& (0+255),b
 20289  005772  6B75               	clrf	(ExtractMic@mic+1)& (0+255),b
 20290  005774  6B76               	clrf	(ExtractMic@mic+2)& (0+255),b
 20291  005776  6B77               	clrf	(ExtractMic@mic+3)& (0+255),b
 20292                           
 20293                           ; BSR set to: 0
 20294                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 20295  005778  0E74               	movlw	low ExtractMic@mic
 20296  00577A  6F64               	movwf	memcpy@d1& (0+255),b
 20297  00577C  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 20298  00577E  5170               	movf	ExtractMic@bufferLength& (0+255),w,b
 20299  005780  256E               	addwf	ExtractMic@buffer& (0+255),w,b
 20300  005782  6F72               	movwf	??_ExtractMic& (0+255),b
 20301  005784  0E00               	movlw	0
 20302  005786  216F               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 20303  005788  6F73               	movwf	(??_ExtractMic+1)& (0+255),b
 20304  00578A  0EFC               	movlw	252
 20305  00578C  2572               	addwf	??_ExtractMic& (0+255),w,b
 20306  00578E  6F66               	movwf	memcpy@s1& (0+255),b
 20307  005790  0EFF               	movlw	255
 20308  005792  2173               	addwfc	(??_ExtractMic+1)& (0+255),w,b
 20309  005794  ECF0  F021         	call	PL130	;call to abstracted procedure
 20310  005798  ECA0  F028         	call	_memcpy	;wreg free
 20311                           
 20312                           ; BSR set to: 0
 20313                           ;lorawan.c: 2191: return mic;
 20314  00579C  C074  F06E         	movff	ExtractMic@mic,?_ExtractMic
 20315  0057A0  C075  F06F         	movff	ExtractMic@mic+1,?_ExtractMic+1
 20316  0057A4  C076  F070         	movff	ExtractMic@mic+2,?_ExtractMic+2
 20317  0057A8  C077  F071         	movff	ExtractMic@mic+3,?_ExtractMic+3
 20318                           
 20319                           ; BSR set to: 0
 20320  0057AC  0012               	return		;funcret
 20321  0057AE                     __end_of_ExtractMic:
 20322                           	opt stack 0
 20323                           tosu	equ	0xFFF
 20324                           tosh	equ	0xFFE
 20325                           tosl	equ	0xFFD
 20326                           pclath	equ	0xFFA
 20327                           tblptru	equ	0xFF8
 20328                           tblptrh	equ	0xFF7
 20329                           tblptrl	equ	0xFF6
 20330                           tablat	equ	0xFF5
 20331                           prodh	equ	0xFF4
 20332                           prodl	equ	0xFF3
 20333                           intcon	equ	0xFF2
 20334                           indf0	equ	0xFEF
 20335                           postinc0	equ	0xFEE
 20336                           plusw0	equ	0xFEB
 20337                           fsr0h	equ	0xFEA
 20338                           fsr0l	equ	0xFE9
 20339                           wreg	equ	0xFE8
 20340                           postinc1	equ	0xFE6
 20341                           postdec1	equ	0xFE5
 20342                           plusw1	equ	0xFE3
 20343                           fsr1h	equ	0xFE2
 20344                           fsr1l	equ	0xFE1
 20345                           indf2	equ	0xFDF
 20346                           postinc2	equ	0xFDE
 20347                           postdec2	equ	0xFDD
 20348                           plusw2	equ	0xFDB
 20349                           fsr2h	equ	0xFDA
 20350                           fsr2l	equ	0xFD9
 20351                           status	equ	0xFD8
 20352                           
 20353 ;; *************** function _ComputeSessionKeys *****************
 20354 ;; Defined at:
 20355 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20356 ;; Parameters:    Size  Location     Type
 20357 ;;  joinAcceptBu    2   68[BANK0 ] PTR struct .
 20358 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;		None
 20361 ;; Return value:  Size  Location     Type
 20362 ;;                  1    wreg      void 
 20363 ;; Registers used:
 20364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20365 ;; Tracked objects:
 20366 ;;		On entry : D/0
 20367 ;;		On exit  : F/0
 20368 ;;		Unchanged: 0/0
 20369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20370 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20373 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20374 ;;Total ram usage:        2 bytes
 20375 ;; Hardware stack levels used:    1
 20376 ;; Hardware stack levels required when called:   10
 20377 ;; This function calls:
 20378 ;;		_AESEncodeLoRa
 20379 ;;		_PrepareSessionKeys
 20380 ;; This function is called by:
 20381 ;;		_LORAWAN_RxDone
 20382 ;; This function uses a non-reentrant model
 20383 ;;
 20384                           
 20385                           	psect	text103
 20386  004C66                     __ptext103:
 20387                           	opt stack 0
 20388  004C66                     _ComputeSessionKeys:
 20389                           	opt stack 16
 20390                           
 20391                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20392                           
 20393                           ; BSR set to: 0
 20394                           ;incstack = 0
 20395  004C66  0E32               	movlw	low (_loRa+50)
 20396  004C68  0100               	movlb	0	; () banked
 20397  004C6A  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20398  004C6C  0E02               	movlw	high (_loRa+50)
 20399  004C6E  D81C               	call	PL148	;call to abstracted procedure
 20400  004C70  ECED  F027         	call	_PrepareSessionKeys	;wreg free
 20401                           
 20402                           ; BSR set to: 0
 20403                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 20404  004C74  0E02               	movlw	2
 20405  004C76  0102               	movlb	2	; () banked
 20406  004C78  6F32               	movwf	(_loRa+50)& (0+255),b
 20407                           
 20408                           ; BSR set to: 2
 20409                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 20410  004C7A  0E32               	movlw	low (_loRa+50)
 20411  004C7C  0100               	movlb	0	; () banked
 20412  004C7E  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 20413  004C80  0E02               	movlw	high (_loRa+50)
 20414  004C82  D81F               	call	PL252	;call to abstracted procedure
 20415  004C84  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20419  004C88  0E22               	movlw	low (_loRa+34)
 20420  004C8A  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20421  004C8C  0E02               	movlw	high (_loRa+34)
 20422  004C8E  D80C               	call	PL148	;call to abstracted procedure
 20423  004C90  ECED  F027         	call	_PrepareSessionKeys	;wreg free
 20424                           
 20425                           ; BSR set to: 0
 20426                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 20427  004C94  0E01               	movlw	1
 20428  004C96  0102               	movlb	2	; () banked
 20429  004C98  6F22               	movwf	(_loRa+34)& (0+255),b
 20430                           
 20431                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 20432  004C9A  0E22               	movlw	low (_loRa+34)
 20433  004C9C  0100               	movlb	0	; () banked
 20434  004C9E  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 20435  004CA0  0E02               	movlw	high (_loRa+34)
 20436  004CA2  D80F               	call	PL252	;call to abstracted procedure
 20437  004CA4  EF7A  F02E         	goto	_AESEncodeLoRa	;wreg free
 20438  004CA8                     __end_of_ComputeSessionKeys:
 20439                           	opt stack 0
 20440  004CA8                     PL148:
 20441                           	opt stack 16
 20442  004CA8  6F6F               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 20443  004CAA  29A4               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20444  004CAC  6F70               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 20445  004CAE  0E00               	movlw	0
 20446  004CB0  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20447  004CB2  6F71               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 20448  004CB4  0E04               	movlw	4
 20449  004CB6  25A4               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20450  004CB8  6F72               	movwf	PrepareSessionKeys@networkId& (0+255),b
 20451  004CBA  0E00               	movlw	0
 20452  004CBC  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20453  004CBE  6F73               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 20454  004CC0  0012               	return	
 20455  004CC2                     __end_ofPL148:
 20456                           	opt stack 0
 20457  004CC2                     PL252:
 20458                           	opt stack 12
 20459  004CC2  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 20460  004CC4  0E42               	movlw	low (_loRa+66)
 20461  004CC6  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 20462  004CC8  0E02               	movlw	high (_loRa+66)
 20463  004CCA  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 20464  004CCC  0012               	return	
 20465  004CCE                     __end_ofPL252:
 20466                           	opt stack 0
 20467                           tosu	equ	0xFFF
 20468                           tosh	equ	0xFFE
 20469                           tosl	equ	0xFFD
 20470                           pclath	equ	0xFFA
 20471                           tblptru	equ	0xFF8
 20472                           tblptrh	equ	0xFF7
 20473                           tblptrl	equ	0xFF6
 20474                           tablat	equ	0xFF5
 20475                           prodh	equ	0xFF4
 20476                           prodl	equ	0xFF3
 20477                           intcon	equ	0xFF2
 20478                           indf0	equ	0xFEF
 20479                           postinc0	equ	0xFEE
 20480                           plusw0	equ	0xFEB
 20481                           fsr0h	equ	0xFEA
 20482                           fsr0l	equ	0xFE9
 20483                           wreg	equ	0xFE8
 20484                           postinc1	equ	0xFE6
 20485                           postdec1	equ	0xFE5
 20486                           plusw1	equ	0xFE3
 20487                           fsr1h	equ	0xFE2
 20488                           fsr1l	equ	0xFE1
 20489                           indf2	equ	0xFDF
 20490                           postinc2	equ	0xFDE
 20491                           postdec2	equ	0xFDD
 20492                           plusw2	equ	0xFDB
 20493                           fsr2h	equ	0xFDA
 20494                           fsr2l	equ	0xFD9
 20495                           status	equ	0xFD8
 20496                           
 20497 ;; *************** function _PrepareSessionKeys *****************
 20498 ;; Defined at:
 20499 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20500 ;; Parameters:    Size  Location     Type
 20501 ;;  sessionKey      2   14[BANK0 ] PTR unsigned char 
 20502 ;;		 -> loRa.activationParameters(105), loRa(245), 
 20503 ;;  appNonce        2   16[BANK0 ] PTR unsigned char 
 20504 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20505 ;;  networkId       2   18[BANK0 ] PTR unsigned char 
 20506 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20507 ;; Auto vars:     Size  Location     Type
 20508 ;;  index           1   20[BANK0 ] unsigned char 
 20509 ;; Return value:  Size  Location     Type
 20510 ;;                  1    wreg      void 
 20511 ;; Registers used:
 20512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20513 ;; Tracked objects:
 20514 ;;		On entry : F/0
 20515 ;;		On exit  : F/0
 20516 ;;		Unchanged: 0/0
 20517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20518 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20521 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20522 ;;Total ram usage:        7 bytes
 20523 ;; Hardware stack levels used:    1
 20524 ;; Hardware stack levels required when called:    8
 20525 ;; This function calls:
 20526 ;;		_memcpy
 20527 ;;		_memset
 20528 ;; This function is called by:
 20529 ;;		_ComputeSessionKeys
 20530 ;; This function uses a non-reentrant model
 20531 ;;
 20532                           
 20533                           	psect	text104
 20534  004FDA                     __ptext104:
 20535                           	opt stack 0
 20536  004FDA                     _PrepareSessionKeys:
 20537                           	opt stack 17
 20538                           
 20539                           ; BSR set to: 0
 20540                           ;lorawan.c: 2047: uint8_t index = 0;
 20541                           
 20542                           ; BSR set to: 0
 20543                           ;incstack = 0
 20544  004FDA  6B74               	clrf	PrepareSessionKeys@index& (0+255),b
 20545                           
 20546                           ; BSR set to: 0
 20547                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 20548  004FDC  C06E  F064         	movff	PrepareSessionKeys@sessionKey,memset@p1
 20549  004FE0  C06F  F065         	movff	PrepareSessionKeys@sessionKey+1,memset@p1+1
 20550  004FE4  ECF5  F021         	call	PL142	;call to abstracted procedure
 20551  004FE8  EC18  F02E         	call	_memset	;wreg free
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;lorawan.c: 2050: index ++;
 20555  004FEC  2B74               	incf	PrepareSessionKeys@index& (0+255),f,b
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 20559  004FEE  D818               	call	PL202	;call to abstracted procedure
 20560  004FF0  C070  F066         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 20561  004FF4  C071  F067         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 20562  004FF8  D81A               	call	PL448	;call to abstracted procedure
 20563  004FFA  ECA0  F028         	call	_memcpy	;wreg free
 20564                           
 20565                           ; BSR set to: 0
 20566                           ;lorawan.c: 2053: index = index + 3;
 20567  004FFE  0E03               	movlw	3
 20568  005000  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 20572  005002  D80E               	call	PL202	;call to abstracted procedure
 20573  005004  C072  F066         	movff	PrepareSessionKeys@networkId,memcpy@s1
 20574  005008  C073  F067         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 20575  00500C  D810               	call	PL448	;call to abstracted procedure
 20576  00500E  ECA0  F028         	call	_memcpy	;wreg free
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;lorawan.c: 2056: index = index + 3;
 20580  005012  0E03               	movlw	3
 20581  005014  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 20585  005016  D804               	call	PL202	;call to abstracted procedure
 20586  005018  ECA2  F017         	call	PL282	;call to abstracted procedure
 20587  00501C  EFA0  F028         	goto	_memcpy	;wreg free
 20588  005020                     __end_of_PrepareSessionKeys:
 20589                           	opt stack 0
 20590  005020                     PL202:
 20591                           	opt stack 17
 20592  005020  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20593  005022  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20594  005024  6F64               	movwf	memcpy@d1& (0+255),b
 20595  005026  0E00               	movlw	0
 20596  005028  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20597  00502A  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20598  00502C  0012               	return	
 20599  00502E                     __end_ofPL202:
 20600                           	opt stack 0
 20601  00502E                     PL448:
 20602                           	opt stack 17
 20603  00502E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20604  005030  0E03               	movlw	3
 20605  005032  6F68               	movwf	memcpy@n& (0+255),b
 20606  005034  0C03               	retlw	3
 20607  005036                     __end_ofPL448:
 20608                           	opt stack 0
 20609                           tosu	equ	0xFFF
 20610                           tosh	equ	0xFFE
 20611                           tosl	equ	0xFFD
 20612                           pclath	equ	0xFFA
 20613                           tblptru	equ	0xFF8
 20614                           tblptrh	equ	0xFF7
 20615                           tblptrl	equ	0xFF6
 20616                           tablat	equ	0xFF5
 20617                           prodh	equ	0xFF4
 20618                           prodl	equ	0xFF3
 20619                           intcon	equ	0xFF2
 20620                           indf0	equ	0xFEF
 20621                           postinc0	equ	0xFEE
 20622                           plusw0	equ	0xFEB
 20623                           fsr0h	equ	0xFEA
 20624                           fsr0l	equ	0xFE9
 20625                           wreg	equ	0xFE8
 20626                           postinc1	equ	0xFE6
 20627                           postdec1	equ	0xFE5
 20628                           plusw1	equ	0xFE3
 20629                           fsr1h	equ	0xFE2
 20630                           fsr1l	equ	0xFE1
 20631                           indf2	equ	0xFDF
 20632                           postinc2	equ	0xFDE
 20633                           postdec2	equ	0xFDD
 20634                           plusw2	equ	0xFDB
 20635                           fsr2h	equ	0xFDA
 20636                           fsr2l	equ	0xFD9
 20637                           status	equ	0xFD8
 20638                           
 20639 ;; *************** function _CheckMcastFlags *****************
 20640 ;; Defined at:
 20641 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20642 ;; Parameters:    Size  Location     Type
 20643 ;;  hdr             2    4[BANK0 ] PTR struct .
 20644 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20645 ;; Auto vars:     Size  Location     Type
 20646 ;;		None
 20647 ;; Return value:  Size  Location     Type
 20648 ;;                  1    wreg      unsigned char 
 20649 ;; Registers used:
 20650 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20651 ;; Tracked objects:
 20652 ;;		On entry : F/2
 20653 ;;		On exit  : D/0
 20654 ;;		Unchanged: 0/0
 20655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20660 ;;Total ram usage:        2 bytes
 20661 ;; Hardware stack levels used:    1
 20662 ;; Hardware stack levels required when called:    7
 20663 ;; This function calls:
 20664 ;;		Nothing
 20665 ;; This function is called by:
 20666 ;;		_LORAWAN_RxDone
 20667 ;; This function uses a non-reentrant model
 20668 ;;
 20669                           
 20670                           	psect	text105
 20671  0050E8                     __ptext105:
 20672                           	opt stack 0
 20673  0050E8                     _CheckMcastFlags:
 20674                           	opt stack 19
 20675                           
 20676                           ; BSR set to: 2
 20677                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 20678                           
 20679                           ; BSR set to: 0
 20680                           ;incstack = 0
 20681  0050E8  0100               	movlb	0	; () banked
 20682  0050EA  D823               	call	PL134	;call to abstracted procedure
 20683  0050EC  BADF               	btfsc	indf2,5,c
 20684  0050EE  0C00               	retlw	0
 20685                           
 20686                           ; BSR set to: 0
 20687  0050F0  D820               	call	PL134	;call to abstracted procedure
 20688  0050F2  BCDF               	btfsc	indf2,6,c
 20689  0050F4  0C00               	retlw	0
 20690                           
 20691                           ; BSR set to: 0
 20692  0050F6  C064  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 20693  0050FA  C065  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 20694  0050FE  38DF               	swapf	223,w,c
 20695  005100  32E8               	rrcf	wreg,f,c
 20696  005102  0B07               	andlw	7
 20697  005104  0A03               	xorlw	3
 20698  005106  E001               	bz	l14002
 20699                           
 20700                           ; BSR set to: 0
 20701                           ;lorawan.c: 2110: {
 20702                           ;lorawan.c: 2111: return 0;
 20703  005108  0C00               	retlw	0
 20704  00510A                     l14002:
 20705                           
 20706                           ; BSR set to: 0
 20707                           ;lorawan.c: 2112: }
 20708                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 20709  00510A  D813               	call	PL134	;call to abstracted procedure
 20710  00510C  50DF               	movf	223,w,c
 20711  00510E  0B0F               	andlw	15
 20712  005110  E001               	bz	l14010
 20713  005112  0C00               	retlw	0
 20714  005114                     l14010:
 20715                           
 20716                           ; BSR set to: 0
 20717                           ;lorawan.c: 2118: else
 20718                           ;lorawan.c: 2119: {
 20719                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 20720  005114  EE20 F008          	lfsr	2,8
 20721  005118  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20722  00511A  26D9               	addwf	fsr2l,f,c
 20723  00511C  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20724  00511E  22DA               	addwfc	fsr2h,f,c
 20725  005120  50DF               	movf	indf2,w,c
 20726  005122  E101               	bnz	l14016
 20727  005124  0C00               	retlw	0
 20728  005126                     l14016:
 20729                           
 20730                           ; BSR set to: 0
 20731                           ;lorawan.c: 2123: }
 20732                           ;lorawan.c: 2124: }
 20733                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 20734  005126  D805               	call	PL134	;call to abstracted procedure
 20735  005128  A8DF               	btfss	indf2,4,c
 20736  00512A  0C01               	retlw	1
 20737                           
 20738                           ; BSR set to: 0
 20739                           ;lorawan.c: 2127: {
 20740                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 20741  00512C  0102               	movlb	2	; () banked
 20742  00512E  8700               	bsf	_loRa& (0+255),3,b
 20743                           
 20744                           ;lorawan.c: 2129: }
 20745                           ;lorawan.c: 2131: return 1;
 20746  005130  0C01               	retlw	1	;funcret
 20747  005132                     __end_of_CheckMcastFlags:
 20748                           	opt stack 0
 20749  005132                     PL134:
 20750                           	opt stack 19
 20751  005132  EE20 F005          	lfsr	2,5
 20752  005136  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20753  005138  26D9               	addwf	fsr2l,f,c
 20754  00513A  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20755  00513C  22DA               	addwfc	fsr2h,f,c
 20756  00513E  0012               	return	
 20757  005140                     __end_ofPL134:
 20758                           	opt stack 0
 20759                           tosu	equ	0xFFF
 20760                           tosh	equ	0xFFE
 20761                           tosl	equ	0xFFD
 20762                           pclath	equ	0xFFA
 20763                           tblptru	equ	0xFF8
 20764                           tblptrh	equ	0xFF7
 20765                           tblptrl	equ	0xFF6
 20766                           tablat	equ	0xFF5
 20767                           prodh	equ	0xFF4
 20768                           prodl	equ	0xFF3
 20769                           intcon	equ	0xFF2
 20770                           indf0	equ	0xFEF
 20771                           postinc0	equ	0xFEE
 20772                           plusw0	equ	0xFEB
 20773                           fsr0h	equ	0xFEA
 20774                           fsr0l	equ	0xFE9
 20775                           wreg	equ	0xFE8
 20776                           postinc1	equ	0xFE6
 20777                           postdec1	equ	0xFE5
 20778                           plusw1	equ	0xFE3
 20779                           fsr1h	equ	0xFE2
 20780                           fsr1l	equ	0xFE1
 20781                           indf2	equ	0xFDF
 20782                           postinc2	equ	0xFDE
 20783                           postdec2	equ	0xFDD
 20784                           plusw2	equ	0xFDB
 20785                           fsr2h	equ	0xFDA
 20786                           fsr2l	equ	0xFD9
 20787                           status	equ	0xFD8
 20788                           
 20789 ;; *************** function _CheckFlags *****************
 20790 ;; Defined at:
 20791 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20792 ;; Parameters:    Size  Location     Type
 20793 ;;  hdr             2    4[BANK0 ] PTR struct .
 20794 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20795 ;; Auto vars:     Size  Location     Type
 20796 ;;		None
 20797 ;; Return value:  Size  Location     Type
 20798 ;;                  1    wreg      void 
 20799 ;; Registers used:
 20800 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20801 ;; Tracked objects:
 20802 ;;		On entry : F/2
 20803 ;;		On exit  : D/0
 20804 ;;		Unchanged: 0/0
 20805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20806 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20810 ;;Total ram usage:        2 bytes
 20811 ;; Hardware stack levels used:    1
 20812 ;; Hardware stack levels required when called:    7
 20813 ;; This function calls:
 20814 ;;		Nothing
 20815 ;; This function is called by:
 20816 ;;		_LORAWAN_RxDone
 20817 ;; This function uses a non-reentrant model
 20818 ;;
 20819                           
 20820                           	psect	text106
 20821  0054FE                     __ptext106:
 20822                           	opt stack 0
 20823  0054FE                     _CheckFlags:
 20824                           	opt stack 0
 20825                           
 20826                           ; BSR set to: 2
 20827                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 20828                           
 20829                           ;incstack = 0
 20830  0054FE  D81C               	call	PL164	;call to abstracted procedure
 20831  005500  AEDF               	btfss	indf2,7,c
 20832  005502  D002               	goto	l14050
 20833                           
 20834                           ; BSR set to: 0
 20835                           ;lorawan.c: 2077: {
 20836                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 20837  005504  0102               	movlb	2	; () banked
 20838  005506  8D02               	bsf	(_loRa+2)& (0+255),6,b
 20839  005508                     l14050:
 20840                           
 20841                           ;lorawan.c: 2079: }
 20842                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 20843  005508  D817               	call	PL164	;call to abstracted procedure
 20844  00550A  A8DF               	btfss	indf2,4,c
 20845  00550C  D002               	goto	l14054
 20846                           
 20847                           ; BSR set to: 0
 20848                           ;lorawan.c: 2082: {
 20849                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 20850  00550E  0102               	movlb	2	; () banked
 20851  005510  8700               	bsf	_loRa& (0+255),3,b
 20852  005512                     l14054:
 20853                           
 20854                           ;lorawan.c: 2084: }
 20855                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 20856  005512  D812               	call	PL164	;call to abstracted procedure
 20857  005514  ACDF               	btfss	indf2,6,c
 20858  005516  D002               	goto	l14058
 20859                           
 20860                           ; BSR set to: 0
 20861                           ;lorawan.c: 2087: {
 20862                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 20863  005518  0102               	movlb	2	; () banked
 20864  00551A  8900               	bsf	_loRa& (0+255),4,b
 20865  00551C                     l14058:
 20866                           
 20867                           ;lorawan.c: 2089: }
 20868                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 20869  00551C  C064  FFD9         	movff	CheckFlags@hdr,fsr2l
 20870  005520  C065  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 20871  005524  0100               	movlb	0	; () banked
 20872  005526  38DF               	swapf	223,w,c
 20873  005528  32E8               	rrcf	wreg,f,c
 20874  00552A  0B07               	andlw	7
 20875  00552C  0A05               	xorlw	5
 20876  00552E  A4D8               	btfss	status,2,c
 20877  005530  0012               	return	
 20878                           
 20879                           ; BSR set to: 0
 20880                           ;lorawan.c: 2092: {
 20881                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 20882  005532  0102               	movlb	2	; () banked
 20883  005534  8300               	bsf	_loRa& (0+255),1,b
 20884  005536  0012               	return		;funcret
 20885  005538                     __end_of_CheckFlags:
 20886                           	opt stack 0
 20887  005538                     PL164:
 20888                           	opt stack 19
 20889  005538  0100               	movlb	0	; () banked
 20890  00553A  EE20 F005          	lfsr	2,5
 20891  00553E  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20892  005540  26D9               	addwf	fsr2l,f,c
 20893  005542  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20894  005544  22DA               	addwfc	fsr2h,f,c
 20895  005546  0012               	return	
 20896  005548                     __end_ofPL164:
 20897                           	opt stack 0
 20898                           tosu	equ	0xFFF
 20899                           tosh	equ	0xFFE
 20900                           tosl	equ	0xFFD
 20901                           pclath	equ	0xFFA
 20902                           tblptru	equ	0xFF8
 20903                           tblptrh	equ	0xFF7
 20904                           tblptrl	equ	0xFF6
 20905                           tablat	equ	0xFF5
 20906                           prodh	equ	0xFF4
 20907                           prodl	equ	0xFF3
 20908                           intcon	equ	0xFF2
 20909                           indf0	equ	0xFEF
 20910                           postinc0	equ	0xFEE
 20911                           plusw0	equ	0xFEB
 20912                           fsr0h	equ	0xFEA
 20913                           fsr0l	equ	0xFE9
 20914                           wreg	equ	0xFE8
 20915                           postinc1	equ	0xFE6
 20916                           postdec1	equ	0xFE5
 20917                           plusw1	equ	0xFE3
 20918                           fsr1h	equ	0xFE2
 20919                           fsr1l	equ	0xFE1
 20920                           indf2	equ	0xFDF
 20921                           postinc2	equ	0xFDE
 20922                           postdec2	equ	0xFDD
 20923                           plusw2	equ	0xFDB
 20924                           fsr2h	equ	0xFDA
 20925                           fsr2l	equ	0xFD9
 20926                           status	equ	0xFD8
 20927                           
 20928 ;; *************** function _RADIO_FSKPacketSent *****************
 20929 ;; Defined at:
 20930 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 20931 ;; Parameters:    Size  Location     Type
 20932 ;;		None
 20933 ;; Auto vars:     Size  Location     Type
 20934 ;;  timeOnAir       4  120[BANK0 ] unsigned long 
 20935 ;;  irqFlags        1  128[BANK0 ] unsigned char 
 20936 ;; Return value:  Size  Location     Type
 20937 ;;                  1    wreg      void 
 20938 ;; Registers used:
 20939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20940 ;; Tracked objects:
 20941 ;;		On entry : F/0
 20942 ;;		On exit  : C/0
 20943 ;;		Unchanged: 0/0
 20944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 20945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20946 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20948 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20949 ;;Total ram usage:        9 bytes
 20950 ;; Hardware stack levels used:    1
 20951 ;; Hardware stack levels required when called:   15
 20952 ;; This function calls:
 20953 ;;		_LORAWAN_TxDone
 20954 ;;		_RADIO_RegisterRead
 20955 ;;		_RADIO_WriteMode
 20956 ;;		_SwTimerReadValue
 20957 ;;		_SwTimerStop
 20958 ;;		___lmul
 20959 ;; This function is called by:
 20960 ;;		_RADIO_DIO0
 20961 ;; This function uses a non-reentrant model
 20962 ;;
 20963                           
 20964                           	psect	text107
 20965  003364                     __ptext107:
 20966                           	opt stack 0
 20967  003364                     _RADIO_FSKPacketSent:
 20968                           	opt stack 13
 20969                           
 20970                           ; BSR set to: 0
 20971                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 20972                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 20973                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 20974                           
 20975                           ;incstack = 0
 20976  003364  0E3F               	movlw	63
 20977  003366  EC8D  F02E         	call	_RADIO_RegisterRead
 20978  00336A  6FE0               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 20979                           
 20980                           ; BSR set to: 0
 20981                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 20982  00336C  A7E0               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 20983  00336E  0012               	return	
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;radio_driver_SX1276.c: 1100: {
 20987                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20988  003370  D85C               	call	PL268	;call to abstracted procedure
 20989  003372  EC75  F01B         	call	_RADIO_WriteMode
 20990                           
 20991                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 20992  003376  0101               	movlb	1	; () banked
 20993  003378  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 20994                           
 20995                           ; BSR set to: 1
 20996                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 20997  00337A  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 20998  00337C  EC9E  F030         	call	_SwTimerStop
 20999                           
 21000                           ; BSR set to: 0
 21001                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 21002  003380  0101               	movlb	1	; () banked
 21003  003382  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 21004  003384  0012               	return	
 21005                           
 21006                           ; BSR set to: 1
 21007                           ;radio_driver_SX1276.c: 1107: {
 21008                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 21009  003386  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 21010  003388  ECF0  F02C         	call	_SwTimerReadValue
 21011  00338C  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 21012  00338E  E102               	bnz	u17380
 21013  003390  D851               	call	PL320	;call to abstracted procedure
 21014  003392  E30D               	bnc	l14946
 21015  003394                     u17380:
 21016                           
 21017                           ; BSR set to: 0
 21018  003394  0101               	movlb	1	; () banked
 21019  003396  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 21020  003398  ECF0  F02C         	call	_SwTimerReadValue
 21021  00339C  0E0D               	movlw	13
 21022  00339E  D001               	goto	u17390
 21023  0033A0                     u17395:
 21024  0033A0  D850               	call	PL350	;call to abstracted procedure
 21025  0033A2                     u17390:
 21026  0033A2  2EE8               	decfsz	wreg,f,c
 21027  0033A4  D7FD               	goto	u17395
 21028  0033A6  D82D               	call	PL38	;call to abstracted procedure
 21029  0033A8  EC34  F02A         	call	___lmul	;wreg free
 21030  0033AC  D00C               	goto	L11
 21031  0033AE                     l14946:
 21032                           
 21033                           ; BSR set to: 0
 21034  0033AE  0101               	movlb	1	; () banked
 21035  0033B0  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 21036  0033B2  ECF0  F02C         	call	_SwTimerReadValue
 21037  0033B6  D825               	call	PL38	;call to abstracted procedure
 21038  0033B8  EC34  F02A         	call	___lmul	;wreg free
 21039  0033BC  0E0D               	movlw	13
 21040  0033BE  D001               	goto	u17400
 21041  0033C0                     u17405:
 21042  0033C0  D82E               	call	PL238	;call to abstracted procedure
 21043  0033C2                     u17400:
 21044  0033C2  2EE8               	decfsz	wreg,f,c
 21045  0033C4  D7FD               	goto	u17405
 21046  0033C6                     L11:
 21047  0033C6  C094  F0DC         	movff	?___lmul,_RADIO_FSKPacketSent$1075
 21048  0033CA  C095  F0DD         	movff	?___lmul+1,_RADIO_FSKPacketSent$1075+1
 21049  0033CE  C096  F0DE         	movff	?___lmul+2,_RADIO_FSKPacketSent$1075+2
 21050  0033D2  C097  F0DF         	movff	?___lmul+3,_RADIO_FSKPacketSent$1075+3
 21051                           
 21052                           ; BSR set to: 0
 21053  0033D6  51DC               	movf	_RADIO_FSKPacketSent$1075& (0+255),w,b
 21054  0033D8  0820               	sublw	32
 21055  0033DA  6FD8               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 21056  0033DC  0E4E               	movlw	78
 21057  0033DE  55DD               	subfwb	(_RADIO_FSKPacketSent$1075+1)& (0+255),w,b
 21058  0033E0  6FD9               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 21059  0033E2  0E00               	movlw	0
 21060  0033E4  55DE               	subfwb	(_RADIO_FSKPacketSent$1075+2)& (0+255),w,b
 21061  0033E6  6FDA               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 21062  0033E8  0E00               	movlw	0
 21063  0033EA  55DF               	subfwb	(_RADIO_FSKPacketSent$1075+3)& (0+255),w,b
 21064  0033EC  6FDB               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 21065                           
 21066                           ; BSR set to: 0
 21067                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 21068  0033EE  0101               	movlb	1	; () banked
 21069  0033F0  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 21070  0033F2  EC9E  F030         	call	_SwTimerStop
 21071                           
 21072                           ; BSR set to: 0
 21073                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 21074  0033F6  C0D8  F0B4         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 21075  0033FA  C0D9  F0B5         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 21076  0033FE  EF75  F004         	goto	_LORAWAN_TxDone	;wreg free
 21077  003402                     __end_of_RADIO_FSKPacketSent:
 21078                           	opt stack 0
 21079  003402                     PL38:
 21080                           	opt stack 13
 21081  003402  C08B  F094         	movff	?_SwTimerReadValue,___lmul@multiplier
 21082  003406  C08C  F095         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 21083  00340A  C08D  F096         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 21084  00340E  C08E  F097         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 21085  003412  0E7D               	movlw	125
 21086  003414  6F98               	movwf	___lmul@multiplicand& (0+255),b
 21087  003416  6B99               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21088  003418  6B9A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21089  00341A  6B9B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21090  00341C  0C7D               	retlw	125
 21091  00341E                     __end_ofPL38:
 21092                           	opt stack 0
 21093  00341E                     PL238:
 21094                           	opt stack 13
 21095  00341E  90D8               	bcf	status,0,c
 21096  003420  3397               	rrcf	(?___lmul+3)& (0+255),f,b
 21097  003422  3396               	rrcf	(?___lmul+2)& (0+255),f,b
 21098  003424  3395               	rrcf	(?___lmul+1)& (0+255),f,b
 21099  003426  3394               	rrcf	?___lmul& (0+255),f,b
 21100  003428  0012               	return	
 21101  00342A                     __end_ofPL238:
 21102                           	opt stack 0
 21103  00342A                     PL268:
 21104                           	opt stack 12
 21105  00342A  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 21106  00342E  0E00               	movlw	0
 21107  003430  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 21108  003432  0C00               	retlw	0
 21109  003434                     __end_ofPL268:
 21110                           	opt stack 0
 21111  003434                     PL320:
 21112                           	opt stack 13
 21113  003434  0E1F               	movlw	31
 21114  003436  5D8B               	subwf	?_SwTimerReadValue& (0+255),w,b
 21115  003438  0EAC               	movlw	172
 21116  00343A  598C               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 21117  00343C  0EDF               	movlw	223
 21118  00343E  598D               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 21119  003440  0012               	return	
 21120  003442                     __end_ofPL320:
 21121                           	opt stack 0
 21122  003442                     PL350:
 21123                           	opt stack 13
 21124  003442  90D8               	bcf	status,0,c
 21125  003444  338E               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 21126  003446  338D               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 21127  003448  338C               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 21128  00344A  338B               	rrcf	?_SwTimerReadValue& (0+255),f,b
 21129  00344C  0012               	return	
 21130  00344E                     __end_ofPL350:
 21131                           	opt stack 0
 21132                           tosu	equ	0xFFF
 21133                           tosh	equ	0xFFE
 21134                           tosl	equ	0xFFD
 21135                           pclath	equ	0xFFA
 21136                           tblptru	equ	0xFF8
 21137                           tblptrh	equ	0xFF7
 21138                           tblptrl	equ	0xFF6
 21139                           tablat	equ	0xFF5
 21140                           prodh	equ	0xFF4
 21141                           prodl	equ	0xFF3
 21142                           intcon	equ	0xFF2
 21143                           indf0	equ	0xFEF
 21144                           postinc0	equ	0xFEE
 21145                           plusw0	equ	0xFEB
 21146                           fsr0h	equ	0xFEA
 21147                           fsr0l	equ	0xFE9
 21148                           wreg	equ	0xFE8
 21149                           postinc1	equ	0xFE6
 21150                           postdec1	equ	0xFE5
 21151                           plusw1	equ	0xFE3
 21152                           fsr1h	equ	0xFE2
 21153                           fsr1l	equ	0xFE1
 21154                           indf2	equ	0xFDF
 21155                           postinc2	equ	0xFDE
 21156                           postdec2	equ	0xFDD
 21157                           plusw2	equ	0xFDB
 21158                           fsr2h	equ	0xFDA
 21159                           fsr2l	equ	0xFD9
 21160                           status	equ	0xFD8
 21161                           
 21162 ;; *************** function _LORAWAN_TxDone *****************
 21163 ;; Defined at:
 21164 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 21165 ;; Parameters:    Size  Location     Type
 21166 ;;  timeOnAir       2   84[BANK0 ] unsigned int 
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;  minim           4  115[BANK0 ] unsigned long 
 21169 ;;  ticks           4  111[BANK0 ] unsigned long 
 21170 ;;  delta           4  103[BANK0 ] unsigned long 
 21171 ;;  i               1  119[BANK0 ] unsigned char 
 21172 ;;  found           1  102[BANK0 ] unsigned char 
 21173 ;; Return value:  Size  Location     Type
 21174 ;;                  1    wreg      void 
 21175 ;; Registers used:
 21176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21177 ;; Tracked objects:
 21178 ;;		On entry : E/1
 21179 ;;		On exit  : C/0
 21180 ;;		Unchanged: 0/0
 21181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 21182 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21183 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21184 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21185 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21186 ;;Total ram usage:       36 bytes
 21187 ;; Hardware stack levels used:    1
 21188 ;; Hardware stack levels required when called:   14
 21189 ;; This function calls:
 21190 ;;		_LORAWAN_EnterContinuousReceive
 21191 ;;		_RADIO_GetStatus
 21192 ;;		_RxDataDone
 21193 ;;		_SwTimerIsRunning
 21194 ;;		_SwTimerReadValue
 21195 ;;		_SwTimerSetTimeout
 21196 ;;		_SwTimerStart
 21197 ;;		_SwTimerStop
 21198 ;;		___lldiv
 21199 ;;		___lmul
 21200 ;; This function is called by:
 21201 ;;		_RADIO_TxDone
 21202 ;;		_RADIO_FSKPacketSent
 21203 ;;		_RADIO_WatchdogTimeout
 21204 ;; This function uses a non-reentrant model
 21205 ;;
 21206                           
 21207                           	psect	text108
 21208  0008EA                     __ptext108:
 21209                           	opt stack 0
 21210  0008EA                     _LORAWAN_TxDone:
 21211                           	opt stack 13
 21212                           
 21213                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 21214                           
 21215                           ;incstack = 0
 21216  0008EA  0102               	movlb	2	; () banked
 21217  0008EC  B103               	btfsc	(_loRa+3)& (0+255),0,b
 21218  0008EE  D1D2               	goto	l14700
 21219                           
 21220                           ; BSR set to: 2
 21221                           ;lorawan_eu.c: 368: {
 21222                           ;lorawan_eu.c: 369: bool found = 0;
 21223  0008F0  0100               	movlb	0	; () banked
 21224  0008F2  6BC6               	clrf	LORAWAN_TxDone@found& (0+255),b
 21225                           
 21226                           ;lorawan_eu.c: 370: uint8_t i;
 21227                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 21228  0008F4  6BC7               	clrf	LORAWAN_TxDone@delta& (0+255),b
 21229  0008F6  6BC8               	clrf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21230  0008F8  6BC9               	clrf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21231  0008FA  6BCA               	clrf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21232  0008FC  69D3               	setf	LORAWAN_TxDone@minim& (0+255),b
 21233  0008FE  69D4               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 21234  000900  69D5               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 21235  000902  69D6               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 21236                           
 21237                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 21238  000904  0102               	movlb	2	; () banked
 21239  000906  6BF1               	clrf	(_loRa+241)& (0+255),b
 21240                           
 21241                           ; BSR set to: 2
 21242                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 21243  000908  5102               	movf	(_loRa+2)& (0+255),w,b
 21244  00090A  0BF0               	andlw	-16
 21245  00090C  0902               	iorlw	2
 21246  00090E  6F02               	movwf	(_loRa+2)& (0+255),b
 21247                           
 21248                           ; BSR set to: 2
 21249                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 21250  000910  C2DA  F0D7         	movff	_loRa+218,LORAWAN_TxDone@i
 21251                           
 21252                           ; BSR set to: 2
 21253                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 21254  000914  A500               	btfss	_loRa& (0+255),2,b
 21255  000916  D038               	goto	l14634
 21256                           
 21257                           ; BSR set to: 2
 21258                           ;lorawan_eu.c: 382: {
 21259                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21260  000918  0E7D               	movlw	low _rxWindowOffset
 21261  00091A  2517               	addwf	(_loRa+23)& (0+255),w,b
 21262  00091C  DA2F               	call	PL66	;call to abstracted procedure
 21263  00091E  DA0D               	call	PL48	;call to abstracted procedure
 21264  000920  CFF5 F0B6          	movff	tablat,??_LORAWAN_TxDone
 21265  000924  5198               	movf	(_loRa+152)& (0+255),w,b
 21266  000926  DA33               	call	PL98	;call to abstracted procedure
 21267  000928  2199               	addwfc	(_loRa+153)& (0+255),w,b
 21268  00092A  D9E3               	call	PL8	;call to abstracted procedure
 21269  00092C  EC55  F025         	call	___lldiv	;wreg free
 21270  000930  D9FA               	call	PL22	;call to abstracted procedure
 21271  000932  51E2               	movf	(_loRa+226)& (0+255),w,b
 21272  000934  EC4F  F02C         	call	_SwTimerSetTimeout
 21273                           
 21274                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21275  000938  DA3A               	call	PL138	;call to abstracted procedure
 21276  00093A  DA20               	call	PL66	;call to abstracted procedure
 21277  00093C  D9FE               	call	PL48	;call to abstracted procedure
 21278  00093E  CFF5 F0B6          	movff	tablat,??_LORAWAN_TxDone
 21279  000942  519A               	movf	(_loRa+154)& (0+255),w,b
 21280  000944  DA24               	call	PL98	;call to abstracted procedure
 21281  000946  219B               	addwfc	(_loRa+155)& (0+255),w,b
 21282  000948  D9D4               	call	PL8	;call to abstracted procedure
 21283  00094A  EC55  F025         	call	___lldiv	;wreg free
 21284  00094E  D9EB               	call	PL22	;call to abstracted procedure
 21285  000950  51E3               	movf	(_loRa+227)& (0+255),w,b
 21286  000952  EC4F  F02C         	call	_SwTimerSetTimeout
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 21290  000956  0102               	movlb	2	; () banked
 21291  000958  51E2               	movf	(_loRa+226)& (0+255),w,b
 21292  00095A  ECFE  F025         	call	_SwTimerStart
 21293                           
 21294                           ; BSR set to: 0
 21295                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 21296  00095E  0102               	movlb	2	; () banked
 21297  000960  51E3               	movf	(_loRa+227)& (0+255),w,b
 21298  000962  ECFE  F025         	call	_SwTimerStart
 21299                           
 21300                           ; BSR set to: 0
 21301                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21302  000966  C2DB  F094         	movff	_loRa+219,___lmul@multiplier
 21303  00096A  C2DC  F095         	movff	_loRa+220,___lmul@multiplier+1
 21304  00096E  6B96               	clrf	(___lmul@multiplier+2)& (0+255),b
 21305  000970  6B97               	clrf	(___lmul@multiplier+3)& (0+255),b
 21306  000972  0ED6               	movlw	214
 21307  000974  6F98               	movwf	___lmul@multiplicand& (0+255),b
 21308  000976  0E0B               	movlw	11
 21309  000978  ECE4  F008         	call	PL450	;call to abstracted procedure
 21310  00097C  EC34  F02A         	call	___lmul	;wreg free
 21311                           
 21312                           ; BSR set to: 0
 21313                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21314  000980  D9E2               	call	PL60	;call to abstracted procedure
 21315  000982  EC34  F02A         	call	___lmul	;wreg free
 21316  000986  D04C               	goto	L12
 21317  000988                     l14634:
 21318                           
 21319                           ; BSR set to: 2
 21320                           ;lorawan_eu.c: 390: else
 21321                           ;lorawan_eu.c: 391: {
 21322                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21323  000988  0E7D               	movlw	low _rxWindowOffset
 21324  00098A  2517               	addwf	(_loRa+23)& (0+255),w,b
 21325  00098C  D9F7               	call	PL66	;call to abstracted procedure
 21326  00098E  D9D5               	call	PL48	;call to abstracted procedure
 21327  000990  CFF5 F0B6          	movff	tablat,??_LORAWAN_TxDone
 21328  000994  5194               	movf	(_loRa+148)& (0+255),w,b
 21329  000996  D9FB               	call	PL98	;call to abstracted procedure
 21330  000998  2195               	addwfc	(_loRa+149)& (0+255),w,b
 21331  00099A  D9AB               	call	PL8	;call to abstracted procedure
 21332  00099C  EC55  F025         	call	___lldiv	;wreg free
 21333  0009A0  D9C2               	call	PL22	;call to abstracted procedure
 21334  0009A2  51E4               	movf	(_loRa+228)& (0+255),w,b
 21335  0009A4  EC4F  F02C         	call	_SwTimerSetTimeout
 21336                           
 21337                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21338  0009A8  DA02               	call	PL138	;call to abstracted procedure
 21339  0009AA  D9E8               	call	PL66	;call to abstracted procedure
 21340  0009AC  D9C6               	call	PL48	;call to abstracted procedure
 21341  0009AE  CFF5 F0B6          	movff	tablat,??_LORAWAN_TxDone
 21342  0009B2  5196               	movf	(_loRa+150)& (0+255),w,b
 21343  0009B4  D9EC               	call	PL98	;call to abstracted procedure
 21344  0009B6  2197               	addwfc	(_loRa+151)& (0+255),w,b
 21345  0009B8  D99C               	call	PL8	;call to abstracted procedure
 21346  0009BA  EC55  F025         	call	___lldiv	;wreg free
 21347  0009BE  D9B3               	call	PL22	;call to abstracted procedure
 21348  0009C0  51E5               	movf	(_loRa+229)& (0+255),w,b
 21349  0009C2  EC4F  F02C         	call	_SwTimerSetTimeout
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 21353  0009C6  0102               	movlb	2	; () banked
 21354  0009C8  51E4               	movf	(_loRa+228)& (0+255),w,b
 21355  0009CA  ECFE  F025         	call	_SwTimerStart
 21356                           
 21357                           ; BSR set to: 0
 21358                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 21359  0009CE  0102               	movlb	2	; () banked
 21360  0009D0  5112               	movf	(_loRa+18)& (0+255),w,b
 21361  0009D2  E103               	bnz	l1043
 21362                           
 21363                           ; BSR set to: 2
 21364                           ;lorawan_eu.c: 396: {
 21365                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 21366  0009D4  51E5               	movf	(_loRa+229)& (0+255),w,b
 21367  0009D6  ECFE  F025         	call	_SwTimerStart
 21368  0009DA                     l1043:
 21369                           
 21370                           ;lorawan_eu.c: 398: }
 21371                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21372  0009DA  0100               	movlb	0	; () banked
 21373  0009DC  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21374  0009DE  D9DF               	call	PL104	;call to abstracted procedure
 21375  0009E0  CFDE F0B6          	movff	postinc2,??_LORAWAN_TxDone
 21376  0009E4  CFDD F0B7          	movff	postdec2,??_LORAWAN_TxDone+1
 21377  0009E8  51B6               	movf	??_LORAWAN_TxDone& (0+255),w,b
 21378  0009EA  6FB8               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21379  0009EC  51B7               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21380  0009EE  6FB9               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21381  0009F0  6BBA               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21382  0009F2  6BBB               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 21383  0009F4  29B8               	incf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21384  0009F6  6F94               	movwf	___lmul@multiplier& (0+255),b
 21385  0009F8  0E00               	movlw	0
 21386  0009FA  21B9               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21387  0009FC  6F95               	movwf	(___lmul@multiplier+1)& (0+255),b
 21388  0009FE  0E00               	movlw	0
 21389  000A00  21BA               	addwfc	(??_LORAWAN_TxDone+4)& (0+255),w,b
 21390  000A02  6F96               	movwf	(___lmul@multiplier+2)& (0+255),b
 21391  000A04  0E00               	movlw	0
 21392  000A06  21BB               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 21393  000A08  6F97               	movwf	(___lmul@multiplier+3)& (0+255),b
 21394  000A0A  C2DB  F098         	movff	_loRa+219,___lmul@multiplicand
 21395  000A0E  C2DC  F099         	movff	_loRa+220,___lmul@multiplicand+1
 21396  000A12  6B9A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21397  000A14  6B9B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21398  000A16  EC34  F02A         	call	___lmul	;wreg free
 21399                           
 21400                           ;lorawan_eu.c: 398: }
 21401                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21402  000A1A  D995               	call	PL60	;call to abstracted procedure
 21403  000A1C  EC34  F02A         	call	___lmul	;wreg free
 21404  000A20                     L12:
 21405  000A20  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21406  000A22  D95F               	call	PL4	;call to abstracted procedure
 21407  000A24  C094  FFDE         	movff	?___lmul,postinc2
 21408  000A28  C095  FFDE         	movff	?___lmul+1,postinc2
 21409  000A2C  C096  FFDE         	movff	?___lmul+2,postinc2
 21410  000A30  C097  FFDE         	movff	?___lmul+3,postinc2
 21411                           
 21412                           ; BSR set to: 0
 21413                           ;lorawan_eu.c: 401: }
 21414                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 21415  000A34  0102               	movlb	2	; () banked
 21416  000A36  51E9               	movf	(_loRa+233)& (0+255),w,b
 21417  000A38  EC5A  F030         	call	_SwTimerIsRunning
 21418  000A3C  0900               	iorlw	0
 21419  000A3E  E065               	bz	l14652
 21420                           
 21421                           ; BSR set to: 0
 21422                           ;lorawan_eu.c: 404: {
 21423                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 21424  000A40  0102               	movlb	2	; () banked
 21425  000A42  51E9               	movf	(_loRa+233)& (0+255),w,b
 21426  000A44  EC9E  F030         	call	_SwTimerStop
 21427                           
 21428                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 21429  000A48  0102               	movlb	2	; () banked
 21430  000A4A  51E9               	movf	(_loRa+233)& (0+255),w,b
 21431  000A4C  ECF0  F02C         	call	_SwTimerReadValue
 21432  000A50  C08B  F0CF         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 21433  000A54  C08C  F0D0         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 21434  000A58  C08D  F0D1         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 21435  000A5C  C08E  F0D2         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 21436                           
 21437                           ; BSR set to: 0
 21438                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 21439  000A60  51D2               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 21440  000A62  E107               	bnz	u16950
 21441  000A64  0E1F               	movlw	31
 21442  000A66  5DCF               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 21443  000A68  0EAC               	movlw	172
 21444  000A6A  59D0               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 21445  000A6C  0EDF               	movlw	223
 21446  000A6E  59D1               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 21447  000A70  E31E               	bnc	l14648
 21448  000A72                     u16950:
 21449                           
 21450                           ; BSR set to: 0
 21451  000A72  C0CF  F0B6         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21452  000A76  C0D0  F0B7         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21453  000A7A  C0D1  F0B8         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21454  000A7E  C0D2  F0B9         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21455  000A82  0E0D               	movlw	13
 21456  000A84  D005               	goto	u16960
 21457  000A86                     u16965:
 21458  000A86  90D8               	bcf	status,0,c
 21459  000A88  33B9               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21460  000A8A  33B8               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21461  000A8C  33B7               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21462  000A8E  33B6               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 21463  000A90                     u16960:
 21464  000A90  2EE8               	decfsz	wreg,f,c
 21465  000A92  D7F9               	goto	u16965
 21466  000A94  C0B6  F094         	movff	??_LORAWAN_TxDone,___lmul@multiplier
 21467  000A98  C0B7  F095         	movff	??_LORAWAN_TxDone+1,___lmul@multiplier+1
 21468  000A9C  C0B8  F096         	movff	??_LORAWAN_TxDone+2,___lmul@multiplier+2
 21469  000AA0  C0B9  F097         	movff	??_LORAWAN_TxDone+3,___lmul@multiplier+3
 21470  000AA4  0E7D               	movlw	125
 21471  000AA6  D96E               	call	PL88	;call to abstracted procedure
 21472  000AA8  EC34  F02A         	call	___lmul	;wreg free
 21473  000AAC  D012               	goto	L13
 21474  000AAE                     l14648:
 21475                           
 21476                           ; BSR set to: 0
 21477  000AAE  C0CF  F094         	movff	LORAWAN_TxDone@ticks,___lmul@multiplier
 21478  000AB2  C0D0  F095         	movff	LORAWAN_TxDone@ticks+1,___lmul@multiplier+1
 21479  000AB6  C0D1  F096         	movff	LORAWAN_TxDone@ticks+2,___lmul@multiplier+2
 21480  000ABA  C0D2  F097         	movff	LORAWAN_TxDone@ticks+3,___lmul@multiplier+3
 21481  000ABE  0E7D               	movlw	125
 21482  000AC0  D961               	call	PL88	;call to abstracted procedure
 21483  000AC2  EC34  F02A         	call	___lmul	;wreg free
 21484  000AC6  0E0D               	movlw	13
 21485  000AC8  D002               	goto	u16970
 21486  000ACA                     u16975:
 21487  000ACA  EC0F  F01A         	call	PL238	;call to abstracted procedure
 21488  000ACE                     u16970:
 21489  000ACE  2EE8               	decfsz	wreg,f,c
 21490  000AD0  D7FC               	goto	u16975
 21491  000AD2                     L13:
 21492  000AD2  C094  F0BE         	movff	?___lmul,_LORAWAN_TxDone$1952
 21493  000AD6  C095  F0BF         	movff	?___lmul+1,_LORAWAN_TxDone$1952+1
 21494  000ADA  C096  F0C0         	movff	?___lmul+2,_LORAWAN_TxDone$1952+2
 21495  000ADE  C097  F0C1         	movff	?___lmul+3,_LORAWAN_TxDone$1952+3
 21496                           
 21497                           ; BSR set to: 0
 21498  000AE2  51BE               	movf	_LORAWAN_TxDone$1952& (0+255),w,b
 21499  000AE4  0102               	movlb	2	; () banked
 21500  000AE6  5DC8               	subwf	(_loRa+200)& (0+255),w,b
 21501  000AE8  0100               	movlb	0	; () banked
 21502  000AEA  6FC7               	movwf	LORAWAN_TxDone@delta& (0+255),b
 21503  000AEC  51BF               	movf	(_LORAWAN_TxDone$1952+1)& (0+255),w,b
 21504  000AEE  0102               	movlb	2	; () banked
 21505  000AF0  59C9               	subwfb	(_loRa+201)& (0+255),w,b
 21506  000AF2  0100               	movlb	0	; () banked
 21507  000AF4  6FC8               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21508  000AF6  51C0               	movf	(_LORAWAN_TxDone$1952+2)& (0+255),w,b
 21509  000AF8  0102               	movlb	2	; () banked
 21510  000AFA  59CA               	subwfb	(_loRa+202)& (0+255),w,b
 21511  000AFC  0100               	movlb	0	; () banked
 21512  000AFE  6FC9               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21513  000B00  51C1               	movf	(_LORAWAN_TxDone$1952+3)& (0+255),w,b
 21514  000B02  0102               	movlb	2	; () banked
 21515  000B04  59CB               	subwfb	(_loRa+203)& (0+255),w,b
 21516  000B06  0100               	movlb	0	; () banked
 21517  000B08  6FCA               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21518  000B0A                     l14652:
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;lorawan_eu.c: 409: }
 21522                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 21523  000B0A  6BD7               	clrf	LORAWAN_TxDone@i& (0+255),b
 21524  000B0C                     l14658:
 21525                           
 21526                           ; BSR set to: 0
 21527                           ;lorawan_eu.c: 412: {
 21528                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 21529  000B0C  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21530  000B0E  ECB7  F021         	call	PL12	;call to abstracted procedure
 21531  000B12  E157               	bnz	l14676
 21532                           
 21533                           ; BSR set to: 0
 21534  000B14  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21535  000B16  D8E5               	call	PL4	;call to abstracted procedure
 21536  000B18  ECDD  F00E         	call	PL140	;call to abstracted procedure
 21537  000B1C  E052               	bz	l14676
 21538                           
 21539                           ; BSR set to: 0
 21540                           ;lorawan_eu.c: 414: {
 21541                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 21542  000B1E  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21543  000B20  0102               	movlb	2	; () banked
 21544  000B22  19DA               	xorwf	(_loRa+218)& (0+255),w,b
 21545  000B24  E031               	bz	l1052
 21546                           
 21547                           ; BSR set to: 2
 21548                           ;lorawan_eu.c: 416: {
 21549                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 21550  000B26  0100               	movlb	0	; () banked
 21551  000B28  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21552  000B2A  D8DB               	call	PL4	;call to abstracted procedure
 21553  000B2C  50DE               	movf	postinc2,w,c
 21554  000B2E  5DC7               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 21555  000B30  50DE               	movf	postinc2,w,c
 21556  000B32  59C8               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21557  000B34  50DE               	movf	postinc2,w,c
 21558  000B36  59C9               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21559  000B38  50DE               	movf	postinc2,w,c
 21560  000B3A  59CA               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21561  000B3C  E221               	bc	l14668
 21562                           
 21563                           ; BSR set to: 0
 21564                           ;lorawan_eu.c: 418: {
 21565                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 21566  000B3E  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21567  000B40  D8D0               	call	PL4	;call to abstracted procedure
 21568  000B42  CFDE F0B6          	movff	postinc2,??_LORAWAN_TxDone
 21569  000B46  CFDE F0B7          	movff	postinc2,??_LORAWAN_TxDone+1
 21570  000B4A  CFDE F0B8          	movff	postinc2,??_LORAWAN_TxDone+2
 21571  000B4E  CFDE F0B9          	movff	postinc2,??_LORAWAN_TxDone+3
 21572  000B52  51C7               	movf	LORAWAN_TxDone@delta& (0+255),w,b
 21573  000B54  5DB6               	subwf	??_LORAWAN_TxDone& (0+255),w,b
 21574  000B56  6FBA               	movwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21575  000B58  51C8               	movf	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21576  000B5A  59B7               	subwfb	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21577  000B5C  6FBB               	movwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21578  000B5E  51C9               	movf	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21579  000B60  59B8               	subwfb	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21580  000B62  6FBC               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21581  000B64  51CA               	movf	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21582  000B66  59B9               	subwfb	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21583  000B68  6FBD               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21584  000B6A  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21585  000B6C  D8BA               	call	PL4	;call to abstracted procedure
 21586  000B6E  C0BA  FFDE         	movff	??_LORAWAN_TxDone+4,postinc2
 21587  000B72  C0BB  FFDE         	movff	??_LORAWAN_TxDone+5,postinc2
 21588  000B76  C0BC  FFDE         	movff	??_LORAWAN_TxDone+6,postinc2
 21589  000B7A  C0BD  FFDE         	movff	??_LORAWAN_TxDone+7,postinc2
 21590                           
 21591                           ;lorawan_eu.c: 420: }
 21592  000B7E  D004               	goto	l1052
 21593  000B80                     l14668:
 21594                           
 21595                           ; BSR set to: 0
 21596                           ;lorawan_eu.c: 421: else
 21597                           ;lorawan_eu.c: 422: {
 21598                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 21599  000B80  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21600  000B82  D8AF               	call	PL4	;call to abstracted procedure
 21601  000B84  ECCF  F01D         	call	PL184	;call to abstracted procedure
 21602  000B88                     l1052:
 21603                           
 21604                           ;lorawan_eu.c: 424: }
 21605                           ;lorawan_eu.c: 425: }
 21606                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 21607  000B88  0100               	movlb	0	; () banked
 21608  000B8A  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21609  000B8C  D8AA               	call	PL4	;call to abstracted procedure
 21610  000B8E  50DE               	movf	postinc2,w,c
 21611  000B90  5DD3               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 21612  000B92  50DE               	movf	postinc2,w,c
 21613  000B94  59D4               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21614  000B96  50DE               	movf	postinc2,w,c
 21615  000B98  59D5               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21616  000B9A  50DE               	movf	postinc2,w,c
 21617  000B9C  59D6               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21618  000B9E  E311               	bnc	l14676
 21619                           
 21620                           ; BSR set to: 0
 21621  000BA0  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21622  000BA2  D89F               	call	PL4	;call to abstracted procedure
 21623  000BA4  ECDD  F00E         	call	PL140	;call to abstracted procedure
 21624  000BA8  E00C               	bz	l14676
 21625                           
 21626                           ; BSR set to: 0
 21627                           ;lorawan_eu.c: 427: {
 21628                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 21629  000BAA  51D7               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21630  000BAC  D89A               	call	PL4	;call to abstracted procedure
 21631  000BAE  CFDE F0D3          	movff	postinc2,LORAWAN_TxDone@minim
 21632  000BB2  CFDE F0D4          	movff	postinc2,LORAWAN_TxDone@minim+1
 21633  000BB6  CFDE F0D5          	movff	postinc2,LORAWAN_TxDone@minim+2
 21634  000BBA  CFDE F0D6          	movff	postinc2,LORAWAN_TxDone@minim+3
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;lorawan_eu.c: 429: found = 1;
 21638  000BBE  0E01               	movlw	1
 21639  000BC0  6FC6               	movwf	LORAWAN_TxDone@found& (0+255),b
 21640  000BC2                     l14676:
 21641                           
 21642                           ; BSR set to: 0
 21643  000BC2  2BD7               	incf	LORAWAN_TxDone@i& (0+255),f,b
 21644                           
 21645                           ; BSR set to: 0
 21646  000BC4  0E0F               	movlw	15
 21647  000BC6  65D7               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 21648  000BC8  D7A1               	goto	l14658
 21649                           
 21650                           ; BSR set to: 0
 21651                           ;lorawan_eu.c: 430: }
 21652                           ;lorawan_eu.c: 431: }
 21653                           ;lorawan_eu.c: 432: }
 21654                           ;lorawan_eu.c: 433: if (found == 1)
 21655  000BCA  05C6               	decf	LORAWAN_TxDone@found& (0+255),w,b
 21656  000BCC  E158               	bnz	l14694
 21657                           
 21658                           ; BSR set to: 0
 21659                           ;lorawan_eu.c: 434: {
 21660                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 21661  000BCE  C0D3  F2C8         	movff	LORAWAN_TxDone@minim,_loRa+200
 21662  000BD2  C0D4  F2C9         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 21663  000BD6  C0D5  F2CA         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 21664  000BDA  C0D6  F2CB         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 21665                           
 21666                           ; BSR set to: 0
 21667                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 21668  000BDE  51D6               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21669  000BE0  E106               	bnz	u17060
 21670  000BE2  29D3               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 21671  000BE4  0EFF               	movlw	255
 21672  000BE6  59D4               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21673  000BE8  0E0F               	movlw	15
 21674  000BEA  59D5               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21675  000BEC  E313               	bnc	l14688
 21676  000BEE                     u17060:
 21677                           
 21678                           ; BSR set to: 0
 21679  000BEE  C0D3  F064         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 21680  000BF2  C0D4  F065         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 21681  000BF6  C0D5  F066         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 21682  000BFA  C0D6  F067         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 21683  000BFE  0E7D               	movlw	125
 21684  000C00  EC99  F011         	call	PL32	;call to abstracted procedure
 21685  000C04  EC55  F025         	call	___lldiv	;wreg free
 21686  000C08  0E0C               	movlw	12
 21687  000C0A                     u17075:
 21688  000C0A  ECA7  F011         	call	PL196	;call to abstracted procedure
 21689  000C0E  2EE8               	decfsz	wreg,f,c
 21690  000C10  D7FC               	goto	u17075
 21691  000C12  D01D               	goto	L14
 21692  000C14                     l14688:
 21693                           
 21694                           ; BSR set to: 0
 21695  000C14  C0D3  F0B6         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 21696  000C18  C0D4  F0B7         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 21697  000C1C  C0D5  F0B8         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 21698  000C20  C0D6  F0B9         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 21699  000C24  0E0C               	movlw	12
 21700  000C26                     u17085:
 21701  000C26  90D8               	bcf	status,0,c
 21702  000C28  37B6               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 21703  000C2A  37B7               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21704  000C2C  37B8               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21705  000C2E  37B9               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21706  000C30  2EE8               	decfsz	wreg,f,c
 21707  000C32  D7F9               	goto	u17085
 21708  000C34  C0B6  F064         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 21709  000C38  C0B7  F065         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 21710  000C3C  C0B8  F066         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 21711  000C40  C0B9  F067         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 21712  000C44  0E7D               	movlw	125
 21713  000C46  EC99  F011         	call	PL32	;call to abstracted procedure
 21714  000C4A  EC55  F025         	call	___lldiv	;wreg free
 21715  000C4E                     L14:
 21716  000C4E  C064  F0C2         	movff	?___lldiv,_LORAWAN_TxDone$1953
 21717  000C52  C065  F0C3         	movff	?___lldiv+1,_LORAWAN_TxDone$1953+1
 21718  000C56  C066  F0C4         	movff	?___lldiv+2,_LORAWAN_TxDone$1953+2
 21719  000C5A  C067  F0C5         	movff	?___lldiv+3,_LORAWAN_TxDone$1953+3
 21720                           
 21721                           ; BSR set to: 0
 21722  000C5E  C0C2  F071         	movff	_LORAWAN_TxDone$1953,SwTimerSetTimeout@timeout
 21723  000C62  C0C3  F072         	movff	_LORAWAN_TxDone$1953+1,SwTimerSetTimeout@timeout+1
 21724  000C66  C0C4  F073         	movff	_LORAWAN_TxDone$1953+2,SwTimerSetTimeout@timeout+2
 21725  000C6A  C0C5  F074         	movff	_LORAWAN_TxDone$1953+3,SwTimerSetTimeout@timeout+3
 21726  000C6E  0102               	movlb	2	; () banked
 21727  000C70  51E9               	movf	(_loRa+233)& (0+255),w,b
 21728  000C72  EC4F  F02C         	call	_SwTimerSetTimeout
 21729                           
 21730                           ; BSR set to: 0
 21731                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 21732  000C76  0102               	movlb	2	; () banked
 21733  000C78  51E9               	movf	(_loRa+233)& (0+255),w,b
 21734  000C7A  ECFE  F025         	call	_SwTimerStart
 21735  000C7E                     l14694:
 21736                           
 21737                           ; BSR set to: 0
 21738                           ;lorawan_eu.c: 438: }
 21739                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 21740  000C7E  0E02               	movlw	2
 21741  000C80  0102               	movlb	2	; () banked
 21742  000C82  1912               	xorwf	(_loRa+18)& (0+255),w,b
 21743  000C84  A4D8               	btfss	status,2,c
 21744  000C86  0012               	return	
 21745                           
 21746                           ; BSR set to: 2
 21747                           ;lorawan_eu.c: 440: {
 21748                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 21749  000C88  5102               	movf	(_loRa+2)& (0+255),w,b
 21750  000C8A  0BF0               	andlw	-16
 21751  000C8C  0908               	iorlw	8
 21752  000C8E  6F02               	movwf	(_loRa+2)& (0+255),b
 21753                           
 21754                           ; BSR set to: 2
 21755                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 21756  000C90  EF60  F027         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 21757  000C94                     l14700:
 21758                           
 21759                           ; BSR set to: 2
 21760                           ;lorawan_eu.c: 445: else
 21761                           ;lorawan_eu.c: 446: {
 21762                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 21763  000C94  EC2D  F031         	call	_RADIO_GetStatus	;wreg free
 21764  000C98  0100               	movlb	0	; () banked
 21765  000C9A  6FB6               	movwf	??_LORAWAN_TxDone& (0+255),b
 21766  000C9C  A9B6               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 21767  000C9E  D00F               	goto	l14704
 21768                           
 21769                           ; BSR set to: 0
 21770                           ;lorawan_eu.c: 448: {
 21771                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 21772  000CA0  6B64               	clrf	RxDataDone@pData& (0+255),b
 21773  000CA2  6B65               	clrf	(RxDataDone@pData+1)& (0+255),b
 21774  000CA4  6B66               	clrf	RxDataDone@dataLength& (0+255),b
 21775  000CA6  0E02               	movlw	2
 21776  000CA8  6F67               	movwf	RxDataDone@status& (0+255),b
 21777  000CAA  0005               	push	
 21778  000CAC  6EFA               	movwf	pclath,c
 21779  000CAE  0101               	movlb	1	; () banked
 21780  000CB0  516E               	movf	_rxPayload& (0+255),w,b
 21781  000CB2  6EFD               	movwf	tosl,c
 21782  000CB4  516F               	movf	(_rxPayload+1)& (0+255),w,b
 21783  000CB6  6EFE               	movwf	tosh,c
 21784  000CB8  6AFF               	clrf	tosu,c
 21785  000CBA  50FA               	movf	pclath,w,c
 21786  000CBC  0012               	return		;indir
 21787  000CBE                     l14704:
 21788                           
 21789                           ; BSR set to: 0
 21790                           ;lorawan_eu.c: 452: else
 21791                           ;lorawan_eu.c: 453: {
 21792                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 21793  000CBE  ECDB  F00D         	call	PL390	;call to abstracted procedure
 21794  000CC2  B4D8               	btfsc	status,2,c
 21795  000CC4  0012               	return	
 21796                           
 21797                           ; BSR set to: 1
 21798                           ;lorawan_eu.c: 456: {
 21799                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 21800  000CC6  ECD1  F00D         	call	PL82	;call to abstracted procedure
 21801  000CCA  0E03               	movlw	3
 21802  000CCC  6F67               	movwf	RxDataDone@status& (0+255),b
 21803  000CCE  0005               	push	
 21804  000CD0  6EFA               	movwf	pclath,c
 21805  000CD2  0101               	movlb	1	; () banked
 21806  000CD4  516E               	movf	_rxPayload& (0+255),w,b
 21807  000CD6  6EFD               	movwf	tosl,c
 21808  000CD8  516F               	movf	(_rxPayload+1)& (0+255),w,b
 21809  000CDA  6EFE               	movwf	tosh,c
 21810  000CDC  6AFF               	clrf	tosu,c
 21811  000CDE  50FA               	movf	pclath,w,c
 21812  000CE0  0012               	return		;indir
 21813  000CE2                     __end_of_LORAWAN_TxDone:
 21814                           	opt stack 0
 21815  000CE2                     PL4:
 21816                           	opt stack 17
 21817  000CE2  0D0E               	mullw	14
 21818  000CE4  0E08               	movlw	low (_Channels+8)
 21819  000CE6  24F3               	addwf	prodl,w,c
 21820  000CE8  6ED9               	movwf	fsr2l,c
 21821  000CEA  0E04               	movlw	high (_Channels+8)
 21822  000CEC  20F4               	addwfc	prodh,w,c
 21823  000CEE  6EDA               	movwf	fsr2h,c
 21824  000CF0  0012               	return	
 21825  000CF2                     __end_ofPL4:
 21826                           	opt stack 0
 21827  000CF2                     PL8:
 21828                           	opt stack 13
 21829  000CF2  0100               	movlb	0	; () banked
 21830  000CF4  6FB8               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21831  000CF6  6BB9               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21832  000CF8  6BBA               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21833  000CFA  0E0C               	movlw	12
 21834  000CFC                     u16895:
 21835  000CFC  90D8               	bcf	status,0,c
 21836  000CFE  37B7               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21837  000D00  37B8               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21838  000D02  37B9               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21839  000D04  37BA               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21840  000D06  2EE8               	decfsz	wreg,f,c
 21841  000D08  D7F9               	goto	u16895
 21842  000D0A  C0B7  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21843  000D0E  C0B8  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21844  000D12  C0B9  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21845  000D16  C0BA  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21846  000D1A  0E7D               	movlw	125
 21847  000D1C  6F68               	movwf	___lldiv@divisor& (0+255),b
 21848  000D1E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21849  000D20  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21850  000D22  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21851  000D24  0C7D               	retlw	125
 21852  000D26                     __end_ofPL8:
 21853                           	opt stack 0
 21854  000D26                     PL22:
 21855                           	opt stack 12
 21856  000D26  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21857  000D2A  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21858  000D2E  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21859  000D32  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21860  000D36  0102               	movlb	2	; () banked
 21861  000D38  0012               	return	
 21862  000D3A                     __end_ofPL22:
 21863                           	opt stack 0
 21864  000D3A                     PL48:
 21865                           	opt stack 15
 21866  000D3A  22F7               	addwfc	tblptrh,f,c
 21867  000D3C                     	if	1	;There are 3 active tblptr bytes
 21868  000D3C  6AF8               	clrf	tblptru,c
 21869  000D3E  0E00               	movlw	low (__mediumconst shr (0+16))
 21870  000D40  22F8               	addwfc	tblptru,f,c
 21871  000D42                     	endif
 21872  000D42  0008               	tblrd		*
 21873  000D44  0012               	return	
 21874  000D46                     __end_ofPL48:
 21875                           	opt stack 0
 21876  000D46                     PL60:
 21877                           	opt stack 13
 21878  000D46  0EFF               	movlw	255
 21879  000D48  2594               	addwf	?___lmul& (0+255),w,b
 21880  000D4A  6FCB               	movwf	_LORAWAN_TxDone$5204& (0+255),b
 21881  000D4C  0EFF               	movlw	255
 21882  000D4E  2195               	addwfc	(?___lmul+1)& (0+255),w,b
 21883  000D50  6FCC               	movwf	(_LORAWAN_TxDone$5204+1)& (0+255),b
 21884  000D52  0EFF               	movlw	255
 21885  000D54  2196               	addwfc	(?___lmul+2)& (0+255),w,b
 21886  000D56  6FCD               	movwf	(_LORAWAN_TxDone$5204+2)& (0+255),b
 21887  000D58  0EFF               	movlw	255
 21888  000D5A  2197               	addwfc	(?___lmul+3)& (0+255),w,b
 21889  000D5C  6FCE               	movwf	(_LORAWAN_TxDone$5204+3)& (0+255),b
 21890  000D5E  C0CB  F094         	movff	_LORAWAN_TxDone$5204,___lmul@multiplier
 21891  000D62  C0CC  F095         	movff	_LORAWAN_TxDone$5204+1,___lmul@multiplier+1
 21892  000D66  C0CD  F096         	movff	_LORAWAN_TxDone$5204+2,___lmul@multiplier+2
 21893  000D6A  C0CE  F097         	movff	_LORAWAN_TxDone$5204+3,___lmul@multiplier+3
 21894  000D6E  C0B4  F098         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 21895  000D72  C0B5  F099         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 21896  000D76  6B9A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21897  000D78  6B9B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21898  000D7A  0012               	return	
 21899  000D7C                     __end_ofPL60:
 21900                           	opt stack 0
 21901  000D7C                     PL66:
 21902                           	opt stack 13
 21903  000D7C  6EF6               	movwf	tblptrl,c
 21904  000D7E  6AF7               	clrf	tblptrh,c
 21905  000D80  0EFF               	movlw	high _rxWindowOffset
 21906  000D82  0012               	return	
 21907  000D84                     __end_ofPL66:
 21908                           	opt stack 0
 21909  000D84                     PL88:
 21910                           	opt stack 17
 21911  000D84  6F98               	movwf	___lmul@multiplicand& (0+255),b
 21912  000D86  6B99               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21913  000D88  6B9A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21914  000D8A  6B9B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21915  000D8C  0012               	return	
 21916  000D8E                     __end_ofPL88:
 21917                           	opt stack 0
 21918  000D8E                     PL98:
 21919                           	opt stack 13
 21920  000D8E  0100               	movlb	0	; () banked
 21921  000D90  25B6               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21922  000D92  6FB7               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21923  000D94  0E00               	movlw	0
 21924  000D96  BFB6               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21925  000D98  0EFF               	movlw	255
 21926  000D9A  0102               	movlb	2	; () banked
 21927  000D9C  0012               	return	
 21928  000D9E                     __end_ofPL98:
 21929                           	opt stack 0
 21930  000D9E                     PL104:
 21931                           	opt stack 17
 21932  000D9E  0D0E               	mullw	14
 21933  000DA0  0E06               	movlw	low (_Channels+6)
 21934  000DA2  24F3               	addwf	prodl,w,c
 21935  000DA4  6ED9               	movwf	fsr2l,c
 21936  000DA6  0E04               	movlw	high (_Channels+6)
 21937  000DA8  20F4               	addwfc	prodh,w,c
 21938  000DAA  6EDA               	movwf	fsr2h,c
 21939  000DAC  0012               	return	
 21940  000DAE                     __end_ofPL104:
 21941                           	opt stack 0
 21942  000DAE                     PL138:
 21943                           	opt stack 13
 21944  000DAE  0E7D               	movlw	low _rxWindowOffset
 21945  000DB0  0102               	movlb	2	; () banked
 21946  000DB2  251C               	addwf	(_loRa+28)& (0+255),w,b
 21947  000DB4  0012               	return	
 21948  000DB6                     __end_ofPL138:
 21949                           	opt stack 0
 21950                           tosu	equ	0xFFF
 21951                           tosh	equ	0xFFE
 21952                           tosl	equ	0xFFD
 21953                           pclath	equ	0xFFA
 21954                           tblptru	equ	0xFF8
 21955                           tblptrh	equ	0xFF7
 21956                           tblptrl	equ	0xFF6
 21957                           tablat	equ	0xFF5
 21958                           prodh	equ	0xFF4
 21959                           prodl	equ	0xFF3
 21960                           intcon	equ	0xFF2
 21961                           indf0	equ	0xFEF
 21962                           postinc0	equ	0xFEE
 21963                           plusw0	equ	0xFEB
 21964                           fsr0h	equ	0xFEA
 21965                           fsr0l	equ	0xFE9
 21966                           wreg	equ	0xFE8
 21967                           postinc1	equ	0xFE6
 21968                           postdec1	equ	0xFE5
 21969                           plusw1	equ	0xFE3
 21970                           fsr1h	equ	0xFE2
 21971                           fsr1l	equ	0xFE1
 21972                           indf2	equ	0xFDF
 21973                           postinc2	equ	0xFDE
 21974                           postdec2	equ	0xFDD
 21975                           plusw2	equ	0xFDB
 21976                           fsr2h	equ	0xFDA
 21977                           fsr2l	equ	0xFD9
 21978                           status	equ	0xFD8
 21979                           
 21980 ;; *************** function _SwTimerReadValue *****************
 21981 ;; Defined at:
 21982 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 21983 ;; Parameters:    Size  Location     Type
 21984 ;;  timerId         1    wreg     unsigned char 
 21985 ;; Auto vars:     Size  Location     Type
 21986 ;;  timerId         1   51[BANK0 ] unsigned char 
 21987 ;;  ticksCount      4   47[BANK0 ] unsigned long 
 21988 ;; Return value:  Size  Location     Type
 21989 ;;                  4   43[BANK0 ] unsigned long 
 21990 ;; Registers used:
 21991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21992 ;; Tracked objects:
 21993 ;;		On entry : C/1
 21994 ;;		On exit  : F/0
 21995 ;;		Unchanged: 0/0
 21996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 21997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21998 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 21999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22000 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22001 ;;Total ram usage:        9 bytes
 22002 ;; Hardware stack levels used:    1
 22003 ;; Hardware stack levels required when called:   10
 22004 ;; This function calls:
 22005 ;;		_SwTimersInterrupt
 22006 ;; This function is called by:
 22007 ;;		_RADIO_TxDone
 22008 ;;		_RADIO_FSKPacketSent
 22009 ;;		_LORAWAN_TxDone
 22010 ;; This function uses a non-reentrant model
 22011 ;;
 22012                           
 22013                           	psect	text109
 22014  0059E0                     __ptext109:
 22015                           	opt stack 0
 22016  0059E0                     _SwTimerReadValue:
 22017                           	opt stack 16
 22018                           
 22019                           ;incstack = 0
 22020                           ;SwTimerReadValue@timerId stored from wreg
 22021  0059E0  0100               	movlb	0	; () banked
 22022  0059E2  6F93               	movwf	SwTimerReadValue@timerId& (0+255),b
 22023                           
 22024                           ;sw_timer.c: 195: uint32_t ticksCount;
 22025                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 22026  0059E4  9EF2               	bcf	intcon,7,c	;volatile
 22027                           
 22028                           ;sw_timer.c: 200: SwTimersInterrupt();
 22029  0059E6  ECA6  F01E         	call	_SwTimersInterrupt	;wreg free
 22030                           
 22031                           ; BSR set to: 0
 22032                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 22033  0059EA  5193               	movf	SwTimerReadValue@timerId& (0+255),w,b
 22034  0059EC  ECFA  F01E         	call	PL10	;call to abstracted procedure
 22035  0059F0  CFDE F08F          	movff	postinc2,SwTimerReadValue@ticksCount
 22036  0059F4  CFDE F090          	movff	postinc2,SwTimerReadValue@ticksCount+1
 22037  0059F8  CFDE F091          	movff	postinc2,SwTimerReadValue@ticksCount+2
 22038  0059FC  CFDE F092          	movff	postinc2,SwTimerReadValue@ticksCount+3
 22039                           
 22040                           ; BSR set to: 0
 22041                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 22042  005A00  8EF2               	bsf	intcon,7,c	;volatile
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;sw_timer.c: 204: return ticksCount;
 22046  005A02  C08F  F08B         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 22047  005A06  C090  F08C         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 22048  005A0A  C091  F08D         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 22049  005A0E  C092  F08E         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 22050                           
 22051                           ; BSR set to: 0
 22052  005A12  0012               	return		;funcret
 22053  005A14                     __end_of_SwTimerReadValue:
 22054                           	opt stack 0
 22055                           tosu	equ	0xFFF
 22056                           tosh	equ	0xFFE
 22057                           tosl	equ	0xFFD
 22058                           pclath	equ	0xFFA
 22059                           tblptru	equ	0xFF8
 22060                           tblptrh	equ	0xFF7
 22061                           tblptrl	equ	0xFF6
 22062                           tablat	equ	0xFF5
 22063                           prodh	equ	0xFF4
 22064                           prodl	equ	0xFF3
 22065                           intcon	equ	0xFF2
 22066                           indf0	equ	0xFEF
 22067                           postinc0	equ	0xFEE
 22068                           plusw0	equ	0xFEB
 22069                           fsr0h	equ	0xFEA
 22070                           fsr0l	equ	0xFE9
 22071                           wreg	equ	0xFE8
 22072                           postinc1	equ	0xFE6
 22073                           postdec1	equ	0xFE5
 22074                           plusw1	equ	0xFE3
 22075                           fsr1h	equ	0xFE2
 22076                           fsr1l	equ	0xFE1
 22077                           indf2	equ	0xFDF
 22078                           postinc2	equ	0xFDE
 22079                           postdec2	equ	0xFDD
 22080                           plusw2	equ	0xFDB
 22081                           fsr2h	equ	0xFDA
 22082                           fsr2l	equ	0xFD9
 22083                           status	equ	0xFD8
 22084                           
 22085 ;; *************** function _SwTimerIsRunning *****************
 22086 ;; Defined at:
 22087 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22088 ;; Parameters:    Size  Location     Type
 22089 ;;  timerId         1    wreg     unsigned char 
 22090 ;; Auto vars:     Size  Location     Type
 22091 ;;  timerId         1    4[BANK0 ] unsigned char 
 22092 ;;  isRunning       1    5[BANK0 ] unsigned char 
 22093 ;; Return value:  Size  Location     Type
 22094 ;;                  1    wreg      unsigned char 
 22095 ;; Registers used:
 22096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22097 ;; Tracked objects:
 22098 ;;		On entry : F/2
 22099 ;;		On exit  : F/0
 22100 ;;		Unchanged: 0/0
 22101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22106 ;;Total ram usage:        2 bytes
 22107 ;; Hardware stack levels used:    1
 22108 ;; Hardware stack levels required when called:    7
 22109 ;; This function calls:
 22110 ;;		Nothing
 22111 ;; This function is called by:
 22112 ;;		_LORAWAN_TxDone
 22113 ;; This function uses a non-reentrant model
 22114 ;;
 22115                           
 22116                           	psect	text110
 22117  0060B4                     __ptext110:
 22118                           	opt stack 0
 22119  0060B4                     _SwTimerIsRunning:
 22120                           	opt stack 19
 22121                           
 22122                           ; BSR set to: 0
 22123                           ;incstack = 0
 22124                           ;SwTimerIsRunning@timerId stored from wreg
 22125  0060B4  0100               	movlb	0	; () banked
 22126  0060B6  6F64               	movwf	SwTimerIsRunning@timerId& (0+255),b
 22127                           
 22128                           ;sw_timer.c: 209: uint8_t isRunning;
 22129                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 22130  0060B8  9EF2               	bcf	intcon,7,c	;volatile
 22131                           
 22132                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 22133  0060BA  5164               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 22134  0060BC  EC84  F023         	call	PL36	;call to abstracted procedure
 22135  0060C0  50DF               	movf	indf2,w,c
 22136  0060C2  6F65               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 22137                           
 22138                           ; BSR set to: 0
 22139                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 22140  0060C4  8EF2               	bsf	intcon,7,c	;volatile
 22141                           
 22142                           ; BSR set to: 0
 22143                           ;sw_timer.c: 215: return isRunning;
 22144  0060C6  5165               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 22145                           
 22146                           ; BSR set to: 0
 22147  0060C8  0012               	return		;funcret
 22148  0060CA                     __end_of_SwTimerIsRunning:
 22149                           	opt stack 0
 22150                           tosu	equ	0xFFF
 22151                           tosh	equ	0xFFE
 22152                           tosl	equ	0xFFD
 22153                           pclath	equ	0xFFA
 22154                           tblptru	equ	0xFF8
 22155                           tblptrh	equ	0xFF7
 22156                           tblptrl	equ	0xFF6
 22157                           tablat	equ	0xFF5
 22158                           prodh	equ	0xFF4
 22159                           prodl	equ	0xFF3
 22160                           intcon	equ	0xFF2
 22161                           indf0	equ	0xFEF
 22162                           postinc0	equ	0xFEE
 22163                           plusw0	equ	0xFEB
 22164                           fsr0h	equ	0xFEA
 22165                           fsr0l	equ	0xFE9
 22166                           wreg	equ	0xFE8
 22167                           postinc1	equ	0xFE6
 22168                           postdec1	equ	0xFE5
 22169                           plusw1	equ	0xFE3
 22170                           fsr1h	equ	0xFE2
 22171                           fsr1l	equ	0xFE1
 22172                           indf2	equ	0xFDF
 22173                           postinc2	equ	0xFDE
 22174                           postdec2	equ	0xFDD
 22175                           plusw2	equ	0xFDB
 22176                           fsr2h	equ	0xFDA
 22177                           fsr2l	equ	0xFD9
 22178                           status	equ	0xFD8
 22179                           
 22180 ;; *************** function _RADIO_GetStatus *****************
 22181 ;; Defined at:
 22182 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22183 ;; Parameters:    Size  Location     Type
 22184 ;;		None
 22185 ;; Auto vars:     Size  Location     Type
 22186 ;;		None
 22187 ;; Return value:  Size  Location     Type
 22188 ;;                  1    wreg      unsigned char 
 22189 ;; Registers used:
 22190 ;;		wreg, status,2
 22191 ;; Tracked objects:
 22192 ;;		On entry : C/2
 22193 ;;		On exit  : F/1
 22194 ;;		Unchanged: 0/0
 22195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22200 ;;Total ram usage:        0 bytes
 22201 ;; Hardware stack levels used:    1
 22202 ;; Hardware stack levels required when called:    7
 22203 ;; This function calls:
 22204 ;;		Nothing
 22205 ;; This function is called by:
 22206 ;;		_LORAWAN_TxDone
 22207 ;;		_LORAWAN_ReceiveWindow2Callback
 22208 ;;		_LORAWAN_RxDone
 22209 ;; This function uses a non-reentrant model
 22210 ;;
 22211                           
 22212                           	psect	text111
 22213  00625A                     __ptext111:
 22214                           	opt stack 0
 22215  00625A                     _RADIO_GetStatus:
 22216                           	opt stack 19
 22217                           
 22218                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 22219                           
 22220                           ; BSR set to: 0
 22221                           ;incstack = 0
 22222  00625A  0101               	movlb	1	; () banked
 22223  00625C  5198               	movf	(_RadioConfiguration+35)& (0+255),w,b
 22224                           
 22225                           ; BSR set to: 1
 22226  00625E  0012               	return		;funcret
 22227  006260                     __end_of_RADIO_GetStatus:
 22228                           	opt stack 0
 22229                           tosu	equ	0xFFF
 22230                           tosh	equ	0xFFE
 22231                           tosl	equ	0xFFD
 22232                           pclath	equ	0xFFA
 22233                           tblptru	equ	0xFF8
 22234                           tblptrh	equ	0xFF7
 22235                           tblptrl	equ	0xFF6
 22236                           tablat	equ	0xFF5
 22237                           prodh	equ	0xFF4
 22238                           prodl	equ	0xFF3
 22239                           intcon	equ	0xFF2
 22240                           indf0	equ	0xFEF
 22241                           postinc0	equ	0xFEE
 22242                           plusw0	equ	0xFEB
 22243                           fsr0h	equ	0xFEA
 22244                           fsr0l	equ	0xFE9
 22245                           wreg	equ	0xFE8
 22246                           postinc1	equ	0xFE6
 22247                           postdec1	equ	0xFE5
 22248                           plusw1	equ	0xFE3
 22249                           fsr1h	equ	0xFE2
 22250                           fsr1l	equ	0xFE1
 22251                           indf2	equ	0xFDF
 22252                           postinc2	equ	0xFDE
 22253                           postdec2	equ	0xFDD
 22254                           plusw2	equ	0xFDB
 22255                           fsr2h	equ	0xFDA
 22256                           fsr2l	equ	0xFD9
 22257                           status	equ	0xFD8
 22258                           
 22259 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 22260 ;; Defined at:
 22261 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22262 ;; Parameters:    Size  Location     Type
 22263 ;;		None
 22264 ;; Auto vars:     Size  Location     Type
 22265 ;;		None
 22266 ;; Return value:  Size  Location     Type
 22267 ;;                  1    wreg      void 
 22268 ;; Registers used:
 22269 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22270 ;; Tracked objects:
 22271 ;;		On entry : F/2
 22272 ;;		On exit  : E/0
 22273 ;;		Unchanged: 0/0
 22274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22279 ;;Total ram usage:        0 bytes
 22280 ;; Hardware stack levels used:    1
 22281 ;; Hardware stack levels required when called:   13
 22282 ;; This function calls:
 22283 ;;		_ConfigureRadioRx
 22284 ;;		_RADIO_ReceiveStart
 22285 ;;		_RADIO_ReceiveStop
 22286 ;;		_RADIO_ReleaseData
 22287 ;;		_ResetParametersForConfirmedTransmission
 22288 ;;		_ResetParametersForUnconfirmedTransmission
 22289 ;;		_RxDataDone
 22290 ;; This function is called by:
 22291 ;;		_LORAWAN_TxDone
 22292 ;;		_LORAWAN_ReceiveWindow2Callback
 22293 ;;		_LORAWAN_RxDone
 22294 ;;		_SetReceptionNotOkState
 22295 ;; This function uses a non-reentrant model
 22296 ;;
 22297                           
 22298                           	psect	text112
 22299  004EC0                     __ptext112:
 22300                           	opt stack 0
 22301  004EC0                     _LORAWAN_EnterContinuousReceive:
 22302                           	opt stack 13
 22303                           
 22304                           ; BSR set to: 2
 22305                           ;lorawan.c: 917: RADIO_ReceiveStop();
 22306                           
 22307                           ; BSR set to: 1
 22308                           ;incstack = 0
 22309  004EC0  EC15  F030         	call	_RADIO_ReceiveStop	;wreg free
 22310                           
 22311                           ; BSR set to: 1
 22312                           ;lorawan.c: 918: RADIO_ReleaseData();
 22313  004EC4  EC30  F031         	call	_RADIO_ReleaseData	;wreg free
 22314                           
 22315                           ; BSR set to: 1
 22316                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 22317  004EC8  D820               	call	PL192	;call to abstracted procedure
 22318  004ECA  EC67  F02E         	call	_ConfigureRadioRx
 22319                           
 22320                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 22321  004ECE  0100               	movlb	0	; () banked
 22322  004ED0  6BAB               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 22323  004ED2  6BAA               	clrf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 22324  004ED4  ECD6  F010         	call	_RADIO_ReceiveStart	;wreg free
 22325  004ED8  51AA               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 22326  004EDA  11AB               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 22327  004EDC  B4D8               	btfsc	status,2,c
 22328  004EDE  0012               	return	
 22329                           
 22330                           ; BSR set to: 0
 22331                           ;lorawan.c: 923: {
 22332                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 22333  004EE0  ECA7  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 22334                           
 22335                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 22336  004EE4  ECE2  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 22337                           
 22338                           ; BSR set to: 2
 22339                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 22340                           
 22341                           ; BSR set to: 2
 22342                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 22343  004EE8  ECD6  F003         	call	PL144	;call to abstracted procedure
 22344  004EEC  B4D8               	btfsc	status,2,c
 22345  004EEE  0012               	return	
 22346                           
 22347                           ; BSR set to: 1
 22348                           ;lorawan.c: 928: {
 22349                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 22350  004EF0  ECD1  F00D         	call	PL82	;call to abstracted procedure
 22351  004EF4  6B67               	clrf	RxDataDone@status& (0+255),b
 22352  004EF6  0005               	push	
 22353  004EF8  6AFA               	clrf	pclath,c
 22354  004EFA  0101               	movlb	1	; () banked
 22355  004EFC  516E               	movf	_rxPayload& (0+255),w,b
 22356  004EFE  6EFD               	movwf	tosl,c
 22357  004F00  516F               	movf	(_rxPayload+1)& (0+255),w,b
 22358  004F02  6EFE               	movwf	tosh,c
 22359  004F04  6AFF               	clrf	tosu,c
 22360  004F06  50FA               	movf	pclath,w,c
 22361  004F08  0012               	return		;indir
 22362  004F0A                     __end_of_LORAWAN_EnterContinuousReceive:
 22363                           	opt stack 0
 22364  004F0A                     PL192:
 22365                           	opt stack 12
 22366  004F0A  C218  F076         	movff	_loRa+24,ConfigureRadioRx@freq
 22367  004F0E  C219  F077         	movff	_loRa+25,ConfigureRadioRx@freq+1
 22368  004F12  C21A  F078         	movff	_loRa+26,ConfigureRadioRx@freq+2
 22369  004F16  C21B  F079         	movff	_loRa+27,ConfigureRadioRx@freq+3
 22370  004F1A  0102               	movlb	2	; () banked
 22371  004F1C  511C               	movf	(_loRa+28)& (0+255),w,b
 22372  004F1E  0012               	return	
 22373  004F20                     __end_ofPL192:
 22374                           	opt stack 0
 22375                           tosu	equ	0xFFF
 22376                           tosh	equ	0xFFE
 22377                           tosl	equ	0xFFD
 22378                           pclath	equ	0xFFA
 22379                           tblptru	equ	0xFF8
 22380                           tblptrh	equ	0xFF7
 22381                           tblptrl	equ	0xFF6
 22382                           tablat	equ	0xFF5
 22383                           prodh	equ	0xFF4
 22384                           prodl	equ	0xFF3
 22385                           intcon	equ	0xFF2
 22386                           indf0	equ	0xFEF
 22387                           postinc0	equ	0xFEE
 22388                           plusw0	equ	0xFEB
 22389                           fsr0h	equ	0xFEA
 22390                           fsr0l	equ	0xFE9
 22391                           wreg	equ	0xFE8
 22392                           postinc1	equ	0xFE6
 22393                           postdec1	equ	0xFE5
 22394                           plusw1	equ	0xFE3
 22395                           fsr1h	equ	0xFE2
 22396                           fsr1l	equ	0xFE1
 22397                           indf2	equ	0xFDF
 22398                           postinc2	equ	0xFDE
 22399                           postdec2	equ	0xFDD
 22400                           plusw2	equ	0xFDB
 22401                           fsr2h	equ	0xFDA
 22402                           fsr2l	equ	0xFD9
 22403                           status	equ	0xFD8
 22404                           
 22405 ;; *************** function _RxDataDone *****************
 22406 ;; Defined at:
 22407 ;;		line 108 in file "main.c"
 22408 ;; Parameters:    Size  Location     Type
 22409 ;;  pData           2    4[BANK0 ] PTR unsigned char 
 22410 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 22411 ;;  dataLength      1    6[BANK0 ] unsigned char 
 22412 ;;  status          1    7[BANK0 ] enum E17267
 22413 ;; Auto vars:     Size  Location     Type
 22414 ;;		None
 22415 ;; Return value:  Size  Location     Type
 22416 ;;                  1    wreg      void 
 22417 ;; Registers used:
 22418 ;;		None
 22419 ;; Tracked objects:
 22420 ;;		On entry : F/1
 22421 ;;		On exit  : F/1
 22422 ;;		Unchanged: F/0
 22423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22424 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22427 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22428 ;;Total ram usage:        4 bytes
 22429 ;; Hardware stack levels used:    1
 22430 ;; Hardware stack levels required when called:    7
 22431 ;; This function calls:
 22432 ;;		Nothing
 22433 ;; This function is called by:
 22434 ;;		_main
 22435 ;;		_LORAWAN_EnterContinuousReceive
 22436 ;;		_LORAWAN_ReceiveWindow2Callback
 22437 ;;		_SetReceptionNotOkState
 22438 ;;		_LORAWAN_RxDone
 22439 ;;		_LORAWAN_RxTimeout
 22440 ;;		_LORAWAN_TxDone
 22441 ;;		_AckRetransmissionCallback
 22442 ;;		_UnconfirmedTransmissionCallback
 22443 ;; This function uses a non-reentrant model
 22444 ;;
 22445                           
 22446                           	psect	text113
 22447  0062A4                     __ptext113:
 22448                           	opt stack 0
 22449  0062A4                     _RxDataDone:
 22450                           	opt stack 20
 22451                           
 22452                           ; BSR set to: 1
 22453                           
 22454                           ;incstack = 0
 22455  0062A4  0012               	return		;funcret
 22456  0062A6                     __end_of_RxDataDone:
 22457                           	opt stack 0
 22458                           tosu	equ	0xFFF
 22459                           tosh	equ	0xFFE
 22460                           tosl	equ	0xFFD
 22461                           pclath	equ	0xFFA
 22462                           tblptru	equ	0xFF8
 22463                           tblptrh	equ	0xFF7
 22464                           tblptrl	equ	0xFF6
 22465                           tablat	equ	0xFF5
 22466                           prodh	equ	0xFF4
 22467                           prodl	equ	0xFF3
 22468                           intcon	equ	0xFF2
 22469                           indf0	equ	0xFEF
 22470                           postinc0	equ	0xFEE
 22471                           plusw0	equ	0xFEB
 22472                           fsr0h	equ	0xFEA
 22473                           fsr0l	equ	0xFE9
 22474                           wreg	equ	0xFE8
 22475                           postinc1	equ	0xFE6
 22476                           postdec1	equ	0xFE5
 22477                           plusw1	equ	0xFE3
 22478                           fsr1h	equ	0xFE2
 22479                           fsr1l	equ	0xFE1
 22480                           indf2	equ	0xFDF
 22481                           postinc2	equ	0xFDE
 22482                           postdec2	equ	0xFDD
 22483                           plusw2	equ	0xFDB
 22484                           fsr2h	equ	0xFDA
 22485                           fsr2l	equ	0xFD9
 22486                           status	equ	0xFD8
 22487                           
 22488 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 22489 ;; Defined at:
 22490 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22491 ;; Parameters:    Size  Location     Type
 22492 ;;		None
 22493 ;; Auto vars:     Size  Location     Type
 22494 ;;		None
 22495 ;; Return value:  Size  Location     Type
 22496 ;;                  1    wreg      void 
 22497 ;; Registers used:
 22498 ;;		wreg, status,2
 22499 ;; Tracked objects:
 22500 ;;		On entry : D/0
 22501 ;;		On exit  : F/2
 22502 ;;		Unchanged: 0/0
 22503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22508 ;;Total ram usage:        0 bytes
 22509 ;; Hardware stack levels used:    1
 22510 ;; Hardware stack levels required when called:    7
 22511 ;; This function calls:
 22512 ;;		Nothing
 22513 ;; This function is called by:
 22514 ;;		_LORAWAN_RxTimeout
 22515 ;;		_LORAWAN_ReceiveWindow2Callback
 22516 ;;		_LORAWAN_EnterContinuousReceive
 22517 ;;		_UnconfirmedTransmissionCallback
 22518 ;; This function uses a non-reentrant model
 22519 ;;
 22520                           
 22521                           	psect	text114
 22522  0061C4                     __ptext114:
 22523                           	opt stack 0
 22524  0061C4                     _ResetParametersForUnconfirmedTransmission:
 22525                           	opt stack 0
 22526                           
 22527                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 22528                           
 22529                           ; BSR set to: 1
 22530                           ;incstack = 0
 22531                           
 22532                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 22533  0061C4  ECAB  F030         	call	PL378	;call to abstracted procedure
 22534  0061C8  6FD8               	movwf	(_loRa+216)& (0+255),b
 22535                           
 22536                           ; BSR set to: 2
 22537                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 22538  0061CA  6BA7               	clrf	(_loRa+167)& (0+255),b
 22539                           
 22540                           ; BSR set to: 2
 22541  0061CC  0012               	return		;funcret
 22542  0061CE                     __end_of_ResetParametersForUnconfirmedTransmission:
 22543                           	opt stack 0
 22544                           tosu	equ	0xFFF
 22545                           tosh	equ	0xFFE
 22546                           tosl	equ	0xFFD
 22547                           pclath	equ	0xFFA
 22548                           tblptru	equ	0xFF8
 22549                           tblptrh	equ	0xFF7
 22550                           tblptrl	equ	0xFF6
 22551                           tablat	equ	0xFF5
 22552                           prodh	equ	0xFF4
 22553                           prodl	equ	0xFF3
 22554                           intcon	equ	0xFF2
 22555                           indf0	equ	0xFEF
 22556                           postinc0	equ	0xFEE
 22557                           plusw0	equ	0xFEB
 22558                           fsr0h	equ	0xFEA
 22559                           fsr0l	equ	0xFE9
 22560                           wreg	equ	0xFE8
 22561                           postinc1	equ	0xFE6
 22562                           postdec1	equ	0xFE5
 22563                           plusw1	equ	0xFE3
 22564                           fsr1h	equ	0xFE2
 22565                           fsr1l	equ	0xFE1
 22566                           indf2	equ	0xFDF
 22567                           postinc2	equ	0xFDE
 22568                           postdec2	equ	0xFDD
 22569                           plusw2	equ	0xFDB
 22570                           fsr2h	equ	0xFDA
 22571                           fsr2l	equ	0xFD9
 22572                           status	equ	0xFD8
 22573                           
 22574 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 22575 ;; Defined at:
 22576 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22577 ;; Parameters:    Size  Location     Type
 22578 ;;		None
 22579 ;; Auto vars:     Size  Location     Type
 22580 ;;		None
 22581 ;; Return value:  Size  Location     Type
 22582 ;;                  1    wreg      void 
 22583 ;; Registers used:
 22584 ;;		wreg, status,2
 22585 ;; Tracked objects:
 22586 ;;		On entry : D/2
 22587 ;;		On exit  : F/2
 22588 ;;		Unchanged: 0/0
 22589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22594 ;;Total ram usage:        0 bytes
 22595 ;; Hardware stack levels used:    1
 22596 ;; Hardware stack levels required when called:    7
 22597 ;; This function calls:
 22598 ;;		Nothing
 22599 ;; This function is called by:
 22600 ;;		_LORAWAN_RxTimeout
 22601 ;;		_LORAWAN_ReceiveWindow2Callback
 22602 ;;		_LORAWAN_EnterContinuousReceive
 22603 ;;		_AckRetransmissionCallback
 22604 ;; This function uses a non-reentrant model
 22605 ;;
 22606                           
 22607                           	psect	text115
 22608  00614E                     __ptext115:
 22609                           	opt stack 0
 22610  00614E                     _ResetParametersForConfirmedTransmission:
 22611                           	opt stack 0
 22612                           
 22613                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 22614                           
 22615                           ; BSR set to: 2
 22616                           ;incstack = 0
 22617                           
 22618                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 22619  00614E  D803               	call	PL378	;call to abstracted procedure
 22620  006150  6FD9               	movwf	(_loRa+217)& (0+255),b
 22621                           
 22622                           ; BSR set to: 2
 22623                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 22624  006152  9100               	bcf	_loRa& (0+255),0,b
 22625                           
 22626                           ; BSR set to: 2
 22627  006154  0C01               	retlw	1	;funcret
 22628  006156                     __end_of_ResetParametersForConfirmedTransmission:
 22629                           	opt stack 0
 22630  006156                     PL378:
 22631                           	opt stack 20
 22632  006156  0EF0               	movlw	-16
 22633  006158  0102               	movlb	2	; () banked
 22634  00615A  1702               	andwf	(_loRa+2)& (0+255),f,b
 22635  00615C  0C01               	retlw	1
 22636  00615E                     __end_ofPL378:
 22637                           	opt stack 0
 22638                           tosu	equ	0xFFF
 22639                           tosh	equ	0xFFE
 22640                           tosl	equ	0xFFD
 22641                           pclath	equ	0xFFA
 22642                           tblptru	equ	0xFF8
 22643                           tblptrh	equ	0xFF7
 22644                           tblptrl	equ	0xFF6
 22645                           tablat	equ	0xFF5
 22646                           prodh	equ	0xFF4
 22647                           prodl	equ	0xFF3
 22648                           intcon	equ	0xFF2
 22649                           indf0	equ	0xFEF
 22650                           postinc0	equ	0xFEE
 22651                           plusw0	equ	0xFEB
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           postinc1	equ	0xFE6
 22656                           postdec1	equ	0xFE5
 22657                           plusw1	equ	0xFE3
 22658                           fsr1h	equ	0xFE2
 22659                           fsr1l	equ	0xFE1
 22660                           indf2	equ	0xFDF
 22661                           postinc2	equ	0xFDE
 22662                           postdec2	equ	0xFDD
 22663                           plusw2	equ	0xFDB
 22664                           fsr2h	equ	0xFDA
 22665                           fsr2l	equ	0xFD9
 22666                           status	equ	0xFD8
 22667                           
 22668 ;; *************** function _RADIO_ReleaseData *****************
 22669 ;; Defined at:
 22670 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22671 ;; Parameters:    Size  Location     Type
 22672 ;;		None
 22673 ;; Auto vars:     Size  Location     Type
 22674 ;;		None
 22675 ;; Return value:  Size  Location     Type
 22676 ;;                  1    wreg      void 
 22677 ;; Registers used:
 22678 ;;		status,2, status,0
 22679 ;; Tracked objects:
 22680 ;;		On entry : C/2
 22681 ;;		On exit  : F/1
 22682 ;;		Unchanged: 0/0
 22683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22688 ;;Total ram usage:        0 bytes
 22689 ;; Hardware stack levels used:    1
 22690 ;; Hardware stack levels required when called:    7
 22691 ;; This function calls:
 22692 ;;		Nothing
 22693 ;; This function is called by:
 22694 ;;		_LORAWAN_ReceiveWindow1Callback
 22695 ;;		_LORAWAN_ReceiveWindow2Callback
 22696 ;;		_LORAWAN_EnterContinuousReceive
 22697 ;;		_LORAWAN_RxDone
 22698 ;; This function uses a non-reentrant model
 22699 ;;
 22700                           
 22701                           	psect	text116
 22702  006260                     __ptext116:
 22703                           	opt stack 0
 22704  006260                     _RADIO_ReleaseData:
 22705                           	opt stack 18
 22706                           
 22707                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 22708                           
 22709                           ; BSR set to: 2
 22710                           ;incstack = 0
 22711  006260  0101               	movlb	1	; () banked
 22712  006262  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 22713                           
 22714                           ; BSR set to: 1
 22715  006264  0012               	return		;funcret
 22716  006266                     __end_of_RADIO_ReleaseData:
 22717                           	opt stack 0
 22718                           tosu	equ	0xFFF
 22719                           tosh	equ	0xFFE
 22720                           tosl	equ	0xFFD
 22721                           pclath	equ	0xFFA
 22722                           tblptru	equ	0xFF8
 22723                           tblptrh	equ	0xFF7
 22724                           tblptrl	equ	0xFF6
 22725                           tablat	equ	0xFF5
 22726                           prodh	equ	0xFF4
 22727                           prodl	equ	0xFF3
 22728                           intcon	equ	0xFF2
 22729                           indf0	equ	0xFEF
 22730                           postinc0	equ	0xFEE
 22731                           plusw0	equ	0xFEB
 22732                           fsr0h	equ	0xFEA
 22733                           fsr0l	equ	0xFE9
 22734                           wreg	equ	0xFE8
 22735                           postinc1	equ	0xFE6
 22736                           postdec1	equ	0xFE5
 22737                           plusw1	equ	0xFE3
 22738                           fsr1h	equ	0xFE2
 22739                           fsr1l	equ	0xFE1
 22740                           indf2	equ	0xFDF
 22741                           postinc2	equ	0xFDE
 22742                           postdec2	equ	0xFDD
 22743                           plusw2	equ	0xFDB
 22744                           fsr2h	equ	0xFDA
 22745                           fsr2l	equ	0xFD9
 22746                           status	equ	0xFD8
 22747                           
 22748 ;; *************** function _RADIO_ReceiveStop *****************
 22749 ;; Defined at:
 22750 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22751 ;; Parameters:    Size  Location     Type
 22752 ;;		None
 22753 ;; Auto vars:     Size  Location     Type
 22754 ;;		None
 22755 ;; Return value:  Size  Location     Type
 22756 ;;                  1    wreg      void 
 22757 ;; Registers used:
 22758 ;;		wreg, status,2, status,0, cstack
 22759 ;; Tracked objects:
 22760 ;;		On entry : F/2
 22761 ;;		On exit  : F/1
 22762 ;;		Unchanged: 0/0
 22763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22768 ;;Total ram usage:        0 bytes
 22769 ;; Hardware stack levels used:    1
 22770 ;; Hardware stack levels required when called:   11
 22771 ;; This function calls:
 22772 ;;		_RADIO_WriteMode
 22773 ;; This function is called by:
 22774 ;;		_LORAWAN_Send
 22775 ;;		_LORAWAN_ReceiveWindow1Callback
 22776 ;;		_LORAWAN_ReceiveWindow2Callback
 22777 ;;		_LORAWAN_EnterContinuousReceive
 22778 ;; This function uses a non-reentrant model
 22779 ;;
 22780                           
 22781                           	psect	text117
 22782  00602A                     __ptext117:
 22783                           	opt stack 0
 22784  00602A                     _RADIO_ReceiveStop:
 22785                           	opt stack 17
 22786                           
 22787                           ; BSR set to: 2
 22788                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 22789                           
 22790                           ; BSR set to: 1
 22791                           ;incstack = 0
 22792  00602A  0E02               	movlw	2
 22793  00602C  0101               	movlb	1	; () banked
 22794  00602E  1998               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 22795  006030  A4D8               	btfss	status,2,c
 22796  006032  0012               	return	
 22797                           
 22798                           ; BSR set to: 1
 22799                           ;radio_driver_SX1276.c: 954: {
 22800                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 22801  006034  ECA5  F02D         	call	PL86	;call to abstracted procedure
 22802  006038  EC75  F01B         	call	_RADIO_WriteMode
 22803                           
 22804                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 22805  00603C  0101               	movlb	1	; () banked
 22806  00603E  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 22807                           
 22808                           ; BSR set to: 1
 22809  006040  0012               	return		;funcret
 22810  006042                     __end_of_RADIO_ReceiveStop:
 22811                           	opt stack 0
 22812                           tosu	equ	0xFFF
 22813                           tosh	equ	0xFFE
 22814                           tosl	equ	0xFFD
 22815                           pclath	equ	0xFFA
 22816                           tblptru	equ	0xFF8
 22817                           tblptrh	equ	0xFF7
 22818                           tblptrl	equ	0xFF6
 22819                           tablat	equ	0xFF5
 22820                           prodh	equ	0xFF4
 22821                           prodl	equ	0xFF3
 22822                           intcon	equ	0xFF2
 22823                           indf0	equ	0xFEF
 22824                           postinc0	equ	0xFEE
 22825                           plusw0	equ	0xFEB
 22826                           fsr0h	equ	0xFEA
 22827                           fsr0l	equ	0xFE9
 22828                           wreg	equ	0xFE8
 22829                           postinc1	equ	0xFE6
 22830                           postdec1	equ	0xFE5
 22831                           plusw1	equ	0xFE3
 22832                           fsr1h	equ	0xFE2
 22833                           fsr1l	equ	0xFE1
 22834                           indf2	equ	0xFDF
 22835                           postinc2	equ	0xFDE
 22836                           postdec2	equ	0xFDD
 22837                           plusw2	equ	0xFDB
 22838                           fsr2h	equ	0xFDA
 22839                           fsr2l	equ	0xFD9
 22840                           status	equ	0xFD8
 22841                           
 22842 ;; *************** function _RADIO_ReceiveStart *****************
 22843 ;; Defined at:
 22844 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22845 ;; Parameters:    Size  Location     Type
 22846 ;;  rxWindowSize    2   74[BANK0 ] unsigned int 
 22847 ;; Auto vars:     Size  Location     Type
 22848 ;;		None
 22849 ;; Return value:  Size  Location     Type
 22850 ;;                  2   74[BANK0 ] enum E16979
 22851 ;; Registers used:
 22852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22853 ;; Tracked objects:
 22854 ;;		On entry : F/0
 22855 ;;		On exit  : F/0
 22856 ;;		Unchanged: 0/0
 22857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 22858 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22859 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22860 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22861 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 22862 ;;Total ram usage:       10 bytes
 22863 ;; Hardware stack levels used:    1
 22864 ;; Hardware stack levels required when called:   12
 22865 ;; This function calls:
 22866 ;;		_RADIO_RegisterWrite
 22867 ;;		_RADIO_WriteConfiguration
 22868 ;;		_RADIO_WriteMode
 22869 ;;		_SwTimerSetTimeout
 22870 ;;		_SwTimerStart
 22871 ;;		___lldiv
 22872 ;; This function is called by:
 22873 ;;		_LORAWAN_ReceiveWindow1Callback
 22874 ;;		_LORAWAN_ReceiveWindow2Callback
 22875 ;;		_LORAWAN_EnterContinuousReceive
 22876 ;; This function uses a non-reentrant model
 22877 ;;
 22878                           
 22879                           	psect	text118
 22880  0021AC                     __ptext118:
 22881                           	opt stack 0
 22882  0021AC                     _RADIO_ReceiveStart:
 22883                           	opt stack 13
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 22887                           
 22888                           ; BSR set to: 1
 22889                           ;incstack = 0
 22890  0021AC  0101               	movlb	1	; () banked
 22891  0021AE  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 22892  0021B0  D006               	goto	l12726
 22893                           
 22894                           ; BSR set to: 1
 22895                           ;radio_driver_SX1276.c: 878: {
 22896                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 22897  0021B2  0E80               	movlw	128
 22898  0021B4  0100               	movlb	0	; () banked
 22899  0021B6  6FAB               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22900  0021B8  0E03               	movlw	3
 22901  0021BA  6FAA               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22902  0021BC  0C03               	retlw	3
 22903  0021BE                     l12726:
 22904                           
 22905                           ; BSR set to: 1
 22906                           ;radio_driver_SX1276.c: 880: }
 22907                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 22908  0021BE  C198  F0AC         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 22909  0021C2  0E03               	movlw	3
 22910  0021C4  0100               	movlb	0	; () banked
 22911  0021C6  17AC               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 22912  0021C8  E005               	bz	l12732
 22913                           
 22914                           ; BSR set to: 0
 22915                           ;radio_driver_SX1276.c: 883: {
 22916                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 22917  0021CA  0E80               	movlw	128
 22918  0021CC  6FAB               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22919  0021CE  0E04               	movlw	4
 22920  0021D0  6FAA               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22921  0021D2  0C04               	retlw	4
 22922  0021D4                     l12732:
 22923                           
 22924                           ; BSR set to: 0
 22925                           ;radio_driver_SX1276.c: 885: }
 22926                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 22927  0021D4  51AA               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22928  0021D6  11AB               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22929  0021D8  E105               	bnz	l12736
 22930                           
 22931                           ; BSR set to: 0
 22932                           ;radio_driver_SX1276.c: 888: {
 22933                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 22934  0021DA  ECDC  F00F         	call	PL384	;call to abstracted procedure
 22935  0021DE  ECDB  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22936                           
 22937                           ;radio_driver_SX1276.c: 890: }
 22938  0021E2  D006               	goto	l12738
 22939  0021E4                     l12736:
 22940                           
 22941                           ; BSR set to: 0
 22942                           ;radio_driver_SX1276.c: 891: else
 22943                           ;radio_driver_SX1276.c: 892: {
 22944                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 22945  0021E4  C0AA  F0A0         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 22946  0021E8  C0AB  F0A1         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 22947  0021EC  ECDB  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22948  0021F0                     l12738:
 22949                           
 22950                           ;radio_driver_SX1276.c: 894: }
 22951                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 22952  0021F0  0101               	movlb	1	; () banked
 22953  0021F2  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22954  0021F4  E10E               	bnz	l12742
 22955                           
 22956                           ; BSR set to: 1
 22957                           ;radio_driver_SX1276.c: 897: {
 22958                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 22959  0021F6  0E01               	movlw	1
 22960  0021F8  0100               	movlb	0	; () banked
 22961  0021FA  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 22962  0021FC  0E22               	movlw	34
 22963  0021FE  EC79  F02F         	call	_RADIO_RegisterWrite
 22964                           
 22965                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 22966  002202  D8B0               	call	PL456	;call to abstracted procedure
 22967  002204  EC79  F02F         	call	_RADIO_RegisterWrite
 22968                           
 22969                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 22970  002208  ECE1  F00F         	call	PL420	;call to abstracted procedure
 22971  00220C  EC79  F02F         	call	_RADIO_RegisterWrite
 22972                           
 22973                           ;radio_driver_SX1276.c: 908: }
 22974  002210  D011               	goto	l12744
 22975  002212                     l12742:
 22976                           
 22977                           ; BSR set to: 1
 22978                           ;radio_driver_SX1276.c: 909: else
 22979                           ;radio_driver_SX1276.c: 910: {
 22980                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 22981  002212  C1A9  F066         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 22982  002216  0E12               	movlw	18
 22983  002218  EC79  F02F         	call	_RADIO_RegisterWrite
 22984                           
 22985                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 22986  00221C  C1AA  F066         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 22987  002220  0E13               	movlw	19
 22988  002222  EC79  F02F         	call	_RADIO_RegisterWrite
 22989                           
 22990                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 22991  002226  D89E               	call	PL456	;call to abstracted procedure
 22992  002228  EC79  F02F         	call	_RADIO_RegisterWrite
 22993                           
 22994                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 22995  00222C  ECE1  F00F         	call	PL420	;call to abstracted procedure
 22996  002230  EC79  F02F         	call	_RADIO_RegisterWrite
 22997  002234                     l12744:
 22998                           
 22999                           ;radio_driver_SX1276.c: 917: }
 23000                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 23001  002234  0101               	movlb	1	; () banked
 23002  002236  8398               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 23003                           
 23004                           ; BSR set to: 1
 23005                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 23006  002238  0EE7               	movlw	231
 23007  00223A  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 23008                           
 23009                           ; BSR set to: 1
 23010                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 23011  00223C  0100               	movlb	0	; () banked
 23012  00223E  51AA               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23013  002240  11AB               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23014  002242  E106               	bnz	l12752
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;radio_driver_SX1276.c: 925: {
 23018                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 23019  002244  EC15  F01A         	call	PL268	;call to abstracted procedure
 23020  002248  0E05               	movlw	5
 23021  00224A  EC75  F01B         	call	_RADIO_WriteMode
 23022                           
 23023                           ;radio_driver_SX1276.c: 927: }
 23024  00224E  D031               	goto	l12762
 23025  002250                     l12752:
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;radio_driver_SX1276.c: 928: else
 23029                           ;radio_driver_SX1276.c: 929: {
 23030                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 23031  002250  0101               	movlb	1	; () banked
 23032  002252  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 23033  002254  E109               	bnz	l12756
 23034                           
 23035                           ; BSR set to: 1
 23036                           ;radio_driver_SX1276.c: 931: {
 23037                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 23038  002256  0E01               	movlw	1
 23039  002258  0100               	movlb	0	; () banked
 23040  00225A  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 23041  00225C  0E00               	movlw	0
 23042  00225E  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23043  002260  0E06               	movlw	6
 23044  002262  EC75  F01B         	call	_RADIO_WriteMode
 23045                           
 23046                           ;radio_driver_SX1276.c: 933: }
 23047  002266  D025               	goto	l12762
 23048  002268                     l12756:
 23049                           
 23050                           ; BSR set to: 1
 23051                           ;radio_driver_SX1276.c: 934: else
 23052                           ;radio_driver_SX1276.c: 935: {
 23053                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 23054  002268  0E00               	movlw	0
 23055  00226A  EC12  F025         	call	PL410	;call to abstracted procedure
 23056  00226E  EC75  F01B         	call	_RADIO_WriteMode
 23057                           
 23058                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 23059  002272  0100               	movlb	0	; () banked
 23060  002274  51AA               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23061  002276  6FAC               	movwf	??_RADIO_ReceiveStart& (0+255),b
 23062  002278  51AB               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23063  00227A  6FAD               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 23064  00227C  6BAE               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 23065  00227E  6BAF               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 23066  002280  0E0C               	movlw	12
 23067  002282                     u13765:
 23068  002282  90D8               	bcf	status,0,c
 23069  002284  D86A               	call	PL396	;call to abstracted procedure
 23070  002286  2EE8               	decfsz	wreg,f,c
 23071  002288  D7FC               	goto	u13765
 23072  00228A  D858               	call	PL132	;call to abstracted procedure
 23073  00228C  D852               	call	PL32	;call to abstracted procedure
 23074  00228E  EC55  F025         	call	___lldiv	;wreg free
 23075  002292  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 23076  002296  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 23077  00229A  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 23078  00229E  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 23079  0022A2  0101               	movlb	1	; () banked
 23080  0022A4  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23081  0022A6  EC4F  F02C         	call	_SwTimerSetTimeout
 23082                           
 23083                           ; BSR set to: 0
 23084                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 23085  0022AA  0101               	movlb	1	; () banked
 23086  0022AC  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23087  0022AE  ECFE  F025         	call	_SwTimerStart
 23088  0022B2                     l12762:
 23089                           
 23090                           ;radio_driver_SX1276.c: 939: }
 23091                           ;radio_driver_SX1276.c: 940: }
 23092                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 23093  0022B2  ECD6  F00F         	call	PL362	;call to abstracted procedure
 23094  0022B6  E039               	bz	l12774
 23095                           
 23096                           ; BSR set to: 1
 23097                           ;radio_driver_SX1276.c: 943: {
 23098                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 23099  0022B8  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 23100  0022BA  E103               	bnz	u13780
 23101  0022BC  ECD0  F00F         	call	PL354	;call to abstracted procedure
 23102  0022C0  E30A               	bnc	l12768
 23103  0022C2                     u13780:
 23104                           
 23105                           ; BSR set to: 1
 23106  0022C2  ECC0  F00F         	call	PL122	;call to abstracted procedure
 23107  0022C6  D835               	call	PL32	;call to abstracted procedure
 23108  0022C8  EC55  F025         	call	___lldiv	;wreg free
 23109  0022CC  0E0C               	movlw	12
 23110  0022CE                     u13795:
 23111  0022CE  D83F               	call	PL196	;call to abstracted procedure
 23112  0022D0  2EE8               	decfsz	wreg,f,c
 23113  0022D2  D7FD               	goto	u13795
 23114  0022D4  D012               	goto	L15
 23115  0022D6                     l12768:
 23116                           
 23117                           ; BSR set to: 1
 23118  0022D6  C19F  F0AC         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 23119  0022DA  C1A0  F0AD         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 23120  0022DE  C1A1  F0AE         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 23121  0022E2  C1A2  F0AF         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 23122  0022E6  0E0C               	movlw	12
 23123  0022E8                     u13805:
 23124  0022E8  90D8               	bcf	status,0,c
 23125  0022EA  0100               	movlb	0	; () banked
 23126  0022EC  D836               	call	PL396	;call to abstracted procedure
 23127  0022EE  2EE8               	decfsz	wreg,f,c
 23128  0022F0  D7FB               	goto	u13805
 23129  0022F2  D824               	call	PL132	;call to abstracted procedure
 23130  0022F4  D81E               	call	PL32	;call to abstracted procedure
 23131  0022F6  EC55  F025         	call	___lldiv	;wreg free
 23132  0022FA                     L15:
 23133  0022FA  C064  F0B0         	movff	?___lldiv,_RADIO_ReceiveStart$1059
 23134  0022FE  C065  F0B1         	movff	?___lldiv+1,_RADIO_ReceiveStart$1059+1
 23135  002302  C066  F0B2         	movff	?___lldiv+2,_RADIO_ReceiveStart$1059+2
 23136  002306  C067  F0B3         	movff	?___lldiv+3,_RADIO_ReceiveStart$1059+3
 23137                           
 23138                           ; BSR set to: 0
 23139  00230A  C0B0  F071         	movff	_RADIO_ReceiveStart$1059,SwTimerSetTimeout@timeout
 23140  00230E  C0B1  F072         	movff	_RADIO_ReceiveStart$1059+1,SwTimerSetTimeout@timeout+1
 23141  002312  C0B2  F073         	movff	_RADIO_ReceiveStart$1059+2,SwTimerSetTimeout@timeout+2
 23142  002316  C0B3  F074         	movff	_RADIO_ReceiveStart$1059+3,SwTimerSetTimeout@timeout+3
 23143  00231A  0101               	movlb	1	; () banked
 23144  00231C  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23145  00231E  EC4F  F02C         	call	_SwTimerSetTimeout
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 23149  002322  0101               	movlb	1	; () banked
 23150  002324  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23151  002326  ECFE  F025         	call	_SwTimerStart
 23152  00232A                     l12774:
 23153                           
 23154                           ;radio_driver_SX1276.c: 946: }
 23155                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 23156  00232A  0100               	movlb	0	; () banked
 23157  00232C  6BAA               	clrf	?_RADIO_ReceiveStart& (0+255),b
 23158  00232E  6BAB               	clrf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23159                           
 23160                           ; BSR set to: 0
 23161  002330  0012               	return		;funcret
 23162  002332                     __end_of_RADIO_ReceiveStart:
 23163                           	opt stack 0
 23164  002332                     PL32:
 23165                           	opt stack 17
 23166  002332  6F68               	movwf	___lldiv@divisor& (0+255),b
 23167  002334  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23168  002336  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23169  002338  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23170  00233A  0012               	return	
 23171  00233C                     __end_ofPL32:
 23172                           	opt stack 0
 23173  00233C                     PL132:
 23174                           	opt stack 13
 23175  00233C  C0AC  F064         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23176  002340  C0AD  F065         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23177  002344  C0AE  F066         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23178  002348  C0AF  F067         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23179  00234C  0C7D               	retlw	125
 23180  00234E                     __end_ofPL132:
 23181                           	opt stack 0
 23182  00234E                     PL196:
 23183                           	opt stack 13
 23184  00234E  90D8               	bcf	status,0,c
 23185  002350  3764               	rlcf	?___lldiv& (0+255),f,b
 23186  002352  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 23187  002354  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 23188  002356  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 23189  002358  0012               	return	
 23190  00235A                     __end_ofPL196:
 23191                           	opt stack 0
 23192  00235A                     PL396:
 23193                           	opt stack 13
 23194  00235A  37AC               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23195  00235C  37AD               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23196  00235E  37AE               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23197  002360  37AF               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23198  002362  0012               	return	
 23199  002364                     __end_ofPL396:
 23200                           	opt stack 0
 23201  002364                     PL456:
 23202                           	opt stack 13
 23203  002364  0100               	movlb	0	; () banked
 23204  002366  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23205  002368  0C40               	retlw	64
 23206  00236A                     __end_ofPL456:
 23207                           	opt stack 0
 23208                           tosu	equ	0xFFF
 23209                           tosh	equ	0xFFE
 23210                           tosl	equ	0xFFD
 23211                           pclath	equ	0xFFA
 23212                           tblptru	equ	0xFF8
 23213                           tblptrh	equ	0xFF7
 23214                           tblptrl	equ	0xFF6
 23215                           tablat	equ	0xFF5
 23216                           prodh	equ	0xFF4
 23217                           prodl	equ	0xFF3
 23218                           intcon	equ	0xFF2
 23219                           indf0	equ	0xFEF
 23220                           postinc0	equ	0xFEE
 23221                           plusw0	equ	0xFEB
 23222                           fsr0h	equ	0xFEA
 23223                           fsr0l	equ	0xFE9
 23224                           wreg	equ	0xFE8
 23225                           postinc1	equ	0xFE6
 23226                           postdec1	equ	0xFE5
 23227                           plusw1	equ	0xFE3
 23228                           fsr1h	equ	0xFE2
 23229                           fsr1l	equ	0xFE1
 23230                           indf2	equ	0xFDF
 23231                           postinc2	equ	0xFDE
 23232                           postdec2	equ	0xFDD
 23233                           plusw2	equ	0xFDB
 23234                           fsr2h	equ	0xFDA
 23235                           fsr2l	equ	0xFD9
 23236                           status	equ	0xFD8
 23237                           
 23238 ;; *************** function _ConfigureRadioRx *****************
 23239 ;; Defined at:
 23240 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23241 ;; Parameters:    Size  Location     Type
 23242 ;;  dataRate        1    wreg     unsigned char 
 23243 ;;  freq            4   22[BANK0 ] unsigned long 
 23244 ;; Auto vars:     Size  Location     Type
 23245 ;;  dataRate        1   26[BANK0 ] unsigned char 
 23246 ;; Return value:  Size  Location     Type
 23247 ;;                  1    wreg      void 
 23248 ;; Registers used:
 23249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23250 ;; Tracked objects:
 23251 ;;		On entry : F/2
 23252 ;;		On exit  : 0/0
 23253 ;;		Unchanged: 0/0
 23254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23255 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23258 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23259 ;;Total ram usage:        5 bytes
 23260 ;; Hardware stack levels used:    1
 23261 ;; Hardware stack levels required when called:   10
 23262 ;; This function calls:
 23263 ;;		_ConfigureRadio
 23264 ;;		_RADIO_SetCRC
 23265 ;;		_RADIO_SetIQInverted
 23266 ;; This function is called by:
 23267 ;;		_LORAWAN_ReceiveWindow1Callback
 23268 ;;		_LORAWAN_ReceiveWindow2Callback
 23269 ;;		_LORAWAN_EnterContinuousReceive
 23270 ;; This function uses a non-reentrant model
 23271 ;;
 23272                           
 23273                           	psect	text119
 23274  005CCE                     __ptext119:
 23275                           	opt stack 0
 23276  005CCE                     _ConfigureRadioRx:
 23277                           	opt stack 15
 23278                           
 23279                           ; BSR set to: 0
 23280                           ;incstack = 0
 23281                           ;ConfigureRadioRx@dataRate stored from wreg
 23282  005CCE  0100               	movlb	0	; () banked
 23283  005CD0  6F7A               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 23284                           
 23285                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 23286  005CD2  C076  F071         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 23287  005CD6  C077  F072         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 23288  005CDA  C078  F073         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 23289  005CDE  C079  F074         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 23290  005CE2  517A               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 23291  005CE4  ECA0  F024         	call	_ConfigureRadio
 23292                           
 23293                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 23294  005CE8  0E00               	movlw	0
 23295  005CEA  ECEC  F030         	call	_RADIO_SetCRC
 23296                           
 23297                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 23298  005CEE  0E01               	movlw	1
 23299  005CF0  EFE7  F030         	goto	_RADIO_SetIQInverted
 23300  005CF4                     __end_of_ConfigureRadioRx:
 23301                           	opt stack 0
 23302                           tosu	equ	0xFFF
 23303                           tosh	equ	0xFFE
 23304                           tosl	equ	0xFFD
 23305                           pclath	equ	0xFFA
 23306                           tblptru	equ	0xFF8
 23307                           tblptrh	equ	0xFF7
 23308                           tblptrl	equ	0xFF6
 23309                           tablat	equ	0xFF5
 23310                           prodh	equ	0xFF4
 23311                           prodl	equ	0xFF3
 23312                           intcon	equ	0xFF2
 23313                           indf0	equ	0xFEF
 23314                           postinc0	equ	0xFEE
 23315                           plusw0	equ	0xFEB
 23316                           fsr0h	equ	0xFEA
 23317                           fsr0l	equ	0xFE9
 23318                           wreg	equ	0xFE8
 23319                           postinc1	equ	0xFE6
 23320                           postdec1	equ	0xFE5
 23321                           plusw1	equ	0xFE3
 23322                           fsr1h	equ	0xFE2
 23323                           fsr1l	equ	0xFE1
 23324                           indf2	equ	0xFDF
 23325                           postinc2	equ	0xFDE
 23326                           postdec2	equ	0xFDD
 23327                           plusw2	equ	0xFDB
 23328                           fsr2h	equ	0xFDA
 23329                           fsr2l	equ	0xFD9
 23330                           status	equ	0xFD8
 23331                           
 23332 ;; *************** function _INTERRUPT_GetDioStatus *****************
 23333 ;; Defined at:
 23334 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 23335 ;; Parameters:    Size  Location     Type
 23336 ;;		None
 23337 ;; Auto vars:     Size  Location     Type
 23338 ;;  a               1    4[BANK0 ] unsigned char 
 23339 ;; Return value:  Size  Location     Type
 23340 ;;                  1    wreg      unsigned char 
 23341 ;; Registers used:
 23342 ;;		wreg, status,2
 23343 ;; Tracked objects:
 23344 ;;		On entry : F/0
 23345 ;;		On exit  : F/0
 23346 ;;		Unchanged: 0/0
 23347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23352 ;;Total ram usage:        1 bytes
 23353 ;; Hardware stack levels used:    1
 23354 ;; Hardware stack levels required when called:    7
 23355 ;; This function calls:
 23356 ;;		Nothing
 23357 ;; This function is called by:
 23358 ;;		_LORAWAN_Mainloop
 23359 ;; This function uses a non-reentrant model
 23360 ;;
 23361                           
 23362                           	psect	text120
 23363  00615E                     __ptext120:
 23364                           	opt stack 0
 23365  00615E                     _INTERRUPT_GetDioStatus:
 23366                           	opt stack 22
 23367                           
 23368                           ; BSR set to: 0
 23369                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 23370                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 23371                           
 23372                           ;incstack = 0
 23373  00615E  9EF2               	bcf	intcon,7,c	;volatile
 23374                           
 23375                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 23376  006160  C048  F064         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 23377                           
 23378                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 23379  006164  6A48               	clrf	_dioStatus,c	;volatile
 23380                           
 23381                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 23382  006166  8EF2               	bsf	intcon,7,c	;volatile
 23383                           
 23384                           ; BSR set to: 0
 23385                           ;interrupt_manager_lora_addons.c: 55: return a;
 23386  006168  5164               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 23387                           
 23388                           ; BSR set to: 0
 23389  00616A  0012               	return		;funcret
 23390  00616C                     __end_of_INTERRUPT_GetDioStatus:
 23391                           	opt stack 0
 23392                           tosu	equ	0xFFF
 23393                           tosh	equ	0xFFE
 23394                           tosl	equ	0xFFD
 23395                           pclath	equ	0xFFA
 23396                           tblptru	equ	0xFF8
 23397                           tblptrh	equ	0xFF7
 23398                           tblptrl	equ	0xFF6
 23399                           tablat	equ	0xFF5
 23400                           prodh	equ	0xFF4
 23401                           prodl	equ	0xFF3
 23402                           intcon	equ	0xFF2
 23403                           indf0	equ	0xFEF
 23404                           postinc0	equ	0xFEE
 23405                           plusw0	equ	0xFEB
 23406                           fsr0h	equ	0xFEA
 23407                           fsr0l	equ	0xFE9
 23408                           wreg	equ	0xFE8
 23409                           postinc1	equ	0xFE6
 23410                           postdec1	equ	0xFE5
 23411                           plusw1	equ	0xFE3
 23412                           fsr1h	equ	0xFE2
 23413                           fsr1l	equ	0xFE1
 23414                           indf2	equ	0xFDF
 23415                           postinc2	equ	0xFDE
 23416                           postdec2	equ	0xFDD
 23417                           plusw2	equ	0xFDB
 23418                           fsr2h	equ	0xFDA
 23419                           fsr2l	equ	0xFD9
 23420                           status	equ	0xFD8
 23421                           
 23422 ;; *************** function _LORAWAN_Join *****************
 23423 ;; Defined at:
 23424 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23425 ;; Parameters:    Size  Location     Type
 23426 ;;  activationTy    1    wreg     enum E17154
 23427 ;; Auto vars:     Size  Location     Type
 23428 ;;  activationTy    1  142[BANK0 ] enum E17154
 23429 ;;  result          1  141[BANK0 ] enum E17131
 23430 ;;  bufferIndex     1  140[BANK0 ] unsigned char 
 23431 ;; Return value:  Size  Location     Type
 23432 ;;                  1    wreg      enum E17131
 23433 ;; Registers used:
 23434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23435 ;; Tracked objects:
 23436 ;;		On entry : F/2
 23437 ;;		On exit  : D/0
 23438 ;;		Unchanged: 0/0
 23439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23443 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23444 ;;Total ram usage:        3 bytes
 23445 ;; Hardware stack levels used:    1
 23446 ;; Hardware stack levels required when called:   14
 23447 ;; This function calls:
 23448 ;;		_PrepareJoinRequestFrame
 23449 ;;		_RADIO_Transmit
 23450 ;;		_SelectChannelForTransmission
 23451 ;;		_SwTimerSetTimeout
 23452 ;;		_SwTimerStart
 23453 ;;		_UpdateJoinInProgress
 23454 ;; This function is called by:
 23455 ;;		_main
 23456 ;; This function uses a non-reentrant model
 23457 ;;
 23458                           
 23459                           	psect	text121
 23460  004728                     __ptext121:
 23461                           	opt stack 0
 23462  004728                     _LORAWAN_Join:
 23463                           	opt stack 16
 23464                           
 23465                           ; BSR set to: 0
 23466                           ;incstack = 0
 23467                           ;LORAWAN_Join@activationTypeNew stored from wreg
 23468  004728  0100               	movlb	0	; () banked
 23469  00472A  6FEE               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 23470                           
 23471                           ;lorawan.c: 117: uint8_t bufferIndex;
 23472                           ;lorawan.c: 118: LorawanError_t result;
 23473                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 23474  00472C  0102               	movlb	2	; () banked
 23475  00472E  A103               	btfss	(_loRa+3)& (0+255),0,b
 23476                           
 23477                           ; BSR set to: 2
 23478                           ;lorawan.c: 123: }
 23479                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 23480  004730  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 23481  004732  0012               	return	
 23482                           
 23483                           ; BSR set to: 2
 23484                           ;lorawan.c: 128: }
 23485                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 23486  004734  5102               	movf	(_loRa+2)& (0+255),w,b
 23487  004736  0B0F               	andlw	15
 23488  004738  E001               	bz	l1742
 23489  00473A  0012               	return	
 23490  00473C                     l1742:
 23491                           
 23492                           ; BSR set to: 2
 23493                           ;lorawan.c: 133: }
 23494                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 23495  00473C  C0EE  F21D         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 23496                           
 23497                           ; BSR set to: 2
 23498                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 23499  004740  0100               	movlb	0	; () banked
 23500  004742  51EE               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 23501  004744  E11F               	bnz	l1743
 23502                           
 23503                           ; BSR set to: 0
 23504                           ;lorawan.c: 138: {
 23505                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 23506  004746  0102               	movlb	2	; () banked
 23507  004748  B1A5               	btfsc	(_loRa+165)& (0+255),0,b
 23508                           
 23509                           ; BSR set to: 2
 23510  00474A  A3A5               	btfss	(_loRa+165)& (0+255),1,b
 23511  00474C  0012               	return	
 23512                           
 23513                           ; BSR set to: 2
 23514  00474E  A7A5               	btfss	(_loRa+165)& (0+255),3,b
 23515  004750  0012               	return	
 23516                           
 23517                           ; BSR set to: 2
 23518                           ;lorawan.c: 144: else
 23519                           ;lorawan.c: 145: {
 23520                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 23521  004752  EC20  F017         	call	_PrepareJoinRequestFrame	;wreg free
 23522  004756  6FEC               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 23523                           
 23524                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 23525  004758  0E00               	movlw	0
 23526  00475A  ECCC  F026         	call	_SelectChannelForTransmission
 23527  00475E  6FED               	movwf	LORAWAN_Join@result& (0+255),b
 23528                           
 23529                           ; BSR set to: 0
 23530                           ;lorawan.c: 149: if (result == OK)
 23531  004760  51ED               	movf	LORAWAN_Join@result& (0+255),w,b
 23532  004762  A4D8               	btfss	status,2,c
 23533  004764  0012               	return	
 23534                           
 23535                           ; BSR set to: 0
 23536                           ;lorawan.c: 150: {
 23537                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 23538  004766  0EE0               	movlw	low _macBuffer
 23539  004768  6FAA               	movwf	RADIO_Transmit@buffer& (0+255),b
 23540  00476A  0E04               	movlw	high _macBuffer
 23541  00476C  6FAB               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 23542  00476E  C0EC  F0AC         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 23543  004772  ECF0  F00E         	call	_RADIO_Transmit	;wreg free
 23544  004776  51AA               	movf	?_RADIO_Transmit& (0+255),w,b
 23545  004778  11AB               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 23546  00477A  A4D8               	btfss	status,2,c
 23547  00477C  0012               	return	
 23548                           
 23549                           ; BSR set to: 0
 23550                           ;lorawan.c: 152: {
 23551                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 23552  00477E  0E01               	movlw	1
 23553  004780  EFCC  F02F         	goto	_UpdateJoinInProgress
 23554  004784                     l1743:
 23555                           
 23556                           ; BSR set to: 0
 23557                           ;lorawan.c: 167: else
 23558                           ;lorawan.c: 168: {
 23559                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 23560  004784  0102               	movlb	2	; () banked
 23561  004786  BBA5               	btfsc	(_loRa+165)& (0+255),5,b
 23562                           
 23563                           ; BSR set to: 2
 23564  004788  A9A5               	btfss	(_loRa+165)& (0+255),4,b
 23565  00478A  0012               	return	
 23566                           
 23567                           ; BSR set to: 2
 23568  00478C  A5A5               	btfss	(_loRa+165)& (0+255),2,b
 23569  00478E  0012               	return	
 23570                           
 23571                           ; BSR set to: 2
 23572                           ;lorawan.c: 174: else
 23573                           ;lorawan.c: 175: {
 23574                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 23575  004790  0E07               	movlw	7
 23576  004792  ECCC  F02F         	call	_UpdateJoinInProgress
 23577                           
 23578                           ; BSR set to: 2
 23579                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 23580  004796  0E8F               	movlw	143
 23581  004798  0100               	movlb	0	; () banked
 23582  00479A  6F71               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 23583  00479C  0E02               	movlw	2
 23584  00479E  6F72               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 23585  0047A0  6B73               	clrf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 23586  0047A2  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 23587  0047A4  0102               	movlb	2	; () banked
 23588  0047A6  51F3               	movf	(_loRa+243)& (0+255),w,b
 23589  0047A8  EC4F  F02C         	call	_SwTimerSetTimeout
 23590                           
 23591                           ; BSR set to: 0
 23592                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 23593  0047AC  0102               	movlb	2	; () banked
 23594  0047AE  51F3               	movf	(_loRa+243)& (0+255),w,b
 23595  0047B0  EFFE  F025         	goto	_SwTimerStart
 23596  0047B4                     __end_of_LORAWAN_Join:
 23597                           	opt stack 0
 23598                           tosu	equ	0xFFF
 23599                           tosh	equ	0xFFE
 23600                           tosl	equ	0xFFD
 23601                           pclath	equ	0xFFA
 23602                           tblptru	equ	0xFF8
 23603                           tblptrh	equ	0xFF7
 23604                           tblptrl	equ	0xFF6
 23605                           tablat	equ	0xFF5
 23606                           prodh	equ	0xFF4
 23607                           prodl	equ	0xFF3
 23608                           intcon	equ	0xFF2
 23609                           indf0	equ	0xFEF
 23610                           postinc0	equ	0xFEE
 23611                           plusw0	equ	0xFEB
 23612                           fsr0h	equ	0xFEA
 23613                           fsr0l	equ	0xFE9
 23614                           wreg	equ	0xFE8
 23615                           postinc1	equ	0xFE6
 23616                           postdec1	equ	0xFE5
 23617                           plusw1	equ	0xFE3
 23618                           fsr1h	equ	0xFE2
 23619                           fsr1l	equ	0xFE1
 23620                           indf2	equ	0xFDF
 23621                           postinc2	equ	0xFDE
 23622                           postdec2	equ	0xFDD
 23623                           plusw2	equ	0xFDB
 23624                           fsr2h	equ	0xFDA
 23625                           fsr2l	equ	0xFD9
 23626                           status	equ	0xFD8
 23627                           
 23628 ;; *************** function _UpdateJoinInProgress *****************
 23629 ;; Defined at:
 23630 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23631 ;; Parameters:    Size  Location     Type
 23632 ;;  state           1    wreg     unsigned char 
 23633 ;; Auto vars:     Size  Location     Type
 23634 ;;  state           1    4[BANK0 ] unsigned char 
 23635 ;; Return value:  Size  Location     Type
 23636 ;;                  1    wreg      void 
 23637 ;; Registers used:
 23638 ;;		wreg, status,2, status,0
 23639 ;; Tracked objects:
 23640 ;;		On entry : D/0
 23641 ;;		On exit  : F/2
 23642 ;;		Unchanged: 0/0
 23643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23648 ;;Total ram usage:        1 bytes
 23649 ;; Hardware stack levels used:    1
 23650 ;; Hardware stack levels required when called:    7
 23651 ;; This function calls:
 23652 ;;		Nothing
 23653 ;; This function is called by:
 23654 ;;		_LORAWAN_Join
 23655 ;; This function uses a non-reentrant model
 23656 ;;
 23657                           
 23658                           	psect	text122
 23659  005F98                     __ptext122:
 23660                           	opt stack 0
 23661  005F98                     _UpdateJoinInProgress:
 23662                           	opt stack 22
 23663                           
 23664                           ;incstack = 0
 23665                           ;UpdateJoinInProgress@state stored from wreg
 23666  005F98  0100               	movlb	0	; () banked
 23667  005F9A  6F64               	movwf	UpdateJoinInProgress@state& (0+255),b
 23668                           
 23669                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 23670  005F9C  0102               	movlb	2	; () banked
 23671  005F9E  9902               	bcf	(_loRa+2)& (0+255),4,b
 23672                           
 23673                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 23674  005FA0  8500               	bsf	_loRa& (0+255),2,b
 23675                           
 23676                           ; BSR set to: 2
 23677                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 23678  005FA2  5102               	movf	(_loRa+2)& (0+255),w,b
 23679  005FA4  0100               	movlb	0	; () banked
 23680  005FA6  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23681  005FA8  0BF0               	andlw	-16
 23682  005FAA  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23683  005FAC  0102               	movlb	2	; () banked
 23684  005FAE  6F02               	movwf	(_loRa+2)& (0+255),b
 23685                           
 23686                           ; BSR set to: 2
 23687  005FB0  0012               	return		;funcret
 23688  005FB2                     __end_of_UpdateJoinInProgress:
 23689                           	opt stack 0
 23690                           tosu	equ	0xFFF
 23691                           tosh	equ	0xFFE
 23692                           tosl	equ	0xFFD
 23693                           pclath	equ	0xFFA
 23694                           tblptru	equ	0xFF8
 23695                           tblptrh	equ	0xFF7
 23696                           tblptrl	equ	0xFF6
 23697                           tablat	equ	0xFF5
 23698                           prodh	equ	0xFF4
 23699                           prodl	equ	0xFF3
 23700                           intcon	equ	0xFF2
 23701                           indf0	equ	0xFEF
 23702                           postinc0	equ	0xFEE
 23703                           plusw0	equ	0xFEB
 23704                           fsr0h	equ	0xFEA
 23705                           fsr0l	equ	0xFE9
 23706                           wreg	equ	0xFE8
 23707                           postinc1	equ	0xFE6
 23708                           postdec1	equ	0xFE5
 23709                           plusw1	equ	0xFE3
 23710                           fsr1h	equ	0xFE2
 23711                           fsr1l	equ	0xFE1
 23712                           indf2	equ	0xFDF
 23713                           postinc2	equ	0xFDE
 23714                           postdec2	equ	0xFDD
 23715                           plusw2	equ	0xFDB
 23716                           fsr2h	equ	0xFDA
 23717                           fsr2l	equ	0xFD9
 23718                           status	equ	0xFD8
 23719                           
 23720 ;; *************** function _SelectChannelForTransmission *****************
 23721 ;; Defined at:
 23722 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23723 ;; Parameters:    Size  Location     Type
 23724 ;;  transmission    1    wreg     unsigned char 
 23725 ;; Auto vars:     Size  Location     Type
 23726 ;;  transmission    1   85[BANK0 ] unsigned char 
 23727 ;;  channelIndex    1   87[BANK0 ] unsigned char 
 23728 ;;  result          1   86[BANK0 ] enum E17190
 23729 ;; Return value:  Size  Location     Type
 23730 ;;                  1    wreg      enum E17190
 23731 ;; Registers used:
 23732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23733 ;; Tracked objects:
 23734 ;;		On entry : 0/0
 23735 ;;		On exit  : F/0
 23736 ;;		Unchanged: 0/0
 23737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23742 ;;Total ram usage:        3 bytes
 23743 ;; Hardware stack levels used:    1
 23744 ;; Hardware stack levels required when called:   11
 23745 ;; This function calls:
 23746 ;;		_ConfigureRadioTx
 23747 ;;		_SearchAvailableChannel
 23748 ;; This function is called by:
 23749 ;;		_LORAWAN_RxTimeout
 23750 ;;		_LORAWAN_Join
 23751 ;;		_LORAWAN_Send
 23752 ;;		_AckRetransmissionCallback
 23753 ;;		_UnconfirmedTransmissionCallback
 23754 ;; This function uses a non-reentrant model
 23755 ;;
 23756                           
 23757                           	psect	text123
 23758  004D98                     __ptext123:
 23759                           	opt stack 0
 23760  004D98                     _SelectChannelForTransmission:
 23761                           	opt stack 17
 23762                           
 23763                           ; BSR set to: 2
 23764                           ;incstack = 0
 23765                           ;SelectChannelForTransmission@transmissionType stored from wreg
 23766  004D98  0100               	movlb	0	; () banked
 23767  004D9A  6FB5               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 23768                           
 23769                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 23770                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 23771  004D9C  C0B5  F0A9         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 23772  004DA0  0EB7               	movlw	low SelectChannelForTransmission@channelIndex
 23773  004DA2  6FAA               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 23774  004DA4  6BAB               	clrf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 23775  004DA6  0E10               	movlw	16
 23776  004DA8  EC11  F020         	call	_SearchAvailableChannel
 23777  004DAC  6FB6               	movwf	SelectChannelForTransmission@result& (0+255),b
 23778                           
 23779                           ; BSR set to: 0
 23780                           ;lorawan_eu.c: 926: if (result == OK)
 23781  004DAE  51B6               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23782  004DB0  E11A               	bnz	l13424
 23783                           
 23784                           ; BSR set to: 0
 23785                           ;lorawan_eu.c: 927: {
 23786                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 23787  004DB2  C0B7  F2DA         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 23788                           
 23789                           ; BSR set to: 0
 23790                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 23791  004DB6  51B7               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 23792  004DB8  D819               	call	PL272	;call to abstracted procedure
 23793  004DBA  CFDE F213          	movff	postinc2,_loRa+19
 23794  004DBE  CFDE F214          	movff	postinc2,_loRa+20
 23795  004DC2  CFDE F215          	movff	postinc2,_loRa+21
 23796  004DC6  CFDE F216          	movff	postinc2,_loRa+22
 23797                           
 23798                           ; BSR set to: 0
 23799                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 23800  004DCA  C2DF  F217         	movff	_loRa+223,_loRa+23
 23801                           
 23802                           ; BSR set to: 0
 23803                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 23804  004DCE  C213  F076         	movff	_loRa+19,ConfigureRadioTx@freq
 23805  004DD2  C214  F077         	movff	_loRa+20,ConfigureRadioTx@freq+1
 23806  004DD6  C215  F078         	movff	_loRa+21,ConfigureRadioTx@freq+2
 23807  004DDA  C216  F079         	movff	_loRa+22,ConfigureRadioTx@freq+3
 23808  004DDE  0102               	movlb	2	; () banked
 23809  004DE0  5117               	movf	(_loRa+23)& (0+255),w,b
 23810  004DE2  EC76  F02B         	call	_ConfigureRadioTx
 23811  004DE6                     l13424:
 23812                           
 23813                           ;lorawan_eu.c: 933: }
 23814                           ;lorawan_eu.c: 934: return result;
 23815  004DE6  0100               	movlb	0	; () banked
 23816  004DE8  51B6               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23817                           
 23818                           ; BSR set to: 0
 23819  004DEA  0012               	return		;funcret
 23820  004DEC                     __end_of_SelectChannelForTransmission:
 23821                           	opt stack 0
 23822  004DEC                     PL272:
 23823                           	opt stack 17
 23824  004DEC  0D0E               	mullw	14
 23825  004DEE  0E00               	movlw	low _Channels
 23826  004DF0  24F3               	addwf	prodl,w,c
 23827  004DF2  6ED9               	movwf	fsr2l,c
 23828  004DF4  0E04               	movlw	high _Channels
 23829  004DF6  20F4               	addwfc	prodh,w,c
 23830  004DF8  6EDA               	movwf	fsr2h,c
 23831  004DFA  0012               	return	
 23832  004DFC                     __end_ofPL272:
 23833                           	opt stack 0
 23834                           tosu	equ	0xFFF
 23835                           tosh	equ	0xFFE
 23836                           tosl	equ	0xFFD
 23837                           pclath	equ	0xFFA
 23838                           tblptru	equ	0xFF8
 23839                           tblptrh	equ	0xFF7
 23840                           tblptrl	equ	0xFF6
 23841                           tablat	equ	0xFF5
 23842                           prodh	equ	0xFF4
 23843                           prodl	equ	0xFF3
 23844                           intcon	equ	0xFF2
 23845                           indf0	equ	0xFEF
 23846                           postinc0	equ	0xFEE
 23847                           plusw0	equ	0xFEB
 23848                           fsr0h	equ	0xFEA
 23849                           fsr0l	equ	0xFE9
 23850                           wreg	equ	0xFE8
 23851                           postinc1	equ	0xFE6
 23852                           postdec1	equ	0xFE5
 23853                           plusw1	equ	0xFE3
 23854                           fsr1h	equ	0xFE2
 23855                           fsr1l	equ	0xFE1
 23856                           indf2	equ	0xFDF
 23857                           postinc2	equ	0xFDE
 23858                           postdec2	equ	0xFDD
 23859                           plusw2	equ	0xFDB
 23860                           fsr2h	equ	0xFDA
 23861                           fsr2l	equ	0xFD9
 23862                           status	equ	0xFD8
 23863                           
 23864 ;; *************** function _SearchAvailableChannel *****************
 23865 ;; Defined at:
 23866 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23867 ;; Parameters:    Size  Location     Type
 23868 ;;  maxChannels     1    wreg     unsigned char 
 23869 ;;  transmission    1   73[BANK0 ] unsigned char 
 23870 ;;  channelIndex    2   74[BANK0 ] PTR unsigned char 
 23871 ;;		 -> LORAWAN_RxDone@channelIndex(1), SelectChannelForTransmission@channelIndex(1), 
 23872 ;; Auto vars:     Size  Location     Type
 23873 ;;  maxChannels     1   82[BANK0 ] unsigned char 
 23874 ;;  i               1   84[BANK0 ] unsigned char 
 23875 ;;  randomNumber    1   83[BANK0 ] unsigned char 
 23876 ;;  result          1   81[BANK0 ] enum E17190
 23877 ;;  randomNumber    1   80[BANK0 ] unsigned char 
 23878 ;; Return value:  Size  Location     Type
 23879 ;;                  1    wreg      enum E17190
 23880 ;; Registers used:
 23881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23882 ;; Tracked objects:
 23883 ;;		On entry : D/2
 23884 ;;		On exit  : F/0
 23885 ;;		Unchanged: 0/0
 23886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 23887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23888 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23889 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23890 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23891 ;;Total ram usage:       12 bytes
 23892 ;; Hardware stack levels used:    1
 23893 ;; Hardware stack levels required when called:   10
 23894 ;; This function calls:
 23895 ;;		_Random
 23896 ;; This function is called by:
 23897 ;;		_SelectChannelForTransmission
 23898 ;;		_LORAWAN_RxDone
 23899 ;; This function uses a non-reentrant model
 23900 ;;
 23901                           
 23902                           	psect	text124
 23903  004022                     __ptext124:
 23904                           	opt stack 0
 23905  004022                     _SearchAvailableChannel:
 23906                           	opt stack 17
 23907                           
 23908                           ; BSR set to: 0
 23909                           ;incstack = 0
 23910                           ;SearchAvailableChannel@maxChannels stored from wreg
 23911  004022  0100               	movlb	0	; () banked
 23912  004024  6FB2               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 23913                           
 23914                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 23915                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 23916  004026  6BB1               	clrf	SearchAvailableChannel@result& (0+255),b
 23917                           
 23918                           ; BSR set to: 0
 23919                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 23920  004028  C0B2  F0A7         	movff	SearchAvailableChannel@maxChannels,Random@max
 23921  00402C  6BA8               	clrf	(Random@max+1)& (0+255),b
 23922  00402E  ECF9  F02E         	call	_Random	;wreg free
 23923  004032  29A7               	incf	?_Random& (0+255),w,b
 23924  004034  6FB3               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 23925                           
 23926                           ; BSR set to: 0
 23927                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 23928  004036  C0B3  F0B0         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 23929                           
 23930                           ;lorawan_eu.c: 786: while (randomNumber)
 23931  00403A  D03D               	goto	l12976
 23932  00403C                     l1154:
 23933                           
 23934                           ; BSR set to: 0
 23935                           ;lorawan_eu.c: 787: {
 23936                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 23937  00403C  6BB4               	clrf	SearchAvailableChannel@i& (0+255),b
 23938  00403E  D030               	goto	l12968
 23939  004040                     l12952:
 23940                           
 23941                           ; BSR set to: 0
 23942                           ;lorawan_eu.c: 789: {
 23943                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 23944  004040  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 23945  004042  ECB7  F021         	call	PL12	;call to abstracted procedure
 23946  004046  E12A               	bnz	l1157
 23947                           
 23948                           ; BSR set to: 0
 23949  004048  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 23950  00404A  EC71  F006         	call	PL4	;call to abstracted procedure
 23951  00404E  ECDD  F00E         	call	PL140	;call to abstracted procedure
 23952  004052  E124               	bnz	l1157
 23953                           
 23954                           ; BSR set to: 0
 23955  004054  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 23956  004056  ECAF  F021         	call	PL6	;call to abstracted procedure
 23957  00405A  50DF               	movf	223,w,c
 23958  00405C  0B0F               	andlw	15
 23959  00405E  0100               	movlb	0	; () banked
 23960  004060  6FAC               	movwf	??_SearchAvailableChannel& (0+255),b
 23961  004062  51AC               	movf	??_SearchAvailableChannel& (0+255),w,b
 23962  004064  0102               	movlb	2	; () banked
 23963  004066  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 23964  004068  E319               	bnc	l1157
 23965                           
 23966                           ; BSR set to: 2
 23967  00406A  0100               	movlb	0	; () banked
 23968  00406C  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 23969  00406E  ECAF  F021         	call	PL6	;call to abstracted procedure
 23970  004072  38DF               	swapf	223,w,c
 23971  004074  0B0F               	andlw	15
 23972  004076  6FAC               	movwf	??_SearchAvailableChannel& (0+255),b
 23973  004078  0102               	movlb	2	; () banked
 23974  00407A  51DF               	movf	(_loRa+223)& (0+255),w,b
 23975  00407C  0100               	movlb	0	; () banked
 23976  00407E  5DAC               	subwf	??_SearchAvailableChannel& (0+255),w,b
 23977  004080  E30D               	bnc	l1157
 23978                           
 23979                           ; BSR set to: 0
 23980                           ;lorawan_eu.c: 791: {
 23981                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 23982  004082  51A9               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 23983  004084  E10A               	bnz	l12964
 23984                           
 23985                           ; BSR set to: 0
 23986                           ;lorawan_eu.c: 793: {
 23987                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 23988  004086  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 23989  004088  0D0E               	mullw	14
 23990  00408A  0E0C               	movlw	low (_Channels+12)
 23991  00408C  24F3               	addwf	prodl,w,c
 23992  00408E  6ED9               	movwf	fsr2l,c
 23993  004090  0E04               	movlw	high (_Channels+12)
 23994  004092  20F4               	addwfc	prodh,w,c
 23995  004094  6EDA               	movwf	fsr2h,c
 23996  004096  04DE               	decf	postinc2,w,c
 23997  004098  E101               	bnz	l1157
 23998  00409A                     l12964:
 23999                           
 24000                           ; BSR set to: 0
 24001                           ;lorawan_eu.c: 795: {
 24002                           ;lorawan_eu.c: 796: randomNumber --;
 24003  00409A  07B3               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 24004  00409C                     l1157:
 24005  00409C  0100               	movlb	0	; () banked
 24006  00409E  2BB4               	incf	SearchAvailableChannel@i& (0+255),f,b
 24007  0040A0                     l12968:
 24008                           
 24009                           ; BSR set to: 0
 24010  0040A0  51B2               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 24011  0040A2  5DB4               	subwf	SearchAvailableChannel@i& (0+255),w,b
 24012  0040A4  E202               	bc	l12972
 24013                           
 24014                           ; BSR set to: 0
 24015  0040A6  51B3               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24016  0040A8  E1CB               	bnz	l12952
 24017  0040AA                     l12972:
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;lorawan_eu.c: 802: }
 24021                           ;lorawan_eu.c: 803: }
 24022                           ;lorawan_eu.c: 804: }
 24023                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 24024  0040AA  51B0               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 24025  0040AC  19B3               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24026  0040AE  E103               	bnz	l12976
 24027                           
 24028                           ; BSR set to: 0
 24029                           ;lorawan_eu.c: 807: {
 24030                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 24031  0040B0  0E09               	movlw	9
 24032  0040B2  6FB1               	movwf	SearchAvailableChannel@result& (0+255),b
 24033                           
 24034                           ;lorawan_eu.c: 809: break;
 24035  0040B4  D002               	goto	l12978
 24036  0040B6                     l12976:
 24037                           
 24038                           ; BSR set to: 0
 24039  0040B6  51B3               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24040  0040B8  E1C1               	bnz	l1154
 24041  0040BA                     l12978:
 24042                           
 24043                           ; BSR set to: 0
 24044                           ;lorawan_eu.c: 810: }
 24045                           ;lorawan_eu.c: 811: }
 24046                           ;lorawan_eu.c: 813: if ( i != 0)
 24047  0040BA  51B4               	movf	SearchAvailableChannel@i& (0+255),w,b
 24048  0040BC  E007               	bz	l12982
 24049                           
 24050                           ; BSR set to: 0
 24051                           ;lorawan_eu.c: 814: {
 24052                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 24053  0040BE  05B4               	decf	SearchAvailableChannel@i& (0+255),w,b
 24054  0040C0  C0AA  FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 24055  0040C4  C0AB  FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 24056  0040C8  6EDF               	movwf	indf2,c
 24057                           
 24058                           ;lorawan_eu.c: 816: }
 24059  0040CA  D002               	goto	l1167
 24060  0040CC                     l12982:
 24061                           
 24062                           ; BSR set to: 0
 24063                           ;lorawan_eu.c: 817: else
 24064                           ;lorawan_eu.c: 818: {
 24065                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 24066  0040CC  0E09               	movlw	9
 24067  0040CE  6FB1               	movwf	SearchAvailableChannel@result& (0+255),b
 24068  0040D0                     l1167:
 24069                           
 24070                           ; BSR set to: 0
 24071                           ;lorawan_eu.c: 820: }
 24072                           ;lorawan_eu.c: 821: return result;
 24073  0040D0  51B1               	movf	SearchAvailableChannel@result& (0+255),w,b
 24074                           
 24075                           ; BSR set to: 0
 24076  0040D2  0012               	return		;funcret
 24077  0040D4                     __end_of_SearchAvailableChannel:
 24078                           	opt stack 0
 24079                           tosu	equ	0xFFF
 24080                           tosh	equ	0xFFE
 24081                           tosl	equ	0xFFD
 24082                           pclath	equ	0xFFA
 24083                           tblptru	equ	0xFF8
 24084                           tblptrh	equ	0xFF7
 24085                           tblptrl	equ	0xFF6
 24086                           tablat	equ	0xFF5
 24087                           prodh	equ	0xFF4
 24088                           prodl	equ	0xFF3
 24089                           intcon	equ	0xFF2
 24090                           indf0	equ	0xFEF
 24091                           postinc0	equ	0xFEE
 24092                           plusw0	equ	0xFEB
 24093                           fsr0h	equ	0xFEA
 24094                           fsr0l	equ	0xFE9
 24095                           wreg	equ	0xFE8
 24096                           postinc1	equ	0xFE6
 24097                           postdec1	equ	0xFE5
 24098                           plusw1	equ	0xFE3
 24099                           fsr1h	equ	0xFE2
 24100                           fsr1l	equ	0xFE1
 24101                           indf2	equ	0xFDF
 24102                           postinc2	equ	0xFDE
 24103                           postdec2	equ	0xFDD
 24104                           plusw2	equ	0xFDB
 24105                           fsr2h	equ	0xFDA
 24106                           fsr2l	equ	0xFD9
 24107                           status	equ	0xFD8
 24108                           
 24109 ;; *************** function _ConfigureRadioTx *****************
 24110 ;; Defined at:
 24111 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24112 ;; Parameters:    Size  Location     Type
 24113 ;;  dataRate        1    wreg     unsigned char 
 24114 ;;  freq            4   22[BANK0 ] unsigned long 
 24115 ;; Auto vars:     Size  Location     Type
 24116 ;;  dataRate        1   26[BANK0 ] unsigned char 
 24117 ;;  txPower         1   27[BANK0 ] char 
 24118 ;; Return value:  Size  Location     Type
 24119 ;;                  1    wreg      void 
 24120 ;; Registers used:
 24121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24122 ;; Tracked objects:
 24123 ;;		On entry : F/2
 24124 ;;		On exit  : 0/0
 24125 ;;		Unchanged: 0/0
 24126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24131 ;;Total ram usage:        6 bytes
 24132 ;; Hardware stack levels used:    1
 24133 ;; Hardware stack levels required when called:   10
 24134 ;; This function calls:
 24135 ;;		_ConfigureRadio
 24136 ;;		_RADIO_SetCRC
 24137 ;;		_RADIO_SetIQInverted
 24138 ;;		_RADIO_SetOutputPower
 24139 ;; This function is called by:
 24140 ;;		_SelectChannelForTransmission
 24141 ;; This function uses a non-reentrant model
 24142 ;;
 24143                           
 24144                           	psect	text125
 24145  0056EC                     __ptext125:
 24146                           	opt stack 0
 24147  0056EC                     _ConfigureRadioTx:
 24148                           	opt stack 17
 24149                           
 24150                           ; BSR set to: 0
 24151                           ;incstack = 0
 24152                           ;ConfigureRadioTx@dataRate stored from wreg
 24153  0056EC  0100               	movlb	0	; () banked
 24154  0056EE  6F7A               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 24155                           
 24156                           ;lorawan_eu.c: 1257: int8_t txPower;
 24157                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 24158  0056F0  C076  F071         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 24159  0056F4  C077  F072         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 24160  0056F8  C078  F073         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 24161  0056FC  C079  F074         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 24162  005700  517A               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 24163  005702  ECA0  F024         	call	_ConfigureRadio
 24164                           
 24165                           ;lorawan_eu.c: 1262: {
 24166                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 24167  005706  0EA2               	movlw	low _txPower868
 24168  005708  0102               	movlb	2	; () banked
 24169  00570A  25E1               	addwf	(_loRa+225)& (0+255),w,b
 24170  00570C  6EF6               	movwf	tblptrl,c
 24171  00570E  6AF7               	clrf	tblptrh,c
 24172  005710  0EFF               	movlw	high _txPower868
 24173  005712  EC9D  F006         	call	PL48	;call to abstracted procedure
 24174  005716  CFF5 F07B          	movff	tablat,ConfigureRadioTx@txPower
 24175                           
 24176                           ; BSR set to: 2
 24177                           ;lorawan_eu.c: 1268: }
 24178                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 24179                           
 24180                           ;lorawan_eu.c: 1264: }
 24181  00571A  0100               	movlb	0	; () banked
 24182  00571C  517B               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 24183  00571E  EC10  F031         	call	_RADIO_SetOutputPower
 24184                           
 24185                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 24186  005722  0E01               	movlw	1
 24187  005724  ECEC  F030         	call	_RADIO_SetCRC
 24188                           
 24189                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 24190  005728  0E00               	movlw	0
 24191  00572A  EFE7  F030         	goto	_RADIO_SetIQInverted
 24192  00572E                     __end_of_ConfigureRadioTx:
 24193                           	opt stack 0
 24194                           tosu	equ	0xFFF
 24195                           tosh	equ	0xFFE
 24196                           tosl	equ	0xFFD
 24197                           pclath	equ	0xFFA
 24198                           tblptru	equ	0xFF8
 24199                           tblptrh	equ	0xFF7
 24200                           tblptrl	equ	0xFF6
 24201                           tablat	equ	0xFF5
 24202                           prodh	equ	0xFF4
 24203                           prodl	equ	0xFF3
 24204                           intcon	equ	0xFF2
 24205                           indf0	equ	0xFEF
 24206                           postinc0	equ	0xFEE
 24207                           plusw0	equ	0xFEB
 24208                           fsr0h	equ	0xFEA
 24209                           fsr0l	equ	0xFE9
 24210                           wreg	equ	0xFE8
 24211                           postinc1	equ	0xFE6
 24212                           postdec1	equ	0xFE5
 24213                           plusw1	equ	0xFE3
 24214                           fsr1h	equ	0xFE2
 24215                           fsr1l	equ	0xFE1
 24216                           indf2	equ	0xFDF
 24217                           postinc2	equ	0xFDE
 24218                           postdec2	equ	0xFDD
 24219                           plusw2	equ	0xFDB
 24220                           fsr2h	equ	0xFDA
 24221                           fsr2l	equ	0xFD9
 24222                           status	equ	0xFD8
 24223                           
 24224 ;; *************** function _RADIO_SetOutputPower *****************
 24225 ;; Defined at:
 24226 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24227 ;; Parameters:    Size  Location     Type
 24228 ;;  power           1    wreg     char 
 24229 ;; Auto vars:     Size  Location     Type
 24230 ;;  power           1    4[BANK0 ] char 
 24231 ;; Return value:  Size  Location     Type
 24232 ;;                  1    wreg      void 
 24233 ;; Registers used:
 24234 ;;		wreg
 24235 ;; Tracked objects:
 24236 ;;		On entry : F/0
 24237 ;;		On exit  : 0/0
 24238 ;;		Unchanged: 0/0
 24239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24244 ;;Total ram usage:        1 bytes
 24245 ;; Hardware stack levels used:    1
 24246 ;; Hardware stack levels required when called:    7
 24247 ;; This function calls:
 24248 ;;		Nothing
 24249 ;; This function is called by:
 24250 ;;		_ConfigureRadioTx
 24251 ;; This function uses a non-reentrant model
 24252 ;;
 24253                           
 24254                           	psect	text126
 24255  006220                     __ptext126:
 24256                           	opt stack 0
 24257  006220                     _RADIO_SetOutputPower:
 24258                           	opt stack 19
 24259                           
 24260                           ;incstack = 0
 24261                           ;RADIO_SetOutputPower@power stored from wreg
 24262  006220  6F64               	movwf	RADIO_SetOutputPower@power& (0+255),b
 24263                           
 24264                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 24265  006222  C064  F190         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 24266  006226  0012               	return		;funcret
 24267  006228                     __end_of_RADIO_SetOutputPower:
 24268                           	opt stack 0
 24269                           tosu	equ	0xFFF
 24270                           tosh	equ	0xFFE
 24271                           tosl	equ	0xFFD
 24272                           pclath	equ	0xFFA
 24273                           tblptru	equ	0xFF8
 24274                           tblptrh	equ	0xFF7
 24275                           tblptrl	equ	0xFF6
 24276                           tablat	equ	0xFF5
 24277                           prodh	equ	0xFF4
 24278                           prodl	equ	0xFF3
 24279                           intcon	equ	0xFF2
 24280                           indf0	equ	0xFEF
 24281                           postinc0	equ	0xFEE
 24282                           plusw0	equ	0xFEB
 24283                           fsr0h	equ	0xFEA
 24284                           fsr0l	equ	0xFE9
 24285                           wreg	equ	0xFE8
 24286                           postinc1	equ	0xFE6
 24287                           postdec1	equ	0xFE5
 24288                           plusw1	equ	0xFE3
 24289                           fsr1h	equ	0xFE2
 24290                           fsr1l	equ	0xFE1
 24291                           indf2	equ	0xFDF
 24292                           postinc2	equ	0xFDE
 24293                           postdec2	equ	0xFDD
 24294                           plusw2	equ	0xFDB
 24295                           fsr2h	equ	0xFDA
 24296                           fsr2l	equ	0xFD9
 24297                           status	equ	0xFD8
 24298                           
 24299 ;; *************** function _RADIO_SetIQInverted *****************
 24300 ;; Defined at:
 24301 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24302 ;; Parameters:    Size  Location     Type
 24303 ;;  iqInverted      1    wreg     unsigned char 
 24304 ;; Auto vars:     Size  Location     Type
 24305 ;;  iqInverted      1    4[BANK0 ] unsigned char 
 24306 ;; Return value:  Size  Location     Type
 24307 ;;                  1    wreg      void 
 24308 ;; Registers used:
 24309 ;;		wreg
 24310 ;; Tracked objects:
 24311 ;;		On entry : 0/0
 24312 ;;		On exit  : 0/0
 24313 ;;		Unchanged: 0/0
 24314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24319 ;;Total ram usage:        1 bytes
 24320 ;; Hardware stack levels used:    1
 24321 ;; Hardware stack levels required when called:    7
 24322 ;; This function calls:
 24323 ;;		Nothing
 24324 ;; This function is called by:
 24325 ;;		_ConfigureRadioTx
 24326 ;;		_ConfigureRadioRx
 24327 ;; This function uses a non-reentrant model
 24328 ;;
 24329                           
 24330                           	psect	text127
 24331  0061CE                     __ptext127:
 24332                           	opt stack 0
 24333  0061CE                     _RADIO_SetIQInverted:
 24334                           	opt stack 19
 24335                           
 24336                           ;incstack = 0
 24337                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 24338  0061CE  0100               	movlb	0	; () banked
 24339  0061D0  6F64               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 24340                           
 24341                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 24342  0061D2  C064  F195         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 24343  0061D6  0012               	return		;funcret
 24344  0061D8                     __end_of_RADIO_SetIQInverted:
 24345                           	opt stack 0
 24346                           tosu	equ	0xFFF
 24347                           tosh	equ	0xFFE
 24348                           tosl	equ	0xFFD
 24349                           pclath	equ	0xFFA
 24350                           tblptru	equ	0xFF8
 24351                           tblptrh	equ	0xFF7
 24352                           tblptrl	equ	0xFF6
 24353                           tablat	equ	0xFF5
 24354                           prodh	equ	0xFF4
 24355                           prodl	equ	0xFF3
 24356                           intcon	equ	0xFF2
 24357                           indf0	equ	0xFEF
 24358                           postinc0	equ	0xFEE
 24359                           plusw0	equ	0xFEB
 24360                           fsr0h	equ	0xFEA
 24361                           fsr0l	equ	0xFE9
 24362                           wreg	equ	0xFE8
 24363                           postinc1	equ	0xFE6
 24364                           postdec1	equ	0xFE5
 24365                           plusw1	equ	0xFE3
 24366                           fsr1h	equ	0xFE2
 24367                           fsr1l	equ	0xFE1
 24368                           indf2	equ	0xFDF
 24369                           postinc2	equ	0xFDE
 24370                           postdec2	equ	0xFDD
 24371                           plusw2	equ	0xFDB
 24372                           fsr2h	equ	0xFDA
 24373                           fsr2l	equ	0xFD9
 24374                           status	equ	0xFD8
 24375                           
 24376 ;; *************** function _RADIO_SetCRC *****************
 24377 ;; Defined at:
 24378 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24379 ;; Parameters:    Size  Location     Type
 24380 ;;  crc             1    wreg     unsigned char 
 24381 ;; Auto vars:     Size  Location     Type
 24382 ;;  crc             1    4[BANK0 ] unsigned char 
 24383 ;; Return value:  Size  Location     Type
 24384 ;;                  1    wreg      void 
 24385 ;; Registers used:
 24386 ;;		wreg
 24387 ;; Tracked objects:
 24388 ;;		On entry : 0/0
 24389 ;;		On exit  : 0/0
 24390 ;;		Unchanged: 0/0
 24391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24395 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24396 ;;Total ram usage:        1 bytes
 24397 ;; Hardware stack levels used:    1
 24398 ;; Hardware stack levels required when called:    7
 24399 ;; This function calls:
 24400 ;;		Nothing
 24401 ;; This function is called by:
 24402 ;;		_ConfigureRadioTx
 24403 ;;		_ConfigureRadioRx
 24404 ;; This function uses a non-reentrant model
 24405 ;;
 24406                           
 24407                           	psect	text128
 24408  0061D8                     __ptext128:
 24409                           	opt stack 0
 24410  0061D8                     _RADIO_SetCRC:
 24411                           	opt stack 19
 24412                           
 24413                           ;incstack = 0
 24414                           ;RADIO_SetCRC@crc stored from wreg
 24415  0061D8  0100               	movlb	0	; () banked
 24416  0061DA  6F64               	movwf	RADIO_SetCRC@crc& (0+255),b
 24417                           
 24418                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 24419  0061DC  C064  F191         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 24420  0061E0  0012               	return		;funcret
 24421  0061E2                     __end_of_RADIO_SetCRC:
 24422                           	opt stack 0
 24423                           tosu	equ	0xFFF
 24424                           tosh	equ	0xFFE
 24425                           tosl	equ	0xFFD
 24426                           pclath	equ	0xFFA
 24427                           tblptru	equ	0xFF8
 24428                           tblptrh	equ	0xFF7
 24429                           tblptrl	equ	0xFF6
 24430                           tablat	equ	0xFF5
 24431                           prodh	equ	0xFF4
 24432                           prodl	equ	0xFF3
 24433                           intcon	equ	0xFF2
 24434                           indf0	equ	0xFEF
 24435                           postinc0	equ	0xFEE
 24436                           plusw0	equ	0xFEB
 24437                           fsr0h	equ	0xFEA
 24438                           fsr0l	equ	0xFE9
 24439                           wreg	equ	0xFE8
 24440                           postinc1	equ	0xFE6
 24441                           postdec1	equ	0xFE5
 24442                           plusw1	equ	0xFE3
 24443                           fsr1h	equ	0xFE2
 24444                           fsr1l	equ	0xFE1
 24445                           indf2	equ	0xFDF
 24446                           postinc2	equ	0xFDE
 24447                           postdec2	equ	0xFDD
 24448                           plusw2	equ	0xFDB
 24449                           fsr2h	equ	0xFDA
 24450                           fsr2l	equ	0xFD9
 24451                           status	equ	0xFD8
 24452                           
 24453 ;; *************** function _ConfigureRadio *****************
 24454 ;; Defined at:
 24455 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24456 ;; Parameters:    Size  Location     Type
 24457 ;;  dataRate        1    wreg     unsigned char 
 24458 ;;  freq            4   17[BANK0 ] unsigned long 
 24459 ;; Auto vars:     Size  Location     Type
 24460 ;;  dataRate        1   21[BANK0 ] unsigned char 
 24461 ;; Return value:  Size  Location     Type
 24462 ;;                  1    wreg      void 
 24463 ;; Registers used:
 24464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24465 ;; Tracked objects:
 24466 ;;		On entry : F/0
 24467 ;;		On exit  : 0/0
 24468 ;;		Unchanged: 0/0
 24469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24473 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24474 ;;Total ram usage:        5 bytes
 24475 ;; Hardware stack levels used:    1
 24476 ;; Hardware stack levels required when called:    9
 24477 ;; This function calls:
 24478 ;;		_RADIO_SetBandwidth
 24479 ;;		_RADIO_SetChannelFrequency
 24480 ;;		_RADIO_SetFSKSyncWord
 24481 ;;		_RADIO_SetFrequencyHopPeriod
 24482 ;;		_RADIO_SetLoRaSyncWord
 24483 ;;		_RADIO_SetModulation
 24484 ;;		_RADIO_SetSpreadingFactor
 24485 ;; This function is called by:
 24486 ;;		_ConfigureRadioTx
 24487 ;;		_ConfigureRadioRx
 24488 ;; This function uses a non-reentrant model
 24489 ;;
 24490                           
 24491                           	psect	text129
 24492  004940                     __ptext129:
 24493                           	opt stack 0
 24494  004940                     _ConfigureRadio:
 24495                           	opt stack 17
 24496                           
 24497                           ;incstack = 0
 24498                           ;ConfigureRadio@dataRate stored from wreg
 24499  004940  6F75               	movwf	ConfigureRadio@dataRate& (0+255),b
 24500                           
 24501                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 24502  004942  0E75               	movlw	low _modulation
 24503  004944  D835               	call	PL388	;call to abstracted procedure
 24504  004946  0EFF               	movlw	high _modulation
 24505  004948  EC9D  F006         	call	PL48	;call to abstracted procedure
 24506  00494C  50F5               	movf	tablat,w,c
 24507  00494E  EC18  F031         	call	_RADIO_SetModulation
 24508                           
 24509                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 24510  004952  C071  F064         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 24511  004956  C072  F065         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 24512  00495A  C073  F066         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 24513  00495E  C074  F067         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 24514  004962  EC5F  F024         	call	_RADIO_SetChannelFrequency	;wreg free
 24515                           
 24516                           ; BSR set to: 0
 24517                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 24518  004966  0E00               	movlw	0
 24519  004968  6B65               	clrf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 24520  00496A  6B64               	clrf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 24521  00496C  ECF1  F030         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 24522                           
 24523                           ; BSR set to: 0
 24524                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 24525  004970  0E07               	movlw	7
 24526  004972  6175               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 24527  004974  D016               	goto	l12610
 24528                           
 24529                           ; BSR set to: 0
 24530                           ;lorawan_eu.c: 870: {
 24531                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 24532  004976  0E9B               	movlw	low _spreadingFactor
 24533  004978  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24534  00497A  6EF6               	movwf	tblptrl,c
 24535  00497C  6AF7               	clrf	tblptrh,c
 24536  00497E  0EFF               	movlw	high _spreadingFactor
 24537  004980  EC9D  F006         	call	PL48	;call to abstracted procedure
 24538  004984  50F5               	movf	tablat,w,c
 24539  004986  EC14  F031         	call	_RADIO_SetSpreadingFactor
 24540                           
 24541                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 24542  00498A  0E8D               	movlw	low _bandwidth
 24543  00498C  D811               	call	PL388	;call to abstracted procedure
 24544  00498E  0EFF               	movlw	high _bandwidth
 24545  004990  EC9D  F006         	call	PL48	;call to abstracted procedure
 24546  004994  50F5               	movf	tablat,w,c
 24547  004996  EC1C  F031         	call	_RADIO_SetBandwidth
 24548                           
 24549                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 24550  00499A  0102               	movlb	2	; () banked
 24551  00499C  51F4               	movf	(_loRa+244)& (0+255),w,b
 24552  00499E  EFF6  F030         	goto	_RADIO_SetLoRaSyncWord
 24553  0049A2                     l12610:
 24554                           
 24555                           ; BSR set to: 0
 24556                           ;lorawan_eu.c: 876: else
 24557                           ;lorawan_eu.c: 877: {
 24558                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 24559  0049A2  0EFC               	movlw	low _FskSyncWordBuff
 24560  0049A4  6F6E               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 24561  0049A6  0EFF               	movlw	high _FskSyncWordBuff
 24562  0049A8  6F6F               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 24563  0049AA  0E03               	movlw	3
 24564  0049AC  EFD7  F02D         	goto	_RADIO_SetFSKSyncWord
 24565  0049B0                     __end_of_ConfigureRadio:
 24566                           	opt stack 0
 24567  0049B0                     PL388:
 24568                           	opt stack 17
 24569  0049B0  0100               	movlb	0	; () banked
 24570  0049B2  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24571  0049B4  6EF6               	movwf	tblptrl,c
 24572  0049B6  6AF7               	clrf	tblptrh,c
 24573  0049B8  0012               	return	
 24574  0049BA                     __end_ofPL388:
 24575                           	opt stack 0
 24576                           tosu	equ	0xFFF
 24577                           tosh	equ	0xFFE
 24578                           tosl	equ	0xFFD
 24579                           pclath	equ	0xFFA
 24580                           tblptru	equ	0xFF8
 24581                           tblptrh	equ	0xFF7
 24582                           tblptrl	equ	0xFF6
 24583                           tablat	equ	0xFF5
 24584                           prodh	equ	0xFF4
 24585                           prodl	equ	0xFF3
 24586                           intcon	equ	0xFF2
 24587                           indf0	equ	0xFEF
 24588                           postinc0	equ	0xFEE
 24589                           plusw0	equ	0xFEB
 24590                           fsr0h	equ	0xFEA
 24591                           fsr0l	equ	0xFE9
 24592                           wreg	equ	0xFE8
 24593                           postinc1	equ	0xFE6
 24594                           postdec1	equ	0xFE5
 24595                           plusw1	equ	0xFE3
 24596                           fsr1h	equ	0xFE2
 24597                           fsr1l	equ	0xFE1
 24598                           indf2	equ	0xFDF
 24599                           postinc2	equ	0xFDE
 24600                           postdec2	equ	0xFDD
 24601                           plusw2	equ	0xFDB
 24602                           fsr2h	equ	0xFDA
 24603                           fsr2l	equ	0xFD9
 24604                           status	equ	0xFD8
 24605                           
 24606 ;; *************** function _RADIO_SetSpreadingFactor *****************
 24607 ;; Defined at:
 24608 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24609 ;; Parameters:    Size  Location     Type
 24610 ;;  spreadingFac    1    wreg     enum E16935
 24611 ;; Auto vars:     Size  Location     Type
 24612 ;;  spreadingFac    1    4[BANK0 ] enum E16935
 24613 ;; Return value:  Size  Location     Type
 24614 ;;                  1    wreg      void 
 24615 ;; Registers used:
 24616 ;;		wreg
 24617 ;; Tracked objects:
 24618 ;;		On entry : F/0
 24619 ;;		On exit  : 0/0
 24620 ;;		Unchanged: 0/0
 24621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24625 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24626 ;;Total ram usage:        1 bytes
 24627 ;; Hardware stack levels used:    1
 24628 ;; Hardware stack levels required when called:    7
 24629 ;; This function calls:
 24630 ;;		Nothing
 24631 ;; This function is called by:
 24632 ;;		_ConfigureRadio
 24633 ;; This function uses a non-reentrant model
 24634 ;;
 24635                           
 24636                           	psect	text130
 24637  006228                     __ptext130:
 24638                           	opt stack 0
 24639  006228                     _RADIO_SetSpreadingFactor:
 24640                           	opt stack 18
 24641                           
 24642                           ;incstack = 0
 24643                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 24644  006228  6F64               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 24645                           
 24646                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 24647  00622A  C064  F18E         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 24648  00622E  0012               	return		;funcret
 24649  006230                     __end_of_RADIO_SetSpreadingFactor:
 24650                           	opt stack 0
 24651                           tosu	equ	0xFFF
 24652                           tosh	equ	0xFFE
 24653                           tosl	equ	0xFFD
 24654                           pclath	equ	0xFFA
 24655                           tblptru	equ	0xFF8
 24656                           tblptrh	equ	0xFF7
 24657                           tblptrl	equ	0xFF6
 24658                           tablat	equ	0xFF5
 24659                           prodh	equ	0xFF4
 24660                           prodl	equ	0xFF3
 24661                           intcon	equ	0xFF2
 24662                           indf0	equ	0xFEF
 24663                           postinc0	equ	0xFEE
 24664                           plusw0	equ	0xFEB
 24665                           fsr0h	equ	0xFEA
 24666                           fsr0l	equ	0xFE9
 24667                           wreg	equ	0xFE8
 24668                           postinc1	equ	0xFE6
 24669                           postdec1	equ	0xFE5
 24670                           plusw1	equ	0xFE3
 24671                           fsr1h	equ	0xFE2
 24672                           fsr1l	equ	0xFE1
 24673                           indf2	equ	0xFDF
 24674                           postinc2	equ	0xFDE
 24675                           postdec2	equ	0xFDD
 24676                           plusw2	equ	0xFDB
 24677                           fsr2h	equ	0xFDA
 24678                           fsr2l	equ	0xFD9
 24679                           status	equ	0xFD8
 24680                           
 24681 ;; *************** function _RADIO_SetModulation *****************
 24682 ;; Defined at:
 24683 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24684 ;; Parameters:    Size  Location     Type
 24685 ;;  modulation      1    wreg     enum E16925
 24686 ;; Auto vars:     Size  Location     Type
 24687 ;;  modulation      1    4[BANK0 ] enum E16925
 24688 ;; Return value:  Size  Location     Type
 24689 ;;                  1    wreg      void 
 24690 ;; Registers used:
 24691 ;;		wreg
 24692 ;; Tracked objects:
 24693 ;;		On entry : F/0
 24694 ;;		On exit  : 0/0
 24695 ;;		Unchanged: 0/0
 24696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24701 ;;Total ram usage:        1 bytes
 24702 ;; Hardware stack levels used:    1
 24703 ;; Hardware stack levels required when called:    7
 24704 ;; This function calls:
 24705 ;;		Nothing
 24706 ;; This function is called by:
 24707 ;;		_ConfigureRadio
 24708 ;; This function uses a non-reentrant model
 24709 ;;
 24710                           
 24711                           	psect	text131
 24712  006230                     __ptext131:
 24713                           	opt stack 0
 24714  006230                     _RADIO_SetModulation:
 24715                           	opt stack 18
 24716                           
 24717                           ;incstack = 0
 24718                           ;RADIO_SetModulation@modulation stored from wreg
 24719  006230  6F64               	movwf	RADIO_SetModulation@modulation& (0+255),b
 24720                           
 24721                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 24722  006232  C064  F18D         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 24723  006236  0012               	return		;funcret
 24724  006238                     __end_of_RADIO_SetModulation:
 24725                           	opt stack 0
 24726                           tosu	equ	0xFFF
 24727                           tosh	equ	0xFFE
 24728                           tosl	equ	0xFFD
 24729                           pclath	equ	0xFFA
 24730                           tblptru	equ	0xFF8
 24731                           tblptrh	equ	0xFF7
 24732                           tblptrl	equ	0xFF6
 24733                           tablat	equ	0xFF5
 24734                           prodh	equ	0xFF4
 24735                           prodl	equ	0xFF3
 24736                           intcon	equ	0xFF2
 24737                           indf0	equ	0xFEF
 24738                           postinc0	equ	0xFEE
 24739                           plusw0	equ	0xFEB
 24740                           fsr0h	equ	0xFEA
 24741                           fsr0l	equ	0xFE9
 24742                           wreg	equ	0xFE8
 24743                           postinc1	equ	0xFE6
 24744                           postdec1	equ	0xFE5
 24745                           plusw1	equ	0xFE3
 24746                           fsr1h	equ	0xFE2
 24747                           fsr1l	equ	0xFE1
 24748                           indf2	equ	0xFDF
 24749                           postinc2	equ	0xFDE
 24750                           postdec2	equ	0xFDD
 24751                           plusw2	equ	0xFDB
 24752                           fsr2h	equ	0xFDA
 24753                           fsr2l	equ	0xFD9
 24754                           status	equ	0xFD8
 24755                           
 24756 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 24757 ;; Defined at:
 24758 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24759 ;; Parameters:    Size  Location     Type
 24760 ;;  frequencyHop    2    4[BANK0 ] unsigned int 
 24761 ;; Auto vars:     Size  Location     Type
 24762 ;;		None
 24763 ;; Return value:  Size  Location     Type
 24764 ;;                  1    wreg      void 
 24765 ;; Registers used:
 24766 ;;		None
 24767 ;; Tracked objects:
 24768 ;;		On entry : F/0
 24769 ;;		On exit  : F/0
 24770 ;;		Unchanged: F/0
 24771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24776 ;;Total ram usage:        2 bytes
 24777 ;; Hardware stack levels used:    1
 24778 ;; Hardware stack levels required when called:    7
 24779 ;; This function calls:
 24780 ;;		Nothing
 24781 ;; This function is called by:
 24782 ;;		_ConfigureRadio
 24783 ;; This function uses a non-reentrant model
 24784 ;;
 24785                           
 24786                           	psect	text132
 24787  0061E2                     __ptext132:
 24788                           	opt stack 0
 24789  0061E2                     _RADIO_SetFrequencyHopPeriod:
 24790                           	opt stack 18
 24791                           
 24792                           ; BSR set to: 0
 24793                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 24794                           
 24795                           ;incstack = 0
 24796  0061E2  C064  F193         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 24797  0061E6  C065  F194         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 24798                           
 24799                           ; BSR set to: 0
 24800  0061EA  0012               	return		;funcret
 24801  0061EC                     __end_of_RADIO_SetFrequencyHopPeriod:
 24802                           	opt stack 0
 24803                           tosu	equ	0xFFF
 24804                           tosh	equ	0xFFE
 24805                           tosl	equ	0xFFD
 24806                           pclath	equ	0xFFA
 24807                           tblptru	equ	0xFF8
 24808                           tblptrh	equ	0xFF7
 24809                           tblptrl	equ	0xFF6
 24810                           tablat	equ	0xFF5
 24811                           prodh	equ	0xFF4
 24812                           prodl	equ	0xFF3
 24813                           intcon	equ	0xFF2
 24814                           indf0	equ	0xFEF
 24815                           postinc0	equ	0xFEE
 24816                           plusw0	equ	0xFEB
 24817                           fsr0h	equ	0xFEA
 24818                           fsr0l	equ	0xFE9
 24819                           wreg	equ	0xFE8
 24820                           postinc1	equ	0xFE6
 24821                           postdec1	equ	0xFE5
 24822                           plusw1	equ	0xFE3
 24823                           fsr1h	equ	0xFE2
 24824                           fsr1l	equ	0xFE1
 24825                           indf2	equ	0xFDF
 24826                           postinc2	equ	0xFDE
 24827                           postdec2	equ	0xFDD
 24828                           plusw2	equ	0xFDB
 24829                           fsr2h	equ	0xFDA
 24830                           fsr2l	equ	0xFD9
 24831                           status	equ	0xFD8
 24832                           
 24833 ;; *************** function _RADIO_SetFSKSyncWord *****************
 24834 ;; Defined at:
 24835 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24836 ;; Parameters:    Size  Location     Type
 24837 ;;  syncWordLen     1    wreg     unsigned char 
 24838 ;;  syncWord        2   14[BANK0 ] PTR unsigned char 
 24839 ;;		 -> FskSyncWordBuff(3), 
 24840 ;; Auto vars:     Size  Location     Type
 24841 ;;  syncWordLen     1   16[BANK0 ] unsigned char 
 24842 ;; Return value:  Size  Location     Type
 24843 ;;                  1    wreg      void 
 24844 ;; Registers used:
 24845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24846 ;; Tracked objects:
 24847 ;;		On entry : F/0
 24848 ;;		On exit  : F/0
 24849 ;;		Unchanged: 0/0
 24850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24851 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24854 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24855 ;;Total ram usage:        3 bytes
 24856 ;; Hardware stack levels used:    1
 24857 ;; Hardware stack levels required when called:    8
 24858 ;; This function calls:
 24859 ;;		_memcpy
 24860 ;; This function is called by:
 24861 ;;		_ConfigureRadio
 24862 ;; This function uses a non-reentrant model
 24863 ;;
 24864                           
 24865                           	psect	text133
 24866  005BAE                     __ptext133:
 24867                           	opt stack 0
 24868  005BAE                     _RADIO_SetFSKSyncWord:
 24869                           	opt stack 17
 24870                           
 24871                           ; BSR set to: 0
 24872                           ;incstack = 0
 24873                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 24874  005BAE  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24875                           
 24876                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 24877  005BB0  0E08               	movlw	8
 24878  005BB2  0100               	movlb	0	; () banked
 24879  005BB4  6570               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24880  005BB6  D001               	goto	l12316
 24881                           
 24882                           ; BSR set to: 0
 24883                           ;radio_driver_SX1276.c: 1627: {
 24884                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 24885  005BB8  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24886  005BBA                     l12316:
 24887                           
 24888                           ; BSR set to: 0
 24889                           ;radio_driver_SX1276.c: 1629: }
 24890                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 24891  005BBA  0E84               	movlw	low (_RadioConfiguration+15)
 24892  005BBC  6F64               	movwf	memcpy@d1& (0+255),b
 24893  005BBE  0E01               	movlw	high (_RadioConfiguration+15)
 24894  005BC0  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 24895  005BC2  C06E  F066         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 24896  005BC6  C06F  F067         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 24897  005BCA  C070  F068         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 24898  005BCE  6B69               	clrf	(memcpy@n+1)& (0+255),b
 24899  005BD0  ECA0  F028         	call	_memcpy	;wreg free
 24900                           
 24901                           ; BSR set to: 0
 24902                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 24903  005BD4  C070  F18C         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 24904                           
 24905                           ; BSR set to: 0
 24906  005BD8  0012               	return		;funcret
 24907  005BDA                     __end_of_RADIO_SetFSKSyncWord:
 24908                           	opt stack 0
 24909                           tosu	equ	0xFFF
 24910                           tosh	equ	0xFFE
 24911                           tosl	equ	0xFFD
 24912                           pclath	equ	0xFFA
 24913                           tblptru	equ	0xFF8
 24914                           tblptrh	equ	0xFF7
 24915                           tblptrl	equ	0xFF6
 24916                           tablat	equ	0xFF5
 24917                           prodh	equ	0xFF4
 24918                           prodl	equ	0xFF3
 24919                           intcon	equ	0xFF2
 24920                           indf0	equ	0xFEF
 24921                           postinc0	equ	0xFEE
 24922                           plusw0	equ	0xFEB
 24923                           fsr0h	equ	0xFEA
 24924                           fsr0l	equ	0xFE9
 24925                           wreg	equ	0xFE8
 24926                           postinc1	equ	0xFE6
 24927                           postdec1	equ	0xFE5
 24928                           plusw1	equ	0xFE3
 24929                           fsr1h	equ	0xFE2
 24930                           fsr1l	equ	0xFE1
 24931                           indf2	equ	0xFDF
 24932                           postinc2	equ	0xFDE
 24933                           postdec2	equ	0xFDD
 24934                           plusw2	equ	0xFDB
 24935                           fsr2h	equ	0xFDA
 24936                           fsr2l	equ	0xFD9
 24937                           status	equ	0xFD8
 24938                           
 24939 ;; *************** function _RADIO_SetChannelFrequency *****************
 24940 ;; Defined at:
 24941 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24942 ;; Parameters:    Size  Location     Type
 24943 ;;  frequency       4    4[BANK0 ] unsigned long 
 24944 ;; Auto vars:     Size  Location     Type
 24945 ;;		None
 24946 ;; Return value:  Size  Location     Type
 24947 ;;                  2    4[BANK0 ] enum E16979
 24948 ;; Registers used:
 24949 ;;		wreg, status,2, status,0
 24950 ;; Tracked objects:
 24951 ;;		On entry : 0/0
 24952 ;;		On exit  : F/0
 24953 ;;		Unchanged: 0/0
 24954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 24955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24958 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24959 ;;Total ram usage:        4 bytes
 24960 ;; Hardware stack levels used:    1
 24961 ;; Hardware stack levels required when called:    7
 24962 ;; This function calls:
 24963 ;;		Nothing
 24964 ;; This function is called by:
 24965 ;;		_ConfigureRadio
 24966 ;; This function uses a non-reentrant model
 24967 ;;
 24968                           
 24969                           	psect	text134
 24970  0048BE                     __ptext134:
 24971                           	opt stack 0
 24972  0048BE                     _RADIO_SetChannelFrequency:
 24973                           	opt stack 18
 24974                           
 24975                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 24976                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 24977                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 24978                           
 24979                           ; BSR set to: 0
 24980                           ;incstack = 0
 24981  0048BE  0E40               	movlw	64
 24982  0048C0  0100               	movlb	0	; () banked
 24983  0048C2  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24984  0048C4  0E74               	movlw	116
 24985  0048C6  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24986  0048C8  0E2A               	movlw	42
 24987  0048CA  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24988  0048CC  0E08               	movlw	8
 24989  0048CE  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24990  0048D0  E309               	bnc	l12296
 24991                           
 24992                           ; BSR set to: 0
 24993  0048D2  0EC1               	movlw	193
 24994  0048D4  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24995  0048D6  0E49               	movlw	73
 24996  0048D8  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24997  0048DA  0E6E               	movlw	110
 24998  0048DC  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24999  0048DE  0E0A               	movlw	10
 25000  0048E0  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25001  0048E2  E325               	bnc	l711
 25002  0048E4                     l12296:
 25003                           
 25004                           ; BSR set to: 0
 25005  0048E4  0E80               	movlw	128
 25006  0048E6  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25007  0048E8  0E1A               	movlw	26
 25008  0048EA  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25009  0048EC  0E70               	movlw	112
 25010  0048EE  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25011  0048F0  0E18               	movlw	24
 25012  0048F2  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25013  0048F4  E309               	bnc	l12300
 25014                           
 25015                           ; BSR set to: 0
 25016  0048F6  0E41               	movlw	65
 25017  0048F8  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25018  0048FA  0EDD               	movlw	221
 25019  0048FC  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25020  0048FE  0E4A               	movlw	74
 25021  004900  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25022  004902  0E1F               	movlw	31
 25023  004904  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25024  004906  E313               	bnc	l711
 25025  004908                     l12300:
 25026                           
 25027                           ; BSR set to: 0
 25028  004908  0E80               	movlw	128
 25029  00490A  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25030  00490C  0E13               	movlw	19
 25031  00490E  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25032  004910  0E61               	movlw	97
 25033  004912  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25034  004914  0E33               	movlw	51
 25035  004916  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25036  004918  A0D8               	btfss	status,0,c
 25037  00491A  0012               	return	
 25038                           
 25039                           ; BSR set to: 0
 25040  00491C  0564               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25041  00491E  0EF7               	movlw	247
 25042  004920  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25043  004922  0ECB               	movlw	203
 25044  004924  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25045  004926  0E3C               	movlw	60
 25046  004928  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25047  00492A  B0D8               	btfsc	status,0,c
 25048  00492C  0012               	return	
 25049  00492E                     l711:
 25050                           
 25051                           ; BSR set to: 0
 25052                           ;radio_driver_SX1276.c: 1449: {
 25053                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 25054  00492E  C064  F175         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 25055  004932  C065  F176         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 25056  004936  C066  F177         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 25057  00493A  C067  F178         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 25058                           
 25059                           ; BSR set to: 0
 25060                           
 25061                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 25062                           ;	Return value of _RADIO_SetChannelFrequency is never used
 25063  00493E  0012               	return		;funcret
 25064  004940                     __end_of_RADIO_SetChannelFrequency:
 25065                           	opt stack 0
 25066                           tosu	equ	0xFFF
 25067                           tosh	equ	0xFFE
 25068                           tosl	equ	0xFFD
 25069                           pclath	equ	0xFFA
 25070                           tblptru	equ	0xFF8
 25071                           tblptrh	equ	0xFF7
 25072                           tblptrl	equ	0xFF6
 25073                           tablat	equ	0xFF5
 25074                           prodh	equ	0xFF4
 25075                           prodl	equ	0xFF3
 25076                           intcon	equ	0xFF2
 25077                           indf0	equ	0xFEF
 25078                           postinc0	equ	0xFEE
 25079                           plusw0	equ	0xFEB
 25080                           fsr0h	equ	0xFEA
 25081                           fsr0l	equ	0xFE9
 25082                           wreg	equ	0xFE8
 25083                           postinc1	equ	0xFE6
 25084                           postdec1	equ	0xFE5
 25085                           plusw1	equ	0xFE3
 25086                           fsr1h	equ	0xFE2
 25087                           fsr1l	equ	0xFE1
 25088                           indf2	equ	0xFDF
 25089                           postinc2	equ	0xFDE
 25090                           postdec2	equ	0xFDD
 25091                           plusw2	equ	0xFDB
 25092                           fsr2h	equ	0xFDA
 25093                           fsr2l	equ	0xFD9
 25094                           status	equ	0xFD8
 25095                           
 25096 ;; *************** function _RADIO_SetBandwidth *****************
 25097 ;; Defined at:
 25098 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25099 ;; Parameters:    Size  Location     Type
 25100 ;;  bandwidth       1    wreg     enum E16943
 25101 ;; Auto vars:     Size  Location     Type
 25102 ;;  bandwidth       1    4[BANK0 ] enum E16943
 25103 ;; Return value:  Size  Location     Type
 25104 ;;                  1    wreg      void 
 25105 ;; Registers used:
 25106 ;;		wreg
 25107 ;; Tracked objects:
 25108 ;;		On entry : F/0
 25109 ;;		On exit  : 0/0
 25110 ;;		Unchanged: 0/0
 25111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 25112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25115 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25116 ;;Total ram usage:        1 bytes
 25117 ;; Hardware stack levels used:    1
 25118 ;; Hardware stack levels required when called:    7
 25119 ;; This function calls:
 25120 ;;		Nothing
 25121 ;; This function is called by:
 25122 ;;		_ConfigureRadio
 25123 ;; This function uses a non-reentrant model
 25124 ;;
 25125                           
 25126                           	psect	text135
 25127  006238                     __ptext135:
 25128                           	opt stack 0
 25129  006238                     _RADIO_SetBandwidth:
 25130                           	opt stack 18
 25131                           
 25132                           ; BSR set to: 0
 25133                           ;incstack = 0
 25134                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 25135  006238  6F64               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 25136                           
 25137                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 25138  00623A  C064  F18F         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 25139  00623E  0012               	return		;funcret
 25140  006240                     __end_of_RADIO_SetBandwidth:
 25141                           	opt stack 0
 25142                           tosu	equ	0xFFF
 25143                           tosh	equ	0xFFE
 25144                           tosl	equ	0xFFD
 25145                           pclath	equ	0xFFA
 25146                           tblptru	equ	0xFF8
 25147                           tblptrh	equ	0xFF7
 25148                           tblptrl	equ	0xFF6
 25149                           tablat	equ	0xFF5
 25150                           prodh	equ	0xFF4
 25151                           prodl	equ	0xFF3
 25152                           intcon	equ	0xFF2
 25153                           indf0	equ	0xFEF
 25154                           postinc0	equ	0xFEE
 25155                           plusw0	equ	0xFEB
 25156                           fsr0h	equ	0xFEA
 25157                           fsr0l	equ	0xFE9
 25158                           wreg	equ	0xFE8
 25159                           postinc1	equ	0xFE6
 25160                           postdec1	equ	0xFE5
 25161                           plusw1	equ	0xFE3
 25162                           fsr1h	equ	0xFE2
 25163                           fsr1l	equ	0xFE1
 25164                           indf2	equ	0xFDF
 25165                           postinc2	equ	0xFDE
 25166                           postdec2	equ	0xFDD
 25167                           plusw2	equ	0xFDB
 25168                           fsr2h	equ	0xFDA
 25169                           fsr2l	equ	0xFD9
 25170                           status	equ	0xFD8
 25171                           
 25172 ;; *************** function _RADIO_Transmit *****************
 25173 ;; Defined at:
 25174 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25175 ;; Parameters:    Size  Location     Type
 25176 ;;  buffer          2   74[BANK0 ] PTR unsigned char 
 25177 ;;		 -> macBuffer(271), 
 25178 ;;  bufferLen       1   76[BANK0 ] unsigned char 
 25179 ;; Auto vars:     Size  Location     Type
 25180 ;;  i               1   90[BANK0 ] unsigned char 
 25181 ;;  regValue        1   89[BANK0 ] unsigned char 
 25182 ;; Return value:  Size  Location     Type
 25183 ;;                  2   74[BANK0 ] enum E16979
 25184 ;; Registers used:
 25185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25186 ;; Tracked objects:
 25187 ;;		On entry : F/0
 25188 ;;		On exit  : F/0
 25189 ;;		Unchanged: 0/0
 25190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 25191 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25192 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25194 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25195 ;;Total ram usage:       17 bytes
 25196 ;; Hardware stack levels used:    1
 25197 ;; Hardware stack levels required when called:   12
 25198 ;; This function calls:
 25199 ;;		_HALSPICSAssert
 25200 ;;		_HALSPICSDeassert
 25201 ;;		_HALSPISend
 25202 ;;		_RADIO_RegisterRead
 25203 ;;		_RADIO_RegisterWrite
 25204 ;;		_RADIO_WriteConfiguration
 25205 ;;		_RADIO_WriteMode
 25206 ;;		_SwTimerSetTimeout
 25207 ;;		_SwTimerStart
 25208 ;;		_SwTimerStop
 25209 ;;		___lldiv
 25210 ;; This function is called by:
 25211 ;;		_LORAWAN_RxTimeout
 25212 ;;		_LORAWAN_Join
 25213 ;;		_LORAWAN_Send
 25214 ;;		_AckRetransmissionCallback
 25215 ;;		_UnconfirmedTransmissionCallback
 25216 ;; This function uses a non-reentrant model
 25217 ;;
 25218                           
 25219                           	psect	text136
 25220  001DE0                     __ptext136:
 25221                           	opt stack 0
 25222  001DE0                     _RADIO_Transmit:
 25223                           	opt stack 16
 25224                           
 25225                           ; BSR set to: 0
 25226                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 25227                           ;radio_driver_SX1276.c: 789: uint8_t i;
 25228                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 25229                           
 25230                           ;incstack = 0
 25231  001DE0  0101               	movlb	1	; () banked
 25232  001DE2  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 25233  001DE4  D006               	goto	l13306
 25234                           
 25235                           ; BSR set to: 1
 25236                           ;radio_driver_SX1276.c: 792: {
 25237                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 25238  001DE6  0E80               	movlw	128
 25239  001DE8  0100               	movlb	0	; () banked
 25240  001DEA  6FAB               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25241  001DEC  0E03               	movlw	3
 25242  001DEE  6FAA               	movwf	?_RADIO_Transmit& (0+255),b
 25243  001DF0  0C03               	retlw	3
 25244  001DF2                     l13306:
 25245                           
 25246                           ; BSR set to: 1
 25247                           ;radio_driver_SX1276.c: 794: }
 25248                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 25249  001DF2  C198  F0AD         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 25250  001DF6  0E03               	movlw	3
 25251  001DF8  0100               	movlb	0	; () banked
 25252  001DFA  17AD               	andwf	??_RADIO_Transmit& (0+255),f,b
 25253  001DFC  E005               	bz	l13312
 25254                           
 25255                           ; BSR set to: 0
 25256                           ;radio_driver_SX1276.c: 797: {
 25257                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 25258  001DFE  0E80               	movlw	128
 25259  001E00  6FAB               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25260  001E02  0E04               	movlw	4
 25261  001E04  6FAA               	movwf	?_RADIO_Transmit& (0+255),b
 25262  001E06  0C04               	retlw	4
 25263  001E08                     l13312:
 25264                           
 25265                           ; BSR set to: 0
 25266                           ;radio_driver_SX1276.c: 799: }
 25267                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 25268  001E08  0101               	movlb	1	; () banked
 25269  001E0A  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25270  001E0C  E109               	bnz	l13320
 25271                           
 25272                           ; BSR set to: 1
 25273  001E0E  0E40               	movlw	64
 25274  001E10  0100               	movlb	0	; () banked
 25275  001E12  65AC               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 25276  001E14  D005               	goto	l13320
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;radio_driver_SX1276.c: 802: {
 25280                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 25281  001E16  0E80               	movlw	128
 25282  001E18  6FAB               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25283  001E1A  0E02               	movlw	2
 25284  001E1C  6FAA               	movwf	?_RADIO_Transmit& (0+255),b
 25285  001E1E  0C02               	retlw	2
 25286  001E20                     l13320:
 25287                           
 25288                           ;radio_driver_SX1276.c: 804: }
 25289                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 25290  001E20  0101               	movlb	1	; () banked
 25291  001E22  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25292  001E24  EC9E  F030         	call	_SwTimerStop
 25293                           
 25294                           ; BSR set to: 0
 25295                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 25296  001E28  D8C7               	call	PL384	;call to abstracted procedure
 25297  001E2A  ECDB  F006         	call	_RADIO_WriteConfiguration	;wreg free
 25298                           
 25299                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 25300  001E2E  0101               	movlb	1	; () banked
 25301  001E30  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25302  001E32  E11D               	bnz	l13340
 25303                           
 25304                           ; BSR set to: 1
 25305                           ;radio_driver_SX1276.c: 813: {
 25306                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 25307  001E34  C0AC  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25308  001E38  0E22               	movlw	34
 25309  001E3A  EC79  F02F         	call	_RADIO_RegisterWrite
 25310                           
 25311                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 25312  001E3E  0E0A               	movlw	10
 25313  001E40  EC8D  F02E         	call	_RADIO_RegisterRead
 25314  001E44  6FB9               	movwf	RADIO_Transmit@regValue& (0+255),b
 25315                           
 25316                           ; BSR set to: 0
 25317                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 25318  001E46  0EF0               	movlw	240
 25319  001E48  17B9               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 25323  001E4A  87B9               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 25324                           
 25325                           ; BSR set to: 0
 25326                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 25327  001E4C  C0B9  F066         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 25328  001E50  0E0A               	movlw	10
 25329  001E52  EC79  F02F         	call	_RADIO_RegisterWrite
 25330                           
 25331                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 25332  001E56  0E40               	movlw	64
 25333  001E58  0100               	movlb	0	; () banked
 25334  001E5A  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25335  001E5C  EC79  F02F         	call	_RADIO_RegisterWrite
 25336                           
 25337                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 25338  001E60  D8B0               	call	PL420	;call to abstracted procedure
 25339  001E62  EC79  F02F         	call	_RADIO_RegisterWrite
 25340                           
 25341                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 25342  001E66  D896               	call	PL340	;call to abstracted procedure
 25343  001E68  EC75  F01B         	call	_RADIO_WriteMode
 25344                           
 25345                           ;radio_driver_SX1276.c: 828: }
 25346  001E6C  D007               	goto	l13342
 25347  001E6E                     l13340:
 25348                           
 25349                           ; BSR set to: 1
 25350                           ;radio_driver_SX1276.c: 829: else
 25351                           ;radio_driver_SX1276.c: 830: {
 25352                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 25353  001E6E  ECB2  F011         	call	PL456	;call to abstracted procedure
 25354  001E72  EC79  F02F         	call	_RADIO_RegisterWrite
 25355                           
 25356                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 25357  001E76  D8A5               	call	PL420	;call to abstracted procedure
 25358  001E78  EC79  F02F         	call	_RADIO_RegisterWrite
 25359  001E7C                     l13342:
 25360                           
 25361                           ;radio_driver_SX1276.c: 834: }
 25362                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 25363  001E7C  0101               	movlb	1	; () banked
 25364  001E7E  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25365  001E80  E105               	bnz	l13346
 25366                           
 25367                           ; BSR set to: 1
 25368                           ;radio_driver_SX1276.c: 837: {
 25369                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 25370  001E82  C0AC  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25371  001E86  0E00               	movlw	0
 25372  001E88  EC79  F02F         	call	_RADIO_RegisterWrite
 25373  001E8C                     l13346:
 25374                           
 25375                           ;radio_driver_SX1276.c: 840: }
 25376                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 25377  001E8C  EC48  F031         	call	_HALSPICSAssert	;wreg free
 25378                           
 25379                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 25380  001E90  0E80               	movlw	128
 25381  001E92  ECFB  F030         	call	_HALSPISend
 25382                           
 25383                           ; BSR set to: 14
 25384                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 25385  001E96  0100               	movlb	0	; () banked
 25386  001E98  6BBA               	clrf	RADIO_Transmit@i& (0+255),b
 25387  001E9A  D00B               	goto	l13356
 25388  001E9C                     l13352:
 25389                           
 25390                           ; BSR set to: 0
 25391                           ;radio_driver_SX1276.c: 846: {
 25392                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 25393  001E9C  51BA               	movf	RADIO_Transmit@i& (0+255),w,b
 25394  001E9E  25AA               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 25395  001EA0  6ED9               	movwf	fsr2l,c
 25396  001EA2  0E00               	movlw	0
 25397  001EA4  21AB               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 25398  001EA6  6EDA               	movwf	fsr2h,c
 25399  001EA8  50DF               	movf	indf2,w,c
 25400  001EAA  ECFB  F030         	call	_HALSPISend
 25401                           
 25402                           ; BSR set to: 14
 25403  001EAE  0100               	movlb	0	; () banked
 25404  001EB0  2BBA               	incf	RADIO_Transmit@i& (0+255),f,b
 25405  001EB2                     l13356:
 25406                           
 25407                           ; BSR set to: 0
 25408  001EB2  51AC               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 25409  001EB4  5DBA               	subwf	RADIO_Transmit@i& (0+255),w,b
 25410  001EB6  E3F2               	bnc	l13352
 25411                           
 25412                           ; BSR set to: 0
 25413                           ;radio_driver_SX1276.c: 848: }
 25414                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 25415  001EB8  EC46  F031         	call	_HALSPICSDeassert	;wreg free
 25416                           
 25417                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 25418  001EBC  0101               	movlb	1	; () banked
 25419  001EBE  8198               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 25420                           
 25421                           ; BSR set to: 1
 25422                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 25423  001EC0  0EE7               	movlw	231
 25424  001EC2  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 25425                           
 25426                           ; BSR set to: 1
 25427                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 25428  001EC4  ECA5  F02D         	call	PL86	;call to abstracted procedure
 25429  001EC8  0E03               	movlw	3
 25430  001ECA  EC75  F01B         	call	_RADIO_WriteMode
 25431                           
 25432                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 25433  001ECE  0100               	movlb	0	; () banked
 25434  001ED0  6B71               	clrf	SwTimerSetTimeout@timeout& (0+255),b
 25435  001ED2  6B72               	clrf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25436  001ED4  0E0A               	movlw	10
 25437  001ED6  6F73               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25438  001ED8  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25439  001EDA  0101               	movlb	1	; () banked
 25440  001EDC  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25441  001EDE  EC4F  F02C         	call	_SwTimerSetTimeout
 25442                           
 25443                           ; BSR set to: 0
 25444                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 25445  001EE2  0101               	movlb	1	; () banked
 25446  001EE4  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25447  001EE6  ECFE  F025         	call	_SwTimerStart
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 25451  001EEA  D860               	call	PL362	;call to abstracted procedure
 25452  001EEC  E045               	bz	l13386
 25453                           
 25454                           ; BSR set to: 1
 25455                           ;radio_driver_SX1276.c: 866: {
 25456                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 25457  001EEE  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 25458  001EF0  E102               	bnz	u14730
 25459  001EF2  D856               	call	PL354	;call to abstracted procedure
 25460  001EF4  E30B               	bnc	l13380
 25461  001EF6                     u14730:
 25462                           
 25463                           ; BSR set to: 1
 25464  001EF6  D844               	call	PL122	;call to abstracted procedure
 25465  001EF8  EC99  F011         	call	PL32	;call to abstracted procedure
 25466  001EFC  EC55  F025         	call	___lldiv	;wreg free
 25467  001F00  0E0C               	movlw	12
 25468  001F02                     u14745:
 25469  001F02  ECA7  F011         	call	PL196	;call to abstracted procedure
 25470  001F06  2EE8               	decfsz	wreg,f,c
 25471  001F08  D7FC               	goto	u14745
 25472  001F0A  D01E               	goto	L16
 25473  001F0C                     l13380:
 25474                           
 25475                           ; BSR set to: 1
 25476  001F0C  C19F  F0AD         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 25477  001F10  C1A0  F0AE         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 25478  001F14  C1A1  F0AF         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 25479  001F18  C1A2  F0B0         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 25480  001F1C  0E0C               	movlw	12
 25481  001F1E                     u14755:
 25482  001F1E  90D8               	bcf	status,0,c
 25483  001F20  0100               	movlb	0	; () banked
 25484  001F22  37AD               	rlcf	??_RADIO_Transmit& (0+255),f,b
 25485  001F24  37AE               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 25486  001F26  37AF               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 25487  001F28  37B0               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 25488  001F2A  2EE8               	decfsz	wreg,f,c
 25489  001F2C  D7F8               	goto	u14755
 25490  001F2E  C0AD  F064         	movff	??_RADIO_Transmit,___lldiv@dividend
 25491  001F32  C0AE  F065         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 25492  001F36  C0AF  F066         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 25493  001F3A  C0B0  F067         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 25494  001F3E  0E7D               	movlw	125
 25495  001F40  EC99  F011         	call	PL32	;call to abstracted procedure
 25496  001F44  EC55  F025         	call	___lldiv	;wreg free
 25497  001F48                     L16:
 25498  001F48  C064  F0B5         	movff	?___lldiv,_RADIO_Transmit$1056
 25499  001F4C  C065  F0B6         	movff	?___lldiv+1,_RADIO_Transmit$1056+1
 25500  001F50  C066  F0B7         	movff	?___lldiv+2,_RADIO_Transmit$1056+2
 25501  001F54  C067  F0B8         	movff	?___lldiv+3,_RADIO_Transmit$1056+3
 25502                           
 25503                           ; BSR set to: 0
 25504  001F58  C0B5  F071         	movff	_RADIO_Transmit$1056,SwTimerSetTimeout@timeout
 25505  001F5C  C0B6  F072         	movff	_RADIO_Transmit$1056+1,SwTimerSetTimeout@timeout+1
 25506  001F60  C0B7  F073         	movff	_RADIO_Transmit$1056+2,SwTimerSetTimeout@timeout+2
 25507  001F64  C0B8  F074         	movff	_RADIO_Transmit$1056+3,SwTimerSetTimeout@timeout+3
 25508  001F68  0101               	movlb	1	; () banked
 25509  001F6A  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25510  001F6C  EC4F  F02C         	call	_SwTimerSetTimeout
 25511                           
 25512                           ; BSR set to: 0
 25513                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 25514  001F70  0101               	movlb	1	; () banked
 25515  001F72  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25516  001F74  ECFE  F025         	call	_SwTimerStart
 25517  001F78                     l13386:
 25518                           
 25519                           ;radio_driver_SX1276.c: 869: }
 25520                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 25521  001F78  0100               	movlb	0	; () banked
 25522  001F7A  6BAA               	clrf	?_RADIO_Transmit& (0+255),b
 25523  001F7C  6BAB               	clrf	(?_RADIO_Transmit+1)& (0+255),b
 25524                           
 25525                           ; BSR set to: 0
 25526  001F7E  0012               	return		;funcret
 25527  001F80                     __end_of_RADIO_Transmit:
 25528                           	opt stack 0
 25529  001F80                     PL122:
 25530                           	opt stack 13
 25531  001F80  C19F  F064         	movff	_RadioConfiguration+42,___lldiv@dividend
 25532  001F84  C1A0  F065         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 25533  001F88  C1A1  F066         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 25534  001F8C  C1A2  F067         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 25535  001F90  0100               	movlb	0	; () banked
 25536  001F92  0C7D               	retlw	125
 25537  001F94                     __end_ofPL122:
 25538                           	opt stack 0
 25539  001F94                     PL340:
 25540                           	opt stack 12
 25541  001F94  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25542  001F98  0E01               	movlw	1
 25543  001F9A  0100               	movlb	0	; () banked
 25544  001F9C  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25545  001F9E  0C01               	retlw	1
 25546  001FA0                     __end_ofPL340:
 25547                           	opt stack 0
 25548  001FA0                     PL354:
 25549                           	opt stack 13
 25550  001FA0  299F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 25551  001FA2  0EFF               	movlw	255
 25552  001FA4  59A0               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 25553  001FA6  0E0F               	movlw	15
 25554  001FA8  59A1               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 25555  001FAA  0012               	return	
 25556  001FAC                     __end_ofPL354:
 25557                           	opt stack 0
 25558  001FAC                     PL362:
 25559                           	opt stack 13
 25560  001FAC  0101               	movlb	1	; () banked
 25561  001FAE  519F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 25562  001FB0  11A0               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 25563  001FB2  11A1               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 25564  001FB4  11A2               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 25565  001FB6  0012               	return	
 25566  001FB8                     __end_ofPL362:
 25567                           	opt stack 0
 25568  001FB8                     PL384:
 25569                           	opt stack 13
 25570  001FB8  0E00               	movlw	0
 25571  001FBA  6FA1               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 25572  001FBC  0E04               	movlw	4
 25573  001FBE  6FA0               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 25574  001FC0  0C04               	retlw	4
 25575  001FC2                     __end_ofPL384:
 25576                           	opt stack 0
 25577  001FC2                     PL420:
 25578                           	opt stack 13
 25579  001FC2  0100               	movlb	0	; () banked
 25580  001FC4  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25581  001FC6  0C41               	retlw	65
 25582  001FC8                     __end_ofPL420:
 25583                           	opt stack 0
 25584                           tosu	equ	0xFFF
 25585                           tosh	equ	0xFFE
 25586                           tosl	equ	0xFFD
 25587                           pclath	equ	0xFFA
 25588                           tblptru	equ	0xFF8
 25589                           tblptrh	equ	0xFF7
 25590                           tblptrl	equ	0xFF6
 25591                           tablat	equ	0xFF5
 25592                           prodh	equ	0xFF4
 25593                           prodl	equ	0xFF3
 25594                           intcon	equ	0xFF2
 25595                           indf0	equ	0xFEF
 25596                           postinc0	equ	0xFEE
 25597                           plusw0	equ	0xFEB
 25598                           fsr0h	equ	0xFEA
 25599                           fsr0l	equ	0xFE9
 25600                           wreg	equ	0xFE8
 25601                           postinc1	equ	0xFE6
 25602                           postdec1	equ	0xFE5
 25603                           plusw1	equ	0xFE3
 25604                           fsr1h	equ	0xFE2
 25605                           fsr1l	equ	0xFE1
 25606                           indf2	equ	0xFDF
 25607                           postinc2	equ	0xFDE
 25608                           postdec2	equ	0xFDD
 25609                           plusw2	equ	0xFDB
 25610                           fsr2h	equ	0xFDA
 25611                           fsr2l	equ	0xFD9
 25612                           status	equ	0xFD8
 25613                           
 25614 ;; *************** function _RADIO_WriteConfiguration *****************
 25615 ;; Defined at:
 25616 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25617 ;; Parameters:    Size  Location     Type
 25618 ;;  symbolTimeou    2   64[BANK0 ] unsigned int 
 25619 ;; Auto vars:     Size  Location     Type
 25620 ;;  tempValue       4   69[BANK0 ] unsigned long 
 25621 ;;  regValue        1   73[BANK0 ] unsigned char 
 25622 ;;  i               1   68[BANK0 ] unsigned char 
 25623 ;; Return value:  Size  Location     Type
 25624 ;;                  1    wreg      void 
 25625 ;; Registers used:
 25626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25627 ;; Tracked objects:
 25628 ;;		On entry : F/0
 25629 ;;		On exit  : 1/0
 25630 ;;		Unchanged: 0/0
 25631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 25632 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25633 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25635 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25636 ;;Total ram usage:       10 bytes
 25637 ;; Hardware stack levels used:    1
 25638 ;; Hardware stack levels required when called:   11
 25639 ;; This function calls:
 25640 ;;		_RADIO_RegisterRead
 25641 ;;		_RADIO_RegisterWrite
 25642 ;;		_RADIO_WriteFSKBitRate
 25643 ;;		_RADIO_WriteFSKFrequencyDeviation
 25644 ;;		_RADIO_WriteFrequency
 25645 ;;		_RADIO_WriteMode
 25646 ;;		_RADIO_WritePower
 25647 ;;		___lmul
 25648 ;; This function is called by:
 25649 ;;		_RADIO_Transmit
 25650 ;;		_RADIO_ReceiveStart
 25651 ;; This function uses a non-reentrant model
 25652 ;;
 25653                           
 25654                           	psect	text137
 25655  000DB6                     __ptext137:
 25656                           	opt stack 0
 25657  000DB6                     _RADIO_WriteConfiguration:
 25658                           	opt stack 0
 25659                           
 25660                           ; BSR set to: 0
 25661                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 25662                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 25663                           ;radio_driver_SX1276.c: 537: uint8_t i;
 25664                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 25665                           
 25666                           ; BSR set to: 0
 25667                           ;incstack = 0
 25668  000DB6  EC15  F01A         	call	PL268	;call to abstracted procedure
 25669  000DBA  EC75  F01B         	call	_RADIO_WriteMode
 25670                           
 25671                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 25672  000DBE  EC78  F012         	call	PL224	;call to abstracted procedure
 25673  000DC2  ECE2  F01B         	call	_RADIO_WriteFrequency	;wreg free
 25674                           
 25675                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 25676  000DC6  0101               	movlb	1	; () banked
 25677  000DC8  5190               	movf	(_RadioConfiguration+27)& (0+255),w,b
 25678  000DCA  ECB9  F01C         	call	_RADIO_WritePower
 25679                           
 25680                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 25681  000DCE  0101               	movlb	1	; () banked
 25682  000DD0  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25683  000DD2  E001 D16B          	bnz	l12536
 25684                           
 25685                           ; BSR set to: 1
 25686                           ;radio_driver_SX1276.c: 545: {
 25687                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 25688  000DD6  C183  F066         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 25689  000DDA  0E39               	movlw	57
 25690  000DDC  EC79  F02F         	call	_RADIO_RegisterWrite
 25691                           
 25692                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 25693                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 25694                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 25695                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 25696  000DE0  C197  F0A2         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 25697  000DE4  0E01               	movlw	1
 25698  000DE6  0100               	movlb	0	; () banked
 25699  000DE8  17A2               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25700  000DEA  0101               	movlb	1	; () banked
 25701  000DEC  90D8               	bcf	status,0,c
 25702  000DEE  3596               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 25703  000DF0  0100               	movlb	0	; () banked
 25704  000DF2  6FA3               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25705  000DF4  0101               	movlb	1	; () banked
 25706  000DF6  398F               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 25707  000DF8  D9D1               	call	PL358	;call to abstracted procedure
 25708  000DFA  0E1D               	movlw	29
 25709  000DFC  EC79  F02F         	call	_RADIO_RegisterWrite
 25710                           
 25711                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 25712                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 25713                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 25714                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 25715  000E00  C0A1  F0A2         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration
 25716  000E04  0E03               	movlw	3
 25717  000E06  0100               	movlb	0	; () banked
 25718  000E08  17A2               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25719  000E0A  C191  F0A3         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+1
 25720  000E0E  0E01               	movlw	1
 25721  000E10  17A3               	andwf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25722  000E12  90D8               	bcf	status,0,c
 25723  000E14  37A3               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25724  000E16  90D8               	bcf	status,0,c
 25725  000E18  37A3               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25726  000E1A  0101               	movlb	1	; () banked
 25727  000E1C  398E               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 25728  000E1E  D9BE               	call	PL358	;call to abstracted procedure
 25729  000E20  0E1E               	movlw	30
 25730  000E22  EC79  F02F         	call	_RADIO_RegisterWrite
 25731                           
 25732                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 25733  000E26  0101               	movlb	1	; () banked
 25734  000E28  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
 25735  000E2A  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 25736  000E2C  E041               	bz	l468
 25737                           
 25738                           ; BSR set to: 1
 25739                           ;radio_driver_SX1276.c: 561: {
 25740                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 25741  000E2E  C193  F0A5         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 25742  000E32  C194  F0A6         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 25743  000E36  0100               	movlb	0	; () banked
 25744  000E38  6BA7               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25745  000E3A  6BA8               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25746                           
 25747                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 25748  000E3C  D023               	goto	l12428
 25749  000E3E                     l12420:
 25750                           
 25751                           ; BSR set to: 1
 25752                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 25753  000E3E  D99F               	call	PL128	;call to abstracted procedure
 25754  000E40  0E7D               	movlw	125
 25755  000E42  0100               	movlb	0	; () banked
 25756  000E44  ECC2  F006         	call	PL88	;call to abstracted procedure
 25757  000E48  EC34  F02A         	call	___lmul	;wreg free
 25758  000E4C  D010               	goto	L18
 25759  000E4E                     l12422:
 25760                           
 25761                           ; BSR set to: 1
 25762                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 25763  000E4E  D997               	call	PL128	;call to abstracted procedure
 25764  000E50  0EFA               	movlw	250
 25765  000E52  0100               	movlb	0	; () banked
 25766  000E54  ECC2  F006         	call	PL88	;call to abstracted procedure
 25767  000E58  EC34  F02A         	call	___lmul	;wreg free
 25768  000E5C  D008               	goto	L18
 25769  000E5E                     l12424:
 25770                           
 25771                           ; BSR set to: 1
 25772                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 25773  000E5E  D98F               	call	PL128	;call to abstracted procedure
 25774  000E60  0EF4               	movlw	244
 25775  000E62  0100               	movlb	0	; () banked
 25776  000E64  6F98               	movwf	___lmul@multiplicand& (0+255),b
 25777  000E66  0E01               	movlw	1
 25778  000E68  D9AF               	call	PL450	;call to abstracted procedure
 25779  000E6A  EC34  F02A         	call	___lmul	;wreg free
 25780  000E6E                     L18:
 25781  000E6E  C094  F0A5         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 25782  000E72  C095  F0A6         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 25783  000E76  C096  F0A7         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 25784  000E7A  C097  F0A8         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 25785                           
 25786                           ;radio_driver_SX1276.c: 574: break;
 25787  000E7E  D00B               	goto	l12430
 25788  000E80                     l474:
 25789                           
 25790                           ; BSR set to: 1
 25791                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 25792  000E80  D987               	call	PL342	;call to abstracted procedure
 25793                           
 25794                           ;radio_driver_SX1276.c: 578: break;
 25795  000E82  D009               	goto	l12430
 25796  000E84                     l12428:
 25797                           
 25798                           ; BSR set to: 0
 25799  000E84  0101               	movlb	1	; () banked
 25800  000E86  518F               	movf	(_RadioConfiguration+26)& (0+255),w,b
 25801                           
 25802                           ; Switch size 1, requested type "space"
 25803                           ; Number of cases is 3, Range of values is 7 to 9
 25804                           ; switch strategies available:
 25805                           ; Name         Instructions Cycles
 25806                           ; simple_byte           10     6 (average)
 25807                           ;	Chosen strategy is simple_byte
 25808  000E88  0A07               	xorlw	7	; case 7
 25809  000E8A  E0D9               	bz	l12420
 25810  000E8C  0A0F               	xorlw	15	; case 8
 25811  000E8E  E0DF               	bz	l12422
 25812  000E90  0A01               	xorlw	1	; case 9
 25813  000E92  E0E5               	bz	l12424
 25814  000E94  D7F5               	goto	l474
 25815  000E96                     l12430:
 25816                           
 25817                           ; BSR set to: 0
 25818                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 25819  000E96  0101               	movlb	1	; () banked
 25820  000E98  298E               	incf	(_RadioConfiguration+25)& (0+255),w,b
 25821  000E9A  0100               	movlb	0	; () banked
 25822  000E9C  6FA2               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 25823  000E9E  D005               	goto	u13310
 25824  000EA0                     u13315:
 25825  000EA0  90D8               	bcf	status,0,c
 25826  000EA2  33A8               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 25827  000EA4  33A7               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 25828  000EA6  33A6               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 25829  000EA8  33A5               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 25830  000EAA                     u13310:
 25831  000EAA  2FA2               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 25832  000EAC  D7F9               	goto	u13315
 25833                           
 25834                           ;radio_driver_SX1276.c: 582: }
 25835  000EAE  D001               	goto	l12432
 25836  000EB0                     l468:
 25837                           
 25838                           ; BSR set to: 1
 25839                           ;radio_driver_SX1276.c: 583: else
 25840                           ;radio_driver_SX1276.c: 584: {
 25841                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 25842  000EB0  D96F               	call	PL342	;call to abstracted procedure
 25843  000EB2                     l12432:
 25844                           
 25845                           ;radio_driver_SX1276.c: 586: }
 25846                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 25847  000EB2  C0A5  F066         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 25848  000EB6  0E24               	movlw	36
 25849  000EB8  EC79  F02F         	call	_RADIO_RegisterWrite
 25850                           
 25851                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 25852  000EBC  C0A0  F066         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 25853  000EC0  0E1F               	movlw	31
 25854  000EC2  EC79  F02F         	call	_RADIO_RegisterWrite
 25855                           
 25856                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 25857  000EC6  0E26               	movlw	38
 25858  000EC8  EC8D  F02E         	call	_RADIO_RegisterRead
 25859  000ECC  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25860                           
 25861                           ; BSR set to: 0
 25862                           ;radio_driver_SX1276.c: 596: if (
 25863                           ;radio_driver_SX1276.c: 597: (
 25864                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 25865                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 25866                           ;radio_driver_SX1276.c: 600: ) ||
 25867                           ;radio_driver_SX1276.c: 601: (
 25868                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 25869                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 25870                           ;radio_driver_SX1276.c: 604: )
 25871                           ;radio_driver_SX1276.c: 605: )
 25872  000ECE  0E0C               	movlw	12
 25873  000ED0  0101               	movlb	1	; () banked
 25874  000ED2  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25875  000ED4  E106               	bnz	l12440
 25876                           
 25877                           ; BSR set to: 1
 25878  000ED6  0E07               	movlw	7
 25879  000ED8  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25880  000EDA  E009               	bz	l12444
 25881                           
 25882                           ; BSR set to: 1
 25883  000EDC  0E08               	movlw	8
 25884  000EDE  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25885  000EE0  E006               	bz	l12444
 25886  000EE2                     l12440:
 25887                           
 25888                           ; BSR set to: 1
 25889  000EE2  0E0B               	movlw	11
 25890  000EE4  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25891  000EE6  E106               	bnz	l12446
 25892                           
 25893                           ; BSR set to: 1
 25894  000EE8  0E07               	movlw	7
 25895  000EEA  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25896  000EEC  E103               	bnz	l12446
 25897  000EEE                     l12444:
 25898                           
 25899                           ; BSR set to: 1
 25900                           ;radio_driver_SX1276.c: 606: {
 25901                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 25902  000EEE  0100               	movlb	0	; () banked
 25903  000EF0  87A9               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25904                           
 25905                           ;radio_driver_SX1276.c: 608: }
 25906  000EF2  D002               	goto	l481
 25907  000EF4                     l12446:
 25908                           
 25909                           ; BSR set to: 1
 25910                           ;radio_driver_SX1276.c: 609: else
 25911                           ;radio_driver_SX1276.c: 610: {
 25912                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 25913  000EF4  0100               	movlb	0	; () banked
 25914  000EF6  97A9               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25915  000EF8                     l481:
 25916                           
 25917                           ; BSR set to: 0
 25918                           ;radio_driver_SX1276.c: 612: }
 25919                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 25920  000EF8  85A9               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 25921                           
 25922                           ; BSR set to: 0
 25923                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 25924  000EFA  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25925  000EFE  0E26               	movlw	38
 25926  000F00  EC79  F02F         	call	_RADIO_RegisterWrite
 25927                           
 25928                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 25929  000F04  0E31               	movlw	49
 25930  000F06  EC8D  F02E         	call	_RADIO_RegisterRead
 25931  000F0A  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25932                           
 25933                           ; BSR set to: 0
 25934                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 25935  000F0C  0EF8               	movlw	248
 25936  000F0E  17A9               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25937                           
 25938                           ; BSR set to: 0
 25939                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 25940  000F10  0E03               	movlw	3
 25941  000F12  13A9               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25942                           
 25943                           ; BSR set to: 0
 25944                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 25945  000F14  D95D               	call	PL454	;call to abstracted procedure
 25946  000F16  EC79  F02F         	call	_RADIO_RegisterWrite
 25947                           
 25948                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 25949  000F1A  0E0A               	movlw	10
 25950  000F1C  0100               	movlb	0	; () banked
 25951  000F1E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25952  000F20  0E37               	movlw	55
 25953  000F22  EC79  F02F         	call	_RADIO_RegisterWrite
 25954                           
 25955                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 25956  000F26  0E12               	movlw	18
 25957  000F28  0101               	movlb	1	; () banked
 25958  000F2A  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 25959  000F2C  E125               	bnz	l12484
 25960                           
 25961                           ; BSR set to: 1
 25962                           ;radio_driver_SX1276.c: 626: {
 25963                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 25964                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 25965  000F2E  0E07               	movlw	7
 25966  000F30  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25967  000F32  E003               	bz	l12466
 25968                           
 25969                           ; BSR set to: 1
 25970  000F34  0E08               	movlw	8
 25971  000F36  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25972  000F38  E113               	bnz	l12476
 25973  000F3A                     l12466:
 25974                           
 25975                           ; BSR set to: 1
 25976                           ;radio_driver_SX1276.c: 631: {
 25977                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 25978  000F3A  0E31               	movlw	49
 25979  000F3C  EC8D  F02E         	call	_RADIO_RegisterRead
 25980  000F40  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25981                           
 25982                           ; BSR set to: 0
 25983                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 25984  000F42  9FA9               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 25985                           
 25986                           ; BSR set to: 0
 25987                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 25988  000F44  D945               	call	PL454	;call to abstracted procedure
 25989  000F46  EC79  F02F         	call	_RADIO_RegisterWrite
 25990                           
 25991                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 25992  000F4A  0E40               	movlw	64
 25993  000F4C  0100               	movlb	0	; () banked
 25994  000F4E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25995  000F50  0E2F               	movlw	47
 25996  000F52  EC79  F02F         	call	_RADIO_RegisterWrite
 25997                           
 25998                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 25999  000F56  0100               	movlb	0	; () banked
 26000  000F58  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26001  000F5A  0E30               	movlw	48
 26002  000F5C  EC79  F02F         	call	_RADIO_RegisterWrite
 26003  000F60                     l12476:
 26004                           
 26005                           ;radio_driver_SX1276.c: 637: }
 26006                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 26007  000F60  0E09               	movlw	9
 26008  000F62  0101               	movlb	1	; () banked
 26009  000F64  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26010  000F66  E108               	bnz	l12484
 26011                           
 26012                           ; BSR set to: 1
 26013                           ;radio_driver_SX1276.c: 640: {
 26014                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 26015  000F68  0E31               	movlw	49
 26016  000F6A  EC8D  F02E         	call	_RADIO_RegisterRead
 26017  000F6E  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26018                           
 26019                           ; BSR set to: 0
 26020                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 26021  000F70  8FA9               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 26022                           
 26023                           ; BSR set to: 0
 26024                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 26025  000F72  D92E               	call	PL454	;call to abstracted procedure
 26026  000F74  EC79  F02F         	call	_RADIO_RegisterWrite
 26027  000F78                     l12484:
 26028                           
 26029                           ;radio_driver_SX1276.c: 644: }
 26030                           ;radio_driver_SX1276.c: 645: }
 26031                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 26032  000F78  0E33               	movlw	51
 26033  000F7A  EC8D  F02E         	call	_RADIO_RegisterRead
 26034  000F7E  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26035                           
 26036                           ; BSR set to: 0
 26037                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 26038  000F80  9DA9               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 26039                           
 26040                           ; BSR set to: 0
 26041                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 26042  000F82  81A9               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 26043                           
 26044                           ; BSR set to: 0
 26045                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 26046  000F84  C195  F0A2         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26047  000F88  0E01               	movlw	1
 26048  000F8A  17A2               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26049  000F8C  0E06               	movlw	6
 26050  000F8E  6FA3               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 26051  000F90                     u13415:
 26052  000F90  90D8               	bcf	status,0,c
 26053  000F92  37A2               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26054  000F94  2FA3               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 26055  000F96  D7FC               	goto	u13415
 26056  000F98  51A2               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 26057  000F9A  13A9               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26058                           
 26059                           ; BSR set to: 0
 26060                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 26061  000F9C  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26062  000FA0  0E33               	movlw	51
 26063  000FA2  EC79  F02F         	call	_RADIO_RegisterWrite
 26064                           
 26065                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 26066  000FA6  C195  F0A2         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26067  000FAA  0E01               	movlw	1
 26068  000FAC  0100               	movlb	0	; () banked
 26069  000FAE  17A2               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26070  000FB0  90D8               	bcf	status,0,c
 26071  000FB2  37A2               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26072  000FB4  90D8               	bcf	status,0,c
 26073  000FB6  35A2               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 26074  000FB8  0AFF               	xorlw	255
 26075  000FBA  0B1D               	andlw	29
 26076  000FBC  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26077                           
 26078                           ; BSR set to: 0
 26079                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 26080  000FBE  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26081  000FC2  0E3B               	movlw	59
 26082  000FC4  EC79  F02F         	call	_RADIO_RegisterWrite
 26083                           
 26084                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 26085  000FC8  D8F3               	call	PL398	;call to abstracted procedure
 26086  000FCA  0E20               	movlw	32
 26087  000FCC  EC79  F02F         	call	_RADIO_RegisterWrite
 26088                           
 26089                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26090  000FD0  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26091  000FD4  0E21               	movlw	33
 26092  000FD6  EC79  F02F         	call	_RADIO_RegisterWrite
 26093                           
 26094                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 26095  000FDA  D903               	call	PL474	;call to abstracted procedure
 26096  000FDC  EC79  F02F         	call	_RADIO_RegisterWrite
 26097                           
 26098                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 26099  000FE0  0100               	movlb	0	; () banked
 26100  000FE2  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26101  000FE4  0E0E               	movlw	14
 26102  000FE6  EC79  F02F         	call	_RADIO_RegisterWrite
 26103                           
 26104                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 26105  000FEA  0100               	movlb	0	; () banked
 26106  000FEC  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26107  000FEE  0E0F               	movlw	15
 26108  000FF0  EC79  F02F         	call	_RADIO_RegisterWrite
 26109                           
 26110                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 26111  000FF4  0E12               	movlw	18
 26112  000FF6  0101               	movlb	1	; () banked
 26113  000FF8  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26114  000FFA  E154               	bnz	l487
 26115                           
 26116                           ; BSR set to: 1
 26117                           ;radio_driver_SX1276.c: 665: {
 26118                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26119                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 26120                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 26121                           ;radio_driver_SX1276.c: 669: )
 26122  000FFC  0E09               	movlw	9
 26123  000FFE  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26124  001000  E119               	bnz	l12518
 26125                           
 26126                           ; BSR set to: 1
 26127  001002  0E80               	movlw	128
 26128  001004  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26129  001006  0E13               	movlw	19
 26130  001008  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26131  00100A  0E61               	movlw	97
 26132  00100C  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26133  00100E  0E33               	movlw	51
 26134  001010  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26135  001012  E310               	bnc	l12518
 26136                           
 26137                           ; BSR set to: 1
 26138  001014  0575               	decf	_RadioConfiguration& (0+255),w,b
 26139  001016  0EF7               	movlw	247
 26140  001018  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26141  00101A  0ECB               	movlw	203
 26142  00101C  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26143  00101E  0E3C               	movlw	60
 26144  001020  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26145  001022  E208               	bc	l12518
 26146                           
 26147                           ; BSR set to: 1
 26148                           ;radio_driver_SX1276.c: 670: {
 26149                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 26150  001024  D8C1               	call	PL372	;call to abstracted procedure
 26151  001026  EC79  F02F         	call	_RADIO_RegisterWrite
 26152                           
 26153                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 26154  00102A  0E64               	movlw	100
 26155  00102C  D8CA               	call	PL416	;call to abstracted procedure
 26156  00102E  EC79  F02F         	call	_RADIO_RegisterWrite
 26157                           
 26158                           ;radio_driver_SX1276.c: 673: }
 26159  001032  D023               	goto	l12528
 26160  001034                     l12518:
 26161                           
 26162                           ; BSR set to: 1
 26163                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26164                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 26165                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 26166                           ;radio_driver_SX1276.c: 677: )
 26167  001034  0E09               	movlw	9
 26168  001036  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26169  001038  E11A               	bnz	l12526
 26170                           
 26171                           ; BSR set to: 1
 26172  00103A  0E80               	movlw	128
 26173  00103C  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26174  00103E  0E1A               	movlw	26
 26175  001040  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26176  001042  0E70               	movlw	112
 26177  001044  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26178  001046  0E18               	movlw	24
 26179  001048  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26180  00104A  E311               	bnc	l12526
 26181                           
 26182                           ; BSR set to: 1
 26183  00104C  0E41               	movlw	65
 26184  00104E  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26185  001050  0EDD               	movlw	221
 26186  001052  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26187  001054  0E4A               	movlw	74
 26188  001056  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26189  001058  0E1F               	movlw	31
 26190  00105A  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26191  00105C  E208               	bc	l12526
 26192                           
 26193                           ; BSR set to: 1
 26194                           ;radio_driver_SX1276.c: 678: {
 26195                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 26196  00105E  D8A4               	call	PL372	;call to abstracted procedure
 26197  001060  EC79  F02F         	call	_RADIO_RegisterWrite
 26198                           
 26199                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 26200  001064  0E7F               	movlw	127
 26201  001066  D8AD               	call	PL416	;call to abstracted procedure
 26202  001068  EC79  F02F         	call	_RADIO_RegisterWrite
 26203                           
 26204                           ;radio_driver_SX1276.c: 681: }
 26205  00106C  D006               	goto	l12528
 26206  00106E                     l12526:
 26207                           
 26208                           ; BSR set to: 1
 26209                           ;radio_driver_SX1276.c: 682: else
 26210                           ;radio_driver_SX1276.c: 683: {
 26211                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 26212  00106E  0E03               	movlw	3
 26213  001070  0100               	movlb	0	; () banked
 26214  001072  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26215  001074  0E36               	movlw	54
 26216  001076  EC79  F02F         	call	_RADIO_RegisterWrite
 26217  00107A                     l12528:
 26218                           
 26219                           ;radio_driver_SX1276.c: 685: }
 26220                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 26221  00107A  0E09               	movlw	9
 26222  00107C  0101               	movlb	1	; () banked
 26223  00107E  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26224  001080  E10A               	bnz	l12534
 26225                           
 26226                           ; BSR set to: 1
 26227  001082  0595               	decf	(_RadioConfiguration+32)& (0+255),w,b
 26228  001084  E108               	bnz	l12534
 26229                           
 26230                           ; BSR set to: 1
 26231                           ;radio_driver_SX1276.c: 689: {
 26232                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 26233  001086  D899               	call	PL404	;call to abstracted procedure
 26234  001088  EC79  F02F         	call	_RADIO_RegisterWrite
 26235                           
 26236                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 26237  00108C  0E19               	movlw	25
 26238  00108E  D8A3               	call	PL458	;call to abstracted procedure
 26239  001090  EC79  F02F         	call	_RADIO_RegisterWrite
 26240                           
 26241                           ;radio_driver_SX1276.c: 692: }
 26242  001094  D007               	goto	l487
 26243  001096                     l12534:
 26244                           
 26245                           ; BSR set to: 1
 26246                           ;radio_driver_SX1276.c: 693: else
 26247                           ;radio_driver_SX1276.c: 694: {
 26248                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 26249  001096  D891               	call	PL404	;call to abstracted procedure
 26250  001098  EC79  F02F         	call	_RADIO_RegisterWrite
 26251                           
 26252                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 26253  00109C  0E1D               	movlw	29
 26254  00109E  D89B               	call	PL458	;call to abstracted procedure
 26255  0010A0  EC79  F02F         	call	_RADIO_RegisterWrite
 26256  0010A4                     l487:
 26257                           
 26258                           ;radio_driver_SX1276.c: 697: }
 26259                           ;radio_driver_SX1276.c: 698: }
 26260                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 26261  0010A4  EC16  F025         	call	PL472	;call to abstracted procedure
 26262  0010A8  EF79  F02F         	goto	_RADIO_RegisterWrite
 26263  0010AC                     l12536:
 26264                           
 26265                           ; BSR set to: 1
 26266                           ;radio_driver_SX1276.c: 703: else
 26267                           ;radio_driver_SX1276.c: 704: {
 26268                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 26269  0010AC  C179  F071         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 26270  0010B0  C17A  F072         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 26271  0010B4  C17B  F073         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 26272  0010B8  C17C  F074         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 26273  0010BC  EC90  F027         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 26274                           
 26275                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 26276  0010C0  C17D  F071         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 26277  0010C4  C17E  F072         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 26278  0010C8  C17F  F073         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 26279  0010CC  C180  F074         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 26280  0010D0  ECFE  F026         	call	_RADIO_WriteFSKBitRate	;wreg free
 26281                           
 26282                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 26283  0010D4  D86D               	call	PL398	;call to abstracted procedure
 26284  0010D6  0E25               	movlw	37
 26285  0010D8  EC79  F02F         	call	_RADIO_RegisterWrite
 26286                           
 26287                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26288  0010DC  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26289  0010E0  0E26               	movlw	38
 26290  0010E2  EC79  F02F         	call	_RADIO_RegisterWrite
 26291                           
 26292                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 26293  0010E6  0E0A               	movlw	10
 26294  0010E8  EC8D  F02E         	call	_RADIO_RegisterRead
 26295  0010EC  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26296                           
 26297                           ; BSR set to: 0
 26298                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 26299  0010EE  0E9F               	movlw	159
 26300  0010F0  17A9               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26301                           
 26302                           ; BSR set to: 0
 26303                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 26304  0010F2  0101               	movlb	1	; () banked
 26305  0010F4  39A8               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 26306  0010F6  46E8               	rlncf	wreg,f,c
 26307  0010F8  0BE0               	andlw	224
 26308  0010FA  0100               	movlb	0	; () banked
 26309  0010FC  13A9               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26310                           
 26311                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 26312  0010FE  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26313  001102  0E0A               	movlw	10
 26314  001104  EC79  F02F         	call	_RADIO_RegisterWrite
 26315                           
 26316                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 26317  001108  0EC8               	movlw	200
 26318  00110A  0100               	movlb	0	; () banked
 26319  00110C  6FA9               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26320                           
 26321                           ; BSR set to: 0
 26322                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 26323  00110E  0101               	movlb	1	; () banked
 26324  001110  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
 26325  001112  E002               	bz	l12548
 26326                           
 26327                           ; BSR set to: 1
 26328                           ;radio_driver_SX1276.c: 722: {
 26329                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 26330  001114  0100               	movlb	0	; () banked
 26331  001116  89A9               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 26332  001118                     l12548:
 26333                           
 26334                           ;radio_driver_SX1276.c: 724: }
 26335                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 26336  001118  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26337  00111C  0E30               	movlw	48
 26338  00111E  EC79  F02F         	call	_RADIO_RegisterWrite
 26339                           
 26340                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 26341  001122  0100               	movlb	0	; () banked
 26342  001124  6BA4               	clrf	RADIO_WriteConfiguration@i& (0+255),b
 26343  001126  D00E               	goto	l12556
 26344  001128                     l12552:
 26345                           
 26346                           ; BSR set to: 0
 26347                           ;radio_driver_SX1276.c: 729: {
 26348                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 26349  001128  0E84               	movlw	low (_RadioConfiguration+15)
 26350  00112A  25A4               	addwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26351  00112C  6ED9               	movwf	fsr2l,c
 26352  00112E  6ADA               	clrf	fsr2h,c
 26353  001130  0E01               	movlw	high (_RadioConfiguration+15)
 26354  001132  22DA               	addwfc	fsr2h,f,c
 26355  001134  50DF               	movf	indf2,w,c
 26356  001136  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26357  001138  51A4               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 26358  00113A  0F28               	addlw	40
 26359  00113C  EC79  F02F         	call	_RADIO_RegisterWrite
 26360  001140  0100               	movlb	0	; () banked
 26361  001142  2BA4               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 26362  001144                     l12556:
 26363                           
 26364                           ; BSR set to: 0
 26365  001144  0101               	movlb	1	; () banked
 26366  001146  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26367  001148  0100               	movlb	0	; () banked
 26368  00114A  5DA4               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26369  00114C  E3ED               	bnc	l12552
 26370                           
 26371                           ; BSR set to: 0
 26372                           ;radio_driver_SX1276.c: 733: }
 26373                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 26374  00114E  0101               	movlb	1	; () banked
 26375  001150  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26376  001152  E008               	bz	l12562
 26377                           
 26378                           ; BSR set to: 1
 26379                           ;radio_driver_SX1276.c: 737: {
 26380                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 26381  001154  058C               	decf	(_RadioConfiguration+23)& (0+255),w,b
 26382  001156  0910               	iorlw	16
 26383  001158  0100               	movlb	0	; () banked
 26384  00115A  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26385  00115C  0E27               	movlw	39
 26386  00115E  EC79  F02F         	call	_RADIO_RegisterWrite
 26387                           
 26388                           ;radio_driver_SX1276.c: 739: }
 26389  001162  D005               	goto	l500
 26390  001164                     l12562:
 26391                           
 26392                           ; BSR set to: 1
 26393                           ;radio_driver_SX1276.c: 740: else
 26394                           ;radio_driver_SX1276.c: 741: {
 26395                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 26396  001164  0100               	movlb	0	; () banked
 26397  001166  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26398  001168  0E27               	movlw	39
 26399  00116A  EC79  F02F         	call	_RADIO_RegisterWrite
 26400  00116E                     l500:
 26401                           
 26402                           ;radio_driver_SX1276.c: 743: }
 26403                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 26404  00116E  0100               	movlb	0	; () banked
 26405  001170  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26406  001172  0E3E               	movlw	62
 26407  001174  EC79  F02F         	call	_RADIO_RegisterWrite
 26408                           
 26409                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 26410  001178  D831               	call	PL464	;call to abstracted procedure
 26411  00117A  EF79  F02F         	goto	_RADIO_RegisterWrite
 26412  00117E                     __end_of_RADIO_WriteConfiguration:
 26413                           	opt stack 0
 26414  00117E                     PL128:
 26415                           	opt stack 16
 26416  00117E  C0A5  F094         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 26417  001182  C0A6  F095         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 26418  001186  C0A7  F096         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 26419  00118A  C0A8  F097         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 26420  00118E  0012               	return	
 26421  001190                     __end_ofPL128:
 26422                           	opt stack 0
 26423  001190                     PL342:
 26424                           	opt stack 16
 26425  001190  0100               	movlb	0	; () banked
 26426  001192  6BA5               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 26427  001194  6BA6               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 26428  001196  6BA7               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 26429  001198  6BA8               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 26430  00119A  0012               	return	
 26431  00119C                     __end_ofPL342:
 26432                           	opt stack 0
 26433  00119C                     PL358:
 26434                           	opt stack 16
 26435  00119C  0BF0               	andlw	240
 26436  00119E  0100               	movlb	0	; () banked
 26437  0011A0  11A3               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 26438  0011A2  11A2               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 26439  0011A4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26440  0011A6  0012               	return	
 26441  0011A8                     __end_ofPL358:
 26442                           	opt stack 0
 26443  0011A8                     PL372:
 26444                           	opt stack 16
 26445  0011A8  0E02               	movlw	2
 26446  0011AA  0100               	movlb	0	; () banked
 26447  0011AC  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26448  0011AE  0C36               	retlw	54
 26449  0011B0                     __end_ofPL372:
 26450                           	opt stack 0
 26451  0011B0                     PL398:
 26452                           	opt stack 16
 26453  0011B0  0101               	movlb	1	; () banked
 26454  0011B2  5182               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26455  0011B4  0100               	movlb	0	; () banked
 26456  0011B6  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26457  0011B8  0012               	return	
 26458  0011BA                     __end_ofPL398:
 26459                           	opt stack 0
 26460  0011BA                     PL404:
 26461                           	opt stack 16
 26462  0011BA  0E65               	movlw	101
 26463  0011BC  0100               	movlb	0	; () banked
 26464  0011BE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26465  0011C0  0C3A               	retlw	58
 26466  0011C2                     __end_ofPL404:
 26467                           	opt stack 0
 26468  0011C2                     PL416:
 26469                           	opt stack 16
 26470  0011C2  0100               	movlb	0	; () banked
 26471  0011C4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26472  0011C6  0C3A               	retlw	58
 26473  0011C8                     __end_ofPL416:
 26474                           	opt stack 0
 26475  0011C8                     PL450:
 26476                           	opt stack 13
 26477  0011C8  6F99               	movwf	(___lmul@multiplicand+1)& (0+255),b
 26478  0011CA  6B9A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 26479  0011CC  6B9B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 26480  0011CE  0012               	return	
 26481  0011D0                     __end_ofPL450:
 26482                           	opt stack 0
 26483  0011D0                     PL454:
 26484                           	opt stack 16
 26485  0011D0  C0A9  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26486  0011D4  0C31               	retlw	49
 26487  0011D6                     __end_ofPL454:
 26488                           	opt stack 0
 26489  0011D6                     PL458:
 26490                           	opt stack 16
 26491  0011D6  0100               	movlb	0	; () banked
 26492  0011D8  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26493  0011DA  0C3B               	retlw	59
 26494  0011DC                     __end_ofPL458:
 26495                           	opt stack 0
 26496  0011DC                     PL464:
 26497                           	opt stack 18
 26498  0011DC  0100               	movlb	0	; () banked
 26499  0011DE  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26500  0011E0  0C3F               	retlw	63
 26501  0011E2                     __end_ofPL464:
 26502                           	opt stack 0
 26503  0011E2                     PL474:
 26504                           	opt stack 12
 26505  0011E2  0100               	movlb	0	; () banked
 26506  0011E4  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26507  0011E6  0C0D               	retlw	13
 26508  0011E8                     __end_ofPL474:
 26509                           	opt stack 0
 26510                           tosu	equ	0xFFF
 26511                           tosh	equ	0xFFE
 26512                           tosl	equ	0xFFD
 26513                           pclath	equ	0xFFA
 26514                           tblptru	equ	0xFF8
 26515                           tblptrh	equ	0xFF7
 26516                           tblptrl	equ	0xFF6
 26517                           tablat	equ	0xFF5
 26518                           prodh	equ	0xFF4
 26519                           prodl	equ	0xFF3
 26520                           intcon	equ	0xFF2
 26521                           indf0	equ	0xFEF
 26522                           postinc0	equ	0xFEE
 26523                           plusw0	equ	0xFEB
 26524                           fsr0h	equ	0xFEA
 26525                           fsr0l	equ	0xFE9
 26526                           wreg	equ	0xFE8
 26527                           postinc1	equ	0xFE6
 26528                           postdec1	equ	0xFE5
 26529                           plusw1	equ	0xFE3
 26530                           fsr1h	equ	0xFE2
 26531                           fsr1l	equ	0xFE1
 26532                           indf2	equ	0xFDF
 26533                           postinc2	equ	0xFDE
 26534                           postdec2	equ	0xFDD
 26535                           plusw2	equ	0xFDB
 26536                           fsr2h	equ	0xFDA
 26537                           fsr2l	equ	0xFD9
 26538                           status	equ	0xFD8
 26539                           
 26540 ;; *************** function _RADIO_WritePower *****************
 26541 ;; Defined at:
 26542 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26543 ;; Parameters:    Size  Location     Type
 26544 ;;  power           1    wreg     char 
 26545 ;; Auto vars:     Size  Location     Type
 26546 ;;  power           1   10[BANK0 ] char 
 26547 ;;  paDac           1    9[BANK0 ] unsigned char 
 26548 ;;  ocp             1    8[BANK0 ] unsigned char 
 26549 ;; Return value:  Size  Location     Type
 26550 ;;                  1    wreg      void 
 26551 ;; Registers used:
 26552 ;;		wreg, status,2, status,0, cstack
 26553 ;; Tracked objects:
 26554 ;;		On entry : F/1
 26555 ;;		On exit  : 1/0
 26556 ;;		Unchanged: 0/0
 26557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 26558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26559 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26561 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26562 ;;Total ram usage:        3 bytes
 26563 ;; Hardware stack levels used:    1
 26564 ;; Hardware stack levels required when called:   10
 26565 ;; This function calls:
 26566 ;;		_RADIO_RegisterRead
 26567 ;;		_RADIO_RegisterWrite
 26568 ;; This function is called by:
 26569 ;;		_RADIO_WriteConfiguration
 26570 ;; This function uses a non-reentrant model
 26571 ;;
 26572                           
 26573                           	psect	text138
 26574  003972                     __ptext138:
 26575                           	opt stack 0
 26576  003972                     _RADIO_WritePower:
 26577                           	opt stack 16
 26578                           
 26579                           ;incstack = 0
 26580                           ;RADIO_WritePower@power stored from wreg
 26581  003972  0100               	movlb	0	; () banked
 26582  003974  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26583                           
 26584                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 26585                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 26586                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 26587  003976  0101               	movlb	1	; () banked
 26588  003978  5192               	movf	(_RadioConfiguration+29)& (0+255),w,b
 26589  00397A  E125               	bnz	l12250
 26590                           
 26591                           ; BSR set to: 1
 26592                           ;radio_driver_SX1276.c: 348: {
 26593                           ;radio_driver_SX1276.c: 350: if (power < -3)
 26594  00397C  0100               	movlb	0	; () banked
 26595  00397E  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26596  003980  0A80               	xorlw	128
 26597  003982  0F83               	addlw	131
 26598  003984  E202               	bc	l12230
 26599                           
 26600                           ; BSR set to: 0
 26601                           ;radio_driver_SX1276.c: 351: {
 26602                           ;radio_driver_SX1276.c: 352: power = -3;
 26603  003986  0EFD               	movlw	253
 26604  003988  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26605  00398A                     l12230:
 26606                           
 26607                           ; BSR set to: 0
 26608                           ;radio_driver_SX1276.c: 353: }
 26609                           ;radio_driver_SX1276.c: 354: if (power > 15)
 26610  00398A  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26611  00398C  0A80               	xorlw	128
 26612  00398E  0F70               	addlw	-144
 26613  003990  E302               	bnc	l12234
 26614                           
 26615                           ; BSR set to: 0
 26616                           ;radio_driver_SX1276.c: 355: {
 26617                           ;radio_driver_SX1276.c: 356: power = 15;
 26618  003992  0E0F               	movlw	15
 26619  003994  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26620  003996                     l12234:
 26621                           
 26622                           ; BSR set to: 0
 26623                           ;radio_driver_SX1276.c: 357: }
 26624                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 26625  003996  0E4D               	movlw	77
 26626  003998  EC8D  F02E         	call	_RADIO_RegisterRead
 26627  00399C  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26628                           
 26629                           ; BSR set to: 0
 26630                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 26631  00399E  0EF8               	movlw	248
 26632  0039A0  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26633                           
 26634                           ; BSR set to: 0
 26635                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 26636  0039A2  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26637                           
 26638                           ; BSR set to: 0
 26639                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 26640  0039A4  D849               	call	PL462	;call to abstracted procedure
 26641  0039A6  EC79  F02F         	call	_RADIO_RegisterWrite
 26642                           
 26643                           ;radio_driver_SX1276.c: 364: if (power < 0)
 26644  0039AA  0100               	movlb	0	; () banked
 26645  0039AC  AF6A               	btfss	RADIO_WritePower@power& (0+255),7,b
 26646  0039AE  D005               	goto	l12248
 26647                           
 26648                           ; BSR set to: 0
 26649                           ;radio_driver_SX1276.c: 365: {
 26650                           ;radio_driver_SX1276.c: 369: power += 3;
 26651  0039B0  0E03               	movlw	3
 26652  0039B2  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26653                           
 26654                           ; BSR set to: 0
 26655                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 26656  0039B4  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26657  0039B6  0920               	iorlw	32
 26658  0039B8  D002               	goto	L20
 26659  0039BA                     l12248:
 26660                           
 26661                           ; BSR set to: 0
 26662                           ;radio_driver_SX1276.c: 372: else
 26663                           ;radio_driver_SX1276.c: 373: {
 26664                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 26665  0039BA  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26666  0039BC  0970               	iorlw	112
 26667  0039BE                     L20:
 26668  0039BE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26669  0039C0  0E09               	movlw	9
 26670  0039C2  EF79  F02F         	goto	_RADIO_RegisterWrite
 26671  0039C6                     l12250:
 26672                           
 26673                           ; BSR set to: 1
 26674                           ;radio_driver_SX1276.c: 380: else
 26675                           ;radio_driver_SX1276.c: 381: {
 26676                           ;radio_driver_SX1276.c: 385: if (power < 2)
 26677  0039C6  0100               	movlb	0	; () banked
 26678  0039C8  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26679  0039CA  0A80               	xorlw	128
 26680  0039CC  0F7E               	addlw	-130
 26681  0039CE  E202               	bc	l12254
 26682                           
 26683                           ; BSR set to: 0
 26684                           ;radio_driver_SX1276.c: 386: {
 26685                           ;radio_driver_SX1276.c: 387: power = 2;
 26686  0039D0  0E02               	movlw	2
 26687  0039D2  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26688  0039D4                     l12254:
 26689                           
 26690                           ; BSR set to: 0
 26691                           ;radio_driver_SX1276.c: 388: }
 26692                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 26693  0039D4  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26694  0039D6  0A80               	xorlw	128
 26695  0039D8  0F6C               	addlw	-148
 26696  0039DA  E302               	bnc	l12258
 26697                           
 26698                           ; BSR set to: 0
 26699                           ;radio_driver_SX1276.c: 392: {
 26700                           ;radio_driver_SX1276.c: 393: power = 20;
 26701  0039DC  0E14               	movlw	20
 26702  0039DE  D005               	goto	L19
 26703  0039E0                     l12258:
 26704                           
 26705                           ; BSR set to: 0
 26706                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 26707  0039E0  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26708  0039E2  0A80               	xorlw	128
 26709  0039E4  0F6E               	addlw	-146
 26710  0039E6  E302               	bnc	l12262
 26711                           
 26712                           ; BSR set to: 0
 26713                           ;radio_driver_SX1276.c: 396: {
 26714                           ;radio_driver_SX1276.c: 397: power = 17;
 26715  0039E8  0E11               	movlw	17
 26716  0039EA                     L19:
 26717  0039EA  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26718  0039EC                     l12262:
 26719                           
 26720                           ; BSR set to: 0
 26721                           ;radio_driver_SX1276.c: 398: }
 26722                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 26723  0039EC  0E0B               	movlw	11
 26724  0039EE  EC8D  F02E         	call	_RADIO_RegisterRead
 26725  0039F2  6F68               	movwf	RADIO_WritePower@ocp& (0+255),b
 26726                           
 26727                           ; BSR set to: 0
 26728                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 26729  0039F4  0E4D               	movlw	77
 26730  0039F6  EC8D  F02E         	call	_RADIO_RegisterRead
 26731  0039FA  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26732                           
 26733                           ; BSR set to: 0
 26734                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 26735  0039FC  0EF8               	movlw	248
 26736  0039FE  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26737                           
 26738                           ; BSR set to: 0
 26739                           ;radio_driver_SX1276.c: 403: if (power == 20)
 26740  003A00  0E14               	movlw	20
 26741  003A02  196A               	xorwf	RADIO_WritePower@power& (0+255),w,b
 26742  003A04  E106               	bnz	l12276
 26743                           
 26744                           ; BSR set to: 0
 26745                           ;radio_driver_SX1276.c: 404: {
 26746                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 26747  003A06  0E07               	movlw	7
 26748  003A08  1369               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 26749                           
 26750                           ; BSR set to: 0
 26751                           ;radio_driver_SX1276.c: 406: power = 15;
 26752  003A0A  0E0F               	movlw	15
 26753  003A0C  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26754                           
 26755                           ; BSR set to: 0
 26756                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 26757  003A0E  9B68               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 26758                           
 26759                           ;radio_driver_SX1276.c: 408: }
 26760  003A10  D004               	goto	l12282
 26761  003A12                     l12276:
 26762                           
 26763                           ; BSR set to: 0
 26764                           ;radio_driver_SX1276.c: 409: else
 26765                           ;radio_driver_SX1276.c: 410: {
 26766                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 26767  003A12  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26768                           
 26769                           ; BSR set to: 0
 26770                           ;radio_driver_SX1276.c: 412: power -= 2;
 26771  003A14  0EFE               	movlw	254
 26772  003A16  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26773                           
 26774                           ; BSR set to: 0
 26775                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 26776  003A18  8B68               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 26777  003A1A                     l12282:
 26778                           
 26779                           ; BSR set to: 0
 26780                           ;radio_driver_SX1276.c: 414: }
 26781                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 26782  003A1A  D80E               	call	PL462	;call to abstracted procedure
 26783  003A1C  EC79  F02F         	call	_RADIO_RegisterWrite
 26784                           
 26785                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 26786  003A20  0100               	movlb	0	; () banked
 26787  003A22  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26788  003A24  0980               	iorlw	128
 26789  003A26  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26790  003A28  0E09               	movlw	9
 26791  003A2A  EC79  F02F         	call	_RADIO_RegisterWrite
 26792                           
 26793                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 26794  003A2E  C068  F066         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 26795  003A32  0E0B               	movlw	11
 26796  003A34  EF79  F02F         	goto	_RADIO_RegisterWrite
 26797  003A38                     __end_of_RADIO_WritePower:
 26798                           	opt stack 0
 26799  003A38                     PL462:
 26800                           	opt stack 16
 26801  003A38  C069  F066         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26802  003A3C  0C4D               	retlw	77
 26803  003A3E                     __end_ofPL462:
 26804                           	opt stack 0
 26805                           tosu	equ	0xFFF
 26806                           tosh	equ	0xFFE
 26807                           tosl	equ	0xFFD
 26808                           pclath	equ	0xFFA
 26809                           tblptru	equ	0xFF8
 26810                           tblptrh	equ	0xFF7
 26811                           tblptrl	equ	0xFF6
 26812                           tablat	equ	0xFF5
 26813                           prodh	equ	0xFF4
 26814                           prodl	equ	0xFF3
 26815                           intcon	equ	0xFF2
 26816                           indf0	equ	0xFEF
 26817                           postinc0	equ	0xFEE
 26818                           plusw0	equ	0xFEB
 26819                           fsr0h	equ	0xFEA
 26820                           fsr0l	equ	0xFE9
 26821                           wreg	equ	0xFE8
 26822                           postinc1	equ	0xFE6
 26823                           postdec1	equ	0xFE5
 26824                           plusw1	equ	0xFE3
 26825                           fsr1h	equ	0xFE2
 26826                           fsr1l	equ	0xFE1
 26827                           indf2	equ	0xFDF
 26828                           postinc2	equ	0xFDE
 26829                           postdec2	equ	0xFDD
 26830                           plusw2	equ	0xFDB
 26831                           fsr2h	equ	0xFDA
 26832                           fsr2l	equ	0xFD9
 26833                           status	equ	0xFD8
 26834                           
 26835 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 26836 ;; Defined at:
 26837 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26838 ;; Parameters:    Size  Location     Type
 26839 ;;  frequencyDev    4   17[BANK0 ] unsigned long 
 26840 ;; Auto vars:     Size  Location     Type
 26841 ;;  num             4   21[BANK0 ] unsigned long 
 26842 ;; Return value:  Size  Location     Type
 26843 ;;                  1    wreg      void 
 26844 ;; Registers used:
 26845 ;;		wreg, status,2, status,0, cstack
 26846 ;; Tracked objects:
 26847 ;;		On entry : F/1
 26848 ;;		On exit  : 1/0
 26849 ;;		Unchanged: 0/0
 26850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 26851 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26852 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26854 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26855 ;;Total ram usage:        8 bytes
 26856 ;; Hardware stack levels used:    1
 26857 ;; Hardware stack levels required when called:   10
 26858 ;; This function calls:
 26859 ;;		_RADIO_RegisterWrite
 26860 ;;		___lldiv
 26861 ;; This function is called by:
 26862 ;;		_RADIO_WriteConfiguration
 26863 ;; This function uses a non-reentrant model
 26864 ;;
 26865                           
 26866                           	psect	text139
 26867  004F20                     __ptext139:
 26868                           	opt stack 0
 26869  004F20                     _RADIO_WriteFSKFrequencyDeviation:
 26870                           	opt stack 16
 26871                           
 26872                           ; BSR set to: 1
 26873                           ;radio_driver_SX1276.c: 296: uint32_t num;
 26874                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 26875                           
 26876                           ;incstack = 0
 26877  004F20  C071  F075         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 26878  004F24  C072  F076         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 26879  004F28  C073  F077         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 26880  004F2C  C074  F078         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 26881                           
 26882                           ; BSR set to: 1
 26883                           ;radio_driver_SX1276.c: 304: num <<= (8);
 26884  004F30  C077  F078         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 26885  004F34  C076  F077         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 26886  004F38  C075  F076         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 26887  004F3C  0100               	movlb	0	; () banked
 26888  004F3E  6B75               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 26889                           
 26890                           ; BSR set to: 0
 26891                           ;radio_driver_SX1276.c: 305: num /= 15625;
 26892  004F40  C075  F064         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 26893  004F44  C076  F065         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 26894  004F48  C077  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 26895  004F4C  C078  F067         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 26896  004F50  0E09               	movlw	9
 26897  004F52  EC48  F01C         	call	PL248	;call to abstracted procedure
 26898  004F56  EC55  F025         	call	___lldiv	;wreg free
 26899  004F5A  C064  F075         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 26900  004F5E  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 26901  004F62  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 26902  004F66  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 26903                           
 26904                           ; BSR set to: 0
 26905                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 26906  004F6A  C076  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 26907  004F6E  0E04               	movlw	4
 26908  004F70  EC79  F02F         	call	_RADIO_RegisterWrite
 26909                           
 26910                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 26911  004F74  C075  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 26912  004F78  0E05               	movlw	5
 26913  004F7A  EF79  F02F         	goto	_RADIO_RegisterWrite
 26914  004F7E                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 26915                           	opt stack 0
 26916                           tosu	equ	0xFFF
 26917                           tosh	equ	0xFFE
 26918                           tosl	equ	0xFFD
 26919                           pclath	equ	0xFFA
 26920                           tblptru	equ	0xFF8
 26921                           tblptrh	equ	0xFF7
 26922                           tblptrl	equ	0xFF6
 26923                           tablat	equ	0xFF5
 26924                           prodh	equ	0xFF4
 26925                           prodl	equ	0xFF3
 26926                           intcon	equ	0xFF2
 26927                           indf0	equ	0xFEF
 26928                           postinc0	equ	0xFEE
 26929                           plusw0	equ	0xFEB
 26930                           fsr0h	equ	0xFEA
 26931                           fsr0l	equ	0xFE9
 26932                           wreg	equ	0xFE8
 26933                           postinc1	equ	0xFE6
 26934                           postdec1	equ	0xFE5
 26935                           plusw1	equ	0xFE3
 26936                           fsr1h	equ	0xFE2
 26937                           fsr1l	equ	0xFE1
 26938                           indf2	equ	0xFDF
 26939                           postinc2	equ	0xFDE
 26940                           postdec2	equ	0xFDD
 26941                           plusw2	equ	0xFDB
 26942                           fsr2h	equ	0xFDA
 26943                           fsr2l	equ	0xFD9
 26944                           status	equ	0xFD8
 26945                           
 26946 ;; *************** function _RADIO_WriteFSKBitRate *****************
 26947 ;; Defined at:
 26948 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26949 ;; Parameters:    Size  Location     Type
 26950 ;;  bitRate         4   17[BANK0 ] unsigned long 
 26951 ;; Auto vars:     Size  Location     Type
 26952 ;;  num             4   21[BANK0 ] unsigned long 
 26953 ;; Return value:  Size  Location     Type
 26954 ;;                  1    wreg      void 
 26955 ;; Registers used:
 26956 ;;		wreg, status,2, status,0, cstack
 26957 ;; Tracked objects:
 26958 ;;		On entry : 1/0
 26959 ;;		On exit  : 1/0
 26960 ;;		Unchanged: 0/0
 26961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 26962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26963 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26965 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26966 ;;Total ram usage:        8 bytes
 26967 ;; Hardware stack levels used:    1
 26968 ;; Hardware stack levels required when called:   10
 26969 ;; This function calls:
 26970 ;;		_RADIO_RegisterWrite
 26971 ;;		___lldiv
 26972 ;; This function is called by:
 26973 ;;		_RADIO_WriteConfiguration
 26974 ;; This function uses a non-reentrant model
 26975 ;;
 26976                           
 26977                           	psect	text140
 26978  004DFC                     __ptext140:
 26979                           	opt stack 0
 26980  004DFC                     _RADIO_WriteFSKBitRate:
 26981                           	opt stack 16
 26982                           
 26983                           ;radio_driver_SX1276.c: 318: uint32_t num;
 26984                           ;radio_driver_SX1276.c: 320: num = 32000000;
 26985                           
 26986                           ;incstack = 0
 26987  004DFC  0100               	movlb	0	; () banked
 26988  004DFE  6B75               	clrf	RADIO_WriteFSKBitRate@num& (0+255),b
 26989  004E00  0E48               	movlw	72
 26990  004E02  6F76               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 26991  004E04  0EE8               	movlw	232
 26992  004E06  6F77               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 26993  004E08  0E01               	movlw	1
 26994  004E0A  6F78               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 26995                           
 26996                           ; BSR set to: 0
 26997                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 26998  004E0C  C075  F064         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 26999  004E10  C076  F065         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 27000  004E14  C077  F066         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 27001  004E18  C078  F067         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 27002  004E1C  C071  F068         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 27003  004E20  C072  F069         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 27004  004E24  C073  F06A         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 27005  004E28  C074  F06B         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 27006  004E2C  EC55  F025         	call	___lldiv	;wreg free
 27007  004E30  C064  F075         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 27008  004E34  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 27009  004E38  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 27010  004E3C  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 27011                           
 27012                           ; BSR set to: 0
 27013                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 27014  004E40  C076  F066         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 27015  004E44  0E02               	movlw	2
 27016  004E46  EC79  F02F         	call	_RADIO_RegisterWrite
 27017                           
 27018                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 27019  004E4A  C075  F066         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 27020  004E4E  0E03               	movlw	3
 27021  004E50  EC79  F02F         	call	_RADIO_RegisterWrite
 27022                           
 27023                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 27024  004E54  0100               	movlb	0	; () banked
 27025  004E56  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 27026  004E58  0E5D               	movlw	93
 27027  004E5A  EF79  F02F         	goto	_RADIO_RegisterWrite
 27028  004E5E                     __end_of_RADIO_WriteFSKBitRate:
 27029                           	opt stack 0
 27030                           tosu	equ	0xFFF
 27031                           tosh	equ	0xFFE
 27032                           tosl	equ	0xFFD
 27033                           pclath	equ	0xFFA
 27034                           tblptru	equ	0xFF8
 27035                           tblptrh	equ	0xFF7
 27036                           tblptrl	equ	0xFF6
 27037                           tablat	equ	0xFF5
 27038                           prodh	equ	0xFF4
 27039                           prodl	equ	0xFF3
 27040                           intcon	equ	0xFF2
 27041                           indf0	equ	0xFEF
 27042                           postinc0	equ	0xFEE
 27043                           plusw0	equ	0xFEB
 27044                           fsr0h	equ	0xFEA
 27045                           fsr0l	equ	0xFE9
 27046                           wreg	equ	0xFE8
 27047                           postinc1	equ	0xFE6
 27048                           postdec1	equ	0xFE5
 27049                           plusw1	equ	0xFE3
 27050                           fsr1h	equ	0xFE2
 27051                           fsr1l	equ	0xFE1
 27052                           indf2	equ	0xFDF
 27053                           postinc2	equ	0xFDE
 27054                           postdec2	equ	0xFDD
 27055                           plusw2	equ	0xFDB
 27056                           fsr2h	equ	0xFDA
 27057                           fsr2l	equ	0xFD9
 27058                           status	equ	0xFD8
 27059                           
 27060 ;; *************** function _PrepareJoinRequestFrame *****************
 27061 ;; Defined at:
 27062 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27063 ;; Parameters:    Size  Location     Type
 27064 ;;		None
 27065 ;; Auto vars:     Size  Location     Type
 27066 ;;  mic             4  133[BANK0 ] unsigned long 
 27067 ;;  iCtr            1  139[BANK0 ] unsigned char 
 27068 ;;  bufferIndex     1  138[BANK0 ] unsigned char 
 27069 ;;  mhdr            1  137[BANK0 ] struct .
 27070 ;; Return value:  Size  Location     Type
 27071 ;;                  1    wreg      unsigned char 
 27072 ;; Registers used:
 27073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27074 ;; Tracked objects:
 27075 ;;		On entry : F/2
 27076 ;;		On exit  : F/0
 27077 ;;		Unchanged: 0/0
 27078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27080 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27082 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27083 ;;Total ram usage:        9 bytes
 27084 ;; Hardware stack levels used:    1
 27085 ;; Hardware stack levels required when called:   13
 27086 ;; This function calls:
 27087 ;;		_ComputeMic
 27088 ;;		_Random
 27089 ;;		_memcpy
 27090 ;;		_memset
 27091 ;; This function is called by:
 27092 ;;		_LORAWAN_Join
 27093 ;; This function uses a non-reentrant model
 27094 ;;
 27095                           
 27096                           	psect	text141
 27097  002E40                     __ptext141:
 27098                           	opt stack 0
 27099  002E40                     _PrepareJoinRequestFrame:
 27100                           	opt stack 16
 27101                           
 27102                           ; BSR set to: 2
 27103                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 27104                           
 27105                           ;incstack = 0
 27106  002E40  0100               	movlb	0	; () banked
 27107  002E42  6BEA               	clrf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 27108                           
 27109                           ; BSR set to: 0
 27110                           ;lorawan.c: 1809: Mhdr_t mhdr;
 27111                           ;lorawan.c: 1810: uint32_t mic;
 27112                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 27113  002E44  D870               	call	PL190	;call to abstracted procedure
 27114  002E46  EC18  F02E         	call	_memset	;wreg free
 27115                           
 27116                           ; BSR set to: 0
 27117                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 27118  002E4A  0E1F               	movlw	-225
 27119  002E4C  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 27123  002E4E  0EFC               	movlw	-4
 27124  002E50  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27125                           
 27126                           ; BSR set to: 0
 27127                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 27128  002E52  0EE3               	movlw	-29
 27129  002E54  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27130                           
 27131                           ; BSR set to: 0
 27132                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 27133  002E56  EE24  F0E0         	lfsr	2,_macBuffer
 27134  002E5A  C0E9  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 27135                           
 27136                           ; BSR set to: 0
 27137  002E5E  2BEA               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27138                           
 27139                           ; BSR set to: 0
 27140                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 27141  002E60  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27142  002E62                     l15682:
 27143                           
 27144                           ; BSR set to: 0
 27145                           ;lorawan.c: 1821: {
 27146                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 27147  002E62  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27148  002E64  0859               	sublw	low (_loRa+89)
 27149  002E66  6ED9               	movwf	fsr2l,c
 27150  002E68  0E00               	movlw	0
 27151  002E6A  A0D8               	btfss	status,0,c
 27152  002E6C  2AE8               	incf	wreg,f,c
 27153  002E6E  0802               	sublw	high (_loRa+89)
 27154                           
 27155                           ; BSR set to: 0
 27156                           
 27157                           ; BSR set to: 0
 27158  002E70  D842               	call	PL78	;call to abstracted procedure
 27159  002E72  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27160  002E74  D7F6               	goto	l15682
 27161                           
 27162                           ; BSR set to: 0
 27163                           ;lorawan.c: 1823: }
 27164                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 27165  002E76  0E08               	movlw	8
 27166  002E78  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27167                           
 27168                           ; BSR set to: 0
 27169                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 27170  002E7A  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27171  002E7C                     l15694:
 27172                           
 27173                           ; BSR set to: 0
 27174                           ;lorawan.c: 1828: {
 27175                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 27176  002E7C  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27177  002E7E  0861               	sublw	low (_loRa+97)
 27178  002E80  6ED9               	movwf	fsr2l,c
 27179  002E82  0E00               	movlw	0
 27180  002E84  A0D8               	btfss	status,0,c
 27181  002E86  2AE8               	incf	wreg,f,c
 27182  002E88  0802               	sublw	high (_loRa+97)
 27183                           
 27184                           ; BSR set to: 0
 27185                           
 27186                           ; BSR set to: 0
 27187  002E8A  D835               	call	PL78	;call to abstracted procedure
 27188  002E8C  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27189  002E8E  D7F6               	goto	l15694
 27190                           
 27191                           ; BSR set to: 0
 27192                           ;lorawan.c: 1830: }
 27193                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 27194  002E90  0E08               	movlw	8
 27195  002E92  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27196                           
 27197                           ; BSR set to: 0
 27198                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 27199  002E94  69A8               	setf	(Random@max+1)& (0+255),b
 27200  002E96  69A7               	setf	Random@max& (0+255),b
 27201  002E98  ECF9  F02E         	call	_Random	;wreg free
 27202  002E9C  C0A7  F2D2         	movff	?_Random,_loRa+210
 27203  002EA0  C0A8  F2D3         	movff	?_Random+1,_loRa+211
 27204                           
 27205                           ; BSR set to: 0
 27206                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 27207  002EA4  0EE0               	movlw	low _macBuffer
 27208  002EA6  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27209  002EA8  D839               	call	PL180	;call to abstracted procedure
 27210  002EAA  D84C               	call	PL282	;call to abstracted procedure
 27211  002EAC  ECA0  F028         	call	_memcpy	;wreg free
 27212                           
 27213                           ; BSR set to: 0
 27214                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 27215  002EB0  0E02               	movlw	2
 27216  002EB2  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27217                           
 27218                           ; BSR set to: 0
 27219                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 27220  002EB4  0E42               	movlw	low (_loRa+66)
 27221  002EB6  6FDA               	movwf	ComputeMic@key& (0+255),b
 27222  002EB8  0E02               	movlw	high (_loRa+66)
 27223  002EBA  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
 27224  002EBC  0EE0               	movlw	low _macBuffer
 27225  002EBE  6FDC               	movwf	ComputeMic@buffer& (0+255),b
 27226  002EC0  0E04               	movlw	high _macBuffer
 27227  002EC2  6FDD               	movwf	(ComputeMic@buffer+1)& (0+255),b
 27228  002EC4  C0EA  F0DE         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 27229  002EC8  EC1F  F029         	call	_ComputeMic	;wreg free
 27230  002ECC  C0DA  F0E5         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 27231  002ED0  C0DB  F0E6         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 27232  002ED4  C0DC  F0E7         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 27233  002ED8  C0DD  F0E8         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 27234                           
 27235                           ; BSR set to: 0
 27236                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 27237  002EDC  0EE0               	movlw	low _macBuffer
 27238  002EDE  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27239  002EE0  D81D               	call	PL180	;call to abstracted procedure
 27240  002EE2  0EE5               	movlw	low PrepareJoinRequestFrame@mic
 27241  002EE4  6F66               	movwf	memcpy@s1& (0+255),b
 27242  002EE6  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 27243  002EE8  D829               	call	PL270	;call to abstracted procedure
 27244  002EEA  ECA0  F028         	call	_memcpy	;wreg free
 27245                           
 27246                           ; BSR set to: 0
 27247                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 27248  002EEE  0E04               	movlw	4
 27249  002EF0  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27250                           
 27251                           ; BSR set to: 0
 27252                           ;lorawan.c: 1842: return bufferIndex;
 27253  002EF2  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27254                           
 27255                           ; BSR set to: 0
 27256  002EF4  0012               	return		;funcret
 27257  002EF6                     __end_of_PrepareJoinRequestFrame:
 27258                           	opt stack 0
 27259  002EF6                     PL78:
 27260                           	opt stack 16
 27261  002EF6  6EDA               	movwf	fsr2h,c
 27262  002EF8  0EE0               	movlw	low _macBuffer
 27263  002EFA  6FE3               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27264  002EFC  0E04               	movlw	high _macBuffer
 27265  002EFE  6FE4               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27266  002F00  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27267  002F02  27E3               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27268  002F04  0E00               	movlw	0
 27269  002F06  23E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27270  002F08  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27271  002F0A  25E3               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27272  002F0C  6EE9               	movwf	fsr0l,c
 27273  002F0E  0E00               	movlw	0
 27274  002F10  21E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27275  002F12  6EEA               	movwf	fsr0h,c
 27276  002F14  CFDF FFEF          	movff	indf2,indf0
 27277  002F18  2BEB               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27278  002F1A  0C07               	retlw	7
 27279  002F1C                     __end_ofPL78:
 27280                           	opt stack 0
 27281  002F1C                     PL180:
 27282                           	opt stack 16
 27283  002F1C  6F64               	movwf	memcpy@d1& (0+255),b
 27284  002F1E  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27285  002F20  0E04               	movlw	high _macBuffer
 27286  002F22  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27287  002F24  0012               	return	
 27288  002F26                     __end_ofPL180:
 27289                           	opt stack 0
 27290  002F26                     PL190:
 27291                           	opt stack 16
 27292  002F26  0EE0               	movlw	low _macBuffer
 27293  002F28  6F64               	movwf	memset@p1& (0+255),b
 27294  002F2A  0E04               	movlw	high _macBuffer
 27295  002F2C  6F65               	movwf	(memset@p1+1)& (0+255),b
 27296  002F2E  6B67               	clrf	(memset@c+1)& (0+255),b
 27297  002F30  6B66               	clrf	memset@c& (0+255),b
 27298  002F32  0E01               	movlw	1
 27299  002F34  6F69               	movwf	(memset@n+1)& (0+255),b
 27300  002F36  0E0F               	movlw	15
 27301  002F38  6F68               	movwf	memset@n& (0+255),b
 27302  002F3A  0C0F               	retlw	15
 27303  002F3C                     __end_ofPL190:
 27304                           	opt stack 0
 27305  002F3C                     PL270:
 27306                           	opt stack 18
 27307  002F3C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27308  002F3E  0E04               	movlw	4
 27309  002F40  6F68               	movwf	memcpy@n& (0+255),b
 27310  002F42  0C04               	retlw	4
 27311  002F44                     __end_ofPL270:
 27312                           	opt stack 0
 27313  002F44                     PL282:
 27314                           	opt stack 17
 27315  002F44  0ED2               	movlw	low (_loRa+210)
 27316  002F46  6F66               	movwf	memcpy@s1& (0+255),b
 27317  002F48  0E02               	movlw	high (_loRa+210)
 27318  002F4A  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 27319  002F4C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27320  002F4E  0E02               	movlw	2
 27321  002F50  6F68               	movwf	memcpy@n& (0+255),b
 27322  002F52  0C02               	retlw	2
 27323  002F54                     __end_ofPL282:
 27324                           	opt stack 0
 27325                           tosu	equ	0xFFF
 27326                           tosh	equ	0xFFE
 27327                           tosl	equ	0xFFD
 27328                           pclath	equ	0xFFA
 27329                           tblptru	equ	0xFF8
 27330                           tblptrh	equ	0xFF7
 27331                           tblptrl	equ	0xFF6
 27332                           tablat	equ	0xFF5
 27333                           prodh	equ	0xFF4
 27334                           prodl	equ	0xFF3
 27335                           intcon	equ	0xFF2
 27336                           indf0	equ	0xFEF
 27337                           postinc0	equ	0xFEE
 27338                           plusw0	equ	0xFEB
 27339                           fsr0h	equ	0xFEA
 27340                           fsr0l	equ	0xFE9
 27341                           wreg	equ	0xFE8
 27342                           postinc1	equ	0xFE6
 27343                           postdec1	equ	0xFE5
 27344                           plusw1	equ	0xFE3
 27345                           fsr1h	equ	0xFE2
 27346                           fsr1l	equ	0xFE1
 27347                           indf2	equ	0xFDF
 27348                           postinc2	equ	0xFDE
 27349                           postdec2	equ	0xFDD
 27350                           plusw2	equ	0xFDB
 27351                           fsr2h	equ	0xFDA
 27352                           fsr2l	equ	0xFD9
 27353                           status	equ	0xFD8
 27354                           
 27355 ;; *************** function _Random *****************
 27356 ;; Defined at:
 27357 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27358 ;; Parameters:    Size  Location     Type
 27359 ;;  max             2   71[BANK0 ] unsigned int 
 27360 ;; Auto vars:     Size  Location     Type
 27361 ;;		None
 27362 ;; Return value:  Size  Location     Type
 27363 ;;                  2   71[BANK0 ] unsigned int 
 27364 ;; Registers used:
 27365 ;;		wreg, status,2, status,0, cstack
 27366 ;; Tracked objects:
 27367 ;;		On entry : F/0
 27368 ;;		On exit  : F/0
 27369 ;;		Unchanged: 0/0
 27370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27375 ;;Total ram usage:        2 bytes
 27376 ;; Hardware stack levels used:    1
 27377 ;; Hardware stack levels required when called:    9
 27378 ;; This function calls:
 27379 ;;		___lwmod
 27380 ;;		_rand
 27381 ;; This function is called by:
 27382 ;;		_SearchAvailableChannel
 27383 ;;		_PrepareJoinRequestFrame
 27384 ;; This function uses a non-reentrant model
 27385 ;;
 27386                           
 27387                           	psect	text142
 27388  005DF2                     __ptext142:
 27389                           	opt stack 0
 27390  005DF2                     _Random:
 27391                           	opt stack 17
 27392                           
 27393                           ; BSR set to: 0
 27394                           ;lorawan.c: 1118: return (rand () % max);
 27395                           
 27396                           ; BSR set to: 0
 27397                           ;incstack = 0
 27398  005DF2  ECC0  F029         	call	_rand	;wreg free
 27399  005DF6  C0A0  F0A2         	movff	?_rand,___lwmod@dividend
 27400  005DFA  C0A1  F0A3         	movff	?_rand+1,___lwmod@dividend+1
 27401  005DFE  C0A7  F0A4         	movff	Random@max,___lwmod@divisor
 27402  005E02  C0A8  F0A5         	movff	Random@max+1,___lwmod@divisor+1
 27403  005E06  ECD7  F02B         	call	___lwmod	;wreg free
 27404  005E0A  C0A2  F0A7         	movff	?___lwmod,?_Random
 27405  005E0E  C0A3  F0A8         	movff	?___lwmod+1,?_Random+1
 27406                           
 27407                           ; BSR set to: 0
 27408  005E12  0012               	return		;funcret
 27409  005E14                     __end_of_Random:
 27410                           	opt stack 0
 27411                           tosu	equ	0xFFF
 27412                           tosh	equ	0xFFE
 27413                           tosl	equ	0xFFD
 27414                           pclath	equ	0xFFA
 27415                           tblptru	equ	0xFF8
 27416                           tblptrh	equ	0xFF7
 27417                           tblptrl	equ	0xFF6
 27418                           tablat	equ	0xFF5
 27419                           prodh	equ	0xFF4
 27420                           prodl	equ	0xFF3
 27421                           intcon	equ	0xFF2
 27422                           indf0	equ	0xFEF
 27423                           postinc0	equ	0xFEE
 27424                           plusw0	equ	0xFEB
 27425                           fsr0h	equ	0xFEA
 27426                           fsr0l	equ	0xFE9
 27427                           wreg	equ	0xFE8
 27428                           postinc1	equ	0xFE6
 27429                           postdec1	equ	0xFE5
 27430                           plusw1	equ	0xFE3
 27431                           fsr1h	equ	0xFE2
 27432                           fsr1l	equ	0xFE1
 27433                           indf2	equ	0xFDF
 27434                           postinc2	equ	0xFDE
 27435                           postdec2	equ	0xFDD
 27436                           plusw2	equ	0xFDB
 27437                           fsr2h	equ	0xFDA
 27438                           fsr2l	equ	0xFD9
 27439                           status	equ	0xFD8
 27440                           
 27441 ;; *************** function _rand *****************
 27442 ;; Defined at:
 27443 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 27444 ;; Parameters:    Size  Location     Type
 27445 ;;		None
 27446 ;; Auto vars:     Size  Location     Type
 27447 ;;		None
 27448 ;; Return value:  Size  Location     Type
 27449 ;;                  2   64[BANK0 ] int 
 27450 ;; Registers used:
 27451 ;;		wreg, status,2, status,0, cstack
 27452 ;; Tracked objects:
 27453 ;;		On entry : F/0
 27454 ;;		On exit  : F/0
 27455 ;;		Unchanged: 0/0
 27456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27461 ;;Total ram usage:        2 bytes
 27462 ;; Hardware stack levels used:    1
 27463 ;; Hardware stack levels required when called:    8
 27464 ;; This function calls:
 27465 ;;		___lmul
 27466 ;; This function is called by:
 27467 ;;		_Random
 27468 ;; This function uses a non-reentrant model
 27469 ;;
 27470                           
 27471                           	psect	text143
 27472  005380                     __ptext143:
 27473                           	opt stack 0
 27474  005380                     _rand:
 27475                           	opt stack 17
 27476                           
 27477                           ; BSR set to: 0
 27478                           
 27479                           ; BSR set to: 0
 27480                           ;incstack = 0
 27481  005380  C056  F094         	movff	_randx,___lmul@multiplier
 27482  005384  C057  F095         	movff	_randx+1,___lmul@multiplier+1
 27483  005388  C058  F096         	movff	_randx+2,___lmul@multiplier+2
 27484  00538C  C059  F097         	movff	_randx+3,___lmul@multiplier+3
 27485  005390  0E6D               	movlw	109
 27486  005392  6F98               	movwf	___lmul@multiplicand& (0+255),b
 27487  005394  0E4E               	movlw	78
 27488  005396  6F99               	movwf	(___lmul@multiplicand+1)& (0+255),b
 27489  005398  0EC6               	movlw	198
 27490  00539A  6F9A               	movwf	(___lmul@multiplicand+2)& (0+255),b
 27491  00539C  0E41               	movlw	65
 27492  00539E  6F9B               	movwf	(___lmul@multiplicand+3)& (0+255),b
 27493  0053A0  EC34  F02A         	call	___lmul	;wreg free
 27494  0053A4  C094  F056         	movff	?___lmul,_randx
 27495  0053A8  C095  F057         	movff	?___lmul+1,_randx+1
 27496  0053AC  C096  F058         	movff	?___lmul+2,_randx+2
 27497  0053B0  C097  F059         	movff	?___lmul+3,_randx+3
 27498                           
 27499                           ; BSR set to: 0
 27500  0053B4  0E39               	movlw	57
 27501  0053B6  2656               	addwf	_randx,f,c
 27502  0053B8  0E30               	movlw	48
 27503  0053BA  2257               	addwfc	_randx+1,f,c
 27504  0053BC  0E00               	movlw	0
 27505  0053BE  2258               	addwfc	_randx+2,f,c
 27506  0053C0  2259               	addwfc	_randx+3,f,c
 27507                           
 27508                           ; BSR set to: 0
 27509  0053C2  5058               	movf	_randx+2,w,c
 27510  0053C4  6FA0               	movwf	?_rand& (0+255),b
 27511  0053C6  0E7F               	movlw	127
 27512  0053C8  1459               	andwf	_randx+3,w,c
 27513  0053CA  6FA1               	movwf	(?_rand+1)& (0+255),b
 27514                           
 27515                           ; BSR set to: 0
 27516  0053CC  0012               	return		;funcret
 27517  0053CE                     __end_of_rand:
 27518                           	opt stack 0
 27519                           tosu	equ	0xFFF
 27520                           tosh	equ	0xFFE
 27521                           tosl	equ	0xFFD
 27522                           pclath	equ	0xFFA
 27523                           tblptru	equ	0xFF8
 27524                           tblptrh	equ	0xFF7
 27525                           tblptrl	equ	0xFF6
 27526                           tablat	equ	0xFF5
 27527                           prodh	equ	0xFF4
 27528                           prodl	equ	0xFF3
 27529                           intcon	equ	0xFF2
 27530                           indf0	equ	0xFEF
 27531                           postinc0	equ	0xFEE
 27532                           plusw0	equ	0xFEB
 27533                           fsr0h	equ	0xFEA
 27534                           fsr0l	equ	0xFE9
 27535                           wreg	equ	0xFE8
 27536                           postinc1	equ	0xFE6
 27537                           postdec1	equ	0xFE5
 27538                           plusw1	equ	0xFE3
 27539                           fsr1h	equ	0xFE2
 27540                           fsr1l	equ	0xFE1
 27541                           indf2	equ	0xFDF
 27542                           postinc2	equ	0xFDE
 27543                           postdec2	equ	0xFDD
 27544                           plusw2	equ	0xFDB
 27545                           fsr2h	equ	0xFDA
 27546                           fsr2l	equ	0xFD9
 27547                           status	equ	0xFD8
 27548                           
 27549 ;; *************** function ___lwmod *****************
 27550 ;; Defined at:
 27551 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 27552 ;; Parameters:    Size  Location     Type
 27553 ;;  dividend        2   66[BANK0 ] unsigned int 
 27554 ;;  divisor         2   68[BANK0 ] unsigned int 
 27555 ;; Auto vars:     Size  Location     Type
 27556 ;;  counter         1   70[BANK0 ] unsigned char 
 27557 ;; Return value:  Size  Location     Type
 27558 ;;                  2   66[BANK0 ] unsigned int 
 27559 ;; Registers used:
 27560 ;;		wreg, status,2, status,0
 27561 ;; Tracked objects:
 27562 ;;		On entry : F/0
 27563 ;;		On exit  : F/0
 27564 ;;		Unchanged: 0/0
 27565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27569 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27570 ;;Total ram usage:        5 bytes
 27571 ;; Hardware stack levels used:    1
 27572 ;; Hardware stack levels required when called:    7
 27573 ;; This function calls:
 27574 ;;		Nothing
 27575 ;; This function is called by:
 27576 ;;		_Random
 27577 ;; This function uses a non-reentrant model
 27578 ;;
 27579                           
 27580                           	psect	text144
 27581  0057AE                     __ptext144:
 27582                           	opt stack 0
 27583  0057AE                     ___lwmod:
 27584                           	opt stack 18
 27585                           
 27586                           ; BSR set to: 0
 27587                           
 27588                           ; BSR set to: 0
 27589                           ;incstack = 0
 27590  0057AE  51A4               	movf	___lwmod@divisor& (0+255),w,b
 27591  0057B0  11A5               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27592  0057B2  E017               	bz	l3089
 27593                           
 27594                           ; BSR set to: 0
 27595  0057B4  0E01               	movlw	1
 27596  0057B6  6FA6               	movwf	___lwmod@counter& (0+255),b
 27597  0057B8  D004               	goto	l12380
 27598  0057BA                     l12378:
 27599                           
 27600                           ; BSR set to: 0
 27601  0057BA  90D8               	bcf	status,0,c
 27602  0057BC  37A4               	rlcf	___lwmod@divisor& (0+255),f,b
 27603  0057BE  37A5               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27604  0057C0  2BA6               	incf	___lwmod@counter& (0+255),f,b
 27605  0057C2                     l12380:
 27606                           
 27607                           ; BSR set to: 0
 27608  0057C2  AFA5               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27609  0057C4  D7FA               	goto	l12378
 27610  0057C6                     l12382:
 27611                           
 27612                           ; BSR set to: 0
 27613  0057C6  51A4               	movf	___lwmod@divisor& (0+255),w,b
 27614  0057C8  5DA2               	subwf	___lwmod@dividend& (0+255),w,b
 27615  0057CA  51A5               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27616  0057CC  59A3               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27617  0057CE  E304               	bnc	l12386
 27618                           
 27619                           ; BSR set to: 0
 27620  0057D0  51A4               	movf	___lwmod@divisor& (0+255),w,b
 27621  0057D2  5FA2               	subwf	___lwmod@dividend& (0+255),f,b
 27622  0057D4  51A5               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27623  0057D6  5BA3               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27624  0057D8                     l12386:
 27625                           
 27626                           ; BSR set to: 0
 27627  0057D8  90D8               	bcf	status,0,c
 27628  0057DA  33A5               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27629  0057DC  33A4               	rrcf	___lwmod@divisor& (0+255),f,b
 27630                           
 27631                           ; BSR set to: 0
 27632  0057DE  2FA6               	decfsz	___lwmod@counter& (0+255),f,b
 27633  0057E0  D7F2               	goto	l12382
 27634  0057E2                     l3089:
 27635                           
 27636                           ; BSR set to: 0
 27637  0057E2  C0A2  F0A2         	movff	___lwmod@dividend,?___lwmod
 27638  0057E6  C0A3  F0A3         	movff	___lwmod@dividend+1,?___lwmod+1
 27639                           
 27640                           ; BSR set to: 0
 27641  0057EA  0012               	return		;funcret
 27642  0057EC                     __end_of___lwmod:
 27643                           	opt stack 0
 27644                           tosu	equ	0xFFF
 27645                           tosh	equ	0xFFE
 27646                           tosl	equ	0xFFD
 27647                           pclath	equ	0xFFA
 27648                           tblptru	equ	0xFF8
 27649                           tblptrh	equ	0xFF7
 27650                           tblptrl	equ	0xFF6
 27651                           tablat	equ	0xFF5
 27652                           prodh	equ	0xFF4
 27653                           prodl	equ	0xFF3
 27654                           intcon	equ	0xFF2
 27655                           indf0	equ	0xFEF
 27656                           postinc0	equ	0xFEE
 27657                           plusw0	equ	0xFEB
 27658                           fsr0h	equ	0xFEA
 27659                           fsr0l	equ	0xFE9
 27660                           wreg	equ	0xFE8
 27661                           postinc1	equ	0xFE6
 27662                           postdec1	equ	0xFE5
 27663                           plusw1	equ	0xFE3
 27664                           fsr1h	equ	0xFE2
 27665                           fsr1l	equ	0xFE1
 27666                           indf2	equ	0xFDF
 27667                           postinc2	equ	0xFDE
 27668                           postdec2	equ	0xFDD
 27669                           plusw2	equ	0xFDB
 27670                           fsr2h	equ	0xFDA
 27671                           fsr2l	equ	0xFD9
 27672                           status	equ	0xFD8
 27673                           
 27674 ;; *************** function _ComputeMic *****************
 27675 ;; Defined at:
 27676 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27677 ;; Parameters:    Size  Location     Type
 27678 ;;  key             2  122[BANK0 ] PTR unsigned char 
 27679 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27680 ;;  buffer          2  124[BANK0 ] PTR unsigned char 
 27681 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 27682 ;;  bufferLength    1  126[BANK0 ] unsigned char 
 27683 ;; Auto vars:     Size  Location     Type
 27684 ;;  mic             4  127[BANK0 ] unsigned long 
 27685 ;; Return value:  Size  Location     Type
 27686 ;;                  4  122[BANK0 ] unsigned long 
 27687 ;; Registers used:
 27688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27689 ;; Tracked objects:
 27690 ;;		On entry : F/0
 27691 ;;		On exit  : F/0
 27692 ;;		Unchanged: 0/0
 27693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27694 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27695 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27697 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27698 ;;Total ram usage:        9 bytes
 27699 ;; Hardware stack levels used:    1
 27700 ;; Hardware stack levels required when called:   12
 27701 ;; This function calls:
 27702 ;;		_AESCmac
 27703 ;;		_memcpy
 27704 ;; This function is called by:
 27705 ;;		_LORAWAN_RxDone
 27706 ;;		_PrepareJoinRequestFrame
 27707 ;; This function uses a non-reentrant model
 27708 ;;
 27709                           
 27710                           	psect	text145
 27711  00523E                     __ptext145:
 27712                           	opt stack 0
 27713  00523E                     _ComputeMic:
 27714                           	opt stack 14
 27715                           
 27716                           ; BSR set to: 0
 27717                           ;lorawan.c: 2196: uint32_t mic = 0;
 27718                           
 27719                           ; BSR set to: 0
 27720                           ;incstack = 0
 27721  00523E  6BDF               	clrf	ComputeMic@mic& (0+255),b
 27722  005240  6BE0               	clrf	(ComputeMic@mic+1)& (0+255),b
 27723  005242  6BE1               	clrf	(ComputeMic@mic+2)& (0+255),b
 27724  005244  6BE2               	clrf	(ComputeMic@mic+3)& (0+255),b
 27725                           
 27726                           ; BSR set to: 0
 27727                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 27728  005246  C0DA  F0CC         	movff	ComputeMic@key,AESCmac@key
 27729  00524A  C0DB  F0CD         	movff	ComputeMic@key+1,AESCmac@key+1
 27730  00524E  0EAB               	movlw	low _aesBuffer
 27731  005250  6FCE               	movwf	AESCmac@output& (0+255),b
 27732  005252  0E01               	movlw	high _aesBuffer
 27733  005254  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 27734  005256  C0DC  F0D0         	movff	ComputeMic@buffer,AESCmac@input
 27735  00525A  C0DD  F0D1         	movff	ComputeMic@buffer+1,AESCmac@input+1
 27736  00525E  C0DE  F0D2         	movff	ComputeMic@bufferLength,AESCmac@size
 27737  005262  ECF4  F008         	call	_AESCmac	;wreg free
 27738                           
 27739                           ; BSR set to: 0
 27740                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 27741  005266  0EDF               	movlw	low ComputeMic@mic
 27742  005268  6F64               	movwf	memcpy@d1& (0+255),b
 27743  00526A  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27744  00526C  D80D               	call	PL160	;call to abstracted procedure
 27745  00526E  ECF0  F021         	call	PL130	;call to abstracted procedure
 27746  005272  ECA0  F028         	call	_memcpy	;wreg free
 27747                           
 27748                           ; BSR set to: 0
 27749                           ;lorawan.c: 2202: return mic;
 27750  005276  C0DF  F0DA         	movff	ComputeMic@mic,?_ComputeMic
 27751  00527A  C0E0  F0DB         	movff	ComputeMic@mic+1,?_ComputeMic+1
 27752  00527E  C0E1  F0DC         	movff	ComputeMic@mic+2,?_ComputeMic+2
 27753  005282  C0E2  F0DD         	movff	ComputeMic@mic+3,?_ComputeMic+3
 27754                           
 27755                           ; BSR set to: 0
 27756  005286  0012               	return		;funcret
 27757  005288                     __end_of_ComputeMic:
 27758                           	opt stack 0
 27759  005288                     PL160:
 27760                           	opt stack 16
 27761  005288  0EAB               	movlw	low _aesBuffer
 27762  00528A  6F66               	movwf	memcpy@s1& (0+255),b
 27763  00528C  0E01               	movlw	high _aesBuffer
 27764  00528E  0012               	return	
 27765  005290                     __end_ofPL160:
 27766                           	opt stack 0
 27767                           tosu	equ	0xFFF
 27768                           tosh	equ	0xFFE
 27769                           tosl	equ	0xFFD
 27770                           pclath	equ	0xFFA
 27771                           tblptru	equ	0xFF8
 27772                           tblptrh	equ	0xFF7
 27773                           tblptrl	equ	0xFF6
 27774                           tablat	equ	0xFF5
 27775                           prodh	equ	0xFF4
 27776                           prodl	equ	0xFF3
 27777                           intcon	equ	0xFF2
 27778                           indf0	equ	0xFEF
 27779                           postinc0	equ	0xFEE
 27780                           plusw0	equ	0xFEB
 27781                           fsr0h	equ	0xFEA
 27782                           fsr0l	equ	0xFE9
 27783                           wreg	equ	0xFE8
 27784                           postinc1	equ	0xFE6
 27785                           postdec1	equ	0xFE5
 27786                           plusw1	equ	0xFE3
 27787                           fsr1h	equ	0xFE2
 27788                           fsr1l	equ	0xFE1
 27789                           indf2	equ	0xFDF
 27790                           postinc2	equ	0xFDE
 27791                           postdec2	equ	0xFDD
 27792                           plusw2	equ	0xFDB
 27793                           fsr2h	equ	0xFDA
 27794                           fsr2l	equ	0xFD9
 27795                           status	equ	0xFD8
 27796                           
 27797 ;; *************** function _AESCmac *****************
 27798 ;; Defined at:
 27799 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 27800 ;; Parameters:    Size  Location     Type
 27801 ;;  key             2  108[BANK0 ] PTR unsigned char 
 27802 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27803 ;;  output          2  110[BANK0 ] PTR unsigned char 
 27804 ;;		 -> aesBuffer(16), 
 27805 ;;  input           2  112[BANK0 ] PTR unsigned char 
 27806 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 27807 ;;  size            1  114[BANK0 ] unsigned char 
 27808 ;; Auto vars:     Size  Location     Type
 27809 ;;  x              16   80[BANK1 ] unsigned char [16]
 27810 ;;  y              16   64[BANK1 ] unsigned char [16]
 27811 ;;  padded         16   48[BANK1 ] unsigned char [16]
 27812 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 27813 ;;  k1             16   16[BANK1 ] unsigned char [16]
 27814 ;;  k2             16    0[BANK1 ] unsigned char [16]
 27815 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 27816 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), NULL(0), 
 27817 ;;  i               1  101[BANK1 ] unsigned char 
 27818 ;;  j               1  100[BANK1 ] unsigned char 
 27819 ;;  n               1   99[BANK1 ] unsigned char 
 27820 ;;  flag            1   98[BANK1 ] unsigned char 
 27821 ;; Return value:  Size  Location     Type
 27822 ;;                  1    wreg      void 
 27823 ;; Registers used:
 27824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27825 ;; Tracked objects:
 27826 ;;		On entry : F/0
 27827 ;;		On exit  : F/0
 27828 ;;		Unchanged: 0/0
 27829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 27830 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27831 ;;      Locals:         0       0     102       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27832 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27833 ;;      Totals:         0      14     102       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27834 ;;Total ram usage:      116 bytes
 27835 ;; Hardware stack levels used:    1
 27836 ;; Hardware stack levels required when called:   11
 27837 ;; This function calls:
 27838 ;;		_AESEncodeLoRa
 27839 ;;		_GenerateSubkey
 27840 ;;		_memcpy
 27841 ;;		_memset
 27842 ;; This function is called by:
 27843 ;;		_LORAWAN_RxDone
 27844 ;;		_AssemblePacket
 27845 ;;		_ComputeMic
 27846 ;; This function uses a non-reentrant model
 27847 ;;
 27848                           
 27849                           	psect	text146
 27850  0011E8                     __ptext146:
 27851                           	opt stack 0
 27852  0011E8                     _AESCmac:
 27853                           	opt stack 16
 27854                           
 27855                           ; BSR set to: 0
 27856                           
 27857                           ; BSR set to: 0
 27858                           ;incstack = 0
 27859  0011E8  0101               	movlb	1	; () banked
 27860  0011EA  6B65               	clrf	AESCmac@i& (0+255),b
 27861  0011EC  6B64               	clrf	AESCmac@j& (0+255),b
 27862                           
 27863                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 27864  0011EE  6B62               	clrf	AESCmac@flag& (0+255),b
 27865                           
 27866                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 27867                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 27868                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 27869  0011F0  6B60               	clrf	AESCmac@ptr& (0+255),b
 27870  0011F2  6B61               	clrf	(AESCmac@ptr+1)& (0+255),b
 27871                           
 27872                           ; BSR set to: 1
 27873                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 27874  0011F4  C0CC  F0A4         	movff	AESCmac@key,GenerateSubkey@key
 27875  0011F8  C0CD  F0A5         	movff	AESCmac@key+1,GenerateSubkey@key+1
 27876  0011FC  0E10               	movlw	low AESCmac@k1
 27877  0011FE  0100               	movlb	0	; () banked
 27878  001200  6FA6               	movwf	GenerateSubkey@k1& (0+255),b
 27879  001202  0E01               	movlw	high AESCmac@k1
 27880  001204  6FA7               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 27881  001206  0E00               	movlw	low AESCmac@k2
 27882  001208  6FA8               	movwf	GenerateSubkey@k2& (0+255),b
 27883  00120A  0E01               	movlw	high AESCmac@k2
 27884  00120C  6FA9               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 27885  00120E  EC27  F01A         	call	_GenerateSubkey	;wreg free
 27886                           
 27887                           ; BSR set to: 0
 27888                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 27889  001212  51D2               	movf	AESCmac@size& (0+255),w,b
 27890  001214  6FD3               	movwf	??_AESCmac& (0+255),b
 27891  001216  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 27892  001218  0E0F               	movlw	15
 27893  00121A  27D3               	addwf	??_AESCmac& (0+255),f,b
 27894  00121C  0E00               	movlw	0
 27895  00121E  23D4               	addwfc	(??_AESCmac+1)& (0+255),f,b
 27896  001220  0E04               	movlw	4
 27897  001222  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 27898  001224                     u14205:
 27899  001224  35D4               	rlcf	(??_AESCmac+1)& (0+255),w,b
 27900  001226  33D4               	rrcf	(??_AESCmac+1)& (0+255),f,b
 27901  001228  33D3               	rrcf	??_AESCmac& (0+255),f,b
 27902  00122A  2FD5               	decfsz	(??_AESCmac+2)& (0+255),f,b
 27903  00122C  D7FB               	goto	u14205
 27904  00122E  51D3               	movf	??_AESCmac& (0+255),w,b
 27905  001230  0101               	movlb	1	; () banked
 27906  001232  6F63               	movwf	AESCmac@n& (0+255),b
 27907                           
 27908                           ; BSR set to: 1
 27909                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 27910  001234  5163               	movf	AESCmac@n& (0+255),w,b
 27911  001236  E104               	bnz	l13012
 27912                           
 27913                           ; BSR set to: 1
 27914                           ;lorawan_aes_cmac.c: 53: {
 27915                           ;lorawan_aes_cmac.c: 54: n = 1;
 27916  001238  0E01               	movlw	1
 27917  00123A  6F63               	movwf	AESCmac@n& (0+255),b
 27918                           
 27919                           ; BSR set to: 1
 27920                           ;lorawan_aes_cmac.c: 55: flag = 0;
 27921  00123C  6B62               	clrf	AESCmac@flag& (0+255),b
 27922                           
 27923                           ;lorawan_aes_cmac.c: 56: }
 27924  00123E  D00A               	goto	l1411
 27925  001240                     l13012:
 27926                           
 27927                           ; BSR set to: 1
 27928                           ;lorawan_aes_cmac.c: 57: else
 27929                           ;lorawan_aes_cmac.c: 58: {
 27930                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 27931  001240  C0D2  F0D3         	movff	AESCmac@size,??_AESCmac
 27932  001244  0E0F               	movlw	15
 27933  001246  0100               	movlb	0	; () banked
 27934  001248  17D3               	andwf	??_AESCmac& (0+255),f,b
 27935  00124A  0E01               	movlw	1
 27936  00124C  A4D8               	btfss	status,2,c
 27937  00124E  0E00               	movlw	0
 27938  001250  0101               	movlb	1	; () banked
 27939  001252  6F62               	movwf	AESCmac@flag& (0+255),b
 27940  001254                     l1411:
 27941                           
 27942                           ; BSR set to: 1
 27943                           ;lorawan_aes_cmac.c: 60: }
 27944                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 27945  001254  0562               	decf	AESCmac@flag& (0+255),w,b
 27946  001256  E12E               	bnz	l13026
 27947                           
 27948                           ; BSR set to: 1
 27949                           ;lorawan_aes_cmac.c: 63: {
 27950                           ;lorawan_aes_cmac.c: 64: j = 0;
 27951  001258  6B64               	clrf	AESCmac@j& (0+255),b
 27952                           
 27953                           ; BSR set to: 1
 27954                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 27955  00125A  5163               	movf	AESCmac@n& (0+255),w,b
 27956  00125C  0D10               	mullw	16
 27957  00125E  50F3               	movf	prodl,w,c
 27958  001260  0FF0               	addlw	240
 27959  001262  6F65               	movwf	AESCmac@i& (0+255),b
 27960  001264  D018               	goto	l13024
 27961  001266                     l13018:
 27962                           
 27963                           ; BSR set to: 0
 27964                           ;lorawan_aes_cmac.c: 66: {
 27965                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 27966  001266  0E20               	movlw	low AESCmac@mLast
 27967  001268  0101               	movlb	1	; () banked
 27968  00126A  2564               	addwf	AESCmac@j& (0+255),w,b
 27969  00126C  D91A               	call	PL412	;call to abstracted procedure
 27970  00126E  0E10               	movlw	low AESCmac@k1
 27971  001270  2564               	addwf	AESCmac@j& (0+255),w,b
 27972  001272  6EE9               	movwf	fsr0l,c
 27973  001274  6AEA               	clrf	fsr0h,c
 27974  001276  0E01               	movlw	high AESCmac@k1
 27975  001278  D8FA               	call	PL326	;call to abstracted procedure
 27976  00127A  0101               	movlb	1	; () banked
 27977  00127C  5165               	movf	AESCmac@i& (0+255),w,b
 27978  00127E  0100               	movlb	0	; () banked
 27979  001280  25D0               	addwf	AESCmac@input& (0+255),w,b
 27980  001282  6EE9               	movwf	fsr0l,c
 27981  001284  0E00               	movlw	0
 27982  001286  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 27983  001288  6EEA               	movwf	fsr0h,c
 27984  00128A  50EF               	movf	indf0,w,c
 27985  00128C  19D3               	xorwf	??_AESCmac& (0+255),w,b
 27986  00128E  6EDF               	movwf	indf2,c
 27987                           
 27988                           ; BSR set to: 0
 27989                           ;lorawan_aes_cmac.c: 68: j++;
 27990  001290  0101               	movlb	1	; () banked
 27991  001292  2B64               	incf	AESCmac@j& (0+255),f,b
 27992                           
 27993                           ; BSR set to: 1
 27994  001294  2B65               	incf	AESCmac@i& (0+255),f,b
 27995  001296                     l13024:
 27996                           
 27997                           ; BSR set to: 1
 27998  001296  5163               	movf	AESCmac@n& (0+255),w,b
 27999  001298  D8C1               	call	PL154	;call to abstracted procedure
 28000  00129A  0101               	movlb	1	; () banked
 28001  00129C  5165               	movf	AESCmac@i& (0+255),w,b
 28002  00129E  D8FD               	call	PL408	;call to abstracted procedure
 28003  0012A0  51D3               	movf	??_AESCmac& (0+255),w,b
 28004  0012A2  5DD5               	subwf	(??_AESCmac+2)& (0+255),w,b
 28005  0012A4  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28006  0012A6  0A80               	xorlw	128
 28007  0012A8  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28008  0012AA  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28009  0012AC  0A80               	xorlw	128
 28010  0012AE  59D7               	subwfb	(??_AESCmac+4)& (0+255),w,b
 28011  0012B0  E240               	bc	l13056
 28012  0012B2  D7D9               	goto	l13018
 28013  0012B4                     l13026:
 28014                           
 28015                           ; BSR set to: 1
 28016                           ;lorawan_aes_cmac.c: 71: else
 28017                           ;lorawan_aes_cmac.c: 72: {
 28018                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 28019  0012B4  0100               	movlb	0	; () banked
 28020  0012B6  51D2               	movf	AESCmac@size& (0+255),w,b
 28021  0012B8  25D0               	addwf	AESCmac@input& (0+255),w,b
 28022  0012BA  6FD3               	movwf	??_AESCmac& (0+255),b
 28023  0012BC  0E00               	movlw	0
 28024  0012BE  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 28025  0012C0  6FD4               	movwf	(??_AESCmac+1)& (0+255),b
 28026  0012C2  51D2               	movf	AESCmac@size& (0+255),w,b
 28027  0012C4  0B0F               	andlw	15
 28028  0012C6  5DD3               	subwf	??_AESCmac& (0+255),w,b
 28029  0012C8  0101               	movlb	1	; () banked
 28030  0012CA  6F60               	movwf	AESCmac@ptr& (0+255),b
 28031  0012CC  0100               	movlb	0	; () banked
 28032  0012CE  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28033  0012D0  A0D8               	btfss	status,0,c
 28034  0012D2  05D4               	decf	(??_AESCmac+1)& (0+255),w,b
 28035  0012D4  0101               	movlb	1	; () banked
 28036  0012D6  6F61               	movwf	(AESCmac@ptr+1)& (0+255),b
 28037                           
 28038                           ; BSR set to: 1
 28039                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 28040  0012D8  6B65               	clrf	AESCmac@i& (0+255),b
 28041  0012DA                     l13032:
 28042                           
 28043                           ; BSR set to: 1
 28044                           ;lorawan_aes_cmac.c: 76: {
 28045                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 28046  0012DA  D8E8               	call	PL424	;call to abstracted procedure
 28047  0012DC  6165               	cpfslt	AESCmac@i& (0+255),b
 28048  0012DE  D00C               	goto	l13036
 28049                           
 28050                           ; BSR set to: 1
 28051                           ;lorawan_aes_cmac.c: 78: {
 28052                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 28053  0012E0  5165               	movf	AESCmac@i& (0+255),w,b
 28054  0012E2  2560               	addwf	AESCmac@ptr& (0+255),w,b
 28055  0012E4  6ED9               	movwf	fsr2l,c
 28056  0012E6  0E00               	movlw	0
 28057  0012E8  2161               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 28058  0012EA  6EDA               	movwf	fsr2h,c
 28059  0012EC  0E30               	movlw	low AESCmac@padded
 28060  0012EE  D8C4               	call	PL344	;call to abstracted procedure
 28061  0012F0  22EA               	addwfc	fsr0h,f,c
 28062  0012F2  CFDF FFEF          	movff	indf2,indf0
 28063                           
 28064                           ;lorawan_aes_cmac.c: 80: }
 28065  0012F6  D009               	goto	l13042
 28066  0012F8                     l13036:
 28067                           
 28068                           ; BSR set to: 1
 28069                           ;lorawan_aes_cmac.c: 81: else
 28070                           ;lorawan_aes_cmac.c: 82: {
 28071                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 28072  0012F8  D8D9               	call	PL424	;call to abstracted procedure
 28073  0012FA  1965               	xorwf	AESCmac@i& (0+255),w,b
 28074  0012FC  E104               	bnz	l13040
 28075                           
 28076                           ; BSR set to: 1
 28077                           ;lorawan_aes_cmac.c: 84: {
 28078                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 28079  0012FE  D8B0               	call	PL318	;call to abstracted procedure
 28080  001300  0E80               	movlw	128
 28081  001302  6EDF               	movwf	indf2,c
 28082                           
 28083                           ;lorawan_aes_cmac.c: 86: }
 28084  001304  D002               	goto	l13042
 28085  001306                     l13040:
 28086                           
 28087                           ; BSR set to: 1
 28088                           ;lorawan_aes_cmac.c: 87: else
 28089                           ;lorawan_aes_cmac.c: 88: {
 28090                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 28091  001306  D8AC               	call	PL318	;call to abstracted procedure
 28092  001308  6ADF               	clrf	indf2,c
 28093  00130A                     l13042:
 28094                           
 28095                           ; BSR set to: 1
 28096  00130A  2B65               	incf	AESCmac@i& (0+255),f,b
 28097                           
 28098                           ; BSR set to: 1
 28099  00130C  0E0F               	movlw	15
 28100  00130E  6565               	cpfsgt	AESCmac@i& (0+255),b
 28101  001310  D7E4               	goto	l13032
 28102                           
 28103                           ; BSR set to: 1
 28104                           ;lorawan_aes_cmac.c: 90: }
 28105                           ;lorawan_aes_cmac.c: 91: }
 28106                           ;lorawan_aes_cmac.c: 92: }
 28107                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 28108  001312  6B65               	clrf	AESCmac@i& (0+255),b
 28109  001314                     l13050:
 28110                           
 28111                           ; BSR set to: 1
 28112                           ;lorawan_aes_cmac.c: 96: {
 28113                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 28114  001314  0E20               	movlw	low AESCmac@mLast
 28115  001316  2565               	addwf	AESCmac@i& (0+255),w,b
 28116  001318  D8C4               	call	PL412	;call to abstracted procedure
 28117  00131A  0E00               	movlw	low AESCmac@k2
 28118  00131C  2565               	addwf	AESCmac@i& (0+255),w,b
 28119  00131E  6EE9               	movwf	fsr0l,c
 28120  001320  6AEA               	clrf	fsr0h,c
 28121  001322  0E01               	movlw	high AESCmac@k2
 28122  001324  D8A4               	call	PL326	;call to abstracted procedure
 28123  001326  0E30               	movlw	low AESCmac@padded
 28124  001328  0101               	movlb	1	; () banked
 28125  00132A  D8A6               	call	PL344	;call to abstracted procedure
 28126                           
 28127                           ; BSR set to: 0
 28128                           
 28129                           ; BSR set to: 1
 28130  00132C  D889               	call	PL228	;call to abstracted procedure
 28131  00132E  6565               	cpfsgt	AESCmac@i& (0+255),b
 28132  001330  D7F1               	goto	l13050
 28133  001332                     l13056:
 28134                           
 28135                           ;lorawan_aes_cmac.c: 98: }
 28136                           ;lorawan_aes_cmac.c: 99: }
 28137                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 28138  001332  0E50               	movlw	low AESCmac@x
 28139  001334  0100               	movlb	0	; () banked
 28140  001336  6F64               	movwf	memset@p1& (0+255),b
 28141  001338  0E01               	movlw	high AESCmac@x
 28142  00133A  6F65               	movwf	(memset@p1+1)& (0+255),b
 28143  00133C  ECF5  F021         	call	PL142	;call to abstracted procedure
 28144  001340  EC18  F02E         	call	_memset	;wreg free
 28145                           
 28146                           ; BSR set to: 0
 28147                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 28148  001344  0101               	movlb	1	; () banked
 28149  001346  6B65               	clrf	AESCmac@i& (0+255),b
 28150  001348  D034               	goto	l13074
 28151  00134A                     l1426:
 28152                           
 28153                           ; BSR set to: 0
 28154                           ;lorawan_aes_cmac.c: 104: {
 28155                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 28156  00134A  0101               	movlb	1	; () banked
 28157  00134C  6B64               	clrf	AESCmac@j& (0+255),b
 28158  00134E                     l13064:
 28159                           
 28160                           ; BSR set to: 1
 28161                           ;lorawan_aes_cmac.c: 106: {
 28162                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 28163  00134E  0E40               	movlw	low AESCmac@y
 28164  001350  2564               	addwf	AESCmac@j& (0+255),w,b
 28165  001352  D8B1               	call	PL444	;call to abstracted procedure
 28166  001354  5165               	movf	AESCmac@i& (0+255),w,b
 28167  001356  D862               	call	PL154	;call to abstracted procedure
 28168  001358  C0D0  F0D5         	movff	AESCmac@input,??_AESCmac+2
 28169  00135C  C0D1  F0D6         	movff	AESCmac@input+1,??_AESCmac+3
 28170  001360  D890               	call	PL346	;call to abstracted procedure
 28171  001362  5164               	movf	AESCmac@j& (0+255),w,b
 28172  001364  0100               	movlb	0	; () banked
 28173  001366  25D5               	addwf	(??_AESCmac+2)& (0+255),w,b
 28174  001368  6EE9               	movwf	fsr0l,c
 28175  00136A  0E00               	movlw	0
 28176  00136C  21D6               	addwfc	(??_AESCmac+3)& (0+255),w,b
 28177  00136E  6EEA               	movwf	fsr0h,c
 28178  001370  50EF               	movf	indf0,w,c
 28179  001372  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28180  001374  0E50               	movlw	low AESCmac@x
 28181  001376  0101               	movlb	1	; () banked
 28182  001378  2564               	addwf	AESCmac@j& (0+255),w,b
 28183  00137A  D86E               	call	PL312	;call to abstracted procedure
 28184  00137C  22EA               	addwfc	fsr0h,f,c
 28185  00137E  50EF               	movf	indf0,w,c
 28186  001380  0100               	movlb	0	; () banked
 28187  001382  19D7               	xorwf	(??_AESCmac+4)& (0+255),w,b
 28188  001384  6EDF               	movwf	indf2,c
 28189                           
 28190                           ; BSR set to: 0
 28191  001386  0101               	movlb	1	; () banked
 28192  001388  2B64               	incf	AESCmac@j& (0+255),f,b
 28193                           
 28194                           ; BSR set to: 1
 28195  00138A  0E0F               	movlw	15
 28196  00138C  6564               	cpfsgt	AESCmac@j& (0+255),b
 28197  00138E  D7DF               	goto	l13064
 28198                           
 28199                           ; BSR set to: 1
 28200                           ;lorawan_aes_cmac.c: 108: }
 28201                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 28202  001390  0E50               	movlw	low AESCmac@x
 28203  001392  0100               	movlb	0	; () banked
 28204  001394  6F64               	movwf	memcpy@d1& (0+255),b
 28205  001396  0E01               	movlw	high AESCmac@x
 28206  001398  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 28207  00139A  D85A               	call	PL280	;call to abstracted procedure
 28208  00139C  D84C               	call	PL220	;call to abstracted procedure
 28209  00139E  ECA0  F028         	call	_memcpy	;wreg free
 28210                           
 28211                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 28212  0013A2  0E50               	movlw	low AESCmac@x
 28213  0013A4  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28214  0013A6  0E01               	movlw	high AESCmac@x
 28215  0013A8  D872               	call	PL348	;call to abstracted procedure
 28216  0013AA  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 28217                           
 28218                           ; BSR set to: 0
 28219  0013AE  0101               	movlb	1	; () banked
 28220  0013B0  2B65               	incf	AESCmac@i& (0+255),f,b
 28221  0013B2                     l13074:
 28222                           
 28223                           ; BSR set to: 1
 28224  0013B2  0100               	movlb	0	; () banked
 28225  0013B4  69D3               	setf	??_AESCmac& (0+255),b
 28226  0013B6  69D4               	setf	(??_AESCmac+1)& (0+255),b
 28227  0013B8  0101               	movlb	1	; () banked
 28228  0013BA  5163               	movf	AESCmac@n& (0+255),w,b
 28229  0013BC  D86E               	call	PL408	;call to abstracted procedure
 28230  0013BE  D861               	call	PL346	;call to abstracted procedure
 28231  0013C0  5165               	movf	AESCmac@i& (0+255),w,b
 28232  0013C2  0100               	movlb	0	; () banked
 28233  0013C4  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28234  0013C6  6BD8               	clrf	(??_AESCmac+5)& (0+255),b
 28235  0013C8  51D5               	movf	(??_AESCmac+2)& (0+255),w,b
 28236  0013CA  5DD7               	subwf	(??_AESCmac+4)& (0+255),w,b
 28237  0013CC  51D8               	movf	(??_AESCmac+5)& (0+255),w,b
 28238  0013CE  0A80               	xorlw	128
 28239  0013D0  6FD9               	movwf	(??_AESCmac+6)& (0+255),b
 28240  0013D2  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28241  0013D4  0A80               	xorlw	128
 28242  0013D6  59D9               	subwfb	(??_AESCmac+6)& (0+255),w,b
 28243  0013D8  E3B8               	bnc	l1426
 28244                           
 28245                           ; BSR set to: 0
 28246                           ;lorawan_aes_cmac.c: 111: }
 28247                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 28248  0013DA  0101               	movlb	1	; () banked
 28249  0013DC  6B65               	clrf	AESCmac@i& (0+255),b
 28250  0013DE                     l13080:
 28251                           
 28252                           ; BSR set to: 1
 28253                           ;lorawan_aes_cmac.c: 114: {
 28254                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 28255  0013DE  0E40               	movlw	low AESCmac@y
 28256  0013E0  2565               	addwf	AESCmac@i& (0+255),w,b
 28257  0013E2  D869               	call	PL444	;call to abstracted procedure
 28258  0013E4  0E20               	movlw	low AESCmac@mLast
 28259  0013E6  2565               	addwf	AESCmac@i& (0+255),w,b
 28260  0013E8  6EE9               	movwf	fsr0l,c
 28261  0013EA  6AEA               	clrf	fsr0h,c
 28262  0013EC  0E01               	movlw	high AESCmac@mLast
 28263  0013EE  D83F               	call	PL326	;call to abstracted procedure
 28264  0013F0  0E50               	movlw	low AESCmac@x
 28265  0013F2  0101               	movlb	1	; () banked
 28266  0013F4  2565               	addwf	AESCmac@i& (0+255),w,b
 28267  0013F6  D830               	call	PL312	;call to abstracted procedure
 28268                           
 28269                           ; BSR set to: 0
 28270                           
 28271                           ; BSR set to: 1
 28272  0013F8  D823               	call	PL228	;call to abstracted procedure
 28273  0013FA  6565               	cpfsgt	AESCmac@i& (0+255),b
 28274  0013FC  D7F0               	goto	l13080
 28275                           
 28276                           ; BSR set to: 1
 28277                           ;lorawan_aes_cmac.c: 116: }
 28278                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 28279  0013FE  0E40               	movlw	low AESCmac@y
 28280  001400  0100               	movlb	0	; () banked
 28281  001402  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28282  001404  0E01               	movlw	high AESCmac@y
 28283  001406  D843               	call	PL348	;call to abstracted procedure
 28284  001408  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 28285                           
 28286                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 28287  00140C  C0CE  F064         	movff	AESCmac@output,memcpy@d1
 28288  001410  C0CF  F065         	movff	AESCmac@output+1,memcpy@d1+1
 28289  001414  D81D               	call	PL280	;call to abstracted procedure
 28290  001416  D80F               	call	PL220	;call to abstracted procedure
 28291  001418  EFA0  F028         	goto	_memcpy	;wreg free
 28292  00141C                     __end_of_AESCmac:
 28293                           	opt stack 0
 28294  00141C                     PL154:
 28295                           	opt stack 16
 28296  00141C  0100               	movlb	0	; () banked
 28297  00141E  6FD3               	movwf	??_AESCmac& (0+255),b
 28298  001420  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28299  001422  3BD3               	swapf	??_AESCmac& (0+255),f,b
 28300  001424  3BD4               	swapf	(??_AESCmac+1)& (0+255),f,b
 28301  001426  0EF0               	movlw	240
 28302  001428  17D4               	andwf	(??_AESCmac+1)& (0+255),f,b
 28303  00142A  51D3               	movf	??_AESCmac& (0+255),w,b
 28304  00142C  0B0F               	andlw	15
 28305  00142E  13D4               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28306  001430  0EF0               	movlw	240
 28307  001432  17D3               	andwf	??_AESCmac& (0+255),f,b
 28308  001434  0CF0               	retlw	240
 28309  001436                     __end_ofPL154:
 28310                           	opt stack 0
 28311  001436                     PL220:
 28312                           	opt stack 16
 28313  001436  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 28314  001438  6B69               	clrf	(memcpy@n+1)& (0+255),b
 28315  00143A  0E10               	movlw	16
 28316  00143C  6F68               	movwf	memcpy@n& (0+255),b
 28317  00143E  0C10               	retlw	16
 28318  001440                     __end_ofPL220:
 28319                           	opt stack 0
 28320  001440                     PL228:
 28321                           	opt stack 16
 28322  001440  22EA               	addwfc	fsr0h,f,c
 28323  001442  50EF               	movf	indf0,w,c
 28324  001444  0100               	movlb	0	; () banked
 28325  001446  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28326  001448  6EDF               	movwf	indf2,c
 28327  00144A  0101               	movlb	1	; () banked
 28328  00144C  2B65               	incf	AESCmac@i& (0+255),f,b
 28329  00144E  0C0F               	retlw	15
 28330  001450                     __end_ofPL228:
 28331                           	opt stack 0
 28332  001450                     PL280:
 28333                           	opt stack 16
 28334  001450  0E40               	movlw	low AESCmac@y
 28335  001452  6F66               	movwf	memcpy@s1& (0+255),b
 28336  001454  0E01               	movlw	high AESCmac@y
 28337  001456  0012               	return	
 28338  001458                     __end_ofPL280:
 28339                           	opt stack 0
 28340  001458                     PL312:
 28341                           	opt stack 16
 28342  001458  6EE9               	movwf	fsr0l,c
 28343  00145A  6AEA               	clrf	fsr0h,c
 28344  00145C  0E01               	movlw	high AESCmac@x
 28345  00145E  0012               	return	
 28346  001460                     __end_ofPL312:
 28347                           	opt stack 0
 28348  001460                     PL318:
 28349                           	opt stack 16
 28350  001460  0E30               	movlw	low AESCmac@padded
 28351  001462  2565               	addwf	AESCmac@i& (0+255),w,b
 28352  001464  6ED9               	movwf	fsr2l,c
 28353  001466  6ADA               	clrf	fsr2h,c
 28354  001468  0E01               	movlw	high AESCmac@padded
 28355  00146A  22DA               	addwfc	fsr2h,f,c
 28356  00146C  0012               	return	
 28357  00146E                     __end_ofPL318:
 28358                           	opt stack 0
 28359  00146E                     PL326:
 28360                           	opt stack 16
 28361  00146E  22EA               	addwfc	fsr0h,f,c
 28362  001470  50EF               	movf	indf0,w,c
 28363  001472  0100               	movlb	0	; () banked
 28364  001474  6FD3               	movwf	??_AESCmac& (0+255),b
 28365  001476  0012               	return	
 28366  001478                     __end_ofPL326:
 28367                           	opt stack 0
 28368  001478                     PL344:
 28369                           	opt stack 16
 28370  001478  2565               	addwf	AESCmac@i& (0+255),w,b
 28371  00147A  6EE9               	movwf	fsr0l,c
 28372  00147C  6AEA               	clrf	fsr0h,c
 28373  00147E  0E01               	movlw	high AESCmac@padded
 28374  001480  0012               	return	
 28375  001482                     __end_ofPL344:
 28376                           	opt stack 0
 28377  001482                     PL346:
 28378                           	opt stack 16
 28379  001482  51D3               	movf	??_AESCmac& (0+255),w,b
 28380  001484  27D5               	addwf	(??_AESCmac+2)& (0+255),f,b
 28381  001486  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28382  001488  23D6               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28383  00148A  0101               	movlb	1	; () banked
 28384  00148C  0012               	return	
 28385  00148E                     __end_ofPL346:
 28386                           	opt stack 0
 28387  00148E                     PL348:
 28388                           	opt stack 16
 28389  00148E  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28390  001490  C0CC  F092         	movff	AESCmac@key,AESEncodeLoRa@key
 28391  001494  C0CD  F093         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28392  001498  0012               	return	
 28393  00149A                     __end_ofPL348:
 28394                           	opt stack 0
 28395  00149A                     PL408:
 28396                           	opt stack 16
 28397  00149A  0100               	movlb	0	; () banked
 28398  00149C  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28399  00149E  6BD6               	clrf	(??_AESCmac+3)& (0+255),b
 28400  0014A0  0012               	return	
 28401  0014A2                     __end_ofPL408:
 28402                           	opt stack 0
 28403  0014A2                     PL412:
 28404                           	opt stack 16
 28405  0014A2  6ED9               	movwf	fsr2l,c
 28406  0014A4  6ADA               	clrf	fsr2h,c
 28407  0014A6  0E01               	movlw	high AESCmac@mLast
 28408  0014A8  22DA               	addwfc	fsr2h,f,c
 28409  0014AA  0012               	return	
 28410  0014AC                     __end_ofPL412:
 28411                           	opt stack 0
 28412  0014AC                     PL424:
 28413                           	opt stack 16
 28414  0014AC  0100               	movlb	0	; () banked
 28415  0014AE  51D2               	movf	AESCmac@size& (0+255),w,b
 28416  0014B0  0B0F               	andlw	15
 28417  0014B2  0101               	movlb	1	; () banked
 28418  0014B4  0012               	return	
 28419  0014B6                     __end_ofPL424:
 28420                           	opt stack 0
 28421  0014B6                     PL444:
 28422                           	opt stack 16
 28423  0014B6  6ED9               	movwf	fsr2l,c
 28424  0014B8  6ADA               	clrf	fsr2h,c
 28425  0014BA  0E01               	movlw	high AESCmac@y
 28426  0014BC  22DA               	addwfc	fsr2h,f,c
 28427  0014BE  0012               	return	
 28428  0014C0                     __end_ofPL444:
 28429                           	opt stack 0
 28430                           tosu	equ	0xFFF
 28431                           tosh	equ	0xFFE
 28432                           tosl	equ	0xFFD
 28433                           pclath	equ	0xFFA
 28434                           tblptru	equ	0xFF8
 28435                           tblptrh	equ	0xFF7
 28436                           tblptrl	equ	0xFF6
 28437                           tablat	equ	0xFF5
 28438                           prodh	equ	0xFF4
 28439                           prodl	equ	0xFF3
 28440                           intcon	equ	0xFF2
 28441                           indf0	equ	0xFEF
 28442                           postinc0	equ	0xFEE
 28443                           plusw0	equ	0xFEB
 28444                           fsr0h	equ	0xFEA
 28445                           fsr0l	equ	0xFE9
 28446                           wreg	equ	0xFE8
 28447                           postinc1	equ	0xFE6
 28448                           postdec1	equ	0xFE5
 28449                           plusw1	equ	0xFE3
 28450                           fsr1h	equ	0xFE2
 28451                           fsr1l	equ	0xFE1
 28452                           indf2	equ	0xFDF
 28453                           postinc2	equ	0xFDE
 28454                           postdec2	equ	0xFDD
 28455                           plusw2	equ	0xFDB
 28456                           fsr2h	equ	0xFDA
 28457                           fsr2l	equ	0xFD9
 28458                           status	equ	0xFD8
 28459                           
 28460 ;; *************** function _GenerateSubkey *****************
 28461 ;; Defined at:
 28462 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28463 ;; Parameters:    Size  Location     Type
 28464 ;;  key             2   68[BANK0 ] PTR unsigned char 
 28465 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28466 ;;  k1              2   70[BANK0 ] PTR unsigned char 
 28467 ;;		 -> AESCmac@k1(16), 
 28468 ;;  k2              2   72[BANK0 ] PTR unsigned char 
 28469 ;;		 -> AESCmac@k2(16), 
 28470 ;; Auto vars:     Size  Location     Type
 28471 ;;  l              16   91[BANK0 ] unsigned char [16]
 28472 ;;  const_Rb       16   75[BANK0 ] unsigned char [16]
 28473 ;;  i               1  107[BANK0 ] unsigned char 
 28474 ;; Return value:  Size  Location     Type
 28475 ;;                  1    wreg      void 
 28476 ;; Registers used:
 28477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28478 ;; Tracked objects:
 28479 ;;		On entry : F/0
 28480 ;;		On exit  : F/0
 28481 ;;		Unchanged: 0/0
 28482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 28483 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28484 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28486 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28487 ;;Total ram usage:       40 bytes
 28488 ;; Hardware stack levels used:    1
 28489 ;; Hardware stack levels required when called:   10
 28490 ;; This function calls:
 28491 ;;		_AESEncodeLoRa
 28492 ;;		_FillSubKey
 28493 ;;		_memset
 28494 ;; This function is called by:
 28495 ;;		_AESCmac
 28496 ;; This function uses a non-reentrant model
 28497 ;;
 28498                           
 28499                           	psect	text147
 28500  00344E                     __ptext147:
 28501                           	opt stack 0
 28502  00344E                     _GenerateSubkey:
 28503                           	opt stack 16
 28504                           
 28505                           ; BSR set to: 0
 28506                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 28507                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 28508                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 28509                           
 28510                           ; BSR set to: 0
 28511                           
 28512                           ; BSR set to: 0
 28513                           ;incstack = 0
 28514  00344E  EE21  F0BD         	lfsr	2,GenerateSubkey@F17044
 28515  003452  EE00  F0AB         	lfsr	0,GenerateSubkey@const_Rb
 28516  003456  0E0F               	movlw	15
 28517  003458                     u13641:
 28518  003458  CFDB FFEB          	movff	plusw2,plusw0
 28519  00345C  06E8               	decf	wreg,f,c
 28520  00345E  E2FC               	bc	u13641
 28521                           
 28522                           ; BSR set to: 0
 28523                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 28524  003460  0EBB               	movlw	low GenerateSubkey@l
 28525  003462  6F64               	movwf	memset@p1& (0+255),b
 28526  003464  6B65               	clrf	(memset@p1+1)& (0+255),b
 28527  003466  ECF5  F021         	call	PL142	;call to abstracted procedure
 28528  00346A  EC18  F02E         	call	_memset	;wreg free
 28529                           
 28530                           ; BSR set to: 0
 28531                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 28532  00346E  0EBB               	movlw	low GenerateSubkey@l
 28533  003470  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28534  003472  6B91               	clrf	(AESEncodeLoRa@block+1)& (0+255),b
 28535  003474  C0A4  F092         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 28536  003478  C0A5  F093         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 28537  00347C  EC7A  F02E         	call	_AESEncodeLoRa	;wreg free
 28538                           
 28539                           ; BSR set to: 0
 28540                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 28541  003480  BFBB               	btfsc	GenerateSubkey@l& (0+255),7,b
 28542  003482  D004               	goto	l12648
 28543                           
 28544                           ; BSR set to: 0
 28545                           ;lorawan_aes_cmac.c: 138: {
 28546                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 28547  003484  D84B               	call	PL206	;call to abstracted procedure
 28548  003486  ECA4  F02A         	call	_FillSubKey	;wreg free
 28549                           
 28550                           ;lorawan_aes_cmac.c: 140: }
 28551  00348A  D016               	goto	l12662
 28552  00348C                     l12648:
 28553                           
 28554                           ; BSR set to: 0
 28555                           ;lorawan_aes_cmac.c: 141: else
 28556                           ;lorawan_aes_cmac.c: 142: {
 28557                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 28558  00348C  D847               	call	PL206	;call to abstracted procedure
 28559  00348E  ECA4  F02A         	call	_FillSubKey	;wreg free
 28560                           
 28561                           ; BSR set to: 0
 28562                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 28563  003492  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28564  003494                     l12656:
 28565                           
 28566                           ; BSR set to: 0
 28567                           ;lorawan_aes_cmac.c: 146: {
 28568                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 28569  003494  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28570  003496  0FAB               	addlw	low GenerateSubkey@const_Rb
 28571  003498  6ED9               	movwf	fsr2l,c
 28572  00349A  6ADA               	clrf	fsr2h,c
 28573  00349C  50DF               	movf	indf2,w,c
 28574  00349E  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28575  0034A0  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28576  0034A2  25A6               	addwf	GenerateSubkey@k1& (0+255),w,b
 28577  0034A4  6ED9               	movwf	fsr2l,c
 28578  0034A6  0E00               	movlw	0
 28579  0034A8  21A7               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 28580  0034AA  6EDA               	movwf	fsr2h,c
 28581  0034AC  51AA               	movf	??_GenerateSubkey& (0+255),w,b
 28582  0034AE  1ADF               	xorwf	indf2,f,c
 28583                           
 28584                           ; BSR set to: 0
 28585  0034B0  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28586                           
 28587                           ; BSR set to: 0
 28588  0034B2  0E0F               	movlw	15
 28589  0034B4  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28590  0034B6  D7EE               	goto	l12656
 28591  0034B8                     l12662:
 28592                           
 28593                           ; BSR set to: 0
 28594                           ;lorawan_aes_cmac.c: 148: }
 28595                           ;lorawan_aes_cmac.c: 149: }
 28596                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 28597  0034B8  C0A6  FFD9         	movff	GenerateSubkey@k1,fsr2l
 28598  0034BC  C0A7  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 28599  0034C0  BEDF               	btfsc	indf2,7,c
 28600  0034C2  D003               	goto	l12666
 28601                           
 28602                           ; BSR set to: 0
 28603                           ;lorawan_aes_cmac.c: 153: {
 28604                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 28605  0034C4  D820               	call	PL176	;call to abstracted procedure
 28606  0034C6  EFA4  F02A         	goto	_FillSubKey	;wreg free
 28607  0034CA                     l12666:
 28608                           
 28609                           ; BSR set to: 0
 28610                           ;lorawan_aes_cmac.c: 156: else
 28611                           ;lorawan_aes_cmac.c: 157: {
 28612                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 28613  0034CA  D81D               	call	PL176	;call to abstracted procedure
 28614  0034CC  ECA4  F02A         	call	_FillSubKey	;wreg free
 28615                           
 28616                           ; BSR set to: 0
 28617                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 28618  0034D0  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28619  0034D2                     l12674:
 28620                           
 28621                           ; BSR set to: 0
 28622                           ;lorawan_aes_cmac.c: 161: {
 28623                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 28624  0034D2  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28625  0034D4  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28626  0034D6  6ED9               	movwf	fsr2l,c
 28627  0034D8  0E00               	movlw	0
 28628  0034DA  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28629  0034DC  6EDA               	movwf	fsr2h,c
 28630  0034DE  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28631  0034E0  0FAB               	addlw	low GenerateSubkey@const_Rb
 28632  0034E2  6EE9               	movwf	fsr0l,c
 28633  0034E4  6AEA               	clrf	fsr0h,c
 28634  0034E6  50EF               	movf	indf0,w,c
 28635  0034E8  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28636  0034EA  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28637  0034EC  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28638  0034EE  6EE9               	movwf	fsr0l,c
 28639  0034F0  0E00               	movlw	0
 28640  0034F2  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28641  0034F4  6EEA               	movwf	fsr0h,c
 28642  0034F6  50EF               	movf	indf0,w,c
 28643  0034F8  19AA               	xorwf	??_GenerateSubkey& (0+255),w,b
 28644  0034FA  6EDF               	movwf	indf2,c
 28645                           
 28646                           ; BSR set to: 0
 28647  0034FC  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28648                           
 28649                           ; BSR set to: 0
 28650  0034FE  0E0F               	movlw	15
 28651  003500  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28652  003502  D7E7               	goto	l12674
 28653  003504  0C0F               	retlw	15
 28654  003506                     __end_of_GenerateSubkey:
 28655                           	opt stack 0
 28656  003506                     PL176:
 28657                           	opt stack 16
 28658  003506  C0A6  F064         	movff	GenerateSubkey@k1,FillSubKey@source
 28659  00350A  C0A7  F065         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28660  00350E  C0A8  F066         	movff	GenerateSubkey@k2,FillSubKey@key
 28661  003512  C0A9  F067         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28662  003516  0E10               	movlw	16
 28663  003518  6F68               	movwf	FillSubKey@size& (0+255),b
 28664  00351A  0C10               	retlw	16
 28665  00351C                     __end_ofPL176:
 28666                           	opt stack 0
 28667  00351C                     PL206:
 28668                           	opt stack 16
 28669  00351C  0EBB               	movlw	low GenerateSubkey@l
 28670  00351E  6F64               	movwf	FillSubKey@source& (0+255),b
 28671  003520  6B65               	clrf	(FillSubKey@source+1)& (0+255),b
 28672  003522  C0A6  F066         	movff	GenerateSubkey@k1,FillSubKey@key
 28673  003526  C0A7  F067         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28674  00352A  0E10               	movlw	16
 28675  00352C  6F68               	movwf	FillSubKey@size& (0+255),b
 28676  00352E  0C10               	retlw	16
 28677  003530                     __end_ofPL206:
 28678                           	opt stack 0
 28679                           tosu	equ	0xFFF
 28680                           tosh	equ	0xFFE
 28681                           tosl	equ	0xFFD
 28682                           pclath	equ	0xFFA
 28683                           tblptru	equ	0xFF8
 28684                           tblptrh	equ	0xFF7
 28685                           tblptrl	equ	0xFF6
 28686                           tablat	equ	0xFF5
 28687                           prodh	equ	0xFF4
 28688                           prodl	equ	0xFF3
 28689                           intcon	equ	0xFF2
 28690                           indf0	equ	0xFEF
 28691                           postinc0	equ	0xFEE
 28692                           plusw0	equ	0xFEB
 28693                           fsr0h	equ	0xFEA
 28694                           fsr0l	equ	0xFE9
 28695                           wreg	equ	0xFE8
 28696                           postinc1	equ	0xFE6
 28697                           postdec1	equ	0xFE5
 28698                           plusw1	equ	0xFE3
 28699                           fsr1h	equ	0xFE2
 28700                           fsr1l	equ	0xFE1
 28701                           indf2	equ	0xFDF
 28702                           postinc2	equ	0xFDE
 28703                           postdec2	equ	0xFDD
 28704                           plusw2	equ	0xFDB
 28705                           fsr2h	equ	0xFDA
 28706                           fsr2l	equ	0xFD9
 28707                           status	equ	0xFD8
 28708                           
 28709 ;; *************** function _FillSubKey *****************
 28710 ;; Defined at:
 28711 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28712 ;; Parameters:    Size  Location     Type
 28713 ;;  source          2    4[BANK0 ] PTR unsigned char 
 28714 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 28715 ;;  key             2    6[BANK0 ] PTR unsigned char 
 28716 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 28717 ;;  size            1    8[BANK0 ] unsigned char 
 28718 ;; Auto vars:     Size  Location     Type
 28719 ;;  i               1   11[BANK0 ] unsigned char 
 28720 ;;  carry           1   10[BANK0 ] unsigned char 
 28721 ;; Return value:  Size  Location     Type
 28722 ;;                  1    wreg      void 
 28723 ;; Registers used:
 28724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 28725 ;; Tracked objects:
 28726 ;;		On entry : F/0
 28727 ;;		On exit  : F/0
 28728 ;;		Unchanged: 0/0
 28729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 28730 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28733 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28734 ;;Total ram usage:        8 bytes
 28735 ;; Hardware stack levels used:    1
 28736 ;; Hardware stack levels required when called:    7
 28737 ;; This function calls:
 28738 ;;		Nothing
 28739 ;; This function is called by:
 28740 ;;		_GenerateSubkey
 28741 ;; This function uses a non-reentrant model
 28742 ;;
 28743                           
 28744                           	psect	text148
 28745  005548                     __ptext148:
 28746                           	opt stack 0
 28747  005548                     _FillSubKey:
 28748                           	opt stack 18
 28749                           
 28750                           ; BSR set to: 0
 28751                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 28752                           
 28753                           ; BSR set to: 0
 28754                           ;incstack = 0
 28755  005548  6B6B               	clrf	FillSubKey@i& (0+255),b
 28756                           
 28757                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 28758  00554A  6B6A               	clrf	FillSubKey@carry& (0+255),b
 28759                           
 28760                           ;lorawan_aes_cmac.c: 172: i=size;
 28761  00554C  C068  F06B         	movff	FillSubKey@size,FillSubKey@i
 28762                           
 28763                           ;lorawan_aes_cmac.c: 174: while(i--)
 28764  005550  D01C               	goto	l12364
 28765  005552                     l12360:
 28766                           
 28767                           ; BSR set to: 0
 28768                           ;lorawan_aes_cmac.c: 175: {
 28769                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 28770  005552  516B               	movf	FillSubKey@i& (0+255),w,b
 28771  005554  2566               	addwf	FillSubKey@key& (0+255),w,b
 28772  005556  6ED9               	movwf	fsr2l,c
 28773  005558  0E00               	movlw	0
 28774  00555A  2167               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 28775  00555C  6EDA               	movwf	fsr2h,c
 28776  00555E  516B               	movf	FillSubKey@i& (0+255),w,b
 28777  005560  2564               	addwf	FillSubKey@source& (0+255),w,b
 28778  005562  6EE9               	movwf	fsr0l,c
 28779  005564  0E00               	movlw	0
 28780  005566  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28781  005568  6EEA               	movwf	fsr0h,c
 28782  00556A  50EF               	movf	indf0,w,c
 28783  00556C  6F69               	movwf	??_FillSubKey& (0+255),b
 28784  00556E  90D8               	bcf	status,0,c
 28785  005570  3569               	rlcf	??_FillSubKey& (0+255),w,b
 28786  005572  116A               	iorwf	FillSubKey@carry& (0+255),w,b
 28787  005574  6EDF               	movwf	indf2,c
 28788                           
 28789                           ; BSR set to: 0
 28790                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 28791  005576  516B               	movf	FillSubKey@i& (0+255),w,b
 28792  005578  2564               	addwf	FillSubKey@source& (0+255),w,b
 28793  00557A  6ED9               	movwf	fsr2l,c
 28794  00557C  0E00               	movlw	0
 28795  00557E  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28796  005580  6EDA               	movwf	fsr2h,c
 28797  005582  0E01               	movlw	1
 28798  005584  AEDF               	btfss	indf2,7,c
 28799  005586  0E00               	movlw	0
 28800  005588  6F6A               	movwf	FillSubKey@carry& (0+255),b
 28801  00558A                     l12364:
 28802                           
 28803                           ; BSR set to: 0
 28804  00558A  076B               	decf	FillSubKey@i& (0+255),f,b
 28805  00558C  296B               	incf	FillSubKey@i& (0+255),w,b
 28806  00558E  E1E1               	bnz	l12360
 28807                           
 28808                           ; BSR set to: 0
 28809  005590  0012               	return		;funcret
 28810  005592                     __end_of_FillSubKey:
 28811                           	opt stack 0
 28812                           tosu	equ	0xFFF
 28813                           tosh	equ	0xFFE
 28814                           tosl	equ	0xFFD
 28815                           pclath	equ	0xFFA
 28816                           tblptru	equ	0xFF8
 28817                           tblptrh	equ	0xFF7
 28818                           tblptrl	equ	0xFF6
 28819                           tablat	equ	0xFF5
 28820                           prodh	equ	0xFF4
 28821                           prodl	equ	0xFF3
 28822                           intcon	equ	0xFF2
 28823                           indf0	equ	0xFEF
 28824                           postinc0	equ	0xFEE
 28825                           plusw0	equ	0xFEB
 28826                           fsr0h	equ	0xFEA
 28827                           fsr0l	equ	0xFE9
 28828                           wreg	equ	0xFE8
 28829                           postinc1	equ	0xFE6
 28830                           postdec1	equ	0xFE5
 28831                           plusw1	equ	0xFE3
 28832                           fsr1h	equ	0xFE2
 28833                           fsr1l	equ	0xFE1
 28834                           indf2	equ	0xFDF
 28835                           postinc2	equ	0xFDE
 28836                           postdec2	equ	0xFDD
 28837                           plusw2	equ	0xFDB
 28838                           fsr2h	equ	0xFDA
 28839                           fsr2l	equ	0xFD9
 28840                           status	equ	0xFD8
 28841                           
 28842 ;; *************** function _AESEncodeLoRa *****************
 28843 ;; Defined at:
 28844 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 28845 ;; Parameters:    Size  Location     Type
 28846 ;;  block           2   48[BANK0 ] PTR unsigned char 
 28847 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 28848 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 28849 ;;  key             2   50[BANK0 ] PTR unsigned char 
 28850 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28851 ;; Auto vars:     Size  Location     Type
 28852 ;;  useKey         16   52[BANK0 ] unsigned char [16]
 28853 ;; Return value:  Size  Location     Type
 28854 ;;                  1    wreg      void 
 28855 ;; Registers used:
 28856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28857 ;; Tracked objects:
 28858 ;;		On entry : F/0
 28859 ;;		On exit  : F/0
 28860 ;;		Unchanged: 0/0
 28861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 28862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28863 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28865 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28866 ;;Total ram usage:       20 bytes
 28867 ;; Hardware stack levels used:    1
 28868 ;; Hardware stack levels required when called:    9
 28869 ;; This function calls:
 28870 ;;		_AESEncode
 28871 ;;		_memcpy
 28872 ;; This function is called by:
 28873 ;;		_AESCmac
 28874 ;;		_GenerateSubkey
 28875 ;;		_LORAWAN_RxDone
 28876 ;;		_ComputeSessionKeys
 28877 ;;		_EncryptFRMPayload
 28878 ;; This function uses a non-reentrant model
 28879 ;;
 28880                           
 28881                           	psect	text149
 28882  005CF4                     __ptext149:
 28883                           	opt stack 0
 28884  005CF4                     _AESEncodeLoRa:
 28885                           	opt stack 17
 28886                           
 28887                           ; BSR set to: 0
 28888                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 28889                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 28890                           
 28891                           ; BSR set to: 0
 28892                           ;incstack = 0
 28893  005CF4  0E94               	movlw	low AESEncodeLoRa@useKey
 28894  005CF6  6F64               	movwf	memcpy@d1& (0+255),b
 28895  005CF8  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 28896  005CFA  C092  F066         	movff	AESEncodeLoRa@key,memcpy@s1
 28897  005CFE  C093  F067         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 28898  005D02  EC35  F02D         	call	PL302	;call to abstracted procedure
 28899  005D06  ECA0  F028         	call	_memcpy	;wreg free
 28900                           
 28901                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 28902  005D0A  C090  F06A         	movff	AESEncodeLoRa@block,AESEncode@block
 28903  005D0E  C091  F06B         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 28904  005D12  0E94               	movlw	low AESEncodeLoRa@useKey
 28905  005D14  6F6C               	movwf	AESEncode@masterKey& (0+255),b
 28906  005D16  EFB3  F00B         	goto	_AESEncode	;wreg free
 28907  005D1A                     __end_of_AESEncodeLoRa:
 28908                           	opt stack 0
 28909                           tosu	equ	0xFFF
 28910                           tosh	equ	0xFFE
 28911                           tosl	equ	0xFFD
 28912                           pclath	equ	0xFFA
 28913                           tblptru	equ	0xFF8
 28914                           tblptrh	equ	0xFF7
 28915                           tblptrl	equ	0xFF6
 28916                           tablat	equ	0xFF5
 28917                           prodh	equ	0xFF4
 28918                           prodl	equ	0xFF3
 28919                           intcon	equ	0xFF2
 28920                           indf0	equ	0xFEF
 28921                           postinc0	equ	0xFEE
 28922                           plusw0	equ	0xFEB
 28923                           fsr0h	equ	0xFEA
 28924                           fsr0l	equ	0xFE9
 28925                           wreg	equ	0xFE8
 28926                           postinc1	equ	0xFE6
 28927                           postdec1	equ	0xFE5
 28928                           plusw1	equ	0xFE3
 28929                           fsr1h	equ	0xFE2
 28930                           fsr1l	equ	0xFE1
 28931                           indf2	equ	0xFDF
 28932                           postinc2	equ	0xFDE
 28933                           postdec2	equ	0xFDD
 28934                           plusw2	equ	0xFDB
 28935                           fsr2h	equ	0xFDA
 28936                           fsr2l	equ	0xFD9
 28937                           status	equ	0xFD8
 28938                           
 28939 ;; *************** function _AESEncode *****************
 28940 ;; Defined at:
 28941 ;;		line 236 in file "mcc_generated_files/LoRaWAN/AES.c"
 28942 ;; Parameters:    Size  Location     Type
 28943 ;;  block           2   10[BANK0 ] PTR unsigned char 
 28944 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 28945 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 28946 ;;  masterKey       1   12[BANK0 ] PTR unsigned char 
 28947 ;;		 -> AESEncodeLoRa@useKey(16), 
 28948 ;; Auto vars:     Size  Location     Type
 28949 ;;  aux3            1   46[BANK0 ] unsigned char 
 28950 ;;  aux1            1   45[BANK0 ] unsigned char 
 28951 ;;  aux2            1   44[BANK0 ] unsigned char 
 28952 ;;  aux             1   43[BANK0 ] unsigned char 
 28953 ;;  key            16   21[BANK0 ] unsigned char [16]
 28954 ;;  i               1   47[BANK0 ] unsigned char 
 28955 ;; Return value:  Size  Location     Type
 28956 ;;                  1    wreg      void 
 28957 ;; Registers used:
 28958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28959 ;; Tracked objects:
 28960 ;;		On entry : F/0
 28961 ;;		On exit  : F/0
 28962 ;;		Unchanged: 0/0
 28963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 28964 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28965 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28966 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28967 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28968 ;;Total ram usage:       38 bytes
 28969 ;; Hardware stack levels used:    1
 28970 ;; Hardware stack levels required when called:    8
 28971 ;; This function calls:
 28972 ;;		_EncKeySchedule
 28973 ;;		_EncodeShiftRow
 28974 ;; This function is called by:
 28975 ;;		_AESEncodeLoRa
 28976 ;; This function uses a non-reentrant model
 28977 ;;
 28978                           
 28979                           	psect	text150
 28980  001766                     __ptext150:
 28981                           	opt stack 0
 28982  001766                     _AESEncode:
 28983                           	opt stack 17
 28984                           
 28985                           ; BSR set to: 0
 28986                           ;AES.c: 238: unsigned char i;
 28987                           ;AES.c: 240: unsigned char key[16];
 28988                           ;AES.c: 242: for (i = 0; i < 16; i++)
 28989                           
 28990                           ; BSR set to: 0
 28991                           ;incstack = 0
 28992  001766  6B8F               	clrf	AESEncode@i& (0+255),b
 28993  001768                     l11962:
 28994                           
 28995                           ; BSR set to: 0
 28996                           ;AES.c: 243: {
 28997                           ;AES.c: 244: key[i] = masterKey[i];
 28998  001768  516C               	movf	AESEncode@masterKey& (0+255),w,b
 28999  00176A  258F               	addwf	AESEncode@i& (0+255),w,b
 29000  00176C  6ED9               	movwf	fsr2l,c
 29001  00176E  6ADA               	clrf	fsr2h,c
 29002  001770  518F               	movf	AESEncode@i& (0+255),w,b
 29003  001772  0F75               	addlw	low AESEncode@key
 29004  001774  6EE9               	movwf	fsr0l,c
 29005  001776  6AEA               	clrf	fsr0h,c
 29006  001778  CFDF FFEF          	movff	indf2,indf0
 29007                           
 29008                           ; BSR set to: 0
 29009  00177C  2B8F               	incf	AESEncode@i& (0+255),f,b
 29010                           
 29011                           ; BSR set to: 0
 29012  00177E  0E0F               	movlw	15
 29013  001780  658F               	cpfsgt	AESEncode@i& (0+255),b
 29014  001782  D7F2               	goto	l11962
 29015                           
 29016                           ; BSR set to: 0
 29017                           ;AES.c: 245: }
 29018                           ;AES.c: 248: _roundCounter = 10;
 29019  001784  0E0A               	movlw	10
 29020  001786  6E47               	movwf	__roundCounter,c
 29021                           
 29022                           ;AES.c: 250: _rcon = 0x01;
 29023  001788  0E01               	movlw	1
 29024  00178A  6E46               	movwf	__rcon,c
 29025                           
 29026                           ; BSR set to: 0
 29027                           ;AES.c: 253: for(i=0;i<16;i++)
 29028  00178C  6B8F               	clrf	AESEncode@i& (0+255),b
 29029  00178E                     l11976:
 29030                           
 29031                           ; BSR set to: 0
 29032                           ;AES.c: 254: {
 29033                           ;AES.c: 255: block[i] ^= key[i];
 29034  00178E  D8C4               	call	PL100	;call to abstracted procedure
 29035  001790  D8BC               	call	PL76	;call to abstracted procedure
 29036                           
 29037                           ; BSR set to: 0
 29038                           
 29039                           ; BSR set to: 0
 29040  001792  D900               	call	PL366	;call to abstracted procedure
 29041  001794  658F               	cpfsgt	AESEncode@i& (0+255),b
 29042  001796  D7FB               	goto	l11976
 29043  001798                     l2541:
 29044                           
 29045                           ; BSR set to: 0
 29046                           ;AES.c: 259: {
 29047                           ;AES.c: 261: for(i=0;i<16;i++)
 29048  001798  6B8F               	clrf	AESEncode@i& (0+255),b
 29049  00179A                     l11986:
 29050                           
 29051                           ; BSR set to: 0
 29052                           ;AES.c: 262: {
 29053                           ;AES.c: 263: block[i]=STable[block[i]];
 29054  00179A  D8B7               	call	PL76	;call to abstracted procedure
 29055  00179C  50DF               	movf	indf2,w,c
 29056  00179E  6F6D               	movwf	??_AESEncode& (0+255),b
 29057  0017A0  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29058  0017A2  0E6D               	movlw	low _STable
 29059  0017A4  256D               	addwf	??_AESEncode& (0+255),w,b
 29060  0017A6  6EF6               	movwf	tblptrl,c
 29061  0017A8  0EFE               	movlw	high _STable
 29062  0017AA  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29063  0017AC  6EF7               	movwf	tblptrh,c
 29064  0017AE                     	if	1	;There are 3 active tblptr bytes
 29065  0017AE  6AF8               	clrf	tblptru,c
 29066  0017B0  0E00               	movlw	low (__mediumconst shr (0+16))
 29067  0017B2  22F8               	addwfc	tblptru,f,c
 29068  0017B4                     	endif
 29069  0017B4  D8AA               	call	PL76	;call to abstracted procedure
 29070  0017B6  0008               	tblrd		*
 29071  0017B8  CFF5 FFDF          	movff	tablat,indf2
 29072                           
 29073                           ; BSR set to: 0
 29074  0017BC  2B8F               	incf	AESEncode@i& (0+255),f,b
 29075                           
 29076                           ; BSR set to: 0
 29077  0017BE  0E0F               	movlw	15
 29078  0017C0  658F               	cpfsgt	AESEncode@i& (0+255),b
 29079  0017C2  D7EB               	goto	l11986
 29080                           
 29081                           ; BSR set to: 0
 29082                           ;AES.c: 264: }
 29083                           ;AES.c: 267: EncodeShiftRow(block);
 29084  0017C4  C06A  F064         	movff	AESEncode@block,EncodeShiftRow@stateTable
 29085  0017C8  C06B  F065         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 29086  0017CC  EC1F  F01D         	call	_EncodeShiftRow	;wreg free
 29087                           
 29088                           ; BSR set to: 0
 29089                           ;AES.c: 270: if(_roundCounter != 1)
 29090  0017D0  0447               	decf	__roundCounter,w,c
 29091  0017D2  E101 D084          	bz	l12034
 29092                           
 29093                           ; BSR set to: 0
 29094                           ;AES.c: 271: {
 29095                           ;AES.c: 272: unsigned char aux,aux1,aux2,aux3;
 29096                           ;AES.c: 274: for(i=0;i<16;i+=4)
 29097  0017D6  6B8F               	clrf	AESEncode@i& (0+255),b
 29098  0017D8                     l12002:
 29099                           
 29100                           ; BSR set to: 0
 29101                           ;AES.c: 275: {
 29102                           ;AES.c: 276: aux1= block[i+0] ^ block[i+1];
 29103  0017D8  D891               	call	PL74	;call to abstracted procedure
 29104  0017DA  296D               	incf	??_AESEncode& (0+255),w,b
 29105  0017DC  6ED9               	movwf	fsr2l,c
 29106  0017DE  D8BD               	call	PL156	;call to abstracted procedure
 29107  0017E0  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29108  0017E2  D893               	call	PL76	;call to abstracted procedure
 29109  0017E4  50DF               	movf	indf2,w,c
 29110  0017E6  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29111  0017E8  6F8D               	movwf	AESEncode@aux1& (0+255),b
 29112                           
 29113                           ;AES.c: 277: aux3= block[i+2]^block[i+3];
 29114  0017EA  D888               	call	PL74	;call to abstracted procedure
 29115  0017EC  D8CF               	call	PL316	;call to abstracted procedure
 29116  0017EE  D8B5               	call	PL156	;call to abstracted procedure
 29117  0017F0  D8A4               	call	PL116	;call to abstracted procedure
 29118  0017F2  6F8E               	movwf	AESEncode@aux3& (0+255),b
 29119                           
 29120                           ; BSR set to: 0
 29121                           ;AES.c: 278: aux = aux1 ^ aux3;
 29122  0017F4  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29123  0017F6  6F8B               	movwf	AESEncode@aux& (0+255),b
 29124                           
 29125                           ; BSR set to: 0
 29126                           ;AES.c: 279: aux2= block[i+2]^block[i+1];
 29127  0017F8  D881               	call	PL74	;call to abstracted procedure
 29128  0017FA  296D               	incf	??_AESEncode& (0+255),w,b
 29129  0017FC  6ED9               	movwf	fsr2l,c
 29130  0017FE  D8AD               	call	PL156	;call to abstracted procedure
 29131  001800  D89C               	call	PL116	;call to abstracted procedure
 29132  001802  6F8C               	movwf	AESEncode@aux2& (0+255),b
 29133                           
 29134                           ;AES.c: 281: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 29135  001804  0E7F               	movlw	127
 29136  001806  658D               	cpfsgt	AESEncode@aux1& (0+255),b
 29137  001808  D008               	goto	l12010
 29138                           
 29139                           ; BSR set to: 0
 29140  00180A  0E1B               	movlw	27
 29141  00180C  C08D  F06D         	movff	AESEncode@aux1,??_AESEncode
 29142  001810  D8AF               	call	PL246	;call to abstracted procedure
 29143  001812  6F85               	movwf	_AESEncode$3784& (0+255),b
 29144  001814  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29145  001816  6F86               	movwf	(_AESEncode$3784+1)& (0+255),b
 29146  001818  D005               	goto	l12012
 29147  00181A                     l12010:
 29148                           
 29149                           ; BSR set to: 0
 29150  00181A  90D8               	bcf	status,0,c
 29151  00181C  358D               	rlcf	AESEncode@aux1& (0+255),w,b
 29152  00181E  6F85               	movwf	_AESEncode$3784& (0+255),b
 29153  001820  6B86               	clrf	(_AESEncode$3784+1)& (0+255),b
 29154  001822  3786               	rlcf	(_AESEncode$3784+1)& (0+255),f,b
 29155  001824                     l12012:
 29156                           
 29157                           ; BSR set to: 0
 29158  001824  C085  F08D         	movff	_AESEncode$3784,AESEncode@aux1
 29159                           
 29160                           ;AES.c: 282: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 29161  001828  0E7F               	movlw	127
 29162  00182A  658C               	cpfsgt	AESEncode@aux2& (0+255),b
 29163  00182C  D008               	goto	l12016
 29164                           
 29165                           ; BSR set to: 0
 29166  00182E  0E1B               	movlw	27
 29167  001830  C08C  F06D         	movff	AESEncode@aux2,??_AESEncode
 29168  001834  D89D               	call	PL246	;call to abstracted procedure
 29169  001836  6F87               	movwf	_AESEncode$3785& (0+255),b
 29170  001838  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29171  00183A  6F88               	movwf	(_AESEncode$3785+1)& (0+255),b
 29172  00183C  D005               	goto	l12018
 29173  00183E                     l12016:
 29174                           
 29175                           ; BSR set to: 0
 29176  00183E  90D8               	bcf	status,0,c
 29177  001840  358C               	rlcf	AESEncode@aux2& (0+255),w,b
 29178  001842  6F87               	movwf	_AESEncode$3785& (0+255),b
 29179  001844  6B88               	clrf	(_AESEncode$3785+1)& (0+255),b
 29180  001846  3788               	rlcf	(_AESEncode$3785+1)& (0+255),f,b
 29181  001848                     l12018:
 29182                           
 29183                           ; BSR set to: 0
 29184  001848  C087  F08C         	movff	_AESEncode$3785,AESEncode@aux2
 29185                           
 29186                           ;AES.c: 283: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 29187  00184C  0E7F               	movlw	127
 29188  00184E  658E               	cpfsgt	AESEncode@aux3& (0+255),b
 29189  001850  D008               	goto	l12022
 29190                           
 29191                           ; BSR set to: 0
 29192  001852  0E1B               	movlw	27
 29193  001854  C08E  F06D         	movff	AESEncode@aux3,??_AESEncode
 29194  001858  D88B               	call	PL246	;call to abstracted procedure
 29195  00185A  6F89               	movwf	_AESEncode$3786& (0+255),b
 29196  00185C  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29197  00185E  6F8A               	movwf	(_AESEncode$3786+1)& (0+255),b
 29198  001860  D005               	goto	l12024
 29199  001862                     l12022:
 29200                           
 29201                           ; BSR set to: 0
 29202  001862  90D8               	bcf	status,0,c
 29203  001864  358E               	rlcf	AESEncode@aux3& (0+255),w,b
 29204  001866  6F89               	movwf	_AESEncode$3786& (0+255),b
 29205  001868  6B8A               	clrf	(_AESEncode$3786+1)& (0+255),b
 29206  00186A  378A               	rlcf	(_AESEncode$3786+1)& (0+255),f,b
 29207  00186C                     l12024:
 29208                           
 29209                           ; BSR set to: 0
 29210  00186C  C089  F08E         	movff	_AESEncode$3786,AESEncode@aux3
 29211                           
 29212                           ; BSR set to: 0
 29213                           ;AES.c: 285: block[i+0]= aux^aux1^block[i+0];
 29214  001870  D84C               	call	PL76	;call to abstracted procedure
 29215  001872  D884               	call	PL260	;call to abstracted procedure
 29216  001874  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29217  001876  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29218  001878  6EDF               	movwf	indf2,c
 29219                           
 29220                           ; BSR set to: 0
 29221                           ;AES.c: 286: block[i+1]= aux^aux2^block[i+1];
 29222  00187A  D840               	call	PL74	;call to abstracted procedure
 29223  00187C  296D               	incf	??_AESEncode& (0+255),w,b
 29224  00187E  6ED9               	movwf	fsr2l,c
 29225  001880  D852               	call	PL110	;call to abstracted procedure
 29226  001882  296F               	incf	(??_AESEncode+2)& (0+255),w,b
 29227  001884  D86F               	call	PL244	;call to abstracted procedure
 29228  001886  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29229  001888  198C               	xorwf	AESEncode@aux2& (0+255),w,b
 29230  00188A  6EDF               	movwf	indf2,c
 29231                           
 29232                           ; BSR set to: 0
 29233                           ;AES.c: 287: block[i+2]= aux^aux3^block[i+2];
 29234  00188C  D837               	call	PL74	;call to abstracted procedure
 29235  00188E  0E02               	movlw	2
 29236  001890  256D               	addwf	??_AESEncode& (0+255),w,b
 29237  001892  6ED9               	movwf	fsr2l,c
 29238  001894  D848               	call	PL110	;call to abstracted procedure
 29239  001896  0E02               	movlw	2
 29240  001898  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29241  00189A  D864               	call	PL244	;call to abstracted procedure
 29242  00189C  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29243  00189E  198E               	xorwf	AESEncode@aux3& (0+255),w,b
 29244  0018A0  6EDF               	movwf	indf2,c
 29245                           
 29246                           ; BSR set to: 0
 29247                           ;AES.c: 288: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 29248  0018A2  D82C               	call	PL74	;call to abstracted procedure
 29249  0018A4  D873               	call	PL316	;call to abstracted procedure
 29250  0018A6  D83F               	call	PL110	;call to abstracted procedure
 29251  0018A8  0E02               	movlw	2
 29252  0018AA  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29253  0018AC  D85B               	call	PL244	;call to abstracted procedure
 29254  0018AE  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29255  0018B0  518F               	movf	AESEncode@i& (0+255),w,b
 29256  0018B2  256A               	addwf	AESEncode@block& (0+255),w,b
 29257  0018B4  6F72               	movwf	(??_AESEncode+5)& (0+255),b
 29258  0018B6  0E00               	movlw	0
 29259  0018B8  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29260  0018BA  6F73               	movwf	(??_AESEncode+6)& (0+255),b
 29261  0018BC  2972               	incf	(??_AESEncode+5)& (0+255),w,b
 29262  0018BE  6EE9               	movwf	fsr0l,c
 29263  0018C0  0E00               	movlw	0
 29264  0018C2  2173               	addwfc	(??_AESEncode+6)& (0+255),w,b
 29265  0018C4  6EEA               	movwf	fsr0h,c
 29266  0018C6  50EF               	movf	indf0,w,c
 29267  0018C8  6F74               	movwf	(??_AESEncode+7)& (0+255),b
 29268  0018CA  D858               	call	PL260	;call to abstracted procedure
 29269  0018CC  1974               	xorwf	(??_AESEncode+7)& (0+255),w,b
 29270  0018CE  1971               	xorwf	(??_AESEncode+4)& (0+255),w,b
 29271  0018D0  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29272  0018D2  6EDF               	movwf	indf2,c
 29273  0018D4  0E04               	movlw	4
 29274  0018D6  278F               	addwf	AESEncode@i& (0+255),f,b
 29275  0018D8  0E0F               	movlw	15
 29276  0018DA  658F               	cpfsgt	AESEncode@i& (0+255),b
 29277  0018DC  D77D               	goto	l12002
 29278  0018DE                     l12034:
 29279                           
 29280                           ; BSR set to: 0
 29281                           ;AES.c: 289: }
 29282                           ;AES.c: 290: }
 29283                           ;AES.c: 292: EncKeySchedule(key);
 29284  0018DE  0E75               	movlw	low AESEncode@key
 29285  0018E0  6F64               	movwf	EncKeySchedule@key& (0+255),b
 29286  0018E2  ECFD  F015         	call	_EncKeySchedule	;wreg free
 29287                           
 29288                           ; BSR set to: 0
 29289                           ;AES.c: 294: for(i=0;i<16;i++)
 29290  0018E6  6B8F               	clrf	AESEncode@i& (0+255),b
 29291  0018E8                     l12042:
 29292                           
 29293                           ; BSR set to: 0
 29294                           ;AES.c: 295: {
 29295                           ;AES.c: 296: block[i] ^= key[i];
 29296  0018E8  D817               	call	PL100	;call to abstracted procedure
 29297  0018EA  D80F               	call	PL76	;call to abstracted procedure
 29298                           
 29299                           ; BSR set to: 0
 29300                           
 29301                           ; BSR set to: 0
 29302  0018EC  D853               	call	PL366	;call to abstracted procedure
 29303  0018EE  658F               	cpfsgt	AESEncode@i& (0+255),b
 29304  0018F0  D7FB               	goto	l12042
 29305                           
 29306                           ; BSR set to: 0
 29307                           ;AES.c: 297: }
 29308                           ;AES.c: 299: _roundCounter--;
 29309  0018F2  0647               	decf	__roundCounter,f,c
 29310                           
 29311                           ; BSR set to: 0
 29312                           ;AES.c: 300: }
 29313                           ;AES.c: 301: while(_roundCounter !=0);
 29314  0018F4  5047               	movf	__roundCounter,w,c
 29315  0018F6  E001 D74F          	bnz	l2541
 29316                           
 29317                           ; BSR set to: 0
 29318  0018FA  0012               	return		;funcret
 29319  0018FC                     __end_of_AESEncode:
 29320                           	opt stack 0
 29321  0018FC                     PL74:
 29322                           	opt stack 17
 29323  0018FC  518F               	movf	AESEncode@i& (0+255),w,b
 29324  0018FE  256A               	addwf	AESEncode@block& (0+255),w,b
 29325  001900  6F6D               	movwf	??_AESEncode& (0+255),b
 29326  001902  0E00               	movlw	0
 29327  001904  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29328  001906  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29329  001908  0012               	return	
 29330  00190A                     __end_ofPL74:
 29331                           	opt stack 0
 29332  00190A                     PL76:
 29333                           	opt stack 17
 29334  00190A  518F               	movf	AESEncode@i& (0+255),w,b
 29335  00190C  256A               	addwf	AESEncode@block& (0+255),w,b
 29336  00190E  6ED9               	movwf	fsr2l,c
 29337  001910  0E00               	movlw	0
 29338  001912  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29339  001914  6EDA               	movwf	fsr2h,c
 29340  001916  0012               	return	
 29341  001918                     __end_ofPL76:
 29342                           	opt stack 0
 29343  001918                     PL100:
 29344                           	opt stack 17
 29345  001918  518F               	movf	AESEncode@i& (0+255),w,b
 29346  00191A  0F75               	addlw	low AESEncode@key
 29347  00191C  6ED9               	movwf	fsr2l,c
 29348  00191E  6ADA               	clrf	fsr2h,c
 29349  001920  50DF               	movf	indf2,w,c
 29350  001922  6F6D               	movwf	??_AESEncode& (0+255),b
 29351  001924  0012               	return	
 29352  001926                     __end_ofPL100:
 29353                           	opt stack 0
 29354  001926                     PL110:
 29355                           	opt stack 17
 29356  001926  0E00               	movlw	0
 29357  001928  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29358  00192A  6EDA               	movwf	fsr2h,c
 29359  00192C  518F               	movf	AESEncode@i& (0+255),w,b
 29360  00192E  256A               	addwf	AESEncode@block& (0+255),w,b
 29361  001930  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29362  001932  0E00               	movlw	0
 29363  001934  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29364  001936  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29365  001938  0012               	return	
 29366  00193A                     __end_ofPL110:
 29367                           	opt stack 0
 29368  00193A                     PL116:
 29369                           	opt stack 17
 29370  00193A  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29371  00193C  518F               	movf	AESEncode@i& (0+255),w,b
 29372  00193E  256A               	addwf	AESEncode@block& (0+255),w,b
 29373  001940  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29374  001942  0E00               	movlw	0
 29375  001944  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29376  001946  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29377  001948  0E02               	movlw	2
 29378  00194A  2570               	addwf	(??_AESEncode+3)& (0+255),w,b
 29379  00194C  6ED9               	movwf	fsr2l,c
 29380  00194E  0E00               	movlw	0
 29381  001950  2171               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29382  001952  6EDA               	movwf	fsr2h,c
 29383  001954  50DF               	movf	indf2,w,c
 29384  001956  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29385  001958  0012               	return	
 29386  00195A                     __end_ofPL116:
 29387                           	opt stack 0
 29388  00195A                     PL156:
 29389                           	opt stack 17
 29390  00195A  0E00               	movlw	0
 29391  00195C  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29392  00195E  6EDA               	movwf	fsr2h,c
 29393  001960  50DF               	movf	indf2,w,c
 29394  001962  0012               	return	
 29395  001964                     __end_ofPL156:
 29396                           	opt stack 0
 29397  001964                     PL244:
 29398                           	opt stack 17
 29399  001964  6EE9               	movwf	fsr0l,c
 29400  001966  0E00               	movlw	0
 29401  001968  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29402  00196A  6EEA               	movwf	fsr0h,c
 29403  00196C  50EF               	movf	indf0,w,c
 29404  00196E  0012               	return	
 29405  001970                     __end_ofPL244:
 29406                           	opt stack 0
 29407  001970                     PL246:
 29408                           	opt stack 17
 29409  001970  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29410  001972  90D8               	bcf	status,0,c
 29411  001974  376D               	rlcf	??_AESEncode& (0+255),f,b
 29412  001976  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29413  001978  196D               	xorwf	??_AESEncode& (0+255),w,b
 29414  00197A  0012               	return	
 29415  00197C                     __end_ofPL246:
 29416                           	opt stack 0
 29417  00197C                     PL260:
 29418                           	opt stack 17
 29419  00197C  518F               	movf	AESEncode@i& (0+255),w,b
 29420  00197E  256A               	addwf	AESEncode@block& (0+255),w,b
 29421  001980  6EE9               	movwf	fsr0l,c
 29422  001982  0E00               	movlw	0
 29423  001984  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29424  001986  6EEA               	movwf	fsr0h,c
 29425  001988  50EF               	movf	indf0,w,c
 29426  00198A  0012               	return	
 29427  00198C                     __end_ofPL260:
 29428                           	opt stack 0
 29429  00198C                     PL316:
 29430                           	opt stack 17
 29431  00198C  0E03               	movlw	3
 29432  00198E  256D               	addwf	??_AESEncode& (0+255),w,b
 29433  001990  6ED9               	movwf	fsr2l,c
 29434  001992  0012               	return	
 29435  001994                     __end_ofPL316:
 29436                           	opt stack 0
 29437  001994                     PL366:
 29438                           	opt stack 17
 29439  001994  516D               	movf	??_AESEncode& (0+255),w,b
 29440  001996  1ADF               	xorwf	indf2,f,c
 29441  001998  2B8F               	incf	AESEncode@i& (0+255),f,b
 29442  00199A  0C0F               	retlw	15
 29443  00199C                     __end_ofPL366:
 29444                           	opt stack 0
 29445                           tosu	equ	0xFFF
 29446                           tosh	equ	0xFFE
 29447                           tosl	equ	0xFFD
 29448                           pclath	equ	0xFFA
 29449                           tblptru	equ	0xFF8
 29450                           tblptrh	equ	0xFF7
 29451                           tblptrl	equ	0xFF6
 29452                           tablat	equ	0xFF5
 29453                           prodh	equ	0xFF4
 29454                           prodl	equ	0xFF3
 29455                           intcon	equ	0xFF2
 29456                           indf0	equ	0xFEF
 29457                           postinc0	equ	0xFEE
 29458                           plusw0	equ	0xFEB
 29459                           fsr0h	equ	0xFEA
 29460                           fsr0l	equ	0xFE9
 29461                           wreg	equ	0xFE8
 29462                           postinc1	equ	0xFE6
 29463                           postdec1	equ	0xFE5
 29464                           plusw1	equ	0xFE3
 29465                           fsr1h	equ	0xFE2
 29466                           fsr1l	equ	0xFE1
 29467                           indf2	equ	0xFDF
 29468                           postinc2	equ	0xFDE
 29469                           postdec2	equ	0xFDD
 29470                           plusw2	equ	0xFDB
 29471                           fsr2h	equ	0xFDA
 29472                           fsr2l	equ	0xFD9
 29473                           status	equ	0xFD8
 29474                           
 29475 ;; *************** function _EncodeShiftRow *****************
 29476 ;; Defined at:
 29477 ;;		line 205 in file "mcc_generated_files/LoRaWAN/AES.c"
 29478 ;; Parameters:    Size  Location     Type
 29479 ;;  stateTable      2    4[BANK0 ] PTR unsigned char 
 29480 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29481 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29482 ;; Auto vars:     Size  Location     Type
 29483 ;;  temp            1    6[BANK0 ] unsigned char 
 29484 ;; Return value:  Size  Location     Type
 29485 ;;                  1    wreg      void 
 29486 ;; Registers used:
 29487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 29488 ;; Tracked objects:
 29489 ;;		On entry : F/0
 29490 ;;		On exit  : F/0
 29491 ;;		Unchanged: 0/0
 29492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 29493 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29497 ;;Total ram usage:        3 bytes
 29498 ;; Hardware stack levels used:    1
 29499 ;; Hardware stack levels required when called:    7
 29500 ;; This function calls:
 29501 ;;		Nothing
 29502 ;; This function is called by:
 29503 ;;		_AESEncode
 29504 ;; This function uses a non-reentrant model
 29505 ;;
 29506                           
 29507                           	psect	text151
 29508  003A3E                     __ptext151:
 29509                           	opt stack 0
 29510  003A3E                     _EncodeShiftRow:
 29511                           	opt stack 17
 29512                           
 29513                           ; BSR set to: 0
 29514                           ;AES.c: 207: unsigned char temp;
 29515                           ;AES.c: 212: temp=stateTable[1];
 29516                           
 29517                           ; BSR set to: 0
 29518                           ;incstack = 0
 29519  003A3E  EE20 F001          	lfsr	2,1
 29520  003A42  D85D               	call	PL64	;call to abstracted procedure
 29521  003A44  50DF               	movf	indf2,w,c
 29522  003A46  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29523                           
 29524                           ; BSR set to: 0
 29525                           ;AES.c: 213: stateTable[1]=stateTable[5];
 29526  003A48  EE20 F005          	lfsr	2,5
 29527  003A4C  D858               	call	PL64	;call to abstracted procedure
 29528  003A4E  EE00 F001          	lfsr	0,1
 29529  003A52  D84E               	call	PL58	;call to abstracted procedure
 29530                           
 29531                           ; BSR set to: 0
 29532                           ;AES.c: 214: stateTable[5]=stateTable[9];
 29533  003A54  EE20 F009          	lfsr	2,9
 29534  003A58  D852               	call	PL64	;call to abstracted procedure
 29535  003A5A  EE00 F005          	lfsr	0,5
 29536  003A5E  D848               	call	PL58	;call to abstracted procedure
 29537                           
 29538                           ; BSR set to: 0
 29539                           ;AES.c: 215: stateTable[9]=stateTable[13];
 29540  003A60  EE20 F00D          	lfsr	2,13
 29541  003A64  D84C               	call	PL64	;call to abstracted procedure
 29542  003A66  EE00 F009          	lfsr	0,9
 29543  003A6A  D842               	call	PL58	;call to abstracted procedure
 29544                           
 29545                           ; BSR set to: 0
 29546                           ;AES.c: 216: stateTable[13]=temp;
 29547  003A6C  EE20 F00D          	lfsr	2,13
 29548  003A70  D846               	call	PL64	;call to abstracted procedure
 29549  003A72  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29550                           
 29551                           ; BSR set to: 0
 29552                           ;AES.c: 219: temp=stateTable[2];
 29553  003A76  EE20 F002          	lfsr	2,2
 29554  003A7A  D841               	call	PL64	;call to abstracted procedure
 29555  003A7C  50DF               	movf	indf2,w,c
 29556  003A7E  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29557                           
 29558                           ; BSR set to: 0
 29559                           ;AES.c: 220: stateTable[2]=stateTable[10];
 29560  003A80  EE20 F00A          	lfsr	2,10
 29561  003A84  D83C               	call	PL64	;call to abstracted procedure
 29562  003A86  EE00 F002          	lfsr	0,2
 29563  003A8A  D832               	call	PL58	;call to abstracted procedure
 29564                           
 29565                           ;AES.c: 221: stateTable[10]=temp;
 29566  003A8C  EE20 F00A          	lfsr	2,10
 29567  003A90  D836               	call	PL64	;call to abstracted procedure
 29568  003A92  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29569                           
 29570                           ;AES.c: 222: temp=stateTable[14];
 29571  003A96  EE20 F00E          	lfsr	2,14
 29572  003A9A  D831               	call	PL64	;call to abstracted procedure
 29573  003A9C  50DF               	movf	indf2,w,c
 29574  003A9E  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29575                           
 29576                           ; BSR set to: 0
 29577                           ;AES.c: 223: stateTable[14]=stateTable[6];
 29578  003AA0  EE20 F006          	lfsr	2,6
 29579  003AA4  D82C               	call	PL64	;call to abstracted procedure
 29580  003AA6  EE00 F00E          	lfsr	0,14
 29581  003AAA  D822               	call	PL58	;call to abstracted procedure
 29582                           
 29583                           ; BSR set to: 0
 29584                           ;AES.c: 224: stateTable[6]=temp;
 29585  003AAC  EE20 F006          	lfsr	2,6
 29586  003AB0  D826               	call	PL64	;call to abstracted procedure
 29587  003AB2  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29588                           
 29589                           ; BSR set to: 0
 29590                           ;AES.c: 227: temp=stateTable[3];
 29591  003AB6  EE20 F003          	lfsr	2,3
 29592  003ABA  D821               	call	PL64	;call to abstracted procedure
 29593  003ABC  50DF               	movf	indf2,w,c
 29594  003ABE  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29595                           
 29596                           ; BSR set to: 0
 29597                           ;AES.c: 228: stateTable[3]=stateTable[15];
 29598  003AC0  EE20 F00F          	lfsr	2,15
 29599  003AC4  D81C               	call	PL64	;call to abstracted procedure
 29600  003AC6  EE00 F003          	lfsr	0,3
 29601  003ACA  D812               	call	PL58	;call to abstracted procedure
 29602                           
 29603                           ; BSR set to: 0
 29604                           ;AES.c: 229: stateTable[15]=stateTable[11];
 29605  003ACC  EE20 F00B          	lfsr	2,11
 29606  003AD0  D816               	call	PL64	;call to abstracted procedure
 29607  003AD2  EE00 F00F          	lfsr	0,15
 29608  003AD6  D80C               	call	PL58	;call to abstracted procedure
 29609                           
 29610                           ; BSR set to: 0
 29611                           ;AES.c: 230: stateTable[11]=stateTable[7];
 29612  003AD8  EE20 F007          	lfsr	2,7
 29613  003ADC  D810               	call	PL64	;call to abstracted procedure
 29614  003ADE  EE00 F00B          	lfsr	0,11
 29615  003AE2  D806               	call	PL58	;call to abstracted procedure
 29616                           
 29617                           ;AES.c: 231: stateTable[7]=temp;
 29618  003AE4  EE20 F007          	lfsr	2,7
 29619  003AE8  D80A               	call	PL64	;call to abstracted procedure
 29620  003AEA  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29621                           
 29622                           ; BSR set to: 0
 29623  003AEE  0012               	return		;funcret
 29624  003AF0                     __end_of_EncodeShiftRow:
 29625                           	opt stack 0
 29626  003AF0                     PL58:
 29627                           	opt stack 17
 29628  003AF0  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29629  003AF2  26E9               	addwf	fsr0l,f,c
 29630  003AF4  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29631  003AF6  22EA               	addwfc	fsr0h,f,c
 29632  003AF8  CFDF FFEF          	movff	indf2,indf0
 29633  003AFC  0012               	return	
 29634  003AFE                     __end_ofPL58:
 29635                           	opt stack 0
 29636  003AFE                     PL64:
 29637                           	opt stack 17
 29638  003AFE  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29639  003B00  26D9               	addwf	fsr2l,f,c
 29640  003B02  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29641  003B04  22DA               	addwfc	fsr2h,f,c
 29642  003B06  0012               	return	
 29643  003B08                     __end_ofPL64:
 29644                           	opt stack 0
 29645                           tosu	equ	0xFFF
 29646                           tosh	equ	0xFFE
 29647                           tosl	equ	0xFFD
 29648                           pclath	equ	0xFFA
 29649                           tblptru	equ	0xFF8
 29650                           tblptrh	equ	0xFF7
 29651                           tblptrl	equ	0xFF6
 29652                           tablat	equ	0xFF5
 29653                           prodh	equ	0xFF4
 29654                           prodl	equ	0xFF3
 29655                           intcon	equ	0xFF2
 29656                           indf0	equ	0xFEF
 29657                           postinc0	equ	0xFEE
 29658                           plusw0	equ	0xFEB
 29659                           fsr0h	equ	0xFEA
 29660                           fsr0l	equ	0xFE9
 29661                           wreg	equ	0xFE8
 29662                           postinc1	equ	0xFE6
 29663                           postdec1	equ	0xFE5
 29664                           plusw1	equ	0xFE3
 29665                           fsr1h	equ	0xFE2
 29666                           fsr1l	equ	0xFE1
 29667                           indf2	equ	0xFDF
 29668                           postinc2	equ	0xFDE
 29669                           postdec2	equ	0xFDD
 29670                           plusw2	equ	0xFDB
 29671                           fsr2h	equ	0xFDA
 29672                           fsr2l	equ	0xFD9
 29673                           status	equ	0xFD8
 29674                           
 29675 ;; *************** function _EncKeySchedule *****************
 29676 ;; Defined at:
 29677 ;;		line 160 in file "mcc_generated_files/LoRaWAN/AES.c"
 29678 ;; Parameters:    Size  Location     Type
 29679 ;;  key             1    4[BANK0 ] PTR unsigned char 
 29680 ;;		 -> AESEncode@key(16), 
 29681 ;; Auto vars:     Size  Location     Type
 29682 ;;		None
 29683 ;; Return value:  Size  Location     Type
 29684 ;;                  1    wreg      void 
 29685 ;; Registers used:
 29686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29687 ;; Tracked objects:
 29688 ;;		On entry : F/0
 29689 ;;		On exit  : F/0
 29690 ;;		Unchanged: 0/0
 29691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 29692 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29694 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29696 ;;Total ram usage:        6 bytes
 29697 ;; Hardware stack levels used:    1
 29698 ;; Hardware stack levels required when called:    7
 29699 ;; This function calls:
 29700 ;;		Nothing
 29701 ;; This function is called by:
 29702 ;;		_AESEncode
 29703 ;; This function uses a non-reentrant model
 29704 ;;
 29705                           
 29706                           	psect	text152
 29707  002BFA                     __ptext152:
 29708                           	opt stack 0
 29709  002BFA                     _EncKeySchedule:
 29710                           	opt stack 17
 29711                           
 29712                           ; BSR set to: 0
 29713                           ;AES.c: 163: key[0]^=STable[key[13]];
 29714                           
 29715                           ; BSR set to: 0
 29716                           ;incstack = 0
 29717  002BFA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29718  002BFC  6ED9               	movwf	fsr2l,c
 29719  002BFE  6ADA               	clrf	fsr2h,c
 29720  002C00  0E0D               	movlw	13
 29721  002C02  D860               	call	PL20	;call to abstracted procedure
 29722  002C04  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29723                           
 29724                           ;AES.c: 164: key[1]^=STable[key[14]];
 29725  002C06  D886               	call	PL68	;call to abstracted procedure
 29726  002C08  0E0E               	movlw	14
 29727  002C0A  D85C               	call	PL20	;call to abstracted procedure
 29728  002C0C  2AD9               	incf	fsr2l,f,c
 29729  002C0E  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29730                           
 29731                           ;AES.c: 165: key[2]^=STable[key[15]];
 29732  002C10  D881               	call	PL68	;call to abstracted procedure
 29733  002C12  0E0F               	movlw	15
 29734  002C14  D857               	call	PL20	;call to abstracted procedure
 29735  002C16  0E02               	movlw	2
 29736  002C18  26D9               	addwf	fsr2l,f,c
 29737  002C1A  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29738                           
 29739                           ;AES.c: 166: key[3]^=STable[key[12]];
 29740  002C1C  D87B               	call	PL68	;call to abstracted procedure
 29741  002C1E  0E0C               	movlw	12
 29742  002C20  D851               	call	PL20	;call to abstracted procedure
 29743  002C22  0E03               	movlw	3
 29744  002C24  26D9               	addwf	fsr2l,f,c
 29745  002C26  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29746                           
 29747                           ; BSR set to: 0
 29748                           ;AES.c: 168: key[0]^=_rcon;
 29749  002C28  D875               	call	PL68	;call to abstracted procedure
 29750  002C2A  5046               	movf	__rcon,w,c
 29751  002C2C  1ADF               	xorwf	indf2,f,c
 29752                           
 29753                           ; BSR set to: 0
 29754                           ;AES.c: 169: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 29755  002C2E  0E7F               	movlw	127
 29756  002C30  6446               	cpfsgt	__rcon,c
 29757  002C32  D00C               	goto	l11824
 29758                           
 29759                           ; BSR set to: 0
 29760  002C34  0E1B               	movlw	27
 29761  002C36  C046  F065         	movff	__rcon,??_EncKeySchedule
 29762  002C3A  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29763  002C3C  90D8               	bcf	status,0,c
 29764  002C3E  3765               	rlcf	??_EncKeySchedule& (0+255),f,b
 29765  002C40  3766               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 29766  002C42  1965               	xorwf	??_EncKeySchedule& (0+255),w,b
 29767  002C44  6F68               	movwf	_EncKeySchedule$3770& (0+255),b
 29768  002C46  5166               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 29769  002C48  6F69               	movwf	(_EncKeySchedule$3770+1)& (0+255),b
 29770  002C4A  D005               	goto	l11826
 29771  002C4C                     l11824:
 29772                           
 29773                           ; BSR set to: 0
 29774  002C4C  90D8               	bcf	status,0,c
 29775  002C4E  3446               	rlcf	__rcon,w,c
 29776  002C50  6F68               	movwf	_EncKeySchedule$3770& (0+255),b
 29777  002C52  6B69               	clrf	(_EncKeySchedule$3770+1)& (0+255),b
 29778  002C54  3769               	rlcf	(_EncKeySchedule$3770+1)& (0+255),f,b
 29779  002C56                     l11826:
 29780                           
 29781                           ; BSR set to: 0
 29782  002C56  C068  F046         	movff	_EncKeySchedule$3770,__rcon
 29783                           
 29784                           ; BSR set to: 0
 29785                           ;AES.c: 172: key[4]^=key[0];
 29786  002C5A  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29787  002C5C  6ED9               	movwf	fsr2l,c
 29788  002C5E  6ADA               	clrf	fsr2h,c
 29789  002C60  D853               	call	PL50	;call to abstracted procedure
 29790  002C62  0E04               	movlw	4
 29791                           
 29792                           ; BSR set to: 0
 29793                           ;AES.c: 173: key[5]^=key[1];
 29794  002C64  D843               	call	PL26	;call to abstracted procedure
 29795  002C66  2AD9               	incf	fsr2l,f,c
 29796  002C68  D84F               	call	PL50	;call to abstracted procedure
 29797  002C6A  0E05               	movlw	5
 29798                           
 29799                           ; BSR set to: 0
 29800                           ;AES.c: 174: key[6]^=key[2];
 29801  002C6C  D83F               	call	PL26	;call to abstracted procedure
 29802  002C6E  0E02               	movlw	2
 29803  002C70  D844               	call	PL40	;call to abstracted procedure
 29804  002C72  0E06               	movlw	6
 29805                           
 29806                           ; BSR set to: 0
 29807                           ;AES.c: 175: key[7]^=key[3];
 29808  002C74  D83B               	call	PL26	;call to abstracted procedure
 29809  002C76  0E03               	movlw	3
 29810  002C78  D840               	call	PL40	;call to abstracted procedure
 29811  002C7A  0E07               	movlw	7
 29812                           
 29813                           ; BSR set to: 0
 29814                           ;AES.c: 178: key[8]^=key[4];
 29815  002C7C  D837               	call	PL26	;call to abstracted procedure
 29816  002C7E  0E04               	movlw	4
 29817  002C80  D83C               	call	PL40	;call to abstracted procedure
 29818  002C82  0E08               	movlw	8
 29819                           
 29820                           ; BSR set to: 0
 29821                           ;AES.c: 179: key[9]^=key[5];
 29822  002C84  D833               	call	PL26	;call to abstracted procedure
 29823  002C86  0E05               	movlw	5
 29824  002C88  D838               	call	PL40	;call to abstracted procedure
 29825  002C8A  0E09               	movlw	9
 29826                           
 29827                           ; BSR set to: 0
 29828                           ;AES.c: 180: key[10]^=key[6];
 29829  002C8C  D82F               	call	PL26	;call to abstracted procedure
 29830  002C8E  0E06               	movlw	6
 29831  002C90  D834               	call	PL40	;call to abstracted procedure
 29832  002C92  0E0A               	movlw	10
 29833                           
 29834                           ; BSR set to: 0
 29835                           ;AES.c: 181: key[11]^=key[7];
 29836  002C94  D82B               	call	PL26	;call to abstracted procedure
 29837  002C96  0E07               	movlw	7
 29838  002C98  D830               	call	PL40	;call to abstracted procedure
 29839  002C9A  0E0B               	movlw	11
 29840                           
 29841                           ; BSR set to: 0
 29842                           ;AES.c: 184: key[12]^=key[8];
 29843  002C9C  D827               	call	PL26	;call to abstracted procedure
 29844  002C9E  0E08               	movlw	8
 29845  002CA0  D82C               	call	PL40	;call to abstracted procedure
 29846  002CA2  0E0C               	movlw	12
 29847                           
 29848                           ; BSR set to: 0
 29849                           ;AES.c: 185: key[13]^=key[9];
 29850  002CA4  D823               	call	PL26	;call to abstracted procedure
 29851  002CA6  0E09               	movlw	9
 29852  002CA8  D828               	call	PL40	;call to abstracted procedure
 29853  002CAA  0E0D               	movlw	13
 29854                           
 29855                           ; BSR set to: 0
 29856                           ;AES.c: 186: key[14]^=key[10];
 29857  002CAC  D81F               	call	PL26	;call to abstracted procedure
 29858  002CAE  0E0A               	movlw	10
 29859  002CB0  D824               	call	PL40	;call to abstracted procedure
 29860  002CB2  0E0E               	movlw	14
 29861                           
 29862                           ; BSR set to: 0
 29863                           ;AES.c: 187: key[15]^=key[11];
 29864  002CB4  D81B               	call	PL26	;call to abstracted procedure
 29865  002CB6  0E0B               	movlw	11
 29866  002CB8  D820               	call	PL40	;call to abstracted procedure
 29867  002CBA  0E0F               	movlw	15
 29868  002CBC  26D9               	addwf	fsr2l,f,c
 29869  002CBE  5165               	movf	??_EncKeySchedule& (0+255),w,b
 29870  002CC0  1ADF               	xorwf	indf2,f,c
 29871                           
 29872                           ; BSR set to: 0
 29873  002CC2  0012               	return		;funcret
 29874  002CC4                     __end_of_EncKeySchedule:
 29875                           	opt stack 0
 29876  002CC4                     PL20:
 29877                           	opt stack 17
 29878  002CC4  26D9               	addwf	fsr2l,f,c
 29879  002CC6  50DF               	movf	indf2,w,c
 29880  002CC8  6F65               	movwf	??_EncKeySchedule& (0+255),b
 29881  002CCA  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29882  002CCC  0E6D               	movlw	low _STable
 29883  002CCE  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 29884  002CD0  6EF6               	movwf	tblptrl,c
 29885  002CD2  0EFE               	movlw	high _STable
 29886  002CD4  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 29887  002CD6  6EF7               	movwf	tblptrh,c
 29888  002CD8                     	if	1	;There are 3 active tblptr bytes
 29889  002CD8  6AF8               	clrf	tblptru,c
 29890  002CDA  0E00               	movlw	low (__mediumconst shr (0+16))
 29891  002CDC  22F8               	addwfc	tblptru,f,c
 29892  002CDE                     	endif
 29893  002CDE  0008               	tblrd		*
 29894  002CE0  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 29895  002CE4  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29896  002CE6  6ED9               	movwf	fsr2l,c
 29897  002CE8  6ADA               	clrf	fsr2h,c
 29898  002CEA  0012               	return	
 29899  002CEC                     __end_ofPL20:
 29900                           	opt stack 0
 29901  002CEC                     PL26:
 29902                           	opt stack 17
 29903  002CEC  26D9               	addwf	fsr2l,f,c
 29904  002CEE  5165               	movf	??_EncKeySchedule& (0+255),w,b
 29905  002CF0  1ADF               	xorwf	indf2,f,c
 29906  002CF2  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29907  002CF4  6ED9               	movwf	fsr2l,c
 29908  002CF6  6ADA               	clrf	fsr2h,c
 29909  002CF8  0012               	return	
 29910  002CFA                     __end_ofPL26:
 29911                           	opt stack 0
 29912  002CFA                     PL40:
 29913                           	opt stack 17
 29914  002CFA  26D9               	addwf	fsr2l,f,c
 29915  002CFC  50DF               	movf	indf2,w,c
 29916  002CFE  6F65               	movwf	??_EncKeySchedule& (0+255),b
 29917  002D00  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29918  002D02  6ED9               	movwf	fsr2l,c
 29919  002D04  6ADA               	clrf	fsr2h,c
 29920  002D06  0012               	return	
 29921  002D08                     __end_ofPL40:
 29922                           	opt stack 0
 29923  002D08                     PL50:
 29924                           	opt stack 17
 29925  002D08  50DF               	movf	indf2,w,c
 29926  002D0A  6F65               	movwf	??_EncKeySchedule& (0+255),b
 29927  002D0C  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29928  002D0E  6ED9               	movwf	fsr2l,c
 29929  002D10  6ADA               	clrf	fsr2h,c
 29930  002D12  0012               	return	
 29931  002D14                     __end_ofPL50:
 29932                           	opt stack 0
 29933  002D14                     PL68:
 29934                           	opt stack 17
 29935  002D14  1ADF               	xorwf	indf2,f,c
 29936  002D16  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29937  002D18  6ED9               	movwf	fsr2l,c
 29938  002D1A  6ADA               	clrf	fsr2h,c
 29939  002D1C  0012               	return	
 29940  002D1E                     __end_ofPL68:
 29941                           	opt stack 0
 29942                           tosu	equ	0xFFF
 29943                           tosh	equ	0xFFE
 29944                           tosl	equ	0xFFD
 29945                           pclath	equ	0xFFA
 29946                           tblptru	equ	0xFF8
 29947                           tblptrh	equ	0xFF7
 29948                           tblptrl	equ	0xFF6
 29949                           tablat	equ	0xFF5
 29950                           prodh	equ	0xFF4
 29951                           prodl	equ	0xFF3
 29952                           intcon	equ	0xFF2
 29953                           indf0	equ	0xFEF
 29954                           postinc0	equ	0xFEE
 29955                           plusw0	equ	0xFEB
 29956                           fsr0h	equ	0xFEA
 29957                           fsr0l	equ	0xFE9
 29958                           wreg	equ	0xFE8
 29959                           postinc1	equ	0xFE6
 29960                           postdec1	equ	0xFE5
 29961                           plusw1	equ	0xFE3
 29962                           fsr1h	equ	0xFE2
 29963                           fsr1l	equ	0xFE1
 29964                           indf2	equ	0xFDF
 29965                           postinc2	equ	0xFDE
 29966                           postdec2	equ	0xFDD
 29967                           plusw2	equ	0xFDB
 29968                           fsr2h	equ	0xFDA
 29969                           fsr2l	equ	0xFD9
 29970                           status	equ	0xFD8
 29971                           
 29972 ;; *************** function _LORAWAN_Init *****************
 29973 ;; Defined at:
 29974 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 29975 ;; Parameters:    Size  Location     Type
 29976 ;;  RxPayload       2   76[BANK0 ] PTR FTN(PTR unsigned cha
 29977 ;;		 -> RxDataDone(1), 
 29978 ;;  RxJoinRespon    2   78[BANK0 ] PTR FTN(unsigned char ,)
 29979 ;;		 -> RxJoinResponse(1), 
 29980 ;; Auto vars:     Size  Location     Type
 29981 ;;		None
 29982 ;; Return value:  Size  Location     Type
 29983 ;;                  1    wreg      void 
 29984 ;; Registers used:
 29985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29986 ;; Tracked objects:
 29987 ;;		On entry : F/0
 29988 ;;		On exit  : D/0
 29989 ;;		Unchanged: 0/0
 29990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 29991 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29994 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29995 ;;Total ram usage:        4 bytes
 29996 ;; Hardware stack levels used:    1
 29997 ;; Hardware stack levels required when called:   13
 29998 ;; This function calls:
 29999 ;;		_CreateAllSoftwareTimers
 30000 ;;		_LORAWAN_Reset
 30001 ;;		_RADIO_Init
 30002 ;;		_RADIO_ReadRandom
 30003 ;;		_SetCallbackSoftwareTimers
 30004 ;;		_StopAllSoftwareTimers
 30005 ;;		_srand
 30006 ;; This function is called by:
 30007 ;;		_main
 30008 ;; This function uses a non-reentrant model
 30009 ;;
 30010                           
 30011                           	psect	text153
 30012  00541C                     __ptext153:
 30013                           	opt stack 0
 30014  00541C                     _LORAWAN_Init:
 30015                           	opt stack 17
 30016                           
 30017                           ; BSR set to: 0
 30018                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 30019                           
 30020                           ; BSR set to: 0
 30021                           ;incstack = 0
 30022  00541C  0102               	movlb	2	; () banked
 30023  00541E  51F0               	movf	(_loRa+240)& (0+255),w,b
 30024  005420  E108               	bnz	l15758
 30025                           
 30026                           ; BSR set to: 2
 30027                           ;lorawan_eu.c: 127: {
 30028                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 30029  005422  EC48  F029         	call	_CreateAllSoftwareTimers	;wreg free
 30030                           
 30031                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 30032  005426  ECC1  F020         	call	_SetCallbackSoftwareTimers	;wreg free
 30033                           
 30034                           ; BSR set to: 0
 30035                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 30036  00542A  0E01               	movlw	1
 30037  00542C  0102               	movlb	2	; () banked
 30038  00542E  6FF0               	movwf	(_loRa+240)& (0+255),b
 30039                           
 30040                           ;lorawan_eu.c: 131: }
 30041  005430  D002               	goto	l15760
 30042  005432                     l15758:
 30043                           
 30044                           ; BSR set to: 2
 30045                           ;lorawan_eu.c: 132: else
 30046                           ;lorawan_eu.c: 133: {
 30047                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 30048  005432  ECE7  F029         	call	_StopAllSoftwareTimers	;wreg free
 30049  005436                     l15760:
 30050                           
 30051                           ;lorawan_eu.c: 135: }
 30052                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 30053  005436  C0AC  F16E         	movff	LORAWAN_Init@RxPayload,_rxPayload
 30054  00543A  C0AD  F16F         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 30055                           
 30056                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 30057  00543E  C0AE  F170         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 30058  005442  C0AF  F171         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 30059                           
 30060                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 30061  005446  0EFF               	movlw	low (_radioBuffer+16)
 30062  005448  0100               	movlb	0	; () banked
 30063  00544A  EC8C  F014         	call	PL172	;call to abstracted procedure
 30064  00544E  ECB5  F011         	call	_RADIO_Init	;wreg free
 30065                           
 30066                           ; BSR set to: 1
 30067                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 30068  005452  ECDD  F024         	call	_RADIO_ReadRandom	;wreg free
 30069  005456  C070  F075         	movff	?_RADIO_ReadRandom,srand@x
 30070  00545A  C071  F076         	movff	?_RADIO_ReadRandom+1,srand@x+1
 30071  00545E  ECB6  F030         	call	_srand	;wreg free
 30072                           
 30073                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 30074  005462  0E00               	movlw	0
 30075  005464  EFFF  F013         	goto	_LORAWAN_Reset
 30076  005468                     __end_of_LORAWAN_Init:
 30077                           	opt stack 0
 30078                           tosu	equ	0xFFF
 30079                           tosh	equ	0xFFE
 30080                           tosl	equ	0xFFD
 30081                           pclath	equ	0xFFA
 30082                           tblptru	equ	0xFF8
 30083                           tblptrh	equ	0xFF7
 30084                           tblptrl	equ	0xFF6
 30085                           tablat	equ	0xFF5
 30086                           prodh	equ	0xFF4
 30087                           prodl	equ	0xFF3
 30088                           intcon	equ	0xFF2
 30089                           indf0	equ	0xFEF
 30090                           postinc0	equ	0xFEE
 30091                           plusw0	equ	0xFEB
 30092                           fsr0h	equ	0xFEA
 30093                           fsr0l	equ	0xFE9
 30094                           wreg	equ	0xFE8
 30095                           postinc1	equ	0xFE6
 30096                           postdec1	equ	0xFE5
 30097                           plusw1	equ	0xFE3
 30098                           fsr1h	equ	0xFE2
 30099                           fsr1l	equ	0xFE1
 30100                           indf2	equ	0xFDF
 30101                           postinc2	equ	0xFDE
 30102                           postdec2	equ	0xFDD
 30103                           plusw2	equ	0xFDB
 30104                           fsr2h	equ	0xFDA
 30105                           fsr2l	equ	0xFD9
 30106                           status	equ	0xFD8
 30107                           
 30108 ;; *************** function _srand *****************
 30109 ;; Defined at:
 30110 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 30111 ;; Parameters:    Size  Location     Type
 30112 ;;  x               2   21[BANK0 ] unsigned int 
 30113 ;; Auto vars:     Size  Location     Type
 30114 ;;		None
 30115 ;; Return value:  Size  Location     Type
 30116 ;;                  1    wreg      void 
 30117 ;; Registers used:
 30118 ;;		status,2
 30119 ;; Tracked objects:
 30120 ;;		On entry : 1/0
 30121 ;;		On exit  : 1/0
 30122 ;;		Unchanged: 1/0
 30123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 30124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30128 ;;Total ram usage:        2 bytes
 30129 ;; Hardware stack levels used:    1
 30130 ;; Hardware stack levels required when called:    7
 30131 ;; This function calls:
 30132 ;;		Nothing
 30133 ;; This function is called by:
 30134 ;;		_LORAWAN_Init
 30135 ;; This function uses a non-reentrant model
 30136 ;;
 30137                           
 30138                           	psect	text154
 30139  00616C                     __ptext154:
 30140                           	opt stack 0
 30141  00616C                     _srand:
 30142                           	opt stack 22
 30143                           
 30144                           ;incstack = 0
 30145  00616C  C075  F056         	movff	srand@x,_randx
 30146  006170  C076  F057         	movff	srand@x+1,_randx+1
 30147  006174  6A58               	clrf	_randx+2,c
 30148  006176  6A59               	clrf	_randx+3,c
 30149  006178  0012               	return		;funcret
 30150  00617A                     __end_of_srand:
 30151                           	opt stack 0
 30152                           tosu	equ	0xFFF
 30153                           tosh	equ	0xFFE
 30154                           tosl	equ	0xFFD
 30155                           pclath	equ	0xFFA
 30156                           tblptru	equ	0xFF8
 30157                           tblptrh	equ	0xFF7
 30158                           tblptrl	equ	0xFF6
 30159                           tablat	equ	0xFF5
 30160                           prodh	equ	0xFF4
 30161                           prodl	equ	0xFF3
 30162                           intcon	equ	0xFF2
 30163                           indf0	equ	0xFEF
 30164                           postinc0	equ	0xFEE
 30165                           plusw0	equ	0xFEB
 30166                           fsr0h	equ	0xFEA
 30167                           fsr0l	equ	0xFE9
 30168                           wreg	equ	0xFE8
 30169                           postinc1	equ	0xFE6
 30170                           postdec1	equ	0xFE5
 30171                           plusw1	equ	0xFE3
 30172                           fsr1h	equ	0xFE2
 30173                           fsr1l	equ	0xFE1
 30174                           indf2	equ	0xFDF
 30175                           postinc2	equ	0xFDE
 30176                           postdec2	equ	0xFDD
 30177                           plusw2	equ	0xFDB
 30178                           fsr2h	equ	0xFDA
 30179                           fsr2l	equ	0xFD9
 30180                           status	equ	0xFD8
 30181                           
 30182 ;; *************** function _SetCallbackSoftwareTimers *****************
 30183 ;; Defined at:
 30184 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30185 ;; Parameters:    Size  Location     Type
 30186 ;;		None
 30187 ;; Auto vars:     Size  Location     Type
 30188 ;;		None
 30189 ;; Return value:  Size  Location     Type
 30190 ;;                  1    wreg      void 
 30191 ;; Registers used:
 30192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30193 ;; Tracked objects:
 30194 ;;		On entry : F/2
 30195 ;;		On exit  : F/0
 30196 ;;		Unchanged: 0/0
 30197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 30198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30202 ;;Total ram usage:        0 bytes
 30203 ;; Hardware stack levels used:    1
 30204 ;; Hardware stack levels required when called:    8
 30205 ;; This function calls:
 30206 ;;		_SwTimerSetCallback
 30207 ;; This function is called by:
 30208 ;;		_LORAWAN_Init
 30209 ;; This function uses a non-reentrant model
 30210 ;;
 30211                           
 30212                           	psect	text155
 30213  004182                     __ptext155:
 30214                           	opt stack 0
 30215  004182                     _SetCallbackSoftwareTimers:
 30216                           	opt stack 21
 30217                           
 30218                           ; BSR set to: 2
 30219                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 30220                           
 30221                           ;incstack = 0
 30222  004182  0E24               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30223  004184  0100               	movlb	0	; () banked
 30224  004186  D84D               	call	PL352	;call to abstracted procedure
 30225  004188  51E2               	movf	(_loRa+226)& (0+255),w,b
 30226  00418A  ECED  F02D         	call	_SwTimerSetCallback
 30227                           
 30228                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 30229  00418E  D842               	call	PL314	;call to abstracted procedure
 30230  004190  51E3               	movf	(_loRa+227)& (0+255),w,b
 30231  004192  ECED  F02D         	call	_SwTimerSetCallback
 30232                           
 30233                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 30234  004196  0E54               	movlw	low _LORAWAN_LinkCheckCallback
 30235  004198  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30236  00419A  0E2F               	movlw	high _LORAWAN_LinkCheckCallback
 30237  00419C  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30238  00419E  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30239  0041A0  0102               	movlb	2	; () banked
 30240  0041A2  51E7               	movf	(_loRa+231)& (0+255),w,b
 30241  0041A4  ECED  F02D         	call	_SwTimerSetCallback
 30242                           
 30243                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 30244  0041A8  0E24               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30245  0041AA  D83B               	call	PL352	;call to abstracted procedure
 30246  0041AC  51E4               	movf	(_loRa+228)& (0+255),w,b
 30247  0041AE  ECED  F02D         	call	_SwTimerSetCallback
 30248                           
 30249                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 30250  0041B2  D830               	call	PL314	;call to abstracted procedure
 30251  0041B4  51E5               	movf	(_loRa+229)& (0+255),w,b
 30252  0041B6  ECED  F02D         	call	_SwTimerSetCallback
 30253                           
 30254                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 30255  0041BA  0E68               	movlw	low _AckRetransmissionCallback
 30256  0041BC  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30257  0041BE  0E32               	movlw	high _AckRetransmissionCallback
 30258  0041C0  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30259  0041C2  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30260  0041C4  0102               	movlb	2	; () banked
 30261  0041C6  51E8               	movf	(_loRa+232)& (0+255),w,b
 30262  0041C8  ECED  F02D         	call	_SwTimerSetCallback
 30263                           
 30264                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 30265  0041CC  0E64               	movlw	low _AutomaticReplyCallback
 30266  0041CE  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30267  0041D0  0E5F               	movlw	high _AutomaticReplyCallback
 30268  0041D2  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30269  0041D4  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30270  0041D6  0102               	movlb	2	; () banked
 30271  0041D8  51E6               	movf	(_loRa+230)& (0+255),w,b
 30272  0041DA  ECED  F02D         	call	_SwTimerSetCallback
 30273                           
 30274                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 30275  0041DE  0E20               	movlw	low _UnconfirmedTransmissionCallback
 30276  0041E0  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30277  0041E2  0E4B               	movlw	high _UnconfirmedTransmissionCallback
 30278  0041E4  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30279  0041E6  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30280  0041E8  0102               	movlb	2	; () banked
 30281  0041EA  51EA               	movf	(_loRa+234)& (0+255),w,b
 30282  0041EC  ECED  F02D         	call	_SwTimerSetCallback
 30283                           
 30284                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 30285  0041F0  0ED0               	movlw	low _UpdateJoinSuccessState
 30286  0041F2  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30287  0041F4  0E3B               	movlw	high _UpdateJoinSuccessState
 30288  0041F6  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30289  0041F8  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30290  0041FA  0102               	movlb	2	; () banked
 30291  0041FC  51F3               	movf	(_loRa+243)& (0+255),w,b
 30292  0041FE  ECED  F02D         	call	_SwTimerSetCallback
 30293                           
 30294                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 30295  004202  0EC8               	movlw	low _DutyCycleCallback
 30296  004204  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30297  004206  0E1B               	movlw	high _DutyCycleCallback
 30298  004208  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30299  00420A  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30300  00420C  0102               	movlb	2	; () banked
 30301  00420E  51E9               	movf	(_loRa+233)& (0+255),w,b
 30302  004210  EFED  F02D         	goto	_SwTimerSetCallback
 30303  004214                     __end_of_SetCallbackSoftwareTimers:
 30304                           	opt stack 0
 30305  004214                     PL314:
 30306                           	opt stack 21
 30307  004214  0E04               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30308  004216  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30309  004218  0E3E               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30310  00421A  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30311  00421C  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30312  00421E  0102               	movlb	2	; () banked
 30313  004220  0012               	return	
 30314  004222                     __end_ofPL314:
 30315                           	opt stack 0
 30316  004222                     PL352:
 30317                           	opt stack 21
 30318  004222  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30319  004224  0E44               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30320  004226  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30321  004228  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30322  00422A  0102               	movlb	2	; () banked
 30323  00422C  0012               	return	
 30324  00422E                     __end_ofPL352:
 30325                           	opt stack 0
 30326                           tosu	equ	0xFFF
 30327                           tosh	equ	0xFFE
 30328                           tosl	equ	0xFFD
 30329                           pclath	equ	0xFFA
 30330                           tblptru	equ	0xFF8
 30331                           tblptrh	equ	0xFF7
 30332                           tblptrl	equ	0xFF6
 30333                           tablat	equ	0xFF5
 30334                           prodh	equ	0xFF4
 30335                           prodl	equ	0xFF3
 30336                           intcon	equ	0xFF2
 30337                           indf0	equ	0xFEF
 30338                           postinc0	equ	0xFEE
 30339                           plusw0	equ	0xFEB
 30340                           fsr0h	equ	0xFEA
 30341                           fsr0l	equ	0xFE9
 30342                           wreg	equ	0xFE8
 30343                           postinc1	equ	0xFE6
 30344                           postdec1	equ	0xFE5
 30345                           plusw1	equ	0xFE3
 30346                           fsr1h	equ	0xFE2
 30347                           fsr1l	equ	0xFE1
 30348                           indf2	equ	0xFDF
 30349                           postinc2	equ	0xFDE
 30350                           postdec2	equ	0xFDD
 30351                           plusw2	equ	0xFDB
 30352                           fsr2h	equ	0xFDA
 30353                           fsr2l	equ	0xFD9
 30354                           status	equ	0xFD8
 30355                           
 30356 ;; *************** function _RADIO_ReadRandom *****************
 30357 ;; Defined at:
 30358 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30359 ;; Parameters:    Size  Location     Type
 30360 ;;		None
 30361 ;; Auto vars:     Size  Location     Type
 30362 ;;  retVal          2   18[BANK0 ] unsigned int 
 30363 ;;  i               1   20[BANK0 ] unsigned char 
 30364 ;; Return value:  Size  Location     Type
 30365 ;;                  2   16[BANK0 ] unsigned int 
 30366 ;; Registers used:
 30367 ;;		wreg, status,2, status,0, cstack
 30368 ;; Tracked objects:
 30369 ;;		On entry : F/1
 30370 ;;		On exit  : 1/0
 30371 ;;		Unchanged: 0/0
 30372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 30373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30374 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30376 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30377 ;;Total ram usage:        5 bytes
 30378 ;; Hardware stack levels used:    1
 30379 ;; Hardware stack levels required when called:   11
 30380 ;; This function calls:
 30381 ;;		_RADIO_RegisterRead
 30382 ;;		_RADIO_RegisterWrite
 30383 ;;		_RADIO_WriteMode
 30384 ;;		_SystemBlockingWaitMs
 30385 ;; This function is called by:
 30386 ;;		_LORAWAN_Init
 30387 ;; This function uses a non-reentrant model
 30388 ;;
 30389                           
 30390                           	psect	text156
 30391  0049BA                     __ptext156:
 30392                           	opt stack 0
 30393  0049BA                     _RADIO_ReadRandom:
 30394                           	opt stack 18
 30395                           
 30396                           ; BSR set to: 1
 30397                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 30398                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 30399                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 30400                           
 30401                           ; BSR set to: 0
 30402                           ;incstack = 0
 30403  0049BA  0100               	movlb	0	; () banked
 30404  0049BC  6B72               	clrf	RADIO_ReadRandom@retVal& (0+255),b
 30405  0049BE  6B73               	clrf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 30406                           
 30407                           ; BSR set to: 0
 30408                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30409  0049C0  D82D               	call	PL386	;call to abstracted procedure
 30410  0049C2  EC75  F01B         	call	_RADIO_WriteMode
 30411                           
 30412                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 30413  0049C6  0100               	movlb	0	; () banked
 30414  0049C8  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30415  0049CA  0E11               	movlw	17
 30416  0049CC  EC79  F02F         	call	_RADIO_RegisterWrite
 30417                           
 30418                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 30419  0049D0  0E01               	movlw	1
 30420  0049D2  D828               	call	PL410	;call to abstracted procedure
 30421  0049D4  EC75  F01B         	call	_RADIO_WriteMode
 30422                           
 30423                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 30424  0049D8  0100               	movlb	0	; () banked
 30425  0049DA  6B74               	clrf	RADIO_ReadRandom@i& (0+255),b
 30426  0049DC                     l15528:
 30427                           
 30428                           ; BSR set to: 0
 30429                           ;radio_driver_SX1276.c: 1377: {
 30430                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 30431  0049DC  ECD9  F01B         	call	PL242	;call to abstracted procedure
 30432  0049E0  EC03  F02E         	call	_SystemBlockingWaitMs	;wreg free
 30433                           
 30434                           ; BSR set to: 0
 30435                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 30436  0049E4  90D8               	bcf	status,0,c
 30437  0049E6  3772               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 30438  0049E8  3773               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 30439                           
 30440                           ; BSR set to: 0
 30441                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 30442  0049EA  0E2C               	movlw	44
 30443  0049EC  EC8D  F02E         	call	_RADIO_RegisterRead
 30444  0049F0  0B01               	andlw	1
 30445  0049F2  1372               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 30446  0049F4  2B74               	incf	RADIO_ReadRandom@i& (0+255),f,b
 30447                           
 30448                           ; BSR set to: 0
 30449  0049F6  0E0F               	movlw	15
 30450  0049F8  6574               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 30451  0049FA  D7F0               	goto	l15528
 30452                           
 30453                           ; BSR set to: 0
 30454                           ;radio_driver_SX1276.c: 1381: }
 30455                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30456  0049FC  D80F               	call	PL386	;call to abstracted procedure
 30457  0049FE  EC75  F01B         	call	_RADIO_WriteMode
 30458                           
 30459                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 30460  004A02  D814               	call	PL472	;call to abstracted procedure
 30461  004A04  EC79  F02F         	call	_RADIO_RegisterWrite
 30462                           
 30463                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 30464  004A08  0100               	movlb	0	; () banked
 30465  004A0A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 30466  004A0C  0E11               	movlw	17
 30467  004A0E  EC79  F02F         	call	_RADIO_RegisterWrite
 30468                           
 30469                           ;radio_driver_SX1276.c: 1389: return retVal;
 30470  004A12  C072  F070         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 30471  004A16  C073  F071         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 30472  004A1A  0012               	return		;funcret
 30473  004A1C                     __end_of_RADIO_ReadRandom:
 30474                           	opt stack 0
 30475  004A1C                     PL386:
 30476                           	opt stack 18
 30477  004A1C  0E01               	movlw	1
 30478  004A1E  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30479  004A20  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30480  004A22  0C00               	retlw	0
 30481  004A24                     __end_ofPL386:
 30482                           	opt stack 0
 30483  004A24                     PL410:
 30484                           	opt stack 13
 30485  004A24  0100               	movlb	0	; () banked
 30486  004A26  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30487  004A28  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30488  004A2A  0C05               	retlw	5
 30489  004A2C                     __end_ofPL410:
 30490                           	opt stack 0
 30491  004A2C                     PL472:
 30492                           	opt stack 16
 30493  004A2C  0100               	movlb	0	; () banked
 30494  004A2E  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30495  004A30  0C12               	retlw	18
 30496  004A32                     __end_ofPL472:
 30497                           	opt stack 0
 30498                           tosu	equ	0xFFF
 30499                           tosh	equ	0xFFE
 30500                           tosl	equ	0xFFD
 30501                           pclath	equ	0xFFA
 30502                           tblptru	equ	0xFF8
 30503                           tblptrh	equ	0xFF7
 30504                           tblptrl	equ	0xFF6
 30505                           tablat	equ	0xFF5
 30506                           prodh	equ	0xFF4
 30507                           prodl	equ	0xFF3
 30508                           intcon	equ	0xFF2
 30509                           indf0	equ	0xFEF
 30510                           postinc0	equ	0xFEE
 30511                           plusw0	equ	0xFEB
 30512                           fsr0h	equ	0xFEA
 30513                           fsr0l	equ	0xFE9
 30514                           wreg	equ	0xFE8
 30515                           postinc1	equ	0xFE6
 30516                           postdec1	equ	0xFE5
 30517                           plusw1	equ	0xFE3
 30518                           fsr1h	equ	0xFE2
 30519                           fsr1l	equ	0xFE1
 30520                           indf2	equ	0xFDF
 30521                           postinc2	equ	0xFDE
 30522                           postdec2	equ	0xFDD
 30523                           plusw2	equ	0xFDB
 30524                           fsr2h	equ	0xFDA
 30525                           fsr2l	equ	0xFD9
 30526                           status	equ	0xFD8
 30527                           
 30528 ;; *************** function _LORAWAN_Reset *****************
 30529 ;; Defined at:
 30530 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30531 ;; Parameters:    Size  Location     Type
 30532 ;;  ismBandNew      1    wreg     enum E17221
 30533 ;; Auto vars:     Size  Location     Type
 30534 ;;  ismBandNew      1   75[BANK0 ] enum E17221
 30535 ;; Return value:  Size  Location     Type
 30536 ;;                  1    wreg      void 
 30537 ;; Registers used:
 30538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30539 ;; Tracked objects:
 30540 ;;		On entry : 1/0
 30541 ;;		On exit  : D/0
 30542 ;;		Unchanged: 0/0
 30543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 30544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30548 ;;Total ram usage:        1 bytes
 30549 ;; Hardware stack levels used:    1
 30550 ;; Hardware stack levels required when called:   12
 30551 ;; This function calls:
 30552 ;;		_InitDefault433Channels
 30553 ;;		_InitDefault868Channels
 30554 ;;		_LORAWAN_LinkCheckConfigure
 30555 ;;		_RADIO_Init
 30556 ;;		_RADIO_SetLoRaSyncWord
 30557 ;;		_StopAllSoftwareTimers
 30558 ;;		_UpdateMinMaxChDataRate
 30559 ;;		_memset
 30560 ;; This function is called by:
 30561 ;;		_LORAWAN_Init
 30562 ;; This function uses a non-reentrant model
 30563 ;;
 30564                           
 30565                           	psect	text157
 30566  0027FE                     __ptext157:
 30567                           	opt stack 0
 30568  0027FE                     _LORAWAN_Reset:
 30569                           	opt stack 17
 30570                           
 30571                           ;incstack = 0
 30572                           ;LORAWAN_Reset@ismBandNew stored from wreg
 30573  0027FE  0100               	movlb	0	; () banked
 30574  002800  6FAB               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 30575                           
 30576                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 30577  002802  0102               	movlb	2	; () banked
 30578  002804  05F0               	decf	(_loRa+240)& (0+255),w,b
 30579  002806  E102               	bnz	l15552
 30580                           
 30581                           ; BSR set to: 2
 30582                           ;lorawan_eu.c: 151: {
 30583                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 30584  002808  ECE7  F029         	call	_StopAllSoftwareTimers	;wreg free
 30585  00280C                     l15552:
 30586                           
 30587                           ;lorawan_eu.c: 153: }
 30588                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 30589  00280C  0E34               	movlw	52
 30590  00280E  0102               	movlb	2	; () banked
 30591  002810  6FF4               	movwf	(_loRa+244)& (0+255),b
 30592                           
 30593                           ; BSR set to: 2
 30594                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 30595  002812  51F4               	movf	(_loRa+244)& (0+255),w,b
 30596  002814  ECF6  F030         	call	_RADIO_SetLoRaSyncWord
 30597                           
 30598                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 30599  002818  0102               	movlb	2	; () banked
 30600  00281A  D895               	call	PL374	;call to abstracted procedure
 30601                           
 30602                           ; BSR set to: 2
 30603                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 30604  00281C  69DD               	setf	(_loRa+221)& (0+255),b
 30605                           
 30606                           ; BSR set to: 2
 30607                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 30608  00281E  6BDE               	clrf	(_loRa+222)& (0+255),b
 30609                           
 30610                           ; BSR set to: 2
 30611                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 30612  002820  D88D               	call	PL368	;call to abstracted procedure
 30613                           
 30614                           ; BSR set to: 2
 30615                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 30616  002822  6BD4               	clrf	(_loRa+212)& (0+255),b
 30617  002824  6BD5               	clrf	(_loRa+213)& (0+255),b
 30618                           
 30619                           ; BSR set to: 2
 30620                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 30621  002826  D894               	call	PL376	;call to abstracted procedure
 30622                           
 30623                           ; BSR set to: 2
 30624                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 30625  002828  D898               	call	PL394	;call to abstracted procedure
 30626                           
 30627                           ; BSR set to: 2
 30628                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 30629  00282A  6BD2               	clrf	(_loRa+210)& (0+255),b
 30630  00282C  6BD3               	clrf	(_loRa+211)& (0+255),b
 30631                           
 30632                           ; BSR set to: 2
 30633                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 30634  00282E  6BDC               	clrf	(_loRa+220)& (0+255),b
 30635  002830  0E01               	movlw	1
 30636  002832  6FDB               	movwf	(_loRa+219)& (0+255),b
 30637                           
 30638                           ; BSR set to: 2
 30639                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 30640  002834  6BD0               	clrf	(_loRa+208)& (0+255),b
 30641  002836  6BD1               	clrf	(_loRa+209)& (0+255),b
 30642                           
 30643                           ; BSR set to: 2
 30644                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 30645  002838  6BEE               	clrf	(_loRa+238)& (0+255),b
 30646                           
 30647                           ; BSR set to: 2
 30648                           ;lorawan_eu.c: 169: loRa.offset = 0;
 30649  00283A  6BEF               	clrf	(_loRa+239)& (0+255),b
 30650                           
 30651                           ; BSR set to: 2
 30652                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 30653  00283C  D87F               	call	PL368	;call to abstracted procedure
 30654                           
 30655                           ; BSR set to: 2
 30656                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 30657  00283E  9503               	bcf	(_loRa+3)& (0+255),2,b
 30658                           
 30659                           ; BSR set to: 2
 30660                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 30661  002840  D882               	call	PL374	;call to abstracted procedure
 30662                           
 30663                           ; BSR set to: 2
 30664                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 30665  002842  6B00               	clrf	_loRa& (0+255),b
 30666  002844  6B01               	clrf	(_loRa+1)& (0+255),b
 30667                           
 30668                           ; BSR set to: 2
 30669                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 30670  002846  0E07               	movlw	7
 30671  002848  6FD7               	movwf	(_loRa+215)& (0+255),b
 30672                           
 30673                           ; BSR set to: 2
 30674                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 30675  00284A  6BD6               	clrf	(_loRa+214)& (0+255),b
 30676                           
 30677                           ; BSR set to: 2
 30678                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 30679  00284C  0E01               	movlw	1
 30680  00284E  6FD9               	movwf	(_loRa+217)& (0+255),b
 30681                           
 30682                           ; BSR set to: 2
 30683                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 30684  002850  6FD8               	movwf	(_loRa+216)& (0+255),b
 30685                           
 30686                           ; BSR set to: 2
 30687                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 30688  002852  69E0               	setf	(_loRa+224)& (0+255),b
 30689                           
 30690                           ; BSR set to: 2
 30691                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 30692  002854  C0AB  F2A4         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 30693                           
 30694                           ; BSR set to: 2
 30695                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 30696  002858  6B12               	clrf	(_loRa+18)& (0+255),b
 30697                           
 30698                           ; BSR set to: 2
 30699                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 30700  00285A  0E10               	movlw	16
 30701  00285C  6FED               	movwf	(_loRa+237)& (0+255),b
 30702                           
 30703                           ; BSR set to: 2
 30704                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 30705  00285E  0100               	movlb	0	; () banked
 30706  002860  51AB               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 30707  002862  E110               	bnz	l15614
 30708                           
 30709                           ; BSR set to: 0
 30710                           ;lorawan_eu.c: 193: {
 30711                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 30712  002864  0EFF               	movlw	low (_radioBuffer+16)
 30713  002866  D858               	call	PL172	;call to abstracted procedure
 30714  002868  ECB5  F011         	call	_RADIO_Init	;wreg free
 30715                           
 30716                           ; BSR set to: 1
 30717                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 30718  00286C  ECC9  F02A         	call	_InitDefault868Channels	;wreg free
 30719                           
 30720                           ; BSR set to: 0
 30721                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 30722  002870  0102               	movlb	2	; () banked
 30723  002872  6B1C               	clrf	(_loRa+28)& (0+255),b
 30724                           
 30725                           ; BSR set to: 2
 30726                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 30727  002874  0E08               	movlw	8
 30728  002876  6F18               	movwf	(_loRa+24)& (0+255),b
 30729  002878  0EE6               	movlw	230
 30730  00287A  6F19               	movwf	(_loRa+25)& (0+255),b
 30731  00287C  0ED3               	movlw	211
 30732  00287E  6F1A               	movwf	(_loRa+26)& (0+255),b
 30733  002880  0E33               	movlw	51
 30734  002882  D019               	goto	L21
 30735  002884                     l15614:
 30736                           
 30737                           ; BSR set to: 0
 30738                           ;lorawan_eu.c: 201: else
 30739                           ;lorawan_eu.c: 202: {
 30740                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 30741  002884  0EFF               	movlw	low (_radioBuffer+16)
 30742  002886  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30743  002888  0E05               	movlw	high (_radioBuffer+16)
 30744  00288A  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30745  00288C  0E20               	movlw	32
 30746  00288E  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 30747  002890  0EA2               	movlw	162
 30748  002892  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30749  002894  0ED3               	movlw	211
 30750  002896  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30751  002898  0E19               	movlw	25
 30752  00289A  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30753  00289C  ECB5  F011         	call	_RADIO_Init	;wreg free
 30754                           
 30755                           ; BSR set to: 1
 30756                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 30757  0028A0  EC1B  F028         	call	_InitDefault433Channels	;wreg free
 30758                           
 30759                           ; BSR set to: 0
 30760                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 30761  0028A4  0102               	movlb	2	; () banked
 30762  0028A6  6B1C               	clrf	(_loRa+28)& (0+255),b
 30763                           
 30764                           ; BSR set to: 2
 30765                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 30766  0028A8  0E28               	movlw	40
 30767  0028AA  6F18               	movwf	(_loRa+24)& (0+255),b
 30768  0028AC  0E76               	movlw	118
 30769  0028AE  6F19               	movwf	(_loRa+25)& (0+255),b
 30770  0028B0  0EE8               	movlw	232
 30771  0028B2  6F1A               	movwf	(_loRa+26)& (0+255),b
 30772  0028B4  0E19               	movlw	25
 30773  0028B6                     L21:
 30774  0028B6  6F1B               	movwf	(_loRa+27)& (0+255),b
 30775                           
 30776                           ; BSR set to: 2
 30777                           ;lorawan_eu.c: 209: }
 30778                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 30779  0028B8  0E01               	movlw	1
 30780  0028BA  6FE1               	movwf	(_loRa+225)& (0+255),b
 30781                           
 30782                           ; BSR set to: 2
 30783                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 30784  0028BC  6BDF               	clrf	(_loRa+223)& (0+255),b
 30785                           
 30786                           ; BSR set to: 2
 30787                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 30788  0028BE  ECC9  F025         	call	_UpdateMinMaxChDataRate	;wreg free
 30789                           
 30790                           ; BSR set to: 0
 30791                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 30792  0028C2  0102               	movlb	2	; () banked
 30793  0028C4  6BA5               	clrf	(_loRa+165)& (0+255),b
 30794  0028C6  6BA6               	clrf	(_loRa+166)& (0+255),b
 30795                           
 30796                           ; BSR set to: 2
 30797                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 30798  0028C8  0E1D               	movlw	low (_loRa+29)
 30799  0028CA  0100               	movlb	0	; () banked
 30800  0028CC  6F64               	movwf	memset@p1& (0+255),b
 30801  0028CE  0E02               	movlw	high (_loRa+29)
 30802  0028D0  ECE9  F02A         	call	PL182	;call to abstracted procedure
 30803  0028D4  0E69               	movlw	105
 30804  0028D6  6F68               	movwf	memset@n& (0+255),b
 30805  0028D8  EC18  F02E         	call	_memset	;wreg free
 30806                           
 30807                           ; BSR set to: 0
 30808                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 30809  0028DC  D829               	call	PL364	;call to abstracted procedure
 30810                           
 30811                           ; BSR set to: 2
 30812                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 30813  0028DE  0E07               	movlw	7
 30814  0028E0  6F97               	movwf	(_loRa+151)& (0+255),b
 30815  0028E2  0ED0               	movlw	208
 30816  0028E4  6F96               	movwf	(_loRa+150)& (0+255),b
 30817                           
 30818                           ; BSR set to: 2
 30819                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 30820  0028E6  0E13               	movlw	19
 30821  0028E8  6F99               	movwf	(_loRa+153)& (0+255),b
 30822  0028EA  0E88               	movlw	136
 30823  0028EC  6F98               	movwf	(_loRa+152)& (0+255),b
 30824                           
 30825                           ; BSR set to: 2
 30826                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 30827  0028EE  0E17               	movlw	23
 30828  0028F0  6F9B               	movwf	(_loRa+155)& (0+255),b
 30829  0028F2  0E70               	movlw	112
 30830  0028F4  6F9A               	movwf	(_loRa+154)& (0+255),b
 30831                           
 30832                           ; BSR set to: 2
 30833                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 30834  0028F6  0E07               	movlw	7
 30835  0028F8  6FA1               	movwf	(_loRa+161)& (0+255),b
 30836  0028FA  0ED0               	movlw	208
 30837  0028FC  6FA0               	movwf	(_loRa+160)& (0+255),b
 30838                           
 30839                           ; BSR set to: 2
 30840                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 30841  0028FE  0E20               	movlw	32
 30842  002900  6FA3               	movwf	(_loRa+163)& (0+255),b
 30843                           
 30844                           ; BSR set to: 2
 30845                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 30846  002902  0E40               	movlw	64
 30847  002904  6FA2               	movwf	(_loRa+162)& (0+255),b
 30848                           
 30849                           ; BSR set to: 2
 30850                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 30851  002906  6F9D               	movwf	(_loRa+157)& (0+255),b
 30852  002908  6B9C               	clrf	(_loRa+156)& (0+255),b
 30853                           
 30854                           ; BSR set to: 2
 30855                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 30856  00290A  6F9F               	movwf	(_loRa+159)& (0+255),b
 30857  00290C  6B9E               	clrf	(_loRa+158)& (0+255),b
 30858                           
 30859                           ; BSR set to: 2
 30860                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 30861  00290E  0100               	movlb	0	; () banked
 30862  002910  6BA1               	clrf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 30863  002912  6BA0               	clrf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 30864  002914  EFB4  F018         	goto	_LORAWAN_LinkCheckConfigure	;wreg free
 30865  002918                     __end_of_LORAWAN_Reset:
 30866                           	opt stack 0
 30867  002918                     PL172:
 30868                           	opt stack 17
 30869  002918  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30870  00291A  0E05               	movlw	high (_radioBuffer+16)
 30871  00291C  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30872  00291E  0EA0               	movlw	160
 30873  002920  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 30874  002922  0E27               	movlw	39
 30875  002924  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30876  002926  0EBE               	movlw	190
 30877  002928  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30878  00292A  0E33               	movlw	51
 30879  00292C  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30880  00292E  0C33               	retlw	51
 30881  002930                     __end_ofPL172:
 30882                           	opt stack 0
 30883  002930                     PL364:
 30884                           	opt stack 18
 30885  002930  0E03               	movlw	3
 30886  002932  0102               	movlb	2	; () banked
 30887  002934  6F95               	movwf	(_loRa+149)& (0+255),b
 30888  002936  0EE8               	movlw	232
 30889  002938  6F94               	movwf	(_loRa+148)& (0+255),b
 30890  00293A  0CE8               	retlw	232
 30891  00293C                     __end_ofPL364:
 30892                           	opt stack 0
 30893  00293C                     PL368:
 30894                           	opt stack 17
 30895  00293C  6BC8               	clrf	(_loRa+200)& (0+255),b
 30896  00293E  6BC9               	clrf	(_loRa+201)& (0+255),b
 30897  002940  6BCA               	clrf	(_loRa+202)& (0+255),b
 30898  002942  6BCB               	clrf	(_loRa+203)& (0+255),b
 30899  002944  0012               	return	
 30900  002946                     __end_ofPL368:
 30901                           	opt stack 0
 30902  002946                     PL374:
 30903                           	opt stack 17
 30904  002946  6B02               	clrf	(_loRa+2)& (0+255),b
 30905  002948  6B03               	clrf	(_loRa+3)& (0+255),b
 30906  00294A  6B04               	clrf	(_loRa+4)& (0+255),b
 30907  00294C  6B05               	clrf	(_loRa+5)& (0+255),b
 30908  00294E  0012               	return	
 30909  002950                     __end_ofPL374:
 30910                           	opt stack 0
 30911  002950                     PL376:
 30912                           	opt stack 12
 30913  002950  6B0A               	clrf	(_loRa+10)& (0+255),b
 30914  002952  6B0B               	clrf	(_loRa+11)& (0+255),b
 30915  002954  6B0C               	clrf	(_loRa+12)& (0+255),b
 30916  002956  6B0D               	clrf	(_loRa+13)& (0+255),b
 30917  002958  0012               	return	
 30918  00295A                     __end_ofPL376:
 30919                           	opt stack 0
 30920  00295A                     PL394:
 30921                           	opt stack 12
 30922  00295A  6B06               	clrf	(_loRa+6)& (0+255),b
 30923  00295C  6B07               	clrf	(_loRa+7)& (0+255),b
 30924  00295E  6B08               	clrf	(_loRa+8)& (0+255),b
 30925  002960  6B09               	clrf	(_loRa+9)& (0+255),b
 30926  002962  0012               	return	
 30927  002964                     __end_ofPL394:
 30928                           	opt stack 0
 30929                           tosu	equ	0xFFF
 30930                           tosh	equ	0xFFE
 30931                           tosl	equ	0xFFD
 30932                           pclath	equ	0xFFA
 30933                           tblptru	equ	0xFF8
 30934                           tblptrh	equ	0xFF7
 30935                           tblptrl	equ	0xFF6
 30936                           tablat	equ	0xFF5
 30937                           prodh	equ	0xFF4
 30938                           prodl	equ	0xFF3
 30939                           intcon	equ	0xFF2
 30940                           indf0	equ	0xFEF
 30941                           postinc0	equ	0xFEE
 30942                           plusw0	equ	0xFEB
 30943                           fsr0h	equ	0xFEA
 30944                           fsr0l	equ	0xFE9
 30945                           wreg	equ	0xFE8
 30946                           postinc1	equ	0xFE6
 30947                           postdec1	equ	0xFE5
 30948                           plusw1	equ	0xFE3
 30949                           fsr1h	equ	0xFE2
 30950                           fsr1l	equ	0xFE1
 30951                           indf2	equ	0xFDF
 30952                           postinc2	equ	0xFDE
 30953                           postdec2	equ	0xFDD
 30954                           plusw2	equ	0xFDB
 30955                           fsr2h	equ	0xFDA
 30956                           fsr2l	equ	0xFD9
 30957                           status	equ	0xFD8
 30958                           
 30959 ;; *************** function _UpdateMinMaxChDataRate *****************
 30960 ;; Defined at:
 30961 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 30962 ;; Parameters:    Size  Location     Type
 30963 ;;		None
 30964 ;; Auto vars:     Size  Location     Type
 30965 ;;  i               1    5[BANK0 ] unsigned char 
 30966 ;; Return value:  Size  Location     Type
 30967 ;;                  1    wreg      void 
 30968 ;; Registers used:
 30969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30970 ;; Tracked objects:
 30971 ;;		On entry : F/2
 30972 ;;		On exit  : F/0
 30973 ;;		Unchanged: 0/0
 30974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 30975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30979 ;;Total ram usage:        2 bytes
 30980 ;; Hardware stack levels used:    1
 30981 ;; Hardware stack levels required when called:    7
 30982 ;; This function calls:
 30983 ;;		Nothing
 30984 ;; This function is called by:
 30985 ;;		_LORAWAN_Reset
 30986 ;; This function uses a non-reentrant model
 30987 ;;
 30988                           
 30989                           	psect	text158
 30990  004B92                     __ptext158:
 30991                           	opt stack 0
 30992  004B92                     _UpdateMinMaxChDataRate:
 30993                           	opt stack 21
 30994                           
 30995                           ; BSR set to: 2
 30996                           ;lorawan.c: 1065: uint8_t i;
 30997                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 30998                           
 30999                           ;incstack = 0
 31000  004B92  0E07               	movlw	7
 31001  004B94  6FEB               	movwf	(_loRa+235)& (0+255),b
 31002                           
 31003                           ; BSR set to: 2
 31004                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 31005  004B96  6BEC               	clrf	(_loRa+236)& (0+255),b
 31006                           
 31007                           ; BSR set to: 2
 31008                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 31009  004B98  0100               	movlb	0	; () banked
 31010  004B9A  6B65               	clrf	UpdateMinMaxChDataRate@i& (0+255),b
 31011  004B9C  D029               	goto	l15046
 31012  004B9E                     l15034:
 31013                           
 31014                           ; BSR set to: 0
 31015                           ;lorawan.c: 1072: {
 31016                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 31017  004B9E  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31018  004BA0  ECAF  F021         	call	PL6	;call to abstracted procedure
 31019  004BA4  50DF               	movf	223,w,c
 31020  004BA6  0B0F               	andlw	15
 31021  004BA8  0100               	movlb	0	; () banked
 31022  004BAA  6F64               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 31023  004BAC  0102               	movlb	2	; () banked
 31024  004BAE  51EB               	movf	(_loRa+235)& (0+255),w,b
 31025  004BB0  0100               	movlb	0	; () banked
 31026  004BB2  5D64               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 31027  004BB4  E209               	bc	l2120
 31028                           
 31029                           ; BSR set to: 0
 31030  004BB6  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31031  004BB8  ECB7  F021         	call	PL12	;call to abstracted procedure
 31032  004BBC  E105               	bnz	l2120
 31033                           
 31034                           ; BSR set to: 0
 31035                           ;lorawan.c: 1074: {
 31036                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 31037  004BBE  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31038  004BC0  ECAF  F021         	call	PL6	;call to abstracted procedure
 31039  004BC4  ECDA  F01D         	call	PL322	;call to abstracted procedure
 31040  004BC8                     l2120:
 31041                           
 31042                           ;lorawan.c: 1076: }
 31043                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 31044  004BC8  0100               	movlb	0	; () banked
 31045  004BCA  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31046  004BCC  ECAF  F021         	call	PL6	;call to abstracted procedure
 31047  004BD0  ECE4  F01D         	call	PL452	;call to abstracted procedure
 31048  004BD4  61EC               	cpfslt	(_loRa+236)& (0+255),b
 31049  004BD6  D00A               	goto	l15044
 31050                           
 31051                           ; BSR set to: 2
 31052  004BD8  0100               	movlb	0	; () banked
 31053  004BDA  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31054  004BDC  ECB7  F021         	call	PL12	;call to abstracted procedure
 31055  004BE0  E105               	bnz	l15044
 31056                           
 31057                           ; BSR set to: 0
 31058                           ;lorawan.c: 1078: {
 31059                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 31060  004BE2  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31061  004BE4  ECAF  F021         	call	PL6	;call to abstracted procedure
 31062  004BE8  ECDF  F01D         	call	PL336	;call to abstracted procedure
 31063  004BEC                     l15044:
 31064  004BEC  0100               	movlb	0	; () banked
 31065  004BEE  2B65               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 31066  004BF0                     l15046:
 31067                           
 31068                           ; BSR set to: 0
 31069  004BF0  0102               	movlb	2	; () banked
 31070  004BF2  51ED               	movf	(_loRa+237)& (0+255),w,b
 31071  004BF4  0100               	movlb	0	; () banked
 31072  004BF6  5D65               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31073  004BF8  E3D2               	bnc	l15034
 31074                           
 31075                           ; BSR set to: 0
 31076  004BFA  0012               	return		;funcret
 31077  004BFC                     __end_of_UpdateMinMaxChDataRate:
 31078                           	opt stack 0
 31079                           tosu	equ	0xFFF
 31080                           tosh	equ	0xFFE
 31081                           tosl	equ	0xFFD
 31082                           pclath	equ	0xFFA
 31083                           tblptru	equ	0xFF8
 31084                           tblptrh	equ	0xFF7
 31085                           tblptrl	equ	0xFF6
 31086                           tablat	equ	0xFF5
 31087                           prodh	equ	0xFF4
 31088                           prodl	equ	0xFF3
 31089                           intcon	equ	0xFF2
 31090                           indf0	equ	0xFEF
 31091                           postinc0	equ	0xFEE
 31092                           plusw0	equ	0xFEB
 31093                           fsr0h	equ	0xFEA
 31094                           fsr0l	equ	0xFE9
 31095                           wreg	equ	0xFE8
 31096                           postinc1	equ	0xFE6
 31097                           postdec1	equ	0xFE5
 31098                           plusw1	equ	0xFE3
 31099                           fsr1h	equ	0xFE2
 31100                           fsr1l	equ	0xFE1
 31101                           indf2	equ	0xFDF
 31102                           postinc2	equ	0xFDE
 31103                           postdec2	equ	0xFDD
 31104                           plusw2	equ	0xFDB
 31105                           fsr2h	equ	0xFDA
 31106                           fsr2l	equ	0xFD9
 31107                           status	equ	0xFD8
 31108                           
 31109 ;; *************** function _StopAllSoftwareTimers *****************
 31110 ;; Defined at:
 31111 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 31112 ;; Parameters:    Size  Location     Type
 31113 ;;		None
 31114 ;; Auto vars:     Size  Location     Type
 31115 ;;		None
 31116 ;; Return value:  Size  Location     Type
 31117 ;;                  1    wreg      void 
 31118 ;; Registers used:
 31119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31120 ;; Tracked objects:
 31121 ;;		On entry : F/2
 31122 ;;		On exit  : F/0
 31123 ;;		Unchanged: 0/0
 31124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 31125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31129 ;;Total ram usage:        0 bytes
 31130 ;; Hardware stack levels used:    1
 31131 ;; Hardware stack levels required when called:    8
 31132 ;; This function calls:
 31133 ;;		_SwTimerStop
 31134 ;; This function is called by:
 31135 ;;		_LORAWAN_Init
 31136 ;;		_LORAWAN_Reset
 31137 ;; This function uses a non-reentrant model
 31138 ;;
 31139                           
 31140                           	psect	text159
 31141  0053CE                     __ptext159:
 31142                           	opt stack 0
 31143  0053CE                     _StopAllSoftwareTimers:
 31144                           	opt stack 21
 31145                           
 31146                           ; BSR set to: 2
 31147                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 31148                           
 31149                           ; BSR set to: 0
 31150                           ;incstack = 0
 31151  0053CE  51E2               	movf	(_loRa+226)& (0+255),w,b
 31152  0053D0  EC9E  F030         	call	_SwTimerStop
 31153                           
 31154                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 31155  0053D4  0102               	movlb	2	; () banked
 31156  0053D6  51E3               	movf	(_loRa+227)& (0+255),w,b
 31157  0053D8  EC9E  F030         	call	_SwTimerStop
 31158                           
 31159                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 31160  0053DC  0102               	movlb	2	; () banked
 31161  0053DE  51E7               	movf	(_loRa+231)& (0+255),w,b
 31162  0053E0  EC9E  F030         	call	_SwTimerStop
 31163                           
 31164                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 31165  0053E4  0102               	movlb	2	; () banked
 31166  0053E6  51E4               	movf	(_loRa+228)& (0+255),w,b
 31167  0053E8  EC9E  F030         	call	_SwTimerStop
 31168                           
 31169                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 31170  0053EC  0102               	movlb	2	; () banked
 31171  0053EE  51E5               	movf	(_loRa+229)& (0+255),w,b
 31172  0053F0  EC9E  F030         	call	_SwTimerStop
 31173                           
 31174                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 31175  0053F4  0102               	movlb	2	; () banked
 31176  0053F6  51E8               	movf	(_loRa+232)& (0+255),w,b
 31177  0053F8  EC9E  F030         	call	_SwTimerStop
 31178                           
 31179                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 31180  0053FC  0102               	movlb	2	; () banked
 31181  0053FE  51E6               	movf	(_loRa+230)& (0+255),w,b
 31182  005400  EC9E  F030         	call	_SwTimerStop
 31183                           
 31184                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 31185  005404  0102               	movlb	2	; () banked
 31186  005406  51EA               	movf	(_loRa+234)& (0+255),w,b
 31187  005408  EC9E  F030         	call	_SwTimerStop
 31188                           
 31189                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 31190  00540C  0102               	movlb	2	; () banked
 31191  00540E  51F3               	movf	(_loRa+243)& (0+255),w,b
 31192  005410  EC9E  F030         	call	_SwTimerStop
 31193                           
 31194                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 31195  005414  0102               	movlb	2	; () banked
 31196  005416  51E9               	movf	(_loRa+233)& (0+255),w,b
 31197  005418  EF9E  F030         	goto	_SwTimerStop
 31198  00541C                     __end_of_StopAllSoftwareTimers:
 31199                           	opt stack 0
 31200                           tosu	equ	0xFFF
 31201                           tosh	equ	0xFFE
 31202                           tosl	equ	0xFFD
 31203                           pclath	equ	0xFFA
 31204                           tblptru	equ	0xFF8
 31205                           tblptrh	equ	0xFF7
 31206                           tblptrl	equ	0xFF6
 31207                           tablat	equ	0xFF5
 31208                           prodh	equ	0xFF4
 31209                           prodl	equ	0xFF3
 31210                           intcon	equ	0xFF2
 31211                           indf0	equ	0xFEF
 31212                           postinc0	equ	0xFEE
 31213                           plusw0	equ	0xFEB
 31214                           fsr0h	equ	0xFEA
 31215                           fsr0l	equ	0xFE9
 31216                           wreg	equ	0xFE8
 31217                           postinc1	equ	0xFE6
 31218                           postdec1	equ	0xFE5
 31219                           plusw1	equ	0xFE3
 31220                           fsr1h	equ	0xFE2
 31221                           fsr1l	equ	0xFE1
 31222                           indf2	equ	0xFDF
 31223                           postinc2	equ	0xFDE
 31224                           postdec2	equ	0xFDD
 31225                           plusw2	equ	0xFDB
 31226                           fsr2h	equ	0xFDA
 31227                           fsr2l	equ	0xFD9
 31228                           status	equ	0xFD8
 31229                           
 31230 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 31231 ;; Defined at:
 31232 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31233 ;; Parameters:    Size  Location     Type
 31234 ;;  syncWord        1    wreg     unsigned char 
 31235 ;; Auto vars:     Size  Location     Type
 31236 ;;  syncWord        1    4[BANK0 ] unsigned char 
 31237 ;; Return value:  Size  Location     Type
 31238 ;;                  1    wreg      void 
 31239 ;; Registers used:
 31240 ;;		wreg
 31241 ;; Tracked objects:
 31242 ;;		On entry : F/2
 31243 ;;		On exit  : 0/0
 31244 ;;		Unchanged: 0/0
 31245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 31246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31250 ;;Total ram usage:        1 bytes
 31251 ;; Hardware stack levels used:    1
 31252 ;; Hardware stack levels required when called:    7
 31253 ;; This function calls:
 31254 ;;		Nothing
 31255 ;; This function is called by:
 31256 ;;		_LORAWAN_Reset
 31257 ;;		_ConfigureRadio
 31258 ;; This function uses a non-reentrant model
 31259 ;;
 31260                           
 31261                           	psect	text160
 31262  0061EC                     __ptext160:
 31263                           	opt stack 0
 31264  0061EC                     _RADIO_SetLoRaSyncWord:
 31265                           	opt stack 18
 31266                           
 31267                           ; BSR set to: 0
 31268                           ;incstack = 0
 31269                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 31270  0061EC  0100               	movlb	0	; () banked
 31271  0061EE  6F64               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 31272                           
 31273                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 31274  0061F0  C064  F183         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 31275  0061F4  0012               	return		;funcret
 31276  0061F6                     __end_of_RADIO_SetLoRaSyncWord:
 31277                           	opt stack 0
 31278                           tosu	equ	0xFFF
 31279                           tosh	equ	0xFFE
 31280                           tosl	equ	0xFFD
 31281                           pclath	equ	0xFFA
 31282                           tblptru	equ	0xFF8
 31283                           tblptrh	equ	0xFF7
 31284                           tblptrl	equ	0xFF6
 31285                           tablat	equ	0xFF5
 31286                           prodh	equ	0xFF4
 31287                           prodl	equ	0xFF3
 31288                           intcon	equ	0xFF2
 31289                           indf0	equ	0xFEF
 31290                           postinc0	equ	0xFEE
 31291                           plusw0	equ	0xFEB
 31292                           fsr0h	equ	0xFEA
 31293                           fsr0l	equ	0xFE9
 31294                           wreg	equ	0xFE8
 31295                           postinc1	equ	0xFE6
 31296                           postdec1	equ	0xFE5
 31297                           plusw1	equ	0xFE3
 31298                           fsr1h	equ	0xFE2
 31299                           fsr1l	equ	0xFE1
 31300                           indf2	equ	0xFDF
 31301                           postinc2	equ	0xFDE
 31302                           postdec2	equ	0xFDD
 31303                           plusw2	equ	0xFDB
 31304                           fsr2h	equ	0xFDA
 31305                           fsr2l	equ	0xFD9
 31306                           status	equ	0xFD8
 31307                           
 31308 ;; *************** function _RADIO_Init *****************
 31309 ;; Defined at:
 31310 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31311 ;; Parameters:    Size  Location     Type
 31312 ;;  radioBuffer     2   29[BANK0 ] PTR unsigned char 
 31313 ;;		 -> radioBuffer(271), 
 31314 ;;  frequency       4   31[BANK0 ] unsigned long 
 31315 ;; Auto vars:     Size  Location     Type
 31316 ;;		None
 31317 ;; Return value:  Size  Location     Type
 31318 ;;                  1    wreg      void 
 31319 ;; Registers used:
 31320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31321 ;; Tracked objects:
 31322 ;;		On entry : F/0
 31323 ;;		On exit  : F/1
 31324 ;;		Unchanged: 0/0
 31325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 31326 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31329 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31330 ;;Total ram usage:        7 bytes
 31331 ;; Hardware stack levels used:    1
 31332 ;; Hardware stack levels required when called:   11
 31333 ;; This function calls:
 31334 ;;		_RADIO_RegisterRead
 31335 ;;		_RADIO_RegisterWrite
 31336 ;;		_RADIO_Reset
 31337 ;;		_RADIO_WriteFrequency
 31338 ;;		_RADIO_WriteMode
 31339 ;;		_SwTimerCreate
 31340 ;;		_SwTimerSetCallback
 31341 ;;		_SwTimerStop
 31342 ;; This function is called by:
 31343 ;;		_LORAWAN_Init
 31344 ;;		_LORAWAN_Reset
 31345 ;; This function uses a non-reentrant model
 31346 ;;
 31347                           
 31348                           	psect	text161
 31349  00236A                     __ptext161:
 31350                           	opt stack 0
 31351  00236A                     _RADIO_Init:
 31352                           	opt stack 18
 31353                           
 31354                           ; BSR set to: 0
 31355                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 31356                           
 31357                           ;incstack = 0
 31358  00236A  C07F  F175         	movff	RADIO_Init@frequency,_RadioConfiguration
 31359  00236E  C080  F176         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 31360  002372  C081  F177         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 31361  002376  C082  F178         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 31362                           
 31363                           ; BSR set to: 0
 31364                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 31365  00237A  0EA8               	movlw	168
 31366  00237C  0101               	movlb	1	; () banked
 31367  00237E  6F79               	movwf	(_RadioConfiguration+4)& (0+255),b
 31368  002380  0E61               	movlw	97
 31369  002382  6F7A               	movwf	(_RadioConfiguration+5)& (0+255),b
 31370  002384  6B7B               	clrf	(_RadioConfiguration+6)& (0+255),b
 31371  002386  6B7C               	clrf	(_RadioConfiguration+7)& (0+255),b
 31372                           
 31373                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 31374  002388  0E50               	movlw	80
 31375  00238A  6F7D               	movwf	(_RadioConfiguration+8)& (0+255),b
 31376  00238C  0EC3               	movlw	195
 31377  00238E  6F7E               	movwf	(_RadioConfiguration+9)& (0+255),b
 31378  002390  6B7F               	clrf	(_RadioConfiguration+10)& (0+255),b
 31379  002392  6B80               	clrf	(_RadioConfiguration+11)& (0+255),b
 31380                           
 31381                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 31382  002394  0E01               	movlw	1
 31383  002396  6F8D               	movwf	(_RadioConfiguration+24)& (0+255),b
 31384                           
 31385                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 31386  002398  0E07               	movlw	7
 31387  00239A  6F8F               	movwf	(_RadioConfiguration+26)& (0+255),b
 31388                           
 31389                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 31390  00239C  0E01               	movlw	1
 31391  00239E  6F90               	movwf	(_RadioConfiguration+27)& (0+255),b
 31392                           
 31393                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 31394  0023A0  6F96               	movwf	(_RadioConfiguration+33)& (0+255),b
 31395                           
 31396                           ; BSR set to: 1
 31397                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 31398  0023A2  6B97               	clrf	(_RadioConfiguration+34)& (0+255),b
 31399                           
 31400                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 31401  0023A4  6B82               	clrf	(_RadioConfiguration+13)& (0+255),b
 31402  0023A6  0E08               	movlw	8
 31403  0023A8  6F81               	movwf	(_RadioConfiguration+12)& (0+255),b
 31404                           
 31405                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 31406  0023AA  0E0C               	movlw	12
 31407  0023AC  6F8E               	movwf	(_RadioConfiguration+25)& (0+255),b
 31408                           
 31409                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 31410  0023AE  0E01               	movlw	1
 31411  0023B0  6F91               	movwf	(_RadioConfiguration+28)& (0+255),b
 31412                           
 31413                           ; BSR set to: 1
 31414                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 31415  0023B2  6B92               	clrf	(_RadioConfiguration+29)& (0+255),b
 31416                           
 31417                           ; BSR set to: 1
 31418                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 31419  0023B4  6B95               	clrf	(_RadioConfiguration+32)& (0+255),b
 31420                           
 31421                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 31422  0023B6  0EC1               	movlw	193
 31423  0023B8  6F84               	movwf	(_RadioConfiguration+15)& (0+255),b
 31424                           
 31425                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 31426  0023BA  0E94               	movlw	148
 31427  0023BC  6F85               	movwf	(_RadioConfiguration+16)& (0+255),b
 31428                           
 31429                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 31430  0023BE  0EC1               	movlw	193
 31431  0023C0  6F86               	movwf	(_RadioConfiguration+17)& (0+255),b
 31432                           
 31433                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 31434  0023C2  0E03               	movlw	3
 31435  0023C4  6F8C               	movwf	(_RadioConfiguration+23)& (0+255),b
 31436                           
 31437                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 31438  0023C6  0E34               	movlw	52
 31439  0023C8  6F83               	movwf	(_RadioConfiguration+14)& (0+255),b
 31440                           
 31441                           ; BSR set to: 1
 31442                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 31443  0023CA  6B98               	clrf	(_RadioConfiguration+35)& (0+255),b
 31444                           
 31445                           ; BSR set to: 1
 31446                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 31447  0023CC  6B99               	clrf	(_RadioConfiguration+36)& (0+255),b
 31448                           
 31449                           ; BSR set to: 1
 31450                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 31451  0023CE  C07D  F19A         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 31452  0023D2  C07E  F19B         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 31453                           
 31454                           ; BSR set to: 1
 31455                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 31456  0023D6  6B93               	clrf	(_RadioConfiguration+30)& (0+255),b
 31457  0023D8  6B94               	clrf	(_RadioConfiguration+31)& (0+255),b
 31458                           
 31459                           ; BSR set to: 1
 31460                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 31461  0023DA  0E80               	movlw	128
 31462  0023DC  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
 31463                           
 31464                           ; BSR set to: 1
 31465                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 31466  0023DE  0E98               	movlw	152
 31467  0023E0  6F9F               	movwf	(_RadioConfiguration+42)& (0+255),b
 31468  0023E2  0E3A               	movlw	58
 31469  0023E4  6FA0               	movwf	(_RadioConfiguration+43)& (0+255),b
 31470  0023E6  6BA1               	clrf	(_RadioConfiguration+44)& (0+255),b
 31471  0023E8  6BA2               	clrf	(_RadioConfiguration+45)& (0+255),b
 31472                           
 31473                           ; BSR set to: 1
 31474                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 31475  0023EA  0E02               	movlw	2
 31476  0023EC  6FA8               	movwf	(_RadioConfiguration+51)& (0+255),b
 31477                           
 31478                           ; BSR set to: 1
 31479                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 31480  0023EE  0E0B               	movlw	11
 31481  0023F0  6FA9               	movwf	(_RadioConfiguration+52)& (0+255),b
 31482                           
 31483                           ; BSR set to: 1
 31484                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 31485  0023F2  0E12               	movlw	18
 31486  0023F4  6FAA               	movwf	(_RadioConfiguration+53)& (0+255),b
 31487                           
 31488                           ; BSR set to: 1
 31489                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 31490  0023F6  6BA4               	clrf	(_RadioConfiguration+47)& (0+255),b
 31491  0023F8  6BA5               	clrf	(_RadioConfiguration+48)& (0+255),b
 31492                           
 31493                           ; BSR set to: 1
 31494                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 31495  0023FA  51A3               	movf	(_RadioConfiguration+46)& (0+255),w,b
 31496  0023FC  E123               	bnz	l14798
 31497                           
 31498                           ; BSR set to: 1
 31499                           ;radio_driver_SX1276.c: 457: {
 31500                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 31501  0023FE  EC12  F02B         	call	_SwTimerCreate	;wreg free
 31502  002402  0101               	movlb	1	; () banked
 31503  002404  6F9C               	movwf	(_RadioConfiguration+39)& (0+255),b
 31504                           
 31505                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 31506  002406  EC12  F02B         	call	_SwTimerCreate	;wreg free
 31507  00240A  0101               	movlb	1	; () banked
 31508  00240C  6F9D               	movwf	(_RadioConfiguration+40)& (0+255),b
 31509                           
 31510                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 31511  00240E  EC12  F02B         	call	_SwTimerCreate	;wreg free
 31512  002412  0101               	movlb	1	; () banked
 31513  002414  6F9E               	movwf	(_RadioConfiguration+41)& (0+255),b
 31514                           
 31515                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 31516  002416  0E78               	movlw	low _RADIO_RxFSKTimeout
 31517  002418  0100               	movlb	0	; () banked
 31518  00241A  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31519  00241C  0E59               	movlw	high _RADIO_RxFSKTimeout
 31520  00241E  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31521  002420  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31522  002422  0101               	movlb	1	; () banked
 31523  002424  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31524  002426  ECED  F02D         	call	_SwTimerSetCallback
 31525                           
 31526                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 31527  00242A  0ED6               	movlw	low _RADIO_WatchdogTimeout
 31528  00242C  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31529  00242E  0E58               	movlw	high _RADIO_WatchdogTimeout
 31530  002430  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31531  002432  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31532  002434  0101               	movlb	1	; () banked
 31533  002436  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31534  002438  ECED  F02D         	call	_SwTimerSetCallback
 31535                           
 31536                           ; BSR set to: 0
 31537                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 31538  00243C  0E01               	movlw	1
 31539  00243E  0101               	movlb	1	; () banked
 31540  002440  6FA3               	movwf	(_RadioConfiguration+46)& (0+255),b
 31541                           
 31542                           ;radio_driver_SX1276.c: 466: }
 31543  002442  D00B               	goto	l14800
 31544  002444                     l14798:
 31545                           
 31546                           ; BSR set to: 1
 31547                           ;radio_driver_SX1276.c: 467: else
 31548                           ;radio_driver_SX1276.c: 468: {
 31549                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 31550  002444  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 31551  002446  EC9E  F030         	call	_SwTimerStop
 31552                           
 31553                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 31554  00244A  0101               	movlb	1	; () banked
 31555  00244C  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31556  00244E  EC9E  F030         	call	_SwTimerStop
 31557                           
 31558                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 31559  002452  0101               	movlb	1	; () banked
 31560  002454  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31561  002456  EC9E  F030         	call	_SwTimerStop
 31562  00245A                     l14800:
 31563                           
 31564                           ;radio_driver_SX1276.c: 472: }
 31565                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 31566  00245A  EC7E  F02D         	call	_RADIO_Reset	;wreg free
 31567                           
 31568                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 31569  00245E  0E00               	movlw	0
 31570  002460  0100               	movlb	0	; () banked
 31571  002462  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31572  002464  0E01               	movlw	1
 31573  002466  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31574  002468  EC75  F01B         	call	_RADIO_WriteMode
 31575                           
 31576                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 31577  00246C  D841               	call	PL224	;call to abstracted procedure
 31578  00246E  ECE2  F01B         	call	_RADIO_WriteFrequency	;wreg free
 31579                           
 31580                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 31581  002472  0E42               	movlw	66
 31582  002474  ECEB  F008         	call	PL458	;call to abstracted procedure
 31583  002478  EC79  F02F         	call	_RADIO_RegisterWrite
 31584  00247C                     l14808:
 31585  00247C  0E3B               	movlw	59
 31586  00247E  EC8D  F02E         	call	_RADIO_RegisterRead
 31587  002482  6F83               	movwf	??_RADIO_Init& (0+255),b
 31588  002484  BB83               	btfsc	??_RADIO_Init& (0+255),5,b
 31589  002486  D7FA               	goto	l14808
 31590                           
 31591                           ; BSR set to: 0
 31592                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 31593  002488  0E23               	movlw	35
 31594  00248A  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31595  00248C  0E0C               	movlw	12
 31596  00248E  EC79  F02F         	call	_RADIO_RegisterWrite
 31597                           
 31598                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 31599  002492  0E1E               	movlw	30
 31600  002494  0100               	movlb	0	; () banked
 31601  002496  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31602  002498  0E0D               	movlw	13
 31603  00249A  EC79  F02F         	call	_RADIO_RegisterWrite
 31604                           
 31605                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 31606  00249E  0EAA               	movlw	170
 31607  0024A0  0100               	movlb	0	; () banked
 31608  0024A2  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31609  0024A4  0E1F               	movlw	31
 31610  0024A6  EC79  F02F         	call	_RADIO_RegisterWrite
 31611                           
 31612                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 31613  0024AA  0E8F               	movlw	143
 31614  0024AC  0100               	movlb	0	; () banked
 31615  0024AE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31616  0024B0  0E35               	movlw	53
 31617  0024B2  EC79  F02F         	call	_RADIO_RegisterWrite
 31618                           
 31619                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 31620  0024B6  0100               	movlb	0	; () banked
 31621  0024B8  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 31622  0024BA  0E32               	movlw	50
 31623  0024BC  EC79  F02F         	call	_RADIO_RegisterWrite
 31624                           
 31625                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 31626  0024C0  0E40               	movlw	64
 31627  0024C2  0100               	movlb	0	; () banked
 31628  0024C4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31629  0024C6  0E31               	movlw	49
 31630  0024C8  EC79  F02F         	call	_RADIO_RegisterWrite
 31631                           
 31632                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 31633  0024CC  0E01               	movlw	1
 31634  0024CE  0100               	movlb	0	; () banked
 31635  0024D0  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31636  0024D2  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31637  0024D4  0E00               	movlw	0
 31638  0024D6  EC75  F01B         	call	_RADIO_WriteMode
 31639                           
 31640                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 31641  0024DA  0100               	movlb	0	; () banked
 31642  0024DC  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 31643  0024DE  0E23               	movlw	35
 31644  0024E0  EC79  F02F         	call	_RADIO_RegisterWrite
 31645                           
 31646                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 31647  0024E4  0E42               	movlw	66
 31648  0024E6  EC8D  F02E         	call	_RADIO_RegisterRead
 31649  0024EA  0101               	movlb	1	; () banked
 31650  0024EC  6FA6               	movwf	(_RadioConfiguration+49)& (0+255),b
 31651                           
 31652                           ; BSR set to: 1
 31653  0024EE  0012               	return		;funcret
 31654  0024F0                     __end_of_RADIO_Init:
 31655                           	opt stack 0
 31656  0024F0                     PL224:
 31657                           	opt stack 16
 31658  0024F0  C175  F071         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 31659  0024F4  C176  F072         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 31660  0024F8  C177  F073         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 31661  0024FC  C178  F074         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 31662  002500  0012               	return	
 31663  002502                     __end_ofPL224:
 31664                           	opt stack 0
 31665                           tosu	equ	0xFFF
 31666                           tosh	equ	0xFFE
 31667                           tosl	equ	0xFFD
 31668                           pclath	equ	0xFFA
 31669                           tblptru	equ	0xFF8
 31670                           tblptrh	equ	0xFF7
 31671                           tblptrl	equ	0xFF6
 31672                           tablat	equ	0xFF5
 31673                           prodh	equ	0xFF4
 31674                           prodl	equ	0xFF3
 31675                           intcon	equ	0xFF2
 31676                           indf0	equ	0xFEF
 31677                           postinc0	equ	0xFEE
 31678                           plusw0	equ	0xFEB
 31679                           fsr0h	equ	0xFEA
 31680                           fsr0l	equ	0xFE9
 31681                           wreg	equ	0xFE8
 31682                           postinc1	equ	0xFE6
 31683                           postdec1	equ	0xFE5
 31684                           plusw1	equ	0xFE3
 31685                           fsr1h	equ	0xFE2
 31686                           fsr1l	equ	0xFE1
 31687                           indf2	equ	0xFDF
 31688                           postinc2	equ	0xFDE
 31689                           postdec2	equ	0xFDD
 31690                           plusw2	equ	0xFDB
 31691                           fsr2h	equ	0xFDA
 31692                           fsr2l	equ	0xFD9
 31693                           status	equ	0xFD8
 31694                           
 31695 ;; *************** function _SwTimerSetCallback *****************
 31696 ;; Defined at:
 31697 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 31698 ;; Parameters:    Size  Location     Type
 31699 ;;  timerId         1    wreg     unsigned char 
 31700 ;;  callback        2    4[BANK0 ] PTR FTN(unsigned char ,)
 31701 ;;		 -> DutyCycleCallback(1), UpdateJoinSuccessState(1), UnconfirmedTransmissionCallback(1), AutomaticReplyCallback(1), 
 31702 ;;		 -> AckRetransmissionCallback(1), LORAWAN_LinkCheckCallback(1), LORAWAN_ReceiveWindow1Callback(1), LORAWAN_ReceiveWi
      +ndow2Callback(1), 
 31703 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), 
 31704 ;;  callbackPara    1    6[BANK0 ] unsigned char 
 31705 ;; Auto vars:     Size  Location     Type
 31706 ;;  timerId         1    7[BANK0 ] unsigned char 
 31707 ;; Return value:  Size  Location     Type
 31708 ;;                  1    wreg      void 
 31709 ;; Registers used:
 31710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 31711 ;; Tracked objects:
 31712 ;;		On entry : C/2
 31713 ;;		On exit  : F/0
 31714 ;;		Unchanged: 0/0
 31715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 31716 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31719 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31720 ;;Total ram usage:        4 bytes
 31721 ;; Hardware stack levels used:    1
 31722 ;; Hardware stack levels required when called:    7
 31723 ;; This function calls:
 31724 ;;		Nothing
 31725 ;; This function is called by:
 31726 ;;		_RADIO_Init
 31727 ;;		_SetCallbackSoftwareTimers
 31728 ;; This function uses a non-reentrant model
 31729 ;;
 31730                           
 31731                           	psect	text162
 31732  005BDA                     __ptext162:
 31733                           	opt stack 0
 31734  005BDA                     _SwTimerSetCallback:
 31735                           	opt stack 21
 31736                           
 31737                           ; BSR set to: 1
 31738                           ;incstack = 0
 31739                           ;SwTimerSetCallback@timerId stored from wreg
 31740  005BDA  0100               	movlb	0	; () banked
 31741  005BDC  6F67               	movwf	SwTimerSetCallback@timerId& (0+255),b
 31742                           
 31743                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 31744  005BDE  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31745  005BE0  EC8C  F023         	call	PL94	;call to abstracted procedure
 31746  005BE4  C064  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 31747  005BE8  C065  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 31748                           
 31749                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 31750  005BEC  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31751  005BEE  D803               	call	PL158	;call to abstracted procedure
 31752  005BF0  C066  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 31753                           
 31754                           ; BSR set to: 0
 31755  005BF4  0012               	return		;funcret
 31756  005BF6                     __end_of_SwTimerSetCallback:
 31757                           	opt stack 0
 31758  005BF6                     PL158:
 31759                           	opt stack 12
 31760  005BF6  0D08               	mullw	8
 31761  005BF8  0E05               	movlw	low (_swTimers+5)
 31762  005BFA  24F3               	addwf	prodl,w,c
 31763  005BFC  6ED9               	movwf	fsr2l,c
 31764  005BFE  0E03               	movlw	high (_swTimers+5)
 31765  005C00  20F4               	addwfc	prodh,w,c
 31766  005C02  6EDA               	movwf	fsr2h,c
 31767  005C04  0012               	return	
 31768  005C06                     __end_ofPL158:
 31769                           	opt stack 0
 31770                           tosu	equ	0xFFF
 31771                           tosh	equ	0xFFE
 31772                           tosl	equ	0xFFD
 31773                           pclath	equ	0xFFA
 31774                           tblptru	equ	0xFF8
 31775                           tblptrh	equ	0xFF7
 31776                           tblptrl	equ	0xFF6
 31777                           tablat	equ	0xFF5
 31778                           prodh	equ	0xFF4
 31779                           prodl	equ	0xFF3
 31780                           intcon	equ	0xFF2
 31781                           indf0	equ	0xFEF
 31782                           postinc0	equ	0xFEE
 31783                           plusw0	equ	0xFEB
 31784                           fsr0h	equ	0xFEA
 31785                           fsr0l	equ	0xFE9
 31786                           wreg	equ	0xFE8
 31787                           postinc1	equ	0xFE6
 31788                           postdec1	equ	0xFE5
 31789                           plusw1	equ	0xFE3
 31790                           fsr1h	equ	0xFE2
 31791                           fsr1l	equ	0xFE1
 31792                           indf2	equ	0xFDF
 31793                           postinc2	equ	0xFDE
 31794                           postdec2	equ	0xFDD
 31795                           plusw2	equ	0xFDB
 31796                           fsr2h	equ	0xFDA
 31797                           fsr2l	equ	0xFD9
 31798                           status	equ	0xFD8
 31799                           
 31800 ;; *************** function _RADIO_WriteMode *****************
 31801 ;; Defined at:
 31802 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31803 ;; Parameters:    Size  Location     Type
 31804 ;;  newMode         1    wreg     enum E17657
 31805 ;;  newModulatio    1    9[BANK0 ] enum E16925
 31806 ;;  blocking        1   10[BANK0 ] unsigned char 
 31807 ;; Auto vars:     Size  Location     Type
 31808 ;;  newMode         1   14[BANK0 ] enum E17657
 31809 ;;  opMode          1   15[BANK0 ] unsigned char 
 31810 ;;  currentMode     1   13[BANK0 ] enum E17657
 31811 ;;  dioMapping      1   12[BANK0 ] unsigned char 
 31812 ;;  currentModul    1   11[BANK0 ] enum E16925
 31813 ;; Return value:  Size  Location     Type
 31814 ;;                  1    wreg      void 
 31815 ;; Registers used:
 31816 ;;		wreg, status,2, status,0, cstack
 31817 ;; Tracked objects:
 31818 ;;		On entry : F/0
 31819 ;;		On exit  : 0/0
 31820 ;;		Unchanged: 0/0
 31821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 31822 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31823 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31825 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31826 ;;Total ram usage:        7 bytes
 31827 ;; Hardware stack levels used:    1
 31828 ;; Hardware stack levels required when called:   10
 31829 ;; This function calls:
 31830 ;;		_HALDIO5PinValue
 31831 ;;		_RADIO_RegisterRead
 31832 ;;		_RADIO_RegisterWrite
 31833 ;;		_SystemBlockingWaitMs
 31834 ;; This function is called by:
 31835 ;;		_RADIO_Init
 31836 ;;		_RADIO_WriteConfiguration
 31837 ;;		_RADIO_Transmit
 31838 ;;		_RADIO_ReceiveStart
 31839 ;;		_RADIO_ReceiveStop
 31840 ;;		_RADIO_RxDone
 31841 ;;		_RADIO_FSKPayloadReady
 31842 ;;		_RADIO_RxTimeout
 31843 ;;		_RADIO_TxDone
 31844 ;;		_RADIO_FSKPacketSent
 31845 ;;		_RADIO_ReadRandom
 31846 ;;		_RADIO_RxFSKTimeout
 31847 ;;		_RADIO_WatchdogTimeout
 31848 ;; This function uses a non-reentrant model
 31849 ;;
 31850                           
 31851                           	psect	text163
 31852  0036EA                     __ptext163:
 31853                           	opt stack 0
 31854  0036EA                     _RADIO_WriteMode:
 31855                           	opt stack 17
 31856                           
 31857                           ; BSR set to: 0
 31858                           ;incstack = 0
 31859                           ;RADIO_WriteMode@newMode stored from wreg
 31860  0036EA  6F6E               	movwf	RADIO_WriteMode@newMode& (0+255),b
 31861                           
 31862                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 31863                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 31864                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 31865                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 31866                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 31867                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 31868  0036EC  0100               	movlb	0	; () banked
 31869  0036EE  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31870  0036F0  E108               	bnz	l12136
 31871                           
 31872                           ; BSR set to: 0
 31873  0036F2  0E06               	movlw	6
 31874  0036F4  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31875  0036F6  B4D8               	btfsc	status,2,c
 31876  0036F8  0012               	return	
 31877                           
 31878                           ; BSR set to: 0
 31879  0036FA  0E07               	movlw	7
 31880  0036FC  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31881  0036FE  E101               	bnz	l12136
 31882  003700  0012               	return	
 31883  003702                     l12136:
 31884                           
 31885                           ; BSR set to: 0
 31886                           ;radio_driver_SX1276.c: 159: }
 31887                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 31888  003702  0E07               	movlw	7
 31889  003704  176E               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 31890                           
 31891                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 31892  003706  0E01               	movlw	1
 31893  003708  1769               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 31894                           
 31895                           ; BSR set to: 0
 31896                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 31897  00370A  EC8D  F02E         	call	_RADIO_RegisterRead
 31898  00370E  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31899                           
 31900                           ; BSR set to: 0
 31901                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 31902  003710  AF6F               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 31903  003712  D003               	goto	l403
 31904                           
 31905                           ; BSR set to: 0
 31906                           ;radio_driver_SX1276.c: 168: {
 31907                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 31908  003714  0E01               	movlw	1
 31909  003716  6F6B               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 31910                           
 31911                           ;radio_driver_SX1276.c: 170: }
 31912  003718  D001               	goto	l12144
 31913  00371A                     l403:
 31914                           
 31915                           ; BSR set to: 0
 31916                           ;radio_driver_SX1276.c: 171: else
 31917                           ;radio_driver_SX1276.c: 172: {
 31918                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 31919  00371A  6B6B               	clrf	RADIO_WriteMode@currentModulation& (0+255),b
 31920  00371C                     l12144:
 31921                           
 31922                           ; BSR set to: 0
 31923                           ;radio_driver_SX1276.c: 174: }
 31924                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 31925  00371C  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31926  00371E  0B07               	andlw	7
 31927  003720  6F6D               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 31928                           
 31929                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 31930  003722  516B               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 31931  003724  1969               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 31932  003726  E016               	bz	l12160
 31933                           
 31934                           ; BSR set to: 0
 31935                           ;radio_driver_SX1276.c: 181: {
 31936                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 31937  003728  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31938  00372A  E008               	bz	l12152
 31939                           
 31940                           ; BSR set to: 0
 31941                           ;radio_driver_SX1276.c: 184: {
 31942                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 31943  00372C  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31944  00372E  0BF8               	andlw	248
 31945  003730  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31946  003732  0E01               	movlw	1
 31947  003734  EC79  F02F         	call	_RADIO_RegisterWrite
 31948                           
 31949                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 31950  003738  0100               	movlb	0	; () banked
 31951  00373A  6B6D               	clrf	RADIO_WriteMode@currentMode& (0+255),b
 31952  00373C                     l12152:
 31953                           
 31954                           ; BSR set to: 0
 31955                           ;radio_driver_SX1276.c: 188: }
 31956                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 31957  00373C  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31958  00373E  E103               	bnz	l12156
 31959                           
 31960                           ; BSR set to: 0
 31961                           ;radio_driver_SX1276.c: 191: {
 31962                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 31963  003740  0E78               	movlw	120
 31964  003742  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 31965                           
 31966                           ;radio_driver_SX1276.c: 194: }
 31967  003744  D004               	goto	l12158
 31968  003746                     l12156:
 31969                           
 31970                           ; BSR set to: 0
 31971                           ;radio_driver_SX1276.c: 195: else
 31972                           ;radio_driver_SX1276.c: 196: {
 31973                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 31974  003746  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31975  003748  0B78               	andlw	120
 31976  00374A  0980               	iorlw	128
 31977  00374C  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31978  00374E                     l12158:
 31979                           
 31980                           ; BSR set to: 0
 31981                           ;radio_driver_SX1276.c: 199: }
 31982                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 31983  00374E  D837               	call	PL460	;call to abstracted procedure
 31984  003750  EC79  F02F         	call	_RADIO_RegisterWrite
 31985  003754                     l12160:
 31986                           
 31987                           ;radio_driver_SX1276.c: 201: }
 31988                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 31989  003754  0100               	movlb	0	; () banked
 31990  003756  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31991  003758  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31992  00375A  B4D8               	btfsc	status,2,c
 31993  00375C  0012               	return	
 31994                           
 31995                           ; BSR set to: 0
 31996                           ;radio_driver_SX1276.c: 208: {
 31997                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 31998  00375E  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31999  003760  E012               	bz	l12176
 32000                           
 32001                           ; BSR set to: 0
 32002  003762  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32003  003764  E110               	bnz	l12176
 32004                           
 32005                           ; BSR set to: 0
 32006                           ;radio_driver_SX1276.c: 212: {
 32007                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 32008  003766  0E41               	movlw	65
 32009  003768  EC8D  F02E         	call	_RADIO_RegisterRead
 32010  00376C  6F6C               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 32011                           
 32012                           ; BSR set to: 0
 32013                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 32014  00376E  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32015  003770  E103               	bnz	l12172
 32016                           
 32017                           ; BSR set to: 0
 32018                           ;radio_driver_SX1276.c: 215: {
 32019                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 32020  003772  0E30               	movlw	48
 32021  003774  136C               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32022                           
 32023                           ;radio_driver_SX1276.c: 218: }
 32024  003776  D002               	goto	l12174
 32025  003778                     l12172:
 32026                           
 32027                           ; BSR set to: 0
 32028                           ;radio_driver_SX1276.c: 219: else
 32029                           ;radio_driver_SX1276.c: 220: {
 32030                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 32031  003778  0ECF               	movlw	207
 32032  00377A  176C               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32033  00377C                     l12174:
 32034                           
 32035                           ; BSR set to: 0
 32036                           ;radio_driver_SX1276.c: 223: }
 32037                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 32038  00377C  C06C  F066         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 32039  003780  0E41               	movlw	65
 32040  003782  EC79  F02F         	call	_RADIO_RegisterWrite
 32041  003786                     l12176:
 32042                           
 32043                           ;radio_driver_SX1276.c: 225: }
 32044                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 32045  003786  0EF8               	movlw	248
 32046  003788  0100               	movlb	0	; () banked
 32047  00378A  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 32048                           
 32049                           ; BSR set to: 0
 32050                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 32051  00378C  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32052  00378E  136F               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 32053                           
 32054                           ; BSR set to: 0
 32055                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 32056  003790  D816               	call	PL460	;call to abstracted procedure
 32057  003792  EC79  F02F         	call	_RADIO_RegisterWrite
 32058                           
 32059                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 32060  003796  0100               	movlb	0	; () banked
 32061  003798  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32062  00379A  A4D8               	btfss	status,2,c
 32063  00379C  0012               	return	
 32064                           
 32065                           ; BSR set to: 0
 32066                           ;radio_driver_SX1276.c: 234: {
 32067                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 32068  00379E  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32069  0037A0  E005               	bz	l12188
 32070  0037A2                     l12186:
 32071  0037A2  EC33  F031         	call	_HALDIO5PinValue	;wreg free
 32072  0037A6  0900               	iorlw	0
 32073  0037A8  E0FC               	bz	l12186
 32074  0037AA  0012               	return	
 32075  0037AC                     l12188:
 32076                           
 32077                           ; BSR set to: 0
 32078                           ;radio_driver_SX1276.c: 240: else
 32079                           ;radio_driver_SX1276.c: 241: {
 32080                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 32081  0037AC  D802               	call	PL242	;call to abstracted procedure
 32082  0037AE  EF03  F02E         	goto	_SystemBlockingWaitMs	;wreg free
 32083  0037B2                     __end_of_RADIO_WriteMode:
 32084                           	opt stack 0
 32085  0037B2                     PL242:
 32086                           	opt stack 18
 32087  0037B2  0E01               	movlw	1
 32088  0037B4  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32089  0037B6  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32090  0037B8  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32091  0037BA  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32092  0037BC  0C01               	retlw	1
 32093  0037BE                     __end_ofPL242:
 32094                           	opt stack 0
 32095  0037BE                     PL460:
 32096                           	opt stack 17
 32097  0037BE  C06F  F066         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32098  0037C2  0C01               	retlw	1
 32099  0037C4                     __end_ofPL460:
 32100                           	opt stack 0
 32101                           tosu	equ	0xFFF
 32102                           tosh	equ	0xFFE
 32103                           tosl	equ	0xFFD
 32104                           pclath	equ	0xFFA
 32105                           tblptru	equ	0xFF8
 32106                           tblptrh	equ	0xFF7
 32107                           tblptrl	equ	0xFF6
 32108                           tablat	equ	0xFF5
 32109                           prodh	equ	0xFF4
 32110                           prodl	equ	0xFF3
 32111                           intcon	equ	0xFF2
 32112                           indf0	equ	0xFEF
 32113                           postinc0	equ	0xFEE
 32114                           plusw0	equ	0xFEB
 32115                           fsr0h	equ	0xFEA
 32116                           fsr0l	equ	0xFE9
 32117                           wreg	equ	0xFE8
 32118                           postinc1	equ	0xFE6
 32119                           postdec1	equ	0xFE5
 32120                           plusw1	equ	0xFE3
 32121                           fsr1h	equ	0xFE2
 32122                           fsr1l	equ	0xFE1
 32123                           indf2	equ	0xFDF
 32124                           postinc2	equ	0xFDE
 32125                           postdec2	equ	0xFDD
 32126                           plusw2	equ	0xFDB
 32127                           fsr2h	equ	0xFDA
 32128                           fsr2l	equ	0xFD9
 32129                           status	equ	0xFD8
 32130                           
 32131 ;; *************** function _RADIO_RegisterRead *****************
 32132 ;; Defined at:
 32133 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32134 ;; Parameters:    Size  Location     Type
 32135 ;;  reg             1    wreg     unsigned char 
 32136 ;; Auto vars:     Size  Location     Type
 32137 ;;  reg             1    6[BANK0 ] unsigned char 
 32138 ;;  readValue       1    7[BANK0 ] unsigned char 
 32139 ;; Return value:  Size  Location     Type
 32140 ;;                  1    wreg      unsigned char 
 32141 ;; Registers used:
 32142 ;;		wreg, status,2, status,0, cstack
 32143 ;; Tracked objects:
 32144 ;;		On entry : 0/0
 32145 ;;		On exit  : F/0
 32146 ;;		Unchanged: 0/0
 32147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32152 ;;Total ram usage:        2 bytes
 32153 ;; Hardware stack levels used:    1
 32154 ;; Hardware stack levels required when called:    9
 32155 ;; This function calls:
 32156 ;;		_HALSPICSAssert
 32157 ;;		_HALSPICSDeassert
 32158 ;;		_HALSPISend
 32159 ;; This function is called by:
 32160 ;;		_RADIO_WriteMode
 32161 ;;		_RADIO_WritePower
 32162 ;;		_RADIO_Init
 32163 ;;		_RADIO_WriteConfiguration
 32164 ;;		_RADIO_Transmit
 32165 ;;		_RADIO_RxDone
 32166 ;;		_RADIO_FSKPayloadReady
 32167 ;;		_RADIO_FSKPacketSent
 32168 ;;		_RADIO_FHSSChangeChannel
 32169 ;;		_RADIO_DIO0
 32170 ;;		_RADIO_DIO1
 32171 ;;		_RADIO_DIO2
 32172 ;;		_RADIO_DIO3
 32173 ;;		_RADIO_DIO4
 32174 ;;		_RADIO_DIO5
 32175 ;;		_RADIO_ReadRandom
 32176 ;;		_RADIO_RxFSKTimeout
 32177 ;; This function uses a non-reentrant model
 32178 ;;
 32179                           
 32180                           	psect	text164
 32181  005D1A                     __ptext164:
 32182                           	opt stack 0
 32183  005D1A                     _RADIO_RegisterRead:
 32184                           	opt stack 17
 32185                           
 32186                           ;incstack = 0
 32187                           ;RADIO_RegisterRead@reg stored from wreg
 32188  005D1A  0100               	movlb	0	; () banked
 32189  005D1C  6F66               	movwf	RADIO_RegisterRead@reg& (0+255),b
 32190                           
 32191                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 32192                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 32193  005D1E  9F66               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 32194                           
 32195                           ; BSR set to: 0
 32196                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 32197  005D20  EC48  F031         	call	_HALSPICSAssert	;wreg free
 32198                           
 32199                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 32200  005D24  0100               	movlb	0	; () banked
 32201  005D26  5166               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 32202  005D28  ECFB  F030         	call	_HALSPISend
 32203                           
 32204                           ; BSR set to: 14
 32205                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 32206  005D2C  0EFF               	movlw	255
 32207  005D2E  ECFB  F030         	call	_HALSPISend
 32208  005D32  0100               	movlb	0	; () banked
 32209  005D34  6F67               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 32210                           
 32211                           ; BSR set to: 0
 32212                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 32213  005D36  EC46  F031         	call	_HALSPICSDeassert	;wreg free
 32214                           
 32215                           ;radio_driver_SX1276.c: 142: return readValue;
 32216  005D3A  0100               	movlb	0	; () banked
 32217  005D3C  5167               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 32218                           
 32219                           ; BSR set to: 0
 32220  005D3E  0012               	return		;funcret
 32221  005D40                     __end_of_RADIO_RegisterRead:
 32222                           	opt stack 0
 32223                           tosu	equ	0xFFF
 32224                           tosh	equ	0xFFE
 32225                           tosl	equ	0xFFD
 32226                           pclath	equ	0xFFA
 32227                           tblptru	equ	0xFF8
 32228                           tblptrh	equ	0xFF7
 32229                           tblptrl	equ	0xFF6
 32230                           tablat	equ	0xFF5
 32231                           prodh	equ	0xFF4
 32232                           prodl	equ	0xFF3
 32233                           intcon	equ	0xFF2
 32234                           indf0	equ	0xFEF
 32235                           postinc0	equ	0xFEE
 32236                           plusw0	equ	0xFEB
 32237                           fsr0h	equ	0xFEA
 32238                           fsr0l	equ	0xFE9
 32239                           wreg	equ	0xFE8
 32240                           postinc1	equ	0xFE6
 32241                           postdec1	equ	0xFE5
 32242                           plusw1	equ	0xFE3
 32243                           fsr1h	equ	0xFE2
 32244                           fsr1l	equ	0xFE1
 32245                           indf2	equ	0xFDF
 32246                           postinc2	equ	0xFDE
 32247                           postdec2	equ	0xFDD
 32248                           plusw2	equ	0xFDB
 32249                           fsr2h	equ	0xFDA
 32250                           fsr2l	equ	0xFD9
 32251                           status	equ	0xFD8
 32252                           
 32253 ;; *************** function _HALDIO5PinValue *****************
 32254 ;; Defined at:
 32255 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32256 ;; Parameters:    Size  Location     Type
 32257 ;;		None
 32258 ;; Auto vars:     Size  Location     Type
 32259 ;;		None
 32260 ;; Return value:  Size  Location     Type
 32261 ;;                  1    wreg      unsigned char 
 32262 ;; Registers used:
 32263 ;;		wreg
 32264 ;; Tracked objects:
 32265 ;;		On entry : 0/0
 32266 ;;		On exit  : 0/0
 32267 ;;		Unchanged: 0/0
 32268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32273 ;;Total ram usage:        0 bytes
 32274 ;; Hardware stack levels used:    1
 32275 ;; Hardware stack levels required when called:    7
 32276 ;; This function calls:
 32277 ;;		Nothing
 32278 ;; This function is called by:
 32279 ;;		_RADIO_WriteMode
 32280 ;; This function uses a non-reentrant model
 32281 ;;
 32282                           
 32283                           	psect	text165
 32284  006266                     __ptext165:
 32285                           	opt stack 0
 32286  006266                     _HALDIO5PinValue:
 32287                           	opt stack 19
 32288                           
 32289                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 32290                           
 32291                           ; BSR set to: 0
 32292                           ;incstack = 0
 32293  006266  B08A               	btfsc	3978,0,c	;volatile
 32294  006268  0C01               	retlw	1
 32295  00626A  0C00               	retlw	0	;funcret
 32296  00626C                     __end_of_HALDIO5PinValue:
 32297                           	opt stack 0
 32298                           tosu	equ	0xFFF
 32299                           tosh	equ	0xFFE
 32300                           tosl	equ	0xFFD
 32301                           pclath	equ	0xFFA
 32302                           tblptru	equ	0xFF8
 32303                           tblptrh	equ	0xFF7
 32304                           tblptrl	equ	0xFF6
 32305                           tablat	equ	0xFF5
 32306                           prodh	equ	0xFF4
 32307                           prodl	equ	0xFF3
 32308                           intcon	equ	0xFF2
 32309                           indf0	equ	0xFEF
 32310                           postinc0	equ	0xFEE
 32311                           plusw0	equ	0xFEB
 32312                           fsr0h	equ	0xFEA
 32313                           fsr0l	equ	0xFE9
 32314                           wreg	equ	0xFE8
 32315                           postinc1	equ	0xFE6
 32316                           postdec1	equ	0xFE5
 32317                           plusw1	equ	0xFE3
 32318                           fsr1h	equ	0xFE2
 32319                           fsr1l	equ	0xFE1
 32320                           indf2	equ	0xFDF
 32321                           postinc2	equ	0xFDE
 32322                           postdec2	equ	0xFDD
 32323                           plusw2	equ	0xFDB
 32324                           fsr2h	equ	0xFDA
 32325                           fsr2l	equ	0xFD9
 32326                           status	equ	0xFD8
 32327                           
 32328 ;; *************** function _RADIO_WriteFrequency *****************
 32329 ;; Defined at:
 32330 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32331 ;; Parameters:    Size  Location     Type
 32332 ;;  frequency       4   17[BANK0 ] unsigned long 
 32333 ;; Auto vars:     Size  Location     Type
 32334 ;;  num             4   25[BANK0 ] unsigned long 
 32335 ;;  num_mod         4   21[BANK0 ] unsigned long 
 32336 ;; Return value:  Size  Location     Type
 32337 ;;                  1    wreg      void 
 32338 ;; Registers used:
 32339 ;;		wreg, status,2, status,0, cstack
 32340 ;; Tracked objects:
 32341 ;;		On entry : 0/0
 32342 ;;		On exit  : 1/0
 32343 ;;		Unchanged: 0/0
 32344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32345 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32346 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32348 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32349 ;;Total ram usage:       12 bytes
 32350 ;; Hardware stack levels used:    1
 32351 ;; Hardware stack levels required when called:   10
 32352 ;; This function calls:
 32353 ;;		_RADIO_RegisterWrite
 32354 ;;		___lldiv
 32355 ;;		___llmod
 32356 ;; This function is called by:
 32357 ;;		_RADIO_Init
 32358 ;;		_RADIO_WriteConfiguration
 32359 ;;		_RADIO_FHSSChangeChannel
 32360 ;; This function uses a non-reentrant model
 32361 ;;
 32362                           
 32363                           	psect	text166
 32364  0037C4                     __ptext166:
 32365                           	opt stack 0
 32366  0037C4                     _RADIO_WriteFrequency:
 32367                           	opt stack 16
 32368                           
 32369                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 32370                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 32371                           
 32372                           ;incstack = 0
 32373  0037C4  C071  F064         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 32374  0037C8  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 32375  0037CC  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 32376  0037D0  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 32377  0037D4  0E09               	movlw	9
 32378  0037D6  0100               	movlb	0	; () banked
 32379  0037D8  D85B               	call	PL248	;call to abstracted procedure
 32380  0037DA  EC55  F025         	call	___lldiv	;wreg free
 32381  0037DE  C064  F079         	movff	?___lldiv,RADIO_WriteFrequency@num
 32382  0037E2  C065  F07A         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 32383  0037E6  C066  F07B         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 32384  0037EA  C067  F07C         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 32385                           
 32386                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 32387  0037EE  C071  F064         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 32388  0037F2  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 32389  0037F6  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 32390  0037FA  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 32391  0037FE  0E09               	movlw	9
 32392  003800  6F68               	movwf	___llmod@divisor& (0+255),b
 32393  003802  0E3D               	movlw	61
 32394  003804  6F69               	movwf	(___llmod@divisor+1)& (0+255),b
 32395  003806  6B6A               	clrf	(___llmod@divisor+2)& (0+255),b
 32396  003808  6B6B               	clrf	(___llmod@divisor+3)& (0+255),b
 32397  00380A  EC2F  F027         	call	___llmod	;wreg free
 32398  00380E  C064  F075         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 32399  003812  C065  F076         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 32400  003816  C066  F077         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 32401  00381A  C067  F078         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 32402                           
 32403                           ; BSR set to: 0
 32404                           ;radio_driver_SX1276.c: 277: num <<= (8);
 32405  00381E  C07B  F07C         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 32406  003822  C07A  F07B         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 32407  003826  C079  F07A         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 32408  00382A  6B79               	clrf	RADIO_WriteFrequency@num& (0+255),b
 32409                           
 32410                           ; BSR set to: 0
 32411                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 32412  00382C  C077  F078         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 32413  003830  C076  F077         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 32414  003834  C075  F076         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 32415  003838  6B75               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 32416                           
 32417                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 32418  00383A  C075  F064         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 32419  00383E  C076  F065         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 32420  003842  C077  F066         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 32421  003846  C078  F067         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 32422  00384A  0E09               	movlw	9
 32423  00384C  D821               	call	PL248	;call to abstracted procedure
 32424  00384E  EC55  F025         	call	___lldiv	;wreg free
 32425  003852  C064  F075         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 32426  003856  C065  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 32427  00385A  C066  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 32428  00385E  C067  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 32429                           
 32430                           ; BSR set to: 0
 32431                           ;radio_driver_SX1276.c: 283: num += num_mod;
 32432  003862  5175               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 32433  003864  2779               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 32434  003866  5176               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 32435  003868  237A               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 32436  00386A  5177               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 32437  00386C  237B               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 32438  00386E  5178               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 32439  003870  237C               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 32440                           
 32441                           ; BSR set to: 0
 32442                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 32443  003872  C07B  F066         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 32444  003876  0E06               	movlw	6
 32445  003878  EC79  F02F         	call	_RADIO_RegisterWrite
 32446                           
 32447                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 32448  00387C  C07A  F066         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 32449  003880  0E07               	movlw	7
 32450  003882  EC79  F02F         	call	_RADIO_RegisterWrite
 32451                           
 32452                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 32453  003886  C079  F066         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 32454  00388A  0E08               	movlw	8
 32455  00388C  EF79  F02F         	goto	_RADIO_RegisterWrite
 32456  003890                     __end_of_RADIO_WriteFrequency:
 32457                           	opt stack 0
 32458  003890                     PL248:
 32459                           	opt stack 16
 32460  003890  6F68               	movwf	___lldiv@divisor& (0+255),b
 32461  003892  0E3D               	movlw	61
 32462  003894  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 32463  003896  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 32464  003898  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 32465  00389A  0C3D               	retlw	61
 32466  00389C                     __end_ofPL248:
 32467                           	opt stack 0
 32468                           tosu	equ	0xFFF
 32469                           tosh	equ	0xFFE
 32470                           tosl	equ	0xFFD
 32471                           pclath	equ	0xFFA
 32472                           tblptru	equ	0xFF8
 32473                           tblptrh	equ	0xFF7
 32474                           tblptrl	equ	0xFF6
 32475                           tablat	equ	0xFF5
 32476                           prodh	equ	0xFF4
 32477                           prodl	equ	0xFF3
 32478                           intcon	equ	0xFF2
 32479                           indf0	equ	0xFEF
 32480                           postinc0	equ	0xFEE
 32481                           plusw0	equ	0xFEB
 32482                           fsr0h	equ	0xFEA
 32483                           fsr0l	equ	0xFE9
 32484                           wreg	equ	0xFE8
 32485                           postinc1	equ	0xFE6
 32486                           postdec1	equ	0xFE5
 32487                           plusw1	equ	0xFE3
 32488                           fsr1h	equ	0xFE2
 32489                           fsr1l	equ	0xFE1
 32490                           indf2	equ	0xFDF
 32491                           postinc2	equ	0xFDE
 32492                           postdec2	equ	0xFDD
 32493                           plusw2	equ	0xFDB
 32494                           fsr2h	equ	0xFDA
 32495                           fsr2l	equ	0xFD9
 32496                           status	equ	0xFD8
 32497                           
 32498 ;; *************** function ___llmod *****************
 32499 ;; Defined at:
 32500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 32501 ;; Parameters:    Size  Location     Type
 32502 ;;  dividend        4    4[BANK0 ] unsigned long 
 32503 ;;  divisor         4    8[BANK0 ] unsigned long 
 32504 ;; Auto vars:     Size  Location     Type
 32505 ;;  counter         1   12[BANK0 ] unsigned char 
 32506 ;; Return value:  Size  Location     Type
 32507 ;;                  4    4[BANK0 ] unsigned long 
 32508 ;; Registers used:
 32509 ;;		wreg, status,2, status,0
 32510 ;; Tracked objects:
 32511 ;;		On entry : F/0
 32512 ;;		On exit  : F/0
 32513 ;;		Unchanged: 0/0
 32514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32515 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32518 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32519 ;;Total ram usage:        9 bytes
 32520 ;; Hardware stack levels used:    1
 32521 ;; Hardware stack levels required when called:    7
 32522 ;; This function calls:
 32523 ;;		Nothing
 32524 ;; This function is called by:
 32525 ;;		_RADIO_WriteFrequency
 32526 ;; This function uses a non-reentrant model
 32527 ;;
 32528                           
 32529                           	psect	text167
 32530  004E5E                     __ptext167:
 32531                           	opt stack 0
 32532  004E5E                     ___llmod:
 32533                           	opt stack 18
 32534                           
 32535                           ; BSR set to: 0
 32536                           
 32537                           ;incstack = 0
 32538  004E5E  5168               	movf	___llmod@divisor& (0+255),w,b
 32539  004E60  1169               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 32540  004E62  116A               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 32541  004E64  116B               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 32542  004E66  E023               	bz	l3036
 32543                           
 32544                           ; BSR set to: 0
 32545  004E68  0E01               	movlw	1
 32546  004E6A  6F6C               	movwf	___llmod@counter& (0+255),b
 32547  004E6C  D006               	goto	l12088
 32548  004E6E                     l12086:
 32549                           
 32550                           ; BSR set to: 0
 32551  004E6E  90D8               	bcf	status,0,c
 32552  004E70  3768               	rlcf	___llmod@divisor& (0+255),f,b
 32553  004E72  3769               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 32554  004E74  376A               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 32555  004E76  376B               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 32556  004E78  2B6C               	incf	___llmod@counter& (0+255),f,b
 32557  004E7A                     l12088:
 32558                           
 32559                           ; BSR set to: 0
 32560  004E7A  AF6B               	btfss	(___llmod@divisor+3)& (0+255),7,b
 32561  004E7C  D7F8               	goto	l12086
 32562  004E7E                     l12090:
 32563                           
 32564                           ; BSR set to: 0
 32565  004E7E  5168               	movf	___llmod@divisor& (0+255),w,b
 32566  004E80  5D64               	subwf	___llmod@dividend& (0+255),w,b
 32567  004E82  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32568  004E84  5965               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 32569  004E86  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32570  004E88  5966               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 32571  004E8A  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32572  004E8C  5967               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 32573  004E8E  E308               	bnc	l12094
 32574                           
 32575                           ; BSR set to: 0
 32576  004E90  5168               	movf	___llmod@divisor& (0+255),w,b
 32577  004E92  5F64               	subwf	___llmod@dividend& (0+255),f,b
 32578  004E94  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32579  004E96  5B65               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 32580  004E98  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32581  004E9A  5B66               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 32582  004E9C  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32583  004E9E  5B67               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 32584  004EA0                     l12094:
 32585                           
 32586                           ; BSR set to: 0
 32587  004EA0  90D8               	bcf	status,0,c
 32588  004EA2  336B               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 32589  004EA4  336A               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 32590  004EA6  3369               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 32591  004EA8  3368               	rrcf	___llmod@divisor& (0+255),f,b
 32592                           
 32593                           ; BSR set to: 0
 32594  004EAA  2F6C               	decfsz	___llmod@counter& (0+255),f,b
 32595  004EAC  D7E8               	goto	l12090
 32596  004EAE                     l3036:
 32597                           
 32598                           ; BSR set to: 0
 32599  004EAE  C064  F064         	movff	___llmod@dividend,?___llmod
 32600  004EB2  C065  F065         	movff	___llmod@dividend+1,?___llmod+1
 32601  004EB6  C066  F066         	movff	___llmod@dividend+2,?___llmod+2
 32602  004EBA  C067  F067         	movff	___llmod@dividend+3,?___llmod+3
 32603                           
 32604                           ; BSR set to: 0
 32605  004EBE  0012               	return		;funcret
 32606  004EC0                     __end_of___llmod:
 32607                           	opt stack 0
 32608                           tosu	equ	0xFFF
 32609                           tosh	equ	0xFFE
 32610                           tosl	equ	0xFFD
 32611                           pclath	equ	0xFFA
 32612                           tblptru	equ	0xFF8
 32613                           tblptrh	equ	0xFF7
 32614                           tblptrl	equ	0xFF6
 32615                           tablat	equ	0xFF5
 32616                           prodh	equ	0xFF4
 32617                           prodl	equ	0xFF3
 32618                           intcon	equ	0xFF2
 32619                           indf0	equ	0xFEF
 32620                           postinc0	equ	0xFEE
 32621                           plusw0	equ	0xFEB
 32622                           fsr0h	equ	0xFEA
 32623                           fsr0l	equ	0xFE9
 32624                           wreg	equ	0xFE8
 32625                           postinc1	equ	0xFE6
 32626                           postdec1	equ	0xFE5
 32627                           plusw1	equ	0xFE3
 32628                           fsr1h	equ	0xFE2
 32629                           fsr1l	equ	0xFE1
 32630                           indf2	equ	0xFDF
 32631                           postinc2	equ	0xFDE
 32632                           postdec2	equ	0xFDD
 32633                           plusw2	equ	0xFDB
 32634                           fsr2h	equ	0xFDA
 32635                           fsr2l	equ	0xFD9
 32636                           status	equ	0xFD8
 32637                           
 32638 ;; *************** function _RADIO_RegisterWrite *****************
 32639 ;; Defined at:
 32640 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32641 ;; Parameters:    Size  Location     Type
 32642 ;;  reg             1    wreg     unsigned char 
 32643 ;;  value           1    6[BANK0 ] unsigned char 
 32644 ;; Auto vars:     Size  Location     Type
 32645 ;;  reg             1    7[BANK0 ] unsigned char 
 32646 ;; Return value:  Size  Location     Type
 32647 ;;                  1    wreg      void 
 32648 ;; Registers used:
 32649 ;;		wreg, status,2, status,0, cstack
 32650 ;; Tracked objects:
 32651 ;;		On entry : 0/0
 32652 ;;		On exit  : 1/0
 32653 ;;		Unchanged: 0/0
 32654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32655 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32659 ;;Total ram usage:        2 bytes
 32660 ;; Hardware stack levels used:    1
 32661 ;; Hardware stack levels required when called:    9
 32662 ;; This function calls:
 32663 ;;		_HALSPICSAssert
 32664 ;;		_HALSPICSDeassert
 32665 ;;		_HALSPISend
 32666 ;; This function is called by:
 32667 ;;		_RADIO_WriteMode
 32668 ;;		_RADIO_WriteFrequency
 32669 ;;		_RADIO_WriteFSKFrequencyDeviation
 32670 ;;		_RADIO_WriteFSKBitRate
 32671 ;;		_RADIO_WritePower
 32672 ;;		_RADIO_Init
 32673 ;;		_RADIO_WriteConfiguration
 32674 ;;		_RADIO_Transmit
 32675 ;;		_RADIO_ReceiveStart
 32676 ;;		_RADIO_RxDone
 32677 ;;		_RADIO_RxTimeout
 32678 ;;		_RADIO_TxDone
 32679 ;;		_RADIO_UnhandledInterrupt
 32680 ;;		_RADIO_FHSSChangeChannel
 32681 ;;		_RADIO_ReadRandom
 32682 ;; This function uses a non-reentrant model
 32683 ;;
 32684                           
 32685                           	psect	text168
 32686  005EF2                     __ptext168:
 32687                           	opt stack 0
 32688  005EF2                     _RADIO_RegisterWrite:
 32689                           	opt stack 17
 32690                           
 32691                           ; BSR set to: 0
 32692                           ;incstack = 0
 32693                           ;RADIO_RegisterWrite@reg stored from wreg
 32694  005EF2  0100               	movlb	0	; () banked
 32695  005EF4  6F67               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 32696                           
 32697                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 32698  005EF6  EC48  F031         	call	_HALSPICSAssert	;wreg free
 32699                           
 32700                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 32701  005EFA  0100               	movlb	0	; () banked
 32702  005EFC  5167               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 32703  005EFE  0980               	iorlw	128
 32704  005F00  ECFB  F030         	call	_HALSPISend
 32705                           
 32706                           ; BSR set to: 14
 32707                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 32708  005F04  0100               	movlb	0	; () banked
 32709  005F06  5166               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 32710  005F08  ECFB  F030         	call	_HALSPISend
 32711                           
 32712                           ; BSR set to: 14
 32713                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 32714  005F0C  EF46  F031         	goto	_HALSPICSDeassert	;wreg free
 32715  005F10                     __end_of_RADIO_RegisterWrite:
 32716                           	opt stack 0
 32717                           tosu	equ	0xFFF
 32718                           tosh	equ	0xFFE
 32719                           tosl	equ	0xFFD
 32720                           pclath	equ	0xFFA
 32721                           tblptru	equ	0xFF8
 32722                           tblptrh	equ	0xFF7
 32723                           tblptrl	equ	0xFF6
 32724                           tablat	equ	0xFF5
 32725                           prodh	equ	0xFF4
 32726                           prodl	equ	0xFF3
 32727                           intcon	equ	0xFF2
 32728                           indf0	equ	0xFEF
 32729                           postinc0	equ	0xFEE
 32730                           plusw0	equ	0xFEB
 32731                           fsr0h	equ	0xFEA
 32732                           fsr0l	equ	0xFE9
 32733                           wreg	equ	0xFE8
 32734                           postinc1	equ	0xFE6
 32735                           postdec1	equ	0xFE5
 32736                           plusw1	equ	0xFE3
 32737                           fsr1h	equ	0xFE2
 32738                           fsr1l	equ	0xFE1
 32739                           indf2	equ	0xFDF
 32740                           postinc2	equ	0xFDE
 32741                           postdec2	equ	0xFDD
 32742                           plusw2	equ	0xFDB
 32743                           fsr2h	equ	0xFDA
 32744                           fsr2l	equ	0xFD9
 32745                           status	equ	0xFD8
 32746                           
 32747 ;; *************** function _HALSPISend *****************
 32748 ;; Defined at:
 32749 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32750 ;; Parameters:    Size  Location     Type
 32751 ;;  data            1    wreg     unsigned char 
 32752 ;; Auto vars:     Size  Location     Type
 32753 ;;  data            1    5[BANK0 ] unsigned char 
 32754 ;; Return value:  Size  Location     Type
 32755 ;;                  1    wreg      unsigned char 
 32756 ;; Registers used:
 32757 ;;		wreg, status,2, cstack
 32758 ;; Tracked objects:
 32759 ;;		On entry : 0/0
 32760 ;;		On exit  : F/E
 32761 ;;		Unchanged: 0/0
 32762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32767 ;;Total ram usage:        1 bytes
 32768 ;; Hardware stack levels used:    1
 32769 ;; Hardware stack levels required when called:    8
 32770 ;; This function calls:
 32771 ;;		_SPI2_Exchange8bit
 32772 ;; This function is called by:
 32773 ;;		_RADIO_RegisterWrite
 32774 ;;		_RADIO_RegisterRead
 32775 ;;		_RADIO_Transmit
 32776 ;;		_RADIO_RxDone
 32777 ;;		_RADIO_FSKPayloadReady
 32778 ;; This function uses a non-reentrant model
 32779 ;;
 32780                           
 32781                           	psect	text169
 32782  0061F6                     __ptext169:
 32783                           	opt stack 0
 32784  0061F6                     _HALSPISend:
 32785                           	opt stack 17
 32786                           
 32787                           ;incstack = 0
 32788                           ;HALSPISend@data stored from wreg
 32789  0061F6  0100               	movlb	0	; () banked
 32790  0061F8  6F65               	movwf	HALSPISend@data& (0+255),b
 32791                           
 32792                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 32793  0061FA  5165               	movf	HALSPISend@data& (0+255),w,b
 32794  0061FC  EF95  F030         	goto	_SPI2_Exchange8bit
 32795  006200                     __end_of_HALSPISend:
 32796                           	opt stack 0
 32797                           tosu	equ	0xFFF
 32798                           tosh	equ	0xFFE
 32799                           tosl	equ	0xFFD
 32800                           pclath	equ	0xFFA
 32801                           tblptru	equ	0xFF8
 32802                           tblptrh	equ	0xFF7
 32803                           tblptrl	equ	0xFF6
 32804                           tablat	equ	0xFF5
 32805                           prodh	equ	0xFF4
 32806                           prodl	equ	0xFF3
 32807                           intcon	equ	0xFF2
 32808                           indf0	equ	0xFEF
 32809                           postinc0	equ	0xFEE
 32810                           plusw0	equ	0xFEB
 32811                           fsr0h	equ	0xFEA
 32812                           fsr0l	equ	0xFE9
 32813                           wreg	equ	0xFE8
 32814                           postinc1	equ	0xFE6
 32815                           postdec1	equ	0xFE5
 32816                           plusw1	equ	0xFE3
 32817                           fsr1h	equ	0xFE2
 32818                           fsr1l	equ	0xFE1
 32819                           indf2	equ	0xFDF
 32820                           postinc2	equ	0xFDE
 32821                           postdec2	equ	0xFDD
 32822                           plusw2	equ	0xFDB
 32823                           fsr2h	equ	0xFDA
 32824                           fsr2l	equ	0xFD9
 32825                           status	equ	0xFD8
 32826                           
 32827 ;; *************** function _SPI2_Exchange8bit *****************
 32828 ;; Defined at:
 32829 ;;		line 77 in file "mcc_generated_files/spi2.c"
 32830 ;; Parameters:    Size  Location     Type
 32831 ;;  data            1    wreg     unsigned char 
 32832 ;; Auto vars:     Size  Location     Type
 32833 ;;  data            1    4[BANK0 ] unsigned char 
 32834 ;; Return value:  Size  Location     Type
 32835 ;;                  1    wreg      unsigned char 
 32836 ;; Registers used:
 32837 ;;		wreg, status,2
 32838 ;; Tracked objects:
 32839 ;;		On entry : F/0
 32840 ;;		On exit  : F/E
 32841 ;;		Unchanged: 0/0
 32842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32847 ;;Total ram usage:        1 bytes
 32848 ;; Hardware stack levels used:    1
 32849 ;; Hardware stack levels required when called:    7
 32850 ;; This function calls:
 32851 ;;		Nothing
 32852 ;; This function is called by:
 32853 ;;		_HALSPISend
 32854 ;; This function uses a non-reentrant model
 32855 ;;
 32856                           
 32857                           	psect	text170
 32858  00612A                     __ptext170:
 32859                           	opt stack 0
 32860  00612A                     _SPI2_Exchange8bit:
 32861                           	opt stack 17
 32862                           
 32863                           ; BSR set to: 14
 32864                           ;incstack = 0
 32865                           ;SPI2_Exchange8bit@data stored from wreg
 32866  00612A  6F64               	movwf	SPI2_Exchange8bit@data& (0+255),b
 32867                           
 32868                           ;spi2.c: 80: SSP2CON1bits.WCOL = 0;
 32869  00612C  010E               	movlb	14	; () banked
 32870  00612E  9FD9               	bcf	217,7,b	;volatile
 32871                           
 32872                           ; BSR set to: 14
 32873                           ;spi2.c: 82: SSP2BUF = data;
 32874  006130  C064  FED5         	movff	SPI2_Exchange8bit@data,3797	;volatile
 32875  006134                     l209:
 32876                           
 32877                           ; BSR set to: 14
 32878  006134  A1D8               	btfss	216,0,b	;volatile
 32879  006136  D7FE               	goto	l209
 32880                           
 32881                           ; BSR set to: 14
 32882                           ;spi2.c: 86: }
 32883                           ;spi2.c: 88: return (SSP2BUF);
 32884  006138  51D5               	movf	213,w,b	;volatile
 32885                           
 32886                           ; BSR set to: 14
 32887  00613A  0012               	return		;funcret
 32888  00613C                     __end_of_SPI2_Exchange8bit:
 32889                           	opt stack 0
 32890                           tosu	equ	0xFFF
 32891                           tosh	equ	0xFFE
 32892                           tosl	equ	0xFFD
 32893                           pclath	equ	0xFFA
 32894                           tblptru	equ	0xFF8
 32895                           tblptrh	equ	0xFF7
 32896                           tblptrl	equ	0xFF6
 32897                           tablat	equ	0xFF5
 32898                           prodh	equ	0xFF4
 32899                           prodl	equ	0xFF3
 32900                           intcon	equ	0xFF2
 32901                           indf0	equ	0xFEF
 32902                           postinc0	equ	0xFEE
 32903                           plusw0	equ	0xFEB
 32904                           fsr0h	equ	0xFEA
 32905                           fsr0l	equ	0xFE9
 32906                           wreg	equ	0xFE8
 32907                           postinc1	equ	0xFE6
 32908                           postdec1	equ	0xFE5
 32909                           plusw1	equ	0xFE3
 32910                           fsr1h	equ	0xFE2
 32911                           fsr1l	equ	0xFE1
 32912                           indf2	equ	0xFDF
 32913                           postinc2	equ	0xFDE
 32914                           postdec2	equ	0xFDD
 32915                           plusw2	equ	0xFDB
 32916                           fsr2h	equ	0xFDA
 32917                           fsr2l	equ	0xFD9
 32918                           status	equ	0xFD8
 32919                           
 32920 ;; *************** function _HALSPICSDeassert *****************
 32921 ;; Defined at:
 32922 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32923 ;; Parameters:    Size  Location     Type
 32924 ;;		None
 32925 ;; Auto vars:     Size  Location     Type
 32926 ;;		None
 32927 ;; Return value:  Size  Location     Type
 32928 ;;                  1    wreg      void 
 32929 ;; Registers used:
 32930 ;;		None
 32931 ;; Tracked objects:
 32932 ;;		On entry : 1/0
 32933 ;;		On exit  : 1/0
 32934 ;;		Unchanged: 1/0
 32935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 32936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32940 ;;Total ram usage:        0 bytes
 32941 ;; Hardware stack levels used:    1
 32942 ;; Hardware stack levels required when called:    7
 32943 ;; This function calls:
 32944 ;;		Nothing
 32945 ;; This function is called by:
 32946 ;;		_RADIO_RegisterWrite
 32947 ;;		_RADIO_RegisterRead
 32948 ;;		_RADIO_Transmit
 32949 ;;		_RADIO_RxDone
 32950 ;;		_RADIO_FSKPayloadReady
 32951 ;; This function uses a non-reentrant model
 32952 ;;
 32953                           
 32954                           	psect	text171
 32955  00628C                     __ptext171:
 32956                           	opt stack 0
 32957  00628C                     _HALSPICSDeassert:
 32958                           	opt stack 18
 32959                           
 32960                           ; BSR set to: 14
 32961                           ;incstack = 0
 32962                           ;radio_driver_hal.c: 70: do { LATD3 = 1; } while(0);
 32963  00628C  867C               	bsf	3964,3,c	;volatile
 32964  00628E  0012               	return		;funcret
 32965  006290                     __end_of_HALSPICSDeassert:
 32966                           	opt stack 0
 32967                           tosu	equ	0xFFF
 32968                           tosh	equ	0xFFE
 32969                           tosl	equ	0xFFD
 32970                           pclath	equ	0xFFA
 32971                           tblptru	equ	0xFF8
 32972                           tblptrh	equ	0xFF7
 32973                           tblptrl	equ	0xFF6
 32974                           tablat	equ	0xFF5
 32975                           prodh	equ	0xFF4
 32976                           prodl	equ	0xFF3
 32977                           intcon	equ	0xFF2
 32978                           indf0	equ	0xFEF
 32979                           postinc0	equ	0xFEE
 32980                           plusw0	equ	0xFEB
 32981                           fsr0h	equ	0xFEA
 32982                           fsr0l	equ	0xFE9
 32983                           wreg	equ	0xFE8
 32984                           postinc1	equ	0xFE6
 32985                           postdec1	equ	0xFE5
 32986                           plusw1	equ	0xFE3
 32987                           fsr1h	equ	0xFE2
 32988                           fsr1l	equ	0xFE1
 32989                           indf2	equ	0xFDF
 32990                           postinc2	equ	0xFDE
 32991                           postdec2	equ	0xFDD
 32992                           plusw2	equ	0xFDB
 32993                           fsr2h	equ	0xFDA
 32994                           fsr2l	equ	0xFD9
 32995                           status	equ	0xFD8
 32996                           
 32997 ;; *************** function _HALSPICSAssert *****************
 32998 ;; Defined at:
 32999 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33000 ;; Parameters:    Size  Location     Type
 33001 ;;		None
 33002 ;; Auto vars:     Size  Location     Type
 33003 ;;		None
 33004 ;; Return value:  Size  Location     Type
 33005 ;;                  1    wreg      void 
 33006 ;; Registers used:
 33007 ;;		None
 33008 ;; Tracked objects:
 33009 ;;		On entry : 0/0
 33010 ;;		On exit  : 0/0
 33011 ;;		Unchanged: 0/0
 33012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33017 ;;Total ram usage:        0 bytes
 33018 ;; Hardware stack levels used:    1
 33019 ;; Hardware stack levels required when called:    7
 33020 ;; This function calls:
 33021 ;;		Nothing
 33022 ;; This function is called by:
 33023 ;;		_RADIO_RegisterWrite
 33024 ;;		_RADIO_RegisterRead
 33025 ;;		_RADIO_Transmit
 33026 ;;		_RADIO_RxDone
 33027 ;;		_RADIO_FSKPayloadReady
 33028 ;; This function uses a non-reentrant model
 33029 ;;
 33030                           
 33031                           	psect	text172
 33032  006290                     __ptext172:
 33033                           	opt stack 0
 33034  006290                     _HALSPICSAssert:
 33035                           	opt stack 18
 33036                           
 33037                           ;incstack = 0
 33038                           ;radio_driver_hal.c: 65: do { LATD3 = 0; } while(0);
 33039  006290  967C               	bcf	3964,3,c	;volatile
 33040  006292  0012               	return		;funcret
 33041  006294                     __end_of_HALSPICSAssert:
 33042                           	opt stack 0
 33043                           tosu	equ	0xFFF
 33044                           tosh	equ	0xFFE
 33045                           tosl	equ	0xFFD
 33046                           pclath	equ	0xFFA
 33047                           tblptru	equ	0xFF8
 33048                           tblptrh	equ	0xFF7
 33049                           tblptrl	equ	0xFF6
 33050                           tablat	equ	0xFF5
 33051                           prodh	equ	0xFF4
 33052                           prodl	equ	0xFF3
 33053                           intcon	equ	0xFF2
 33054                           indf0	equ	0xFEF
 33055                           postinc0	equ	0xFEE
 33056                           plusw0	equ	0xFEB
 33057                           fsr0h	equ	0xFEA
 33058                           fsr0l	equ	0xFE9
 33059                           wreg	equ	0xFE8
 33060                           postinc1	equ	0xFE6
 33061                           postdec1	equ	0xFE5
 33062                           plusw1	equ	0xFE3
 33063                           fsr1h	equ	0xFE2
 33064                           fsr1l	equ	0xFE1
 33065                           indf2	equ	0xFDF
 33066                           postinc2	equ	0xFDE
 33067                           postdec2	equ	0xFDD
 33068                           plusw2	equ	0xFDB
 33069                           fsr2h	equ	0xFDA
 33070                           fsr2l	equ	0xFD9
 33071                           status	equ	0xFD8
 33072                           
 33073 ;; *************** function _RADIO_Reset *****************
 33074 ;; Defined at:
 33075 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33076 ;; Parameters:    Size  Location     Type
 33077 ;;		None
 33078 ;; Auto vars:     Size  Location     Type
 33079 ;;		None
 33080 ;; Return value:  Size  Location     Type
 33081 ;;                  1    wreg      void 
 33082 ;; Registers used:
 33083 ;;		wreg, status,2, status,0, cstack
 33084 ;; Tracked objects:
 33085 ;;		On entry : E/1
 33086 ;;		On exit  : E/0
 33087 ;;		Unchanged: 0/0
 33088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33093 ;;Total ram usage:        0 bytes
 33094 ;; Hardware stack levels used:    1
 33095 ;; Hardware stack levels required when called:    8
 33096 ;; This function calls:
 33097 ;;		_HALResetPinMakeInput
 33098 ;;		_HALResetPinMakeOutput
 33099 ;;		_HALResetPinOutputValue
 33100 ;;		_SystemBlockingWaitMs
 33101 ;; This function is called by:
 33102 ;;		_RADIO_Init
 33103 ;; This function uses a non-reentrant model
 33104 ;;
 33105                           
 33106                           	psect	text173
 33107  005AFC                     __ptext173:
 33108                           	opt stack 0
 33109  005AFC                     _RADIO_Reset:
 33110                           	opt stack 20
 33111                           
 33112                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 33113                           
 33114                           ;incstack = 0
 33115  005AFC  EC4A  F031         	call	_HALResetPinMakeOutput	;wreg free
 33116                           
 33117                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 33118  005B00  0E00               	movlw	0
 33119  005B02  EC79  F030         	call	_HALResetPinOutputValue
 33120                           
 33121                           ; BSR set to: 0
 33122                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 33123  005B06  ECD9  F01B         	call	PL242	;call to abstracted procedure
 33124  005B0A  EC03  F02E         	call	_SystemBlockingWaitMs	;wreg free
 33125                           
 33126                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 33127  005B0E  EC4C  F031         	call	_HALResetPinMakeInput	;wreg free
 33128                           
 33129                           ; BSR set to: 0
 33130                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 33131  005B12  0E0A               	movlw	10
 33132  005B14  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33133  005B16  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33134  005B18  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33135  005B1A  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33136  005B1C  EC03  F02E         	call	_SystemBlockingWaitMs	;wreg free
 33137                           
 33138                           ; BSR set to: 0
 33139                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 33140  005B20  0E01               	movlw	1
 33141  005B22  EC79  F030         	call	_HALResetPinOutputValue
 33142                           
 33143                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 33144  005B26  EF4A  F031         	goto	_HALResetPinMakeOutput	;wreg free
 33145  005B2A                     __end_of_RADIO_Reset:
 33146                           	opt stack 0
 33147                           tosu	equ	0xFFF
 33148                           tosh	equ	0xFFE
 33149                           tosl	equ	0xFFD
 33150                           pclath	equ	0xFFA
 33151                           tblptru	equ	0xFF8
 33152                           tblptrh	equ	0xFF7
 33153                           tblptrl	equ	0xFF6
 33154                           tablat	equ	0xFF5
 33155                           prodh	equ	0xFF4
 33156                           prodl	equ	0xFF3
 33157                           intcon	equ	0xFF2
 33158                           indf0	equ	0xFEF
 33159                           postinc0	equ	0xFEE
 33160                           plusw0	equ	0xFEB
 33161                           fsr0h	equ	0xFEA
 33162                           fsr0l	equ	0xFE9
 33163                           wreg	equ	0xFE8
 33164                           postinc1	equ	0xFE6
 33165                           postdec1	equ	0xFE5
 33166                           plusw1	equ	0xFE3
 33167                           fsr1h	equ	0xFE2
 33168                           fsr1l	equ	0xFE1
 33169                           indf2	equ	0xFDF
 33170                           postinc2	equ	0xFDE
 33171                           postdec2	equ	0xFDD
 33172                           plusw2	equ	0xFDB
 33173                           fsr2h	equ	0xFDA
 33174                           fsr2l	equ	0xFD9
 33175                           status	equ	0xFD8
 33176                           
 33177 ;; *************** function _SystemBlockingWaitMs *****************
 33178 ;; Defined at:
 33179 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33180 ;; Parameters:    Size  Location     Type
 33181 ;;  ms              4    4[BANK0 ] unsigned long 
 33182 ;; Auto vars:     Size  Location     Type
 33183 ;;		None
 33184 ;; Return value:  Size  Location     Type
 33185 ;;                  1    wreg      void 
 33186 ;; Registers used:
 33187 ;;		wreg, status,2, status,0
 33188 ;; Tracked objects:
 33189 ;;		On entry : F/0
 33190 ;;		On exit  : F/0
 33191 ;;		Unchanged: 0/0
 33192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33196 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33197 ;;Total ram usage:        5 bytes
 33198 ;; Hardware stack levels used:    1
 33199 ;; Hardware stack levels required when called:    7
 33200 ;; This function calls:
 33201 ;;		Nothing
 33202 ;; This function is called by:
 33203 ;;		_RADIO_WriteMode
 33204 ;;		_RADIO_Reset
 33205 ;;		_RADIO_ReadRandom
 33206 ;; This function uses a non-reentrant model
 33207 ;;
 33208                           
 33209                           	psect	text174
 33210  005C06                     __ptext174:
 33211                           	opt stack 0
 33212  005C06                     _SystemBlockingWaitMs:
 33213                           	opt stack 19
 33214                           
 33215                           ; BSR set to: 0
 33216                           ;sw_timer.c: 147: while (ms > 0)
 33217                           
 33218                           ;incstack = 0
 33219  005C06  D00E               	goto	l11918
 33220  005C08                     l11914:
 33221                           
 33222                           ; BSR set to: 0
 33223                           ;sw_timer.c: 148: {
 33224                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 33225  005C08  0E06               	movlw	6
 33226  005C0A  6F68               	movwf	??_SystemBlockingWaitMs& (0+255),b
 33227  005C0C  0E30               	movlw	48
 33228  005C0E                     u19707:
 33229  005C0E  2EE8               	decfsz	wreg,f,c
 33230  005C10  D7FE               	goto	u19707
 33231  005C12  2F68               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 33232  005C14  D7FC               	goto	u19707
 33233  005C16  D000               	nop2	
 33234                           
 33235                           ;sw_timer.c: 150: ms--;
 33236  005C18  0100               	movlb	0	; () banked
 33237  005C1A  0764               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 33238  005C1C  0E00               	movlw	0
 33239  005C1E  5B65               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 33240  005C20  5B66               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 33241  005C22  5B67               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 33242  005C24                     l11918:
 33243                           
 33244                           ; BSR set to: 0
 33245  005C24  5164               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 33246  005C26  1165               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 33247  005C28  1166               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 33248  005C2A  1167               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 33249  005C2C  E1ED               	bnz	l11914
 33250                           
 33251                           ; BSR set to: 0
 33252  005C2E  0012               	return		;funcret
 33253  005C30                     __end_of_SystemBlockingWaitMs:
 33254                           	opt stack 0
 33255                           tosu	equ	0xFFF
 33256                           tosh	equ	0xFFE
 33257                           tosl	equ	0xFFD
 33258                           pclath	equ	0xFFA
 33259                           tblptru	equ	0xFF8
 33260                           tblptrh	equ	0xFF7
 33261                           tblptrl	equ	0xFF6
 33262                           tablat	equ	0xFF5
 33263                           prodh	equ	0xFF4
 33264                           prodl	equ	0xFF3
 33265                           intcon	equ	0xFF2
 33266                           indf0	equ	0xFEF
 33267                           postinc0	equ	0xFEE
 33268                           plusw0	equ	0xFEB
 33269                           fsr0h	equ	0xFEA
 33270                           fsr0l	equ	0xFE9
 33271                           wreg	equ	0xFE8
 33272                           postinc1	equ	0xFE6
 33273                           postdec1	equ	0xFE5
 33274                           plusw1	equ	0xFE3
 33275                           fsr1h	equ	0xFE2
 33276                           fsr1l	equ	0xFE1
 33277                           indf2	equ	0xFDF
 33278                           postinc2	equ	0xFDE
 33279                           postdec2	equ	0xFDD
 33280                           plusw2	equ	0xFDB
 33281                           fsr2h	equ	0xFDA
 33282                           fsr2l	equ	0xFD9
 33283                           status	equ	0xFD8
 33284                           
 33285 ;; *************** function _HALResetPinOutputValue *****************
 33286 ;; Defined at:
 33287 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33288 ;; Parameters:    Size  Location     Type
 33289 ;;  value           1    wreg     unsigned char 
 33290 ;; Auto vars:     Size  Location     Type
 33291 ;;  value           1    4[BANK0 ] unsigned char 
 33292 ;; Return value:  Size  Location     Type
 33293 ;;                  1    wreg      void 
 33294 ;; Registers used:
 33295 ;;		wreg, status,2, status,0
 33296 ;; Tracked objects:
 33297 ;;		On entry : E/1
 33298 ;;		On exit  : F/0
 33299 ;;		Unchanged: 0/0
 33300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33304 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33305 ;;Total ram usage:        1 bytes
 33306 ;; Hardware stack levels used:    1
 33307 ;; Hardware stack levels required when called:    7
 33308 ;; This function calls:
 33309 ;;		Nothing
 33310 ;; This function is called by:
 33311 ;;		_RADIO_Reset
 33312 ;; This function uses a non-reentrant model
 33313 ;;
 33314                           
 33315                           	psect	text175
 33316  0060F2                     __ptext175:
 33317                           	opt stack 0
 33318  0060F2                     _HALResetPinOutputValue:
 33319                           	opt stack 20
 33320                           
 33321                           ; BSR set to: 0
 33322                           ;incstack = 0
 33323                           ;HALResetPinOutputValue@value stored from wreg
 33324  0060F2  0100               	movlb	0	; () banked
 33325  0060F4  6F64               	movwf	HALResetPinOutputValue@value& (0+255),b
 33326                           
 33327                           ;radio_driver_hal.c: 57: if (value == 0)
 33328  0060F6  5164               	movf	HALResetPinOutputValue@value& (0+255),w,b
 33329  0060F8  E102               	bnz	l13780
 33330                           
 33331                           ; BSR set to: 0
 33332                           
 33333                           ;radio_driver_hal.c: 58: do { LATC2 = 0; } while(0);
 33334  0060FA  947B               	bcf	3963,2,c	;volatile
 33335  0060FC  0012               	return	
 33336  0060FE                     l13780:
 33337                           
 33338                           ; BSR set to: 0
 33339                           ;radio_driver_hal.c: 59: else if (value == 1)
 33340  0060FE  0564               	decf	HALResetPinOutputValue@value& (0+255),w,b
 33341  006100  B4D8               	btfsc	status,2,c
 33342                           
 33343                           ; BSR set to: 0
 33344                           
 33345                           ;radio_driver_hal.c: 60: do { LATC2 = 1; } while(0);
 33346  006102  847B               	bsf	3963,2,c	;volatile
 33347                           
 33348                           ; BSR set to: 0
 33349  006104  0012               	return		;funcret
 33350  006106                     __end_of_HALResetPinOutputValue:
 33351                           	opt stack 0
 33352                           tosu	equ	0xFFF
 33353                           tosh	equ	0xFFE
 33354                           tosl	equ	0xFFD
 33355                           pclath	equ	0xFFA
 33356                           tblptru	equ	0xFF8
 33357                           tblptrh	equ	0xFF7
 33358                           tblptrl	equ	0xFF6
 33359                           tablat	equ	0xFF5
 33360                           prodh	equ	0xFF4
 33361                           prodl	equ	0xFF3
 33362                           intcon	equ	0xFF2
 33363                           indf0	equ	0xFEF
 33364                           postinc0	equ	0xFEE
 33365                           plusw0	equ	0xFEB
 33366                           fsr0h	equ	0xFEA
 33367                           fsr0l	equ	0xFE9
 33368                           wreg	equ	0xFE8
 33369                           postinc1	equ	0xFE6
 33370                           postdec1	equ	0xFE5
 33371                           plusw1	equ	0xFE3
 33372                           fsr1h	equ	0xFE2
 33373                           fsr1l	equ	0xFE1
 33374                           indf2	equ	0xFDF
 33375                           postinc2	equ	0xFDE
 33376                           postdec2	equ	0xFDD
 33377                           plusw2	equ	0xFDB
 33378                           fsr2h	equ	0xFDA
 33379                           fsr2l	equ	0xFD9
 33380                           status	equ	0xFD8
 33381                           
 33382 ;; *************** function _HALResetPinMakeOutput *****************
 33383 ;; Defined at:
 33384 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33385 ;; Parameters:    Size  Location     Type
 33386 ;;		None
 33387 ;; Auto vars:     Size  Location     Type
 33388 ;;		None
 33389 ;; Return value:  Size  Location     Type
 33390 ;;                  1    wreg      void 
 33391 ;; Registers used:
 33392 ;;		None
 33393 ;; Tracked objects:
 33394 ;;		On entry : E/1
 33395 ;;		On exit  : E/0
 33396 ;;		Unchanged: E/0
 33397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33402 ;;Total ram usage:        0 bytes
 33403 ;; Hardware stack levels used:    1
 33404 ;; Hardware stack levels required when called:    7
 33405 ;; This function calls:
 33406 ;;		Nothing
 33407 ;; This function is called by:
 33408 ;;		_RADIO_Reset
 33409 ;; This function uses a non-reentrant model
 33410 ;;
 33411                           
 33412                           	psect	text176
 33413  006294                     __ptext176:
 33414                           	opt stack 0
 33415  006294                     _HALResetPinMakeOutput:
 33416                           	opt stack 20
 33417                           
 33418                           ; BSR set to: 0
 33419                           ;incstack = 0
 33420                           ;radio_driver_hal.c: 47: do { TRISC2 = 0; } while(0);
 33421  006294  9483               	bcf	3971,2,c	;volatile
 33422  006296  0012               	return		;funcret
 33423  006298                     __end_of_HALResetPinMakeOutput:
 33424                           	opt stack 0
 33425                           tosu	equ	0xFFF
 33426                           tosh	equ	0xFFE
 33427                           tosl	equ	0xFFD
 33428                           pclath	equ	0xFFA
 33429                           tblptru	equ	0xFF8
 33430                           tblptrh	equ	0xFF7
 33431                           tblptrl	equ	0xFF6
 33432                           tablat	equ	0xFF5
 33433                           prodh	equ	0xFF4
 33434                           prodl	equ	0xFF3
 33435                           intcon	equ	0xFF2
 33436                           indf0	equ	0xFEF
 33437                           postinc0	equ	0xFEE
 33438                           plusw0	equ	0xFEB
 33439                           fsr0h	equ	0xFEA
 33440                           fsr0l	equ	0xFE9
 33441                           wreg	equ	0xFE8
 33442                           postinc1	equ	0xFE6
 33443                           postdec1	equ	0xFE5
 33444                           plusw1	equ	0xFE3
 33445                           fsr1h	equ	0xFE2
 33446                           fsr1l	equ	0xFE1
 33447                           indf2	equ	0xFDF
 33448                           postinc2	equ	0xFDE
 33449                           postdec2	equ	0xFDD
 33450                           plusw2	equ	0xFDB
 33451                           fsr2h	equ	0xFDA
 33452                           fsr2l	equ	0xFD9
 33453                           status	equ	0xFD8
 33454                           
 33455 ;; *************** function _HALResetPinMakeInput *****************
 33456 ;; Defined at:
 33457 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33458 ;; Parameters:    Size  Location     Type
 33459 ;;		None
 33460 ;; Auto vars:     Size  Location     Type
 33461 ;;		None
 33462 ;; Return value:  Size  Location     Type
 33463 ;;                  1    wreg      void 
 33464 ;; Registers used:
 33465 ;;		None
 33466 ;; Tracked objects:
 33467 ;;		On entry : F/0
 33468 ;;		On exit  : F/0
 33469 ;;		Unchanged: F/0
 33470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33475 ;;Total ram usage:        0 bytes
 33476 ;; Hardware stack levels used:    1
 33477 ;; Hardware stack levels required when called:    7
 33478 ;; This function calls:
 33479 ;;		Nothing
 33480 ;; This function is called by:
 33481 ;;		_RADIO_Reset
 33482 ;; This function uses a non-reentrant model
 33483 ;;
 33484                           
 33485                           	psect	text177
 33486  006298                     __ptext177:
 33487                           	opt stack 0
 33488  006298                     _HALResetPinMakeInput:
 33489                           	opt stack 20
 33490                           
 33491                           ; BSR set to: 0
 33492                           
 33493                           ;incstack = 0
 33494                           ;radio_driver_hal.c: 52: do { TRISC2 = 1; } while(0);
 33495  006298  8483               	bsf	3971,2,c	;volatile
 33496                           
 33497                           ; BSR set to: 0
 33498  00629A  0012               	return		;funcret
 33499  00629C                     __end_of_HALResetPinMakeInput:
 33500                           	opt stack 0
 33501                           tosu	equ	0xFFF
 33502                           tosh	equ	0xFFE
 33503                           tosl	equ	0xFFD
 33504                           pclath	equ	0xFFA
 33505                           tblptru	equ	0xFF8
 33506                           tblptrh	equ	0xFF7
 33507                           tblptrl	equ	0xFF6
 33508                           tablat	equ	0xFF5
 33509                           prodh	equ	0xFF4
 33510                           prodl	equ	0xFF3
 33511                           intcon	equ	0xFF2
 33512                           indf0	equ	0xFEF
 33513                           postinc0	equ	0xFEE
 33514                           plusw0	equ	0xFEB
 33515                           fsr0h	equ	0xFEA
 33516                           fsr0l	equ	0xFE9
 33517                           wreg	equ	0xFE8
 33518                           postinc1	equ	0xFE6
 33519                           postdec1	equ	0xFE5
 33520                           plusw1	equ	0xFE3
 33521                           fsr1h	equ	0xFE2
 33522                           fsr1l	equ	0xFE1
 33523                           indf2	equ	0xFDF
 33524                           postinc2	equ	0xFDE
 33525                           postdec2	equ	0xFDD
 33526                           plusw2	equ	0xFDB
 33527                           fsr2h	equ	0xFDA
 33528                           fsr2l	equ	0xFD9
 33529                           status	equ	0xFD8
 33530                           
 33531 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 33532 ;; Defined at:
 33533 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33534 ;; Parameters:    Size  Location     Type
 33535 ;;  period          2   64[BANK0 ] unsigned int 
 33536 ;; Auto vars:     Size  Location     Type
 33537 ;;  iCtr            1   74[BANK0 ] unsigned char 
 33538 ;; Return value:  Size  Location     Type
 33539 ;;                  1    wreg      void 
 33540 ;; Registers used:
 33541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33542 ;; Tracked objects:
 33543 ;;		On entry : F/0
 33544 ;;		On exit  : D/0
 33545 ;;		Unchanged: 0/0
 33546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33548 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33549 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33550 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33551 ;;Total ram usage:       11 bytes
 33552 ;; Hardware stack levels used:    1
 33553 ;; Hardware stack levels required when called:   11
 33554 ;; This function calls:
 33555 ;;		_SwTimerSetTimeout
 33556 ;;		_SwTimerStart
 33557 ;;		_SwTimerStop
 33558 ;;		___lldiv
 33559 ;;		___lmul
 33560 ;; This function is called by:
 33561 ;;		_LORAWAN_Reset
 33562 ;; This function uses a non-reentrant model
 33563 ;;
 33564                           
 33565                           	psect	text178
 33566  003168                     __ptext178:
 33567                           	opt stack 0
 33568  003168                     _LORAWAN_LinkCheckConfigure:
 33569                           	opt stack 17
 33570                           
 33571                           ; BSR set to: 0
 33572                           ;lorawan.c: 757: uint8_t iCtr;
 33573                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 33574                           
 33575                           ; BSR set to: 0
 33576                           ;incstack = 0
 33577  003168  C0A0  F094         	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 33578  00316C  C0A1  F095         	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 33579  003170  6B96               	clrf	(___lmul@multiplier+2)& (0+255),b
 33580  003172  6B97               	clrf	(___lmul@multiplier+3)& (0+255),b
 33581  003174  0EE8               	movlw	232
 33582  003176  6F98               	movwf	___lmul@multiplicand& (0+255),b
 33583  003178  0E03               	movlw	3
 33584  00317A  ECE4  F008         	call	PL450	;call to abstracted procedure
 33585  00317E  EC34  F02A         	call	___lmul	;wreg free
 33586  003182  C094  F2CC         	movff	?___lmul,_loRa+204
 33587  003186  C095  F2CD         	movff	?___lmul+1,_loRa+205
 33588  00318A  C096  F2CE         	movff	?___lmul+2,_loRa+206
 33589  00318E  C097  F2CF         	movff	?___lmul+3,_loRa+207
 33590                           
 33591                           ; BSR set to: 0
 33592                           ;lorawan.c: 761: if (period == 0)
 33593  003192  51A0               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 33594  003194  11A1               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 33595  003196  E11D               	bnz	l2018
 33596                           
 33597                           ; BSR set to: 0
 33598                           ;lorawan.c: 762: {
 33599                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 33600  003198  0102               	movlb	2	; () banked
 33601  00319A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33602  00319C  EC9E  F030         	call	_SwTimerStop
 33603                           
 33604                           ; BSR set to: 0
 33605                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 33606  0031A0  0102               	movlb	2	; () banked
 33607  0031A2  9503               	bcf	(_loRa+3)& (0+255),2,b
 33608                           
 33609                           ; BSR set to: 2
 33610                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 33611  0031A4  0100               	movlb	0	; () banked
 33612  0031A6  6BAA               	clrf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 33613  0031A8  D00E               	goto	l15066
 33614  0031AA                     l15058:
 33615                           
 33616                           ; BSR set to: 0
 33617                           ;lorawan.c: 766: {
 33618                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 33619  0031AA  51AA               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33620  0031AC  ECC5  F010         	call	PL16	;call to abstracted procedure
 33621  0031B0  0E02               	movlw	2
 33622  0031B2  18DE               	xorwf	postinc2,w,c
 33623  0031B4  E106               	bnz	l15064
 33624                           
 33625                           ; BSR set to: 0
 33626                           ;lorawan.c: 768: {
 33627                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 33628  0031B6  51AA               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33629  0031B8  ECC5  F010         	call	PL16	;call to abstracted procedure
 33630  0031BC  68DF               	setf	indf2,c
 33631                           
 33632                           ; BSR set to: 0
 33633                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 33634  0031BE  0102               	movlb	2	; () banked
 33635  0031C0  07A7               	decf	(_loRa+167)& (0+255),f,b
 33636  0031C2                     l15064:
 33637  0031C2  0100               	movlb	0	; () banked
 33638  0031C4  2BAA               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 33639  0031C6                     l15066:
 33640                           
 33641                           ; BSR set to: 0
 33642  0031C6  0102               	movlb	2	; () banked
 33643  0031C8  51A7               	movf	(_loRa+167)& (0+255),w,b
 33644  0031CA  0100               	movlb	0	; () banked
 33645  0031CC  5DAA               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33646  0031CE  E3ED               	bnc	l15058
 33647  0031D0  0012               	return	
 33648  0031D2                     l2018:
 33649                           
 33650                           ; BSR set to: 0
 33651                           ;lorawan.c: 776: else
 33652                           ;lorawan.c: 777: {
 33653                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 33654  0031D2  0102               	movlb	2	; () banked
 33655  0031D4  8503               	bsf	(_loRa+3)& (0+255),2,b
 33656                           
 33657                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 33658  0031D6  A902               	btfss	(_loRa+2)& (0+255),4,b
 33659  0031D8  0012               	return	
 33660                           
 33661                           ; BSR set to: 2
 33662                           ;lorawan.c: 782: {
 33663                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 33664  0031DA  51CF               	movf	(_loRa+207)& (0+255),w,b
 33665  0031DC  E103               	bnz	u17580
 33666  0031DE  EC2B  F018         	call	PL240	;call to abstracted procedure
 33667  0031E2  E30C               	bnc	l15072
 33668  0031E4                     u17580:
 33669                           
 33670                           ; BSR set to: 2
 33671  0031E4  EC21  F018         	call	PL62	;call to abstracted procedure
 33672  0031E8  EC99  F011         	call	PL32	;call to abstracted procedure
 33673  0031EC  EC55  F025         	call	___lldiv	;wreg free
 33674  0031F0  0E0C               	movlw	12
 33675  0031F2                     u17595:
 33676  0031F2  ECA7  F011         	call	PL196	;call to abstracted procedure
 33677  0031F6  2EE8               	decfsz	wreg,f,c
 33678  0031F8  D7FC               	goto	u17595
 33679  0031FA  D01E               	goto	L22
 33680  0031FC                     l15072:
 33681                           
 33682                           ; BSR set to: 2
 33683  0031FC  C2CC  F0A2         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 33684  003200  C2CD  F0A3         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 33685  003204  C2CE  F0A4         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 33686  003208  C2CF  F0A5         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 33687  00320C  0E0C               	movlw	12
 33688  00320E                     u17605:
 33689  00320E  90D8               	bcf	status,0,c
 33690  003210  0100               	movlb	0	; () banked
 33691  003212  37A2               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 33692  003214  37A3               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 33693  003216  37A4               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 33694  003218  37A5               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 33695  00321A  2EE8               	decfsz	wreg,f,c
 33696  00321C  D7F8               	goto	u17605
 33697  00321E  C0A2  F064         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 33698  003222  C0A3  F065         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 33699  003226  C0A4  F066         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 33700  00322A  C0A5  F067         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 33701  00322E  0E7D               	movlw	125
 33702  003230  EC99  F011         	call	PL32	;call to abstracted procedure
 33703  003234  EC55  F025         	call	___lldiv	;wreg free
 33704  003238                     L22:
 33705  003238  C064  F0A6         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$3290
 33706  00323C  C065  F0A7         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$3290+1
 33707  003240  C066  F0A8         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$3290+2
 33708  003244  C067  F0A9         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$3290+3
 33709                           
 33710                           ; BSR set to: 0
 33711  003248  C0A6  F071         	movff	_LORAWAN_LinkCheckConfigure$3290,SwTimerSetTimeout@timeout
 33712  00324C  C0A7  F072         	movff	_LORAWAN_LinkCheckConfigure$3290+1,SwTimerSetTimeout@timeout+1
 33713  003250  C0A8  F073         	movff	_LORAWAN_LinkCheckConfigure$3290+2,SwTimerSetTimeout@timeout+2
 33714  003254  C0A9  F074         	movff	_LORAWAN_LinkCheckConfigure$3290+3,SwTimerSetTimeout@timeout+3
 33715  003258  0102               	movlb	2	; () banked
 33716  00325A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33717  00325C  EC4F  F02C         	call	_SwTimerSetTimeout
 33718                           
 33719                           ; BSR set to: 0
 33720                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 33721  003260  0102               	movlb	2	; () banked
 33722  003262  51E7               	movf	(_loRa+231)& (0+255),w,b
 33723  003264  EFFE  F025         	goto	_SwTimerStart
 33724  003268                     __end_of_LORAWAN_LinkCheckConfigure:
 33725                           	opt stack 0
 33726                           tosu	equ	0xFFF
 33727                           tosh	equ	0xFFE
 33728                           tosl	equ	0xFFD
 33729                           pclath	equ	0xFFA
 33730                           tblptru	equ	0xFF8
 33731                           tblptrh	equ	0xFF7
 33732                           tblptrl	equ	0xFF6
 33733                           tablat	equ	0xFF5
 33734                           prodh	equ	0xFF4
 33735                           prodl	equ	0xFF3
 33736                           intcon	equ	0xFF2
 33737                           indf0	equ	0xFEF
 33738                           postinc0	equ	0xFEE
 33739                           plusw0	equ	0xFEB
 33740                           fsr0h	equ	0xFEA
 33741                           fsr0l	equ	0xFE9
 33742                           wreg	equ	0xFE8
 33743                           postinc1	equ	0xFE6
 33744                           postdec1	equ	0xFE5
 33745                           plusw1	equ	0xFE3
 33746                           fsr1h	equ	0xFE2
 33747                           fsr1l	equ	0xFE1
 33748                           indf2	equ	0xFDF
 33749                           postinc2	equ	0xFDE
 33750                           postdec2	equ	0xFDD
 33751                           plusw2	equ	0xFDB
 33752                           fsr2h	equ	0xFDA
 33753                           fsr2l	equ	0xFD9
 33754                           status	equ	0xFD8
 33755                           
 33756 ;; *************** function ___lmul *****************
 33757 ;; Defined at:
 33758 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 33759 ;; Parameters:    Size  Location     Type
 33760 ;;  multiplier      4   52[BANK0 ] unsigned long 
 33761 ;;  multiplicand    4   56[BANK0 ] unsigned long 
 33762 ;; Auto vars:     Size  Location     Type
 33763 ;;  product         4   60[BANK0 ] unsigned long 
 33764 ;; Return value:  Size  Location     Type
 33765 ;;                  4   52[BANK0 ] unsigned long 
 33766 ;; Registers used:
 33767 ;;		wreg, status,2, status,0
 33768 ;; Tracked objects:
 33769 ;;		On entry : F/0
 33770 ;;		On exit  : F/0
 33771 ;;		Unchanged: 0/0
 33772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33773 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33774 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33776 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33777 ;;Total ram usage:       12 bytes
 33778 ;; Hardware stack levels used:    1
 33779 ;; Hardware stack levels required when called:    7
 33780 ;; This function calls:
 33781 ;;		Nothing
 33782 ;; This function is called by:
 33783 ;;		_RADIO_WriteConfiguration
 33784 ;;		_RADIO_TxDone
 33785 ;;		_RADIO_FSKPacketSent
 33786 ;;		_LORAWAN_TxDone
 33787 ;;		_ExecuteNewChannel
 33788 ;;		_ExecuteRxParamSetupReq
 33789 ;;		_UpdateCfList
 33790 ;;		_LORAWAN_LinkCheckConfigure
 33791 ;;		_rand
 33792 ;; This function uses a non-reentrant model
 33793 ;;
 33794                           
 33795                           	psect	text179
 33796  005468                     __ptext179:
 33797                           	opt stack 0
 33798  005468                     ___lmul:
 33799                           	opt stack 17
 33800                           
 33801                           ; BSR set to: 0
 33802                           
 33803                           ;incstack = 0
 33804  005468  6B9C               	clrf	___lmul@product& (0+255),b
 33805  00546A  6B9D               	clrf	(___lmul@product+1)& (0+255),b
 33806  00546C  6B9E               	clrf	(___lmul@product+2)& (0+255),b
 33807  00546E  6B9F               	clrf	(___lmul@product+3)& (0+255),b
 33808  005470                     l2688:
 33809                           
 33810                           ; BSR set to: 0
 33811  005470  A194               	btfss	___lmul@multiplier& (0+255),0,b
 33812  005472  D008               	goto	l12056
 33813                           
 33814                           ; BSR set to: 0
 33815  005474  5198               	movf	___lmul@multiplicand& (0+255),w,b
 33816  005476  279C               	addwf	___lmul@product& (0+255),f,b
 33817  005478  5199               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 33818  00547A  239D               	addwfc	(___lmul@product+1)& (0+255),f,b
 33819  00547C  519A               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 33820  00547E  239E               	addwfc	(___lmul@product+2)& (0+255),f,b
 33821  005480  519B               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 33822  005482  239F               	addwfc	(___lmul@product+3)& (0+255),f,b
 33823  005484                     l12056:
 33824                           
 33825                           ; BSR set to: 0
 33826  005484  90D8               	bcf	status,0,c
 33827  005486  3798               	rlcf	___lmul@multiplicand& (0+255),f,b
 33828  005488  3799               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 33829  00548A  379A               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 33830  00548C  379B               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 33831                           
 33832                           ; BSR set to: 0
 33833  00548E  90D8               	bcf	status,0,c
 33834  005490  3397               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 33835  005492  3396               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 33836  005494  3395               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 33837  005496  3394               	rrcf	___lmul@multiplier& (0+255),f,b
 33838  005498  5194               	movf	___lmul@multiplier& (0+255),w,b
 33839  00549A  1195               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 33840  00549C  1196               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 33841  00549E  1197               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 33842  0054A0  E1E7               	bnz	l2688
 33843                           
 33844                           ; BSR set to: 0
 33845  0054A2  C09C  F094         	movff	___lmul@product,?___lmul
 33846  0054A6  C09D  F095         	movff	___lmul@product+1,?___lmul+1
 33847  0054AA  C09E  F096         	movff	___lmul@product+2,?___lmul+2
 33848  0054AE  C09F  F097         	movff	___lmul@product+3,?___lmul+3
 33849                           
 33850                           ; BSR set to: 0
 33851  0054B2  0012               	return		;funcret
 33852  0054B4                     __end_of___lmul:
 33853                           	opt stack 0
 33854                           tosu	equ	0xFFF
 33855                           tosh	equ	0xFFE
 33856                           tosl	equ	0xFFD
 33857                           pclath	equ	0xFFA
 33858                           tblptru	equ	0xFF8
 33859                           tblptrh	equ	0xFF7
 33860                           tblptrl	equ	0xFF6
 33861                           tablat	equ	0xFF5
 33862                           prodh	equ	0xFF4
 33863                           prodl	equ	0xFF3
 33864                           intcon	equ	0xFF2
 33865                           indf0	equ	0xFEF
 33866                           postinc0	equ	0xFEE
 33867                           plusw0	equ	0xFEB
 33868                           fsr0h	equ	0xFEA
 33869                           fsr0l	equ	0xFE9
 33870                           wreg	equ	0xFE8
 33871                           postinc1	equ	0xFE6
 33872                           postdec1	equ	0xFE5
 33873                           plusw1	equ	0xFE3
 33874                           fsr1h	equ	0xFE2
 33875                           fsr1l	equ	0xFE1
 33876                           indf2	equ	0xFDF
 33877                           postinc2	equ	0xFDE
 33878                           postdec2	equ	0xFDD
 33879                           plusw2	equ	0xFDB
 33880                           fsr2h	equ	0xFDA
 33881                           fsr2l	equ	0xFD9
 33882                           status	equ	0xFD8
 33883                           
 33884 ;; *************** function ___lldiv *****************
 33885 ;; Defined at:
 33886 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 33887 ;; Parameters:    Size  Location     Type
 33888 ;;  dividend        4    4[BANK0 ] unsigned long 
 33889 ;;  divisor         4    8[BANK0 ] unsigned long 
 33890 ;; Auto vars:     Size  Location     Type
 33891 ;;  quotient        4   12[BANK0 ] unsigned long 
 33892 ;;  counter         1   16[BANK0 ] unsigned char 
 33893 ;; Return value:  Size  Location     Type
 33894 ;;                  4    4[BANK0 ] unsigned long 
 33895 ;; Registers used:
 33896 ;;		wreg, status,2, status,0
 33897 ;; Tracked objects:
 33898 ;;		On entry : F/0
 33899 ;;		On exit  : F/0
 33900 ;;		Unchanged: 0/0
 33901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 33902 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33903 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33905 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33906 ;;Total ram usage:       13 bytes
 33907 ;; Hardware stack levels used:    1
 33908 ;; Hardware stack levels required when called:    7
 33909 ;; This function calls:
 33910 ;;		Nothing
 33911 ;; This function is called by:
 33912 ;;		_RADIO_WriteFrequency
 33913 ;;		_RADIO_WriteFSKFrequencyDeviation
 33914 ;;		_RADIO_WriteFSKBitRate
 33915 ;;		_RADIO_Transmit
 33916 ;;		_RADIO_ReceiveStart
 33917 ;;		_LORAWAN_TxDone
 33918 ;;		_LORAWAN_RxTimeout
 33919 ;;		_StartReTxTimer
 33920 ;;		_DutyCycleCallback
 33921 ;;		_LORAWAN_LinkCheckConfigure
 33922 ;;		_LORAWAN_LinkCheckCallback
 33923 ;;		_UpdateRetransmissionAckTimeoutState
 33924 ;;		_UpdateJoinSuccessState
 33925 ;; This function uses a non-reentrant model
 33926 ;;
 33927                           
 33928                           	psect	text180
 33929  004AAA                     __ptext180:
 33930                           	opt stack 0
 33931  004AAA                     ___lldiv:
 33932                           	opt stack 20
 33933                           
 33934                           ; BSR set to: 0
 33935                           
 33936                           ; BSR set to: 0
 33937                           ;incstack = 0
 33938  004AAA  6B6C               	clrf	___lldiv@quotient& (0+255),b
 33939  004AAC  6B6D               	clrf	(___lldiv@quotient+1)& (0+255),b
 33940  004AAE  6B6E               	clrf	(___lldiv@quotient+2)& (0+255),b
 33941  004AB0  6B6F               	clrf	(___lldiv@quotient+3)& (0+255),b
 33942                           
 33943                           ; BSR set to: 0
 33944  004AB2  5168               	movf	___lldiv@divisor& (0+255),w,b
 33945  004AB4  1169               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 33946  004AB6  116A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 33947  004AB8  116B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 33948  004ABA  E029               	bz	l3026
 33949                           
 33950                           ; BSR set to: 0
 33951  004ABC  0E01               	movlw	1
 33952  004ABE  6F70               	movwf	___lldiv@counter& (0+255),b
 33953  004AC0  D006               	goto	l12068
 33954  004AC2                     l12066:
 33955                           
 33956                           ; BSR set to: 0
 33957  004AC2  90D8               	bcf	status,0,c
 33958  004AC4  3768               	rlcf	___lldiv@divisor& (0+255),f,b
 33959  004AC6  3769               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 33960  004AC8  376A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 33961  004ACA  376B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 33962  004ACC  2B70               	incf	___lldiv@counter& (0+255),f,b
 33963  004ACE                     l12068:
 33964                           
 33965                           ; BSR set to: 0
 33966  004ACE  AF6B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 33967  004AD0  D7F8               	goto	l12066
 33968  004AD2                     l12070:
 33969                           
 33970                           ; BSR set to: 0
 33971  004AD2  90D8               	bcf	status,0,c
 33972  004AD4  376C               	rlcf	___lldiv@quotient& (0+255),f,b
 33973  004AD6  376D               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 33974  004AD8  376E               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 33975  004ADA  376F               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 33976                           
 33977                           ; BSR set to: 0
 33978  004ADC  5168               	movf	___lldiv@divisor& (0+255),w,b
 33979  004ADE  5D64               	subwf	___lldiv@dividend& (0+255),w,b
 33980  004AE0  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33981  004AE2  5965               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 33982  004AE4  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33983  004AE6  5966               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 33984  004AE8  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33985  004AEA  5967               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 33986  004AEC  E309               	bnc	l12078
 33987                           
 33988                           ; BSR set to: 0
 33989  004AEE  5168               	movf	___lldiv@divisor& (0+255),w,b
 33990  004AF0  5F64               	subwf	___lldiv@dividend& (0+255),f,b
 33991  004AF2  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33992  004AF4  5B65               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 33993  004AF6  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33994  004AF8  5B66               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 33995  004AFA  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33996  004AFC  5B67               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 33997                           
 33998                           ; BSR set to: 0
 33999  004AFE  816C               	bsf	___lldiv@quotient& (0+255),0,b
 34000  004B00                     l12078:
 34001                           
 34002                           ; BSR set to: 0
 34003  004B00  90D8               	bcf	status,0,c
 34004  004B02  336B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 34005  004B04  336A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 34006  004B06  3369               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 34007  004B08  3368               	rrcf	___lldiv@divisor& (0+255),f,b
 34008                           
 34009                           ; BSR set to: 0
 34010  004B0A  2F70               	decfsz	___lldiv@counter& (0+255),f,b
 34011  004B0C  D7E2               	goto	l12070
 34012  004B0E                     l3026:
 34013                           
 34014                           ; BSR set to: 0
 34015  004B0E  C06C  F064         	movff	___lldiv@quotient,?___lldiv
 34016  004B12  C06D  F065         	movff	___lldiv@quotient+1,?___lldiv+1
 34017  004B16  C06E  F066         	movff	___lldiv@quotient+2,?___lldiv+2
 34018  004B1A  C06F  F067         	movff	___lldiv@quotient+3,?___lldiv+3
 34019                           
 34020                           ; BSR set to: 0
 34021  004B1E  0012               	return		;funcret
 34022  004B20                     __end_of___lldiv:
 34023                           	opt stack 0
 34024                           tosu	equ	0xFFF
 34025                           tosh	equ	0xFFE
 34026                           tosl	equ	0xFFD
 34027                           pclath	equ	0xFFA
 34028                           tblptru	equ	0xFF8
 34029                           tblptrh	equ	0xFF7
 34030                           tblptrl	equ	0xFF6
 34031                           tablat	equ	0xFF5
 34032                           prodh	equ	0xFF4
 34033                           prodl	equ	0xFF3
 34034                           intcon	equ	0xFF2
 34035                           indf0	equ	0xFEF
 34036                           postinc0	equ	0xFEE
 34037                           plusw0	equ	0xFEB
 34038                           fsr0h	equ	0xFEA
 34039                           fsr0l	equ	0xFE9
 34040                           wreg	equ	0xFE8
 34041                           postinc1	equ	0xFE6
 34042                           postdec1	equ	0xFE5
 34043                           plusw1	equ	0xFE3
 34044                           fsr1h	equ	0xFE2
 34045                           fsr1l	equ	0xFE1
 34046                           indf2	equ	0xFDF
 34047                           postinc2	equ	0xFDE
 34048                           postdec2	equ	0xFDD
 34049                           plusw2	equ	0xFDB
 34050                           fsr2h	equ	0xFDA
 34051                           fsr2l	equ	0xFD9
 34052                           status	equ	0xFD8
 34053                           
 34054 ;; *************** function _SwTimerStop *****************
 34055 ;; Defined at:
 34056 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34057 ;; Parameters:    Size  Location     Type
 34058 ;;  timerId         1    wreg     unsigned char 
 34059 ;; Auto vars:     Size  Location     Type
 34060 ;;  timerId         1    4[BANK0 ] unsigned char 
 34061 ;; Return value:  Size  Location     Type
 34062 ;;                  1    wreg      void 
 34063 ;; Registers used:
 34064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 34065 ;; Tracked objects:
 34066 ;;		On entry : C/1
 34067 ;;		On exit  : F/0
 34068 ;;		Unchanged: 0/0
 34069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34074 ;;Total ram usage:        1 bytes
 34075 ;; Hardware stack levels used:    1
 34076 ;; Hardware stack levels required when called:    7
 34077 ;; This function calls:
 34078 ;;		Nothing
 34079 ;; This function is called by:
 34080 ;;		_RADIO_Init
 34081 ;;		_RADIO_Transmit
 34082 ;;		_RADIO_RxDone
 34083 ;;		_RADIO_FSKPayloadReady
 34084 ;;		_RADIO_RxTimeout
 34085 ;;		_RADIO_TxDone
 34086 ;;		_RADIO_FSKPacketSent
 34087 ;;		_RADIO_RxFSKTimeout
 34088 ;;		_LORAWAN_TxDone
 34089 ;;		_StopAllSoftwareTimers
 34090 ;;		_LORAWAN_LinkCheckConfigure
 34091 ;;		_LORAWAN_RxDone
 34092 ;; This function uses a non-reentrant model
 34093 ;;
 34094                           
 34095                           	psect	text181
 34096  00613C                     __ptext181:
 34097                           	opt stack 0
 34098  00613C                     _SwTimerStop:
 34099                           	opt stack 20
 34100                           
 34101                           ; BSR set to: 0
 34102                           ;incstack = 0
 34103                           ;SwTimerStop@timerId stored from wreg
 34104  00613C  0100               	movlb	0	; () banked
 34105  00613E  6F64               	movwf	SwTimerStop@timerId& (0+255),b
 34106                           
 34107                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 34108  006140  9EF2               	bcf	intcon,7,c	;volatile
 34109                           
 34110                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 34111  006142  5164               	movf	SwTimerStop@timerId& (0+255),w,b
 34112  006144  EC84  F023         	call	PL36	;call to abstracted procedure
 34113  006148  6ADF               	clrf	indf2,c
 34114                           
 34115                           ; BSR set to: 0
 34116                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 34117  00614A  8EF2               	bsf	intcon,7,c	;volatile
 34118                           
 34119                           ; BSR set to: 0
 34120  00614C  0C00               	retlw	0	;funcret
 34121  00614E                     __end_of_SwTimerStop:
 34122                           	opt stack 0
 34123                           tosu	equ	0xFFF
 34124                           tosh	equ	0xFFE
 34125                           tosl	equ	0xFFD
 34126                           pclath	equ	0xFFA
 34127                           tblptru	equ	0xFF8
 34128                           tblptrh	equ	0xFF7
 34129                           tblptrl	equ	0xFF6
 34130                           tablat	equ	0xFF5
 34131                           prodh	equ	0xFF4
 34132                           prodl	equ	0xFF3
 34133                           intcon	equ	0xFF2
 34134                           indf0	equ	0xFEF
 34135                           postinc0	equ	0xFEE
 34136                           plusw0	equ	0xFEB
 34137                           fsr0h	equ	0xFEA
 34138                           fsr0l	equ	0xFE9
 34139                           wreg	equ	0xFE8
 34140                           postinc1	equ	0xFE6
 34141                           postdec1	equ	0xFE5
 34142                           plusw1	equ	0xFE3
 34143                           fsr1h	equ	0xFE2
 34144                           fsr1l	equ	0xFE1
 34145                           indf2	equ	0xFDF
 34146                           postinc2	equ	0xFDE
 34147                           postdec2	equ	0xFDD
 34148                           plusw2	equ	0xFDB
 34149                           fsr2h	equ	0xFDA
 34150                           fsr2l	equ	0xFD9
 34151                           status	equ	0xFD8
 34152                           
 34153 ;; *************** function _SwTimerStart *****************
 34154 ;; Defined at:
 34155 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34156 ;; Parameters:    Size  Location     Type
 34157 ;;  timerId         1    wreg     unsigned char 
 34158 ;; Auto vars:     Size  Location     Type
 34159 ;;  timerId         1   51[BANK0 ] unsigned char 
 34160 ;;  ticksRemaini    4   47[BANK0 ] unsigned long 
 34161 ;; Return value:  Size  Location     Type
 34162 ;;                  1    wreg      void 
 34163 ;; Registers used:
 34164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34165 ;; Tracked objects:
 34166 ;;		On entry : C/2
 34167 ;;		On exit  : F/0
 34168 ;;		Unchanged: 0/0
 34169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34171 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34172 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34173 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34174 ;;Total ram usage:        9 bytes
 34175 ;; Hardware stack levels used:    1
 34176 ;; Hardware stack levels required when called:   10
 34177 ;; This function calls:
 34178 ;;		_SwTimersInterrupt
 34179 ;;		_TMR_OverrideRemaining
 34180 ;; This function is called by:
 34181 ;;		_RADIO_Transmit
 34182 ;;		_RADIO_ReceiveStart
 34183 ;;		_LORAWAN_TxDone
 34184 ;;		_LORAWAN_RxTimeout
 34185 ;;		_StartReTxTimer
 34186 ;;		_DutyCycleCallback
 34187 ;;		_LORAWAN_Join
 34188 ;;		_LORAWAN_LinkCheckConfigure
 34189 ;;		_LORAWAN_LinkCheckCallback
 34190 ;;		_UpdateRetransmissionAckTimeoutState
 34191 ;;		_UpdateJoinSuccessState
 34192 ;; This function uses a non-reentrant model
 34193 ;;
 34194                           
 34195                           	psect	text182
 34196  004BFC                     __ptext182:
 34197                           	opt stack 0
 34198  004BFC                     _SwTimerStart:
 34199                           	opt stack 17
 34200                           
 34201                           ; BSR set to: 0
 34202                           ;incstack = 0
 34203                           ;SwTimerStart@timerId stored from wreg
 34204  004BFC  0100               	movlb	0	; () banked
 34205  004BFE  6F93               	movwf	SwTimerStart@timerId& (0+255),b
 34206                           
 34207                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 34208                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 34209  004C00  9EF2               	bcf	intcon,7,c	;volatile
 34210                           
 34211                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 34212  004C02  ECA6  F01E         	call	_SwTimersInterrupt	;wreg free
 34213  004C06  C07A  F08F         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 34214  004C0A  C07B  F090         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 34215  004C0E  C07C  F091         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 34216  004C12  C07D  F092         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 34217                           
 34218                           ; BSR set to: 0
 34219                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 34220  004C16  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34221  004C18  ECFA  F01E         	call	PL10	;call to abstracted procedure
 34222  004C1C  518F               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 34223  004C1E  5CDE               	subwf	postinc2,w,c
 34224  004C20  5190               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 34225  004C22  58DE               	subwfb	postinc2,w,c
 34226  004C24  5191               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 34227  004C26  58DE               	subwfb	postinc2,w,c
 34228  004C28  5192               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 34229  004C2A  58DE               	subwfb	postinc2,w,c
 34230  004C2C  E20B               	bc	l12404
 34231                           
 34232                           ; BSR set to: 0
 34233                           ;sw_timer.c: 225: {
 34234                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 34235  004C2E  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34236  004C30  ECFA  F01E         	call	PL10	;call to abstracted procedure
 34237  004C34  CFDE F08F          	movff	postinc2,SwTimerStart@ticksRemaining
 34238  004C38  CFDE F090          	movff	postinc2,SwTimerStart@ticksRemaining+1
 34239  004C3C  CFDE F091          	movff	postinc2,SwTimerStart@ticksRemaining+2
 34240  004C40  CFDE F092          	movff	postinc2,SwTimerStart@ticksRemaining+3
 34241  004C44                     l12404:
 34242                           
 34243                           ; BSR set to: 0
 34244                           ;sw_timer.c: 227: }
 34245                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 34246  004C44  C08F  F06C         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 34247  004C48  C090  F06D         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 34248  004C4C  C091  F06E         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 34249  004C50  C092  F06F         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 34250  004C54  EC19  F025         	call	_TMR_OverrideRemaining	;wreg free
 34251                           
 34252                           ; BSR set to: 0
 34253                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 34254  004C58  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34255  004C5A  EC84  F023         	call	PL36	;call to abstracted procedure
 34256  004C5E  0E01               	movlw	1
 34257  004C60  6EDF               	movwf	indf2,c
 34258                           
 34259                           ; BSR set to: 0
 34260                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 34261  004C62  8EF2               	bsf	intcon,7,c	;volatile
 34262                           
 34263                           ; BSR set to: 0
 34264  004C64  0C01               	retlw	1	;funcret
 34265  004C66                     __end_of_SwTimerStart:
 34266                           	opt stack 0
 34267                           tosu	equ	0xFFF
 34268                           tosh	equ	0xFFE
 34269                           tosl	equ	0xFFD
 34270                           pclath	equ	0xFFA
 34271                           tblptru	equ	0xFF8
 34272                           tblptrh	equ	0xFF7
 34273                           tblptrl	equ	0xFF6
 34274                           tablat	equ	0xFF5
 34275                           prodh	equ	0xFF4
 34276                           prodl	equ	0xFF3
 34277                           intcon	equ	0xFF2
 34278                           indf0	equ	0xFEF
 34279                           postinc0	equ	0xFEE
 34280                           plusw0	equ	0xFEB
 34281                           fsr0h	equ	0xFEA
 34282                           fsr0l	equ	0xFE9
 34283                           wreg	equ	0xFE8
 34284                           postinc1	equ	0xFE6
 34285                           postdec1	equ	0xFE5
 34286                           plusw1	equ	0xFE3
 34287                           fsr1h	equ	0xFE2
 34288                           fsr1l	equ	0xFE1
 34289                           indf2	equ	0xFDF
 34290                           postinc2	equ	0xFDE
 34291                           postdec2	equ	0xFDD
 34292                           plusw2	equ	0xFDB
 34293                           fsr2h	equ	0xFDA
 34294                           fsr2l	equ	0xFD9
 34295                           status	equ	0xFD8
 34296                           
 34297 ;; *************** function _TMR_OverrideRemaining *****************
 34298 ;; Defined at:
 34299 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34300 ;; Parameters:    Size  Location     Type
 34301 ;;  ticksRemaini    4   12[BANK0 ] unsigned long 
 34302 ;; Auto vars:     Size  Location     Type
 34303 ;;  oldReloadVal    2   20[BANK0 ] unsigned int 
 34304 ;;  tmrVal          2   18[BANK0 ] unsigned int 
 34305 ;; Return value:  Size  Location     Type
 34306 ;;                  1    wreg      void 
 34307 ;; Registers used:
 34308 ;;		wreg, status,2, status,0, cstack
 34309 ;; Tracked objects:
 34310 ;;		On entry : F/0
 34311 ;;		On exit  : F/0
 34312 ;;		Unchanged: 0/0
 34313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34315 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34316 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34317 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34318 ;;Total ram usage:       10 bytes
 34319 ;; Hardware stack levels used:    1
 34320 ;; Hardware stack levels required when called:    9
 34321 ;; This function calls:
 34322 ;;		_TMR_SwapTimer
 34323 ;; This function is called by:
 34324 ;;		_SwTimerStart
 34325 ;; This function uses a non-reentrant model
 34326 ;;
 34327                           
 34328                           	psect	text183
 34329  004A32                     __ptext183:
 34330                           	opt stack 0
 34331  004A32                     _TMR_OverrideRemaining:
 34332                           	opt stack 17
 34333                           
 34334                           ; BSR set to: 0
 34335                           ;sw_timer.c: 67: uint16_t tmrVal;
 34336                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 34337                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 34338                           
 34339                           ; BSR set to: 0
 34340                           ;incstack = 0
 34341  004A32  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34342  004A34  105C               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34343  004A36  105B               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34344  004A38  E104               	bnz	u12780
 34345  004A3A  0E0B               	movlw	11
 34346  004A3C  5C5A               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 34347  004A3E  A0D8               	btfss	status,0,c
 34348  004A40  0012               	return	
 34349  004A42                     u12780:
 34350                           
 34351                           ; BSR set to: 0
 34352                           ;sw_timer.c: 72: {
 34353                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 34354  004A42  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 34355  004A44  5D6C               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34356  004A46  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34357  004A48  596D               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34358  004A4A  505C               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34359  004A4C  596E               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 34360  004A4E  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34361  004A50  596F               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 34362  004A52  B0D8               	btfsc	status,0,c
 34363  004A54  0012               	return	
 34364                           
 34365                           ; BSR set to: 0
 34366                           ;sw_timer.c: 74: {
 34367                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 34368  004A56  C06C  F05A         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 34369  004A5A  C06D  F05B         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 34370  004A5E  C06E  F05C         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 34371  004A62  C06F  F05D         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 34372                           
 34373                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 34374  004A66  C044  F074         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 34375  004A6A  C045  F075         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 34376                           
 34377                           ; BSR set to: 0
 34378                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 34379  004A6E  516C               	movf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34380  004A70  0800               	sublw	0
 34381  004A72  6E44               	movwf	_reloadVal,c	;volatile
 34382  004A74  516D               	movf	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34383  004A76  EC94  F029         	call	PL428	;call to abstracted procedure
 34384                           
 34385                           ; BSR set to: 0
 34386                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 34387  004A7A  C044  F06A         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 34388  004A7E  C045  F06B         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 34389  004A82  ECA1  F02C         	call	_TMR_SwapTimer	;wreg free
 34390  004A86  C06A  F072         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 34391  004A8A  C06B  F073         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 34392                           
 34393                           ; BSR set to: 0
 34394                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 34395  004A8E  5174               	movf	TMR_OverrideRemaining@oldReloadVal& (0+255),w,b
 34396  004A90  5D72               	subwf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 34397  004A92  6F70               	movwf	??_TMR_OverrideRemaining& (0+255),b
 34398  004A94  5175               	movf	(TMR_OverrideRemaining@oldReloadVal+1)& (0+255),w,b
 34399  004A96  5973               	subwfb	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 34400  004A98  6F71               	movwf	(??_TMR_OverrideRemaining+1)& (0+255),b
 34401  004A9A  5170               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 34402  004A9C  2638               	addwf	_ticksAdded,f,c	;volatile
 34403  004A9E  5171               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 34404  004AA0  2239               	addwfc	_ticksAdded+1,f,c	;volatile
 34405  004AA2  0E00               	movlw	0
 34406  004AA4  223A               	addwfc	_ticksAdded+2,f,c	;volatile
 34407  004AA6  223B               	addwfc	_ticksAdded+3,f,c	;volatile
 34408                           
 34409                           ; BSR set to: 0
 34410  004AA8  0C00               	retlw	0	;funcret
 34411  004AAA                     __end_of_TMR_OverrideRemaining:
 34412                           	opt stack 0
 34413                           tosu	equ	0xFFF
 34414                           tosh	equ	0xFFE
 34415                           tosl	equ	0xFFD
 34416                           pclath	equ	0xFFA
 34417                           tblptru	equ	0xFF8
 34418                           tblptrh	equ	0xFF7
 34419                           tblptrl	equ	0xFF6
 34420                           tablat	equ	0xFF5
 34421                           prodh	equ	0xFF4
 34422                           prodl	equ	0xFF3
 34423                           intcon	equ	0xFF2
 34424                           indf0	equ	0xFEF
 34425                           postinc0	equ	0xFEE
 34426                           plusw0	equ	0xFEB
 34427                           fsr0h	equ	0xFEA
 34428                           fsr0l	equ	0xFE9
 34429                           wreg	equ	0xFE8
 34430                           postinc1	equ	0xFE6
 34431                           postdec1	equ	0xFE5
 34432                           plusw1	equ	0xFE3
 34433                           fsr1h	equ	0xFE2
 34434                           fsr1l	equ	0xFE1
 34435                           indf2	equ	0xFDF
 34436                           postinc2	equ	0xFDE
 34437                           postdec2	equ	0xFDD
 34438                           plusw2	equ	0xFDB
 34439                           fsr2h	equ	0xFDA
 34440                           fsr2l	equ	0xFD9
 34441                           status	equ	0xFD8
 34442                           
 34443 ;; *************** function _TMR_SwapTimer *****************
 34444 ;; Defined at:
 34445 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34446 ;; Parameters:    Size  Location     Type
 34447 ;;  timerVal        2   10[BANK0 ] unsigned int 
 34448 ;; Auto vars:     Size  Location     Type
 34449 ;;		None
 34450 ;; Return value:  Size  Location     Type
 34451 ;;                  2   10[BANK0 ] unsigned int 
 34452 ;; Registers used:
 34453 ;;		wreg, status,2, status,0, cstack
 34454 ;; Tracked objects:
 34455 ;;		On entry : F/0
 34456 ;;		On exit  : F/0
 34457 ;;		Unchanged: 0/0
 34458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34463 ;;Total ram usage:        2 bytes
 34464 ;; Hardware stack levels used:    1
 34465 ;; Hardware stack levels required when called:    8
 34466 ;; This function calls:
 34467 ;;		_TMR1_ReadTimer
 34468 ;;		_TMR1_WriteTimer
 34469 ;; This function is called by:
 34470 ;;		_TMR_OverrideRemaining
 34471 ;; This function uses a non-reentrant model
 34472 ;;
 34473                           
 34474                           	psect	text184
 34475  005942                     __ptext184:
 34476                           	opt stack 0
 34477  005942                     _TMR_SwapTimer:
 34478                           	opt stack 17
 34479                           
 34480                           ; BSR set to: 0
 34481                           ;sw_timer.c: 114: static uint16_t oldVal;
 34482                           ;sw_timer.c: 115: static uint16_t retVal;
 34483                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 34484                           
 34485                           ; BSR set to: 0
 34486                           ;incstack = 0
 34487  005942  EC4A  F02F         	call	_TMR1_ReadTimer	;wreg free
 34488  005946  C064  F040         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 34489  00594A  C065  F041         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 34490  00594E                     l11880:
 34491                           
 34492                           ; BSR set to: 0
 34493  00594E  EC4A  F02F         	call	_TMR1_ReadTimer	;wreg free
 34494  005952  5040               	movf	TMR_SwapTimer@oldVal,w,c
 34495  005954  1964               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 34496  005956  E103               	bnz	u12540
 34497  005958  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 34498  00595A  1965               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 34499  00595C  E0F8               	bz	l11880
 34500  00595E                     u12540:
 34501                           
 34502                           ; BSR set to: 0
 34503                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 34504  00595E  C06A  F064         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 34505  005962  C06B  F065         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 34506  005966  EC21  F030         	call	_TMR1_WriteTimer	;wreg free
 34507                           
 34508                           ; BSR set to: 0
 34509                           ;sw_timer.c: 128: oldVal++;
 34510                           
 34511                           ; BSR set to: 0
 34512                           ;sw_timer.c: 130: retVal = oldVal;
 34513  00596A  ECB1  F02B         	call	PL292	;call to abstracted procedure
 34514                           
 34515                           ; BSR set to: 0
 34516                           ;sw_timer.c: 132: return retVal;
 34517  00596E  C042  F06A         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 34518  005972  C043  F06B         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 34519                           
 34520                           ; BSR set to: 0
 34521  005976  0012               	return		;funcret
 34522  005978                     __end_of_TMR_SwapTimer:
 34523                           	opt stack 0
 34524                           tosu	equ	0xFFF
 34525                           tosh	equ	0xFFE
 34526                           tosl	equ	0xFFD
 34527                           pclath	equ	0xFFA
 34528                           tblptru	equ	0xFF8
 34529                           tblptrh	equ	0xFF7
 34530                           tblptrl	equ	0xFF6
 34531                           tablat	equ	0xFF5
 34532                           prodh	equ	0xFF4
 34533                           prodl	equ	0xFF3
 34534                           intcon	equ	0xFF2
 34535                           indf0	equ	0xFEF
 34536                           postinc0	equ	0xFEE
 34537                           plusw0	equ	0xFEB
 34538                           fsr0h	equ	0xFEA
 34539                           fsr0l	equ	0xFE9
 34540                           wreg	equ	0xFE8
 34541                           postinc1	equ	0xFE6
 34542                           postdec1	equ	0xFE5
 34543                           plusw1	equ	0xFE3
 34544                           fsr1h	equ	0xFE2
 34545                           fsr1l	equ	0xFE1
 34546                           indf2	equ	0xFDF
 34547                           postinc2	equ	0xFDE
 34548                           postdec2	equ	0xFDD
 34549                           plusw2	equ	0xFDB
 34550                           fsr2h	equ	0xFDA
 34551                           fsr2l	equ	0xFD9
 34552                           status	equ	0xFD8
 34553                           
 34554 ;; *************** function _TMR1_WriteTimer *****************
 34555 ;; Defined at:
 34556 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 34557 ;; Parameters:    Size  Location     Type
 34558 ;;  timerVal        2    4[BANK0 ] unsigned int 
 34559 ;; Auto vars:     Size  Location     Type
 34560 ;;		None
 34561 ;; Return value:  Size  Location     Type
 34562 ;;                  1    wreg      void 
 34563 ;; Registers used:
 34564 ;;		None
 34565 ;; Tracked objects:
 34566 ;;		On entry : F/0
 34567 ;;		On exit  : F/0
 34568 ;;		Unchanged: F/0
 34569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34570 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34574 ;;Total ram usage:        2 bytes
 34575 ;; Hardware stack levels used:    1
 34576 ;; Hardware stack levels required when called:    7
 34577 ;; This function calls:
 34578 ;;		Nothing
 34579 ;; This function is called by:
 34580 ;;		_TMR_SwapTimer
 34581 ;; This function uses a non-reentrant model
 34582 ;;
 34583                           
 34584                           	psect	text185
 34585  006042                     __ptext185:
 34586                           	opt stack 0
 34587  006042                     _TMR1_WriteTimer:
 34588                           	opt stack 17
 34589                           
 34590                           ; BSR set to: 0
 34591                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 34592                           
 34593                           ; BSR set to: 0
 34594                           ;incstack = 0
 34595  006042  A4CF               	btfss	4047,2,c	;volatile
 34596  006044  D005               	goto	PL426
 34597                           
 34598                           ; BSR set to: 0
 34599                           ;tmr1.c: 125: {
 34600                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 34601  006046  90CF               	bcf	4047,0,c	;volatile
 34602                           
 34603                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 34604                           
 34605                           ;tmr1.c: 131: TMR1L = timerVal;
 34606  006048  D803               	call	PL426	;call to abstracted procedure
 34607                           
 34608                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 34609  00604A  80CF               	bsf	4047,0,c	;volatile
 34610                           
 34611                           ;tmr1.c: 135: }
 34612  00604C  0012               	return	
 34613  00604E                     l1370:
 34614                           
 34615                           ; BSR set to: 0
 34616                           ;tmr1.c: 136: else
 34617                           ;tmr1.c: 137: {
 34618                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 34619                           
 34620                           ;tmr1.c: 140: TMR1L = timerVal;
 34621  00604E  D000               	goto	PL426	;call to abstracted procedure
 34622  006050                     __end_of_TMR1_WriteTimer:
 34623                           	opt stack 0
 34624  006050                     PL426:
 34625                           	opt stack 17
 34626  006050  C065  FFCE         	movff	TMR1_WriteTimer@timerVal+1,4046	;volatile
 34627  006054  C064  FFCD         	movff	TMR1_WriteTimer@timerVal,4045	;volatile
 34628  006058  0012               	return	
 34629  00605A                     __end_ofPL426:
 34630                           	opt stack 0
 34631                           tosu	equ	0xFFF
 34632                           tosh	equ	0xFFE
 34633                           tosl	equ	0xFFD
 34634                           pclath	equ	0xFFA
 34635                           tblptru	equ	0xFF8
 34636                           tblptrh	equ	0xFF7
 34637                           tblptrl	equ	0xFF6
 34638                           tablat	equ	0xFF5
 34639                           prodh	equ	0xFF4
 34640                           prodl	equ	0xFF3
 34641                           intcon	equ	0xFF2
 34642                           indf0	equ	0xFEF
 34643                           postinc0	equ	0xFEE
 34644                           plusw0	equ	0xFEB
 34645                           fsr0h	equ	0xFEA
 34646                           fsr0l	equ	0xFE9
 34647                           wreg	equ	0xFE8
 34648                           postinc1	equ	0xFE6
 34649                           postdec1	equ	0xFE5
 34650                           plusw1	equ	0xFE3
 34651                           fsr1h	equ	0xFE2
 34652                           fsr1l	equ	0xFE1
 34653                           indf2	equ	0xFDF
 34654                           postinc2	equ	0xFDE
 34655                           postdec2	equ	0xFDD
 34656                           plusw2	equ	0xFDB
 34657                           fsr2h	equ	0xFDA
 34658                           fsr2l	equ	0xFD9
 34659                           status	equ	0xFD8
 34660                           
 34661 ;; *************** function _SwTimersInterrupt *****************
 34662 ;; Defined at:
 34663 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34664 ;; Parameters:    Size  Location     Type
 34665 ;;		None
 34666 ;; Auto vars:     Size  Location     Type
 34667 ;;  ticksToNextT    4   38[BANK0 ] unsigned long 
 34668 ;;  timeElapsed     4   34[BANK0 ] unsigned long 
 34669 ;;  i               1   42[BANK0 ] unsigned char 
 34670 ;; Return value:  Size  Location     Type
 34671 ;;                  4   26[BANK0 ] unsigned long 
 34672 ;; Registers used:
 34673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34674 ;; Tracked objects:
 34675 ;;		On entry : 0/0
 34676 ;;		On exit  : F/0
 34677 ;;		Unchanged: 0/0
 34678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34679 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34680 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34681 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34682 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34683 ;;Total ram usage:       17 bytes
 34684 ;; Hardware stack levels used:    1
 34685 ;; Hardware stack levels required when called:    9
 34686 ;; This function calls:
 34687 ;;		_TMR_GetDeltaTime
 34688 ;; This function is called by:
 34689 ;;		_SwTimerReadValue
 34690 ;;		_SwTimerStart
 34691 ;; This function uses a non-reentrant model
 34692 ;;
 34693                           
 34694                           	psect	text186
 34695  003D4C                     __ptext186:
 34696                           	opt stack 0
 34697  003D4C                     _SwTimersInterrupt:
 34698                           	opt stack 17
 34699                           
 34700                           ;sw_timer.c: 289: uint8_t i;
 34701                           ;sw_timer.c: 290: uint32_t timeElapsed;
 34702                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 34703                           
 34704                           ; BSR set to: 0
 34705                           ;incstack = 0
 34706  003D4C  0100               	movlb	0	; () banked
 34707  003D4E  6986               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 34708  003D50  6987               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 34709  003D52  6988               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 34710  003D54  6989               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 34711                           
 34712                           ; BSR set to: 0
 34713                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 34714  003D56  EC17  F021         	call	_TMR_GetDeltaTime	;wreg free
 34715  003D5A  C06A  F082         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 34716  003D5E  C06B  F083         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 34717  003D62  C06C  F084         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 34718  003D66  C06D  F085         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 34719                           
 34720                           ; BSR set to: 0
 34721                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 34722  003D6A  6B8A               	clrf	SwTimersInterrupt@i& (0+255),b
 34723  003D6C  D035               	goto	l12128
 34724  003D6E                     l12116:
 34725                           
 34726                           ; BSR set to: 0
 34727                           ;sw_timer.c: 298: {
 34728                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 34729  003D6E  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34730  003D70  EC84  F023         	call	PL36	;call to abstracted procedure
 34731  003D74  04DE               	decf	postinc2,w,c
 34732  003D76  E12F               	bnz	l12126
 34733                           
 34734                           ; BSR set to: 0
 34735                           ;sw_timer.c: 302: {
 34736                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 34737  003D78  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34738  003D7A  D83C               	call	PL10	;call to abstracted procedure
 34739  003D7C  50DE               	movf	postinc2,w,c
 34740  003D7E  5D82               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34741  003D80  50DE               	movf	postinc2,w,c
 34742  003D82  5983               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34743  003D84  50DE               	movf	postinc2,w,c
 34744  003D86  5984               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34745  003D88  50DE               	movf	postinc2,w,c
 34746  003D8A  5985               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34747  003D8C  E305               	bnc	l12122
 34748                           
 34749                           ; BSR set to: 0
 34750                           ;sw_timer.c: 304: {
 34751                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 34752  003D8E  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34753  003D90  D831               	call	PL10	;call to abstracted procedure
 34754  003D92  ECCF  F01D         	call	PL184	;call to abstracted procedure
 34755                           
 34756                           ;sw_timer.c: 306: }
 34757  003D96  D01F               	goto	l12126
 34758  003D98                     l12122:
 34759                           
 34760                           ; BSR set to: 0
 34761                           ;sw_timer.c: 307: else
 34762                           ;sw_timer.c: 308: {
 34763                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 34764  003D98  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34765  003D9A  D82C               	call	PL10	;call to abstracted procedure
 34766  003D9C  5182               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34767  003D9E  5EDE               	subwf	postinc2,f,c
 34768  003DA0  5183               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34769  003DA2  5ADE               	subwfb	postinc2,f,c
 34770  003DA4  5184               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34771  003DA6  5ADE               	subwfb	postinc2,f,c
 34772  003DA8  5185               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34773  003DAA  5ADE               	subwfb	postinc2,f,c
 34774                           
 34775                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 34776  003DAC  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34777  003DAE  D822               	call	PL10	;call to abstracted procedure
 34778  003DB0  5186               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 34779  003DB2  5CDE               	subwf	postinc2,w,c
 34780  003DB4  5187               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 34781  003DB6  58DE               	subwfb	postinc2,w,c
 34782  003DB8  5188               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 34783  003DBA  58DE               	subwfb	postinc2,w,c
 34784  003DBC  5189               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 34785  003DBE  58DE               	subwfb	postinc2,w,c
 34786  003DC0  E20A               	bc	l12126
 34787                           
 34788                           ; BSR set to: 0
 34789                           ;sw_timer.c: 313: {
 34790                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 34791  003DC2  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 34792  003DC4  D817               	call	PL10	;call to abstracted procedure
 34793  003DC6  CFDE F086          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 34794  003DCA  CFDE F087          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 34795  003DCE  CFDE F088          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 34796  003DD2  CFDE F089          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 34797  003DD6                     l12126:
 34798                           
 34799                           ; BSR set to: 0
 34800  003DD6  2B8A               	incf	SwTimersInterrupt@i& (0+255),f,b
 34801  003DD8                     l12128:
 34802                           
 34803                           ; BSR set to: 0
 34804  003DD8  0101               	movlb	1	; () banked
 34805  003DDA  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 34806  003DDC  0100               	movlb	0	; () banked
 34807  003DDE  5D8A               	subwf	SwTimersInterrupt@i& (0+255),w,b
 34808  003DE0  E3C6               	bnc	l12116
 34809                           
 34810                           ; BSR set to: 0
 34811                           ;sw_timer.c: 315: }
 34812                           ;sw_timer.c: 316: }
 34813                           ;sw_timer.c: 317: }
 34814                           ;sw_timer.c: 318: }
 34815                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 34816  003DE2  C086  F07A         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 34817  003DE6  C087  F07B         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 34818  003DEA  C088  F07C         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 34819  003DEE  C089  F07D         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 34820                           
 34821                           ; BSR set to: 0
 34822  003DF2  0012               	return		;funcret
 34823  003DF4                     __end_of_SwTimersInterrupt:
 34824                           	opt stack 0
 34825  003DF4                     PL10:
 34826                           	opt stack 12
 34827  003DF4  0D08               	mullw	8
 34828  003DF6  0E00               	movlw	low _swTimers
 34829  003DF8  24F3               	addwf	prodl,w,c
 34830  003DFA  6ED9               	movwf	fsr2l,c
 34831  003DFC  0E03               	movlw	high _swTimers
 34832  003DFE  20F4               	addwfc	prodh,w,c
 34833  003E00  6EDA               	movwf	fsr2h,c
 34834  003E02  0012               	return	
 34835  003E04                     __end_ofPL10:
 34836                           	opt stack 0
 34837                           tosu	equ	0xFFF
 34838                           tosh	equ	0xFFE
 34839                           tosl	equ	0xFFD
 34840                           pclath	equ	0xFFA
 34841                           tblptru	equ	0xFF8
 34842                           tblptrh	equ	0xFF7
 34843                           tblptrl	equ	0xFF6
 34844                           tablat	equ	0xFF5
 34845                           prodh	equ	0xFF4
 34846                           prodl	equ	0xFF3
 34847                           intcon	equ	0xFF2
 34848                           indf0	equ	0xFEF
 34849                           postinc0	equ	0xFEE
 34850                           plusw0	equ	0xFEB
 34851                           fsr0h	equ	0xFEA
 34852                           fsr0l	equ	0xFE9
 34853                           wreg	equ	0xFE8
 34854                           postinc1	equ	0xFE6
 34855                           postdec1	equ	0xFE5
 34856                           plusw1	equ	0xFE3
 34857                           fsr1h	equ	0xFE2
 34858                           fsr1l	equ	0xFE1
 34859                           indf2	equ	0xFDF
 34860                           postinc2	equ	0xFDE
 34861                           postdec2	equ	0xFDD
 34862                           plusw2	equ	0xFDB
 34863                           fsr2h	equ	0xFDA
 34864                           fsr2l	equ	0xFD9
 34865                           status	equ	0xFD8
 34866                           
 34867 ;; *************** function _TMR_GetDeltaTime *****************
 34868 ;; Defined at:
 34869 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34870 ;; Parameters:    Size  Location     Type
 34871 ;;		None
 34872 ;; Auto vars:     Size  Location     Type
 34873 ;;		None
 34874 ;; Return value:  Size  Location     Type
 34875 ;;                  4   10[BANK0 ] unsigned long 
 34876 ;; Registers used:
 34877 ;;		wreg, status,2, status,0, cstack
 34878 ;; Tracked objects:
 34879 ;;		On entry : F/0
 34880 ;;		On exit  : F/0
 34881 ;;		Unchanged: 0/0
 34882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 34883 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34885 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34886 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34887 ;;Total ram usage:       16 bytes
 34888 ;; Hardware stack levels used:    1
 34889 ;; Hardware stack levels required when called:    8
 34890 ;; This function calls:
 34891 ;;		_TMR1_ReadTimer
 34892 ;; This function is called by:
 34893 ;;		_SwTimersInterrupt
 34894 ;; This function uses a non-reentrant model
 34895 ;;
 34896                           
 34897                           	psect	text187
 34898  00422E                     __ptext187:
 34899                           	opt stack 0
 34900  00422E                     _TMR_GetDeltaTime:
 34901                           	opt stack 17
 34902                           
 34903                           ; BSR set to: 0
 34904                           ;sw_timer.c: 90: static uint32_t retVal;
 34905                           ;sw_timer.c: 91: static uint16_t tmrVal;
 34906                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 34907                           
 34908                           ; BSR set to: 0
 34909                           ;incstack = 0
 34910  00422E  EC4A  F02F         	call	_TMR1_ReadTimer	;wreg free
 34911  004232  C064  F03E         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 34912  004236  C065  F03F         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 34913                           
 34914                           ; BSR set to: 0
 34915                           ;sw_timer.c: 95: if (timerOverflow == 1)
 34916  00423A  0449               	decf	_timerOverflow,w,c	;volatile
 34917  00423C  E11F               	bnz	l11906
 34918                           
 34919                           ; BSR set to: 0
 34920                           ;sw_timer.c: 96: {
 34921                           ;sw_timer.c: 97: timerOverflow = 0;
 34922  00423E  6A49               	clrf	_timerOverflow,c	;volatile
 34923                           
 34924                           ; BSR set to: 0
 34925                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 34926  004240  D843               	call	PL258	;call to abstracted procedure
 34927  004242  A0D8               	btfss	status,0,c
 34928  004244  0770               	decf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 34929  004246  5170               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 34930  004248  6F71               	movwf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34931  00424A  D82F               	call	PL124	;call to abstracted procedure
 34932  00424C  6F76               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 34933  00424E  5039               	movf	_ticksAdded+1,w,c	;volatile
 34934  004250  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34935  004252  6F77               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 34936  004254  503A               	movf	_ticksAdded+2,w,c	;volatile
 34937  004256  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34938  004258  6F78               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 34939  00425A  503B               	movf	_ticksAdded+3,w,c	;volatile
 34940  00425C  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34941  00425E  6F79               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 34942  004260  0E00               	movlw	0
 34943  004262  2576               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 34944  004264  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34945  004266  0E00               	movlw	0
 34946  004268  2177               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 34947  00426A  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34948  00426C  0E01               	movlw	1
 34949  00426E  2178               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 34950  004270  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34951  004272  0E00               	movlw	0
 34952  004274  2179               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 34953                           
 34954                           ; BSR set to: 0
 34955                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 34956                           
 34957                           ; BSR set to: 0
 34958                           ;sw_timer.c: 100: ticksAdded = 0;
 34959                           
 34960                           ; BSR set to: 0
 34961                           ;sw_timer.c: 101: reloadVal = 0;
 34962  004276  EC99  F01C         	call	PL136	;call to abstracted procedure
 34963                           
 34964                           ;sw_timer.c: 102: }
 34965  00427A  D00E               	goto	l11908
 34966  00427C                     l11906:
 34967                           
 34968                           ; BSR set to: 0
 34969                           ;sw_timer.c: 103: else
 34970                           ;sw_timer.c: 104: {
 34971                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 34972  00427C  D825               	call	PL258	;call to abstracted procedure
 34973  00427E  6B71               	clrf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34974  004280  D814               	call	PL124	;call to abstracted procedure
 34975  004282  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34976  004284  5039               	movf	_ticksAdded+1,w,c	;volatile
 34977  004286  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34978  004288  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34979  00428A  503A               	movf	_ticksAdded+2,w,c	;volatile
 34980  00428C  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34981  00428E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34982  004290  503B               	movf	_ticksAdded+3,w,c	;volatile
 34983  004292  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34984                           
 34985                           ;sw_timer.c: 106: ticksAccounted += retVal;
 34986  004294  ECA7  F01C         	call	PL208	;call to abstracted procedure
 34987  004298                     l11908:
 34988                           
 34989                           ; BSR set to: 0
 34990                           ;sw_timer.c: 107: }
 34991                           ;sw_timer.c: 109: return retVal;
 34992  004298  C030  F06A         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 34993  00429C  C031  F06B         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 34994  0042A0  C032  F06C         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 34995  0042A4  C033  F06D         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 34996                           
 34997                           ; BSR set to: 0
 34998  0042A8  0012               	return		;funcret
 34999  0042AA                     __end_of_TMR_GetDeltaTime:
 35000                           	opt stack 0
 35001  0042AA                     PL124:
 35002                           	opt stack 17
 35003  0042AA  5034               	movf	_ticksAccounted,w,c	;volatile
 35004  0042AC  5D6E               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 35005  0042AE  6F72               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 35006  0042B0  5035               	movf	_ticksAccounted+1,w,c	;volatile
 35007  0042B2  596F               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 35008  0042B4  6F73               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 35009  0042B6  5036               	movf	_ticksAccounted+2,w,c	;volatile
 35010  0042B8  5970               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35011  0042BA  6F74               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 35012  0042BC  5037               	movf	_ticksAccounted+3,w,c	;volatile
 35013  0042BE  5971               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 35014  0042C0  6F75               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 35015  0042C2  5038               	movf	_ticksAdded,w,c	;volatile
 35016  0042C4  2572               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 35017  0042C6  0012               	return	
 35018  0042C8                     __end_ofPL124:
 35019                           	opt stack 0
 35020  0042C8                     PL258:
 35021                           	opt stack 17
 35022  0042C8  5044               	movf	_reloadVal,w,c	;volatile
 35023  0042CA  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 35024  0042CC  6F6E               	movwf	??_TMR_GetDeltaTime& (0+255),b
 35025  0042CE  5045               	movf	_reloadVal+1,w,c	;volatile
 35026  0042D0  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 35027  0042D2  6F6F               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 35028  0042D4  6B70               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 35029  0042D6  0012               	return	
 35030  0042D8                     __end_ofPL258:
 35031                           	opt stack 0
 35032                           tosu	equ	0xFFF
 35033                           tosh	equ	0xFFE
 35034                           tosl	equ	0xFFD
 35035                           pclath	equ	0xFFA
 35036                           tblptru	equ	0xFF8
 35037                           tblptrh	equ	0xFF7
 35038                           tblptrl	equ	0xFF6
 35039                           tablat	equ	0xFF5
 35040                           prodh	equ	0xFF4
 35041                           prodl	equ	0xFF3
 35042                           intcon	equ	0xFF2
 35043                           indf0	equ	0xFEF
 35044                           postinc0	equ	0xFEE
 35045                           plusw0	equ	0xFEB
 35046                           fsr0h	equ	0xFEA
 35047                           fsr0l	equ	0xFE9
 35048                           wreg	equ	0xFE8
 35049                           postinc1	equ	0xFE6
 35050                           postdec1	equ	0xFE5
 35051                           plusw1	equ	0xFE3
 35052                           fsr1h	equ	0xFE2
 35053                           fsr1l	equ	0xFE1
 35054                           indf2	equ	0xFDF
 35055                           postinc2	equ	0xFDE
 35056                           postdec2	equ	0xFDD
 35057                           plusw2	equ	0xFDB
 35058                           fsr2h	equ	0xFDA
 35059                           fsr2l	equ	0xFD9
 35060                           status	equ	0xFD8
 35061                           
 35062 ;; *************** function _TMR1_ReadTimer *****************
 35063 ;; Defined at:
 35064 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 35065 ;; Parameters:    Size  Location     Type
 35066 ;;		None
 35067 ;; Auto vars:     Size  Location     Type
 35068 ;;  readVal         2    8[BANK0 ] unsigned int 
 35069 ;; Return value:  Size  Location     Type
 35070 ;;                  2    4[BANK0 ] unsigned int 
 35071 ;; Registers used:
 35072 ;;		wreg, status,2, status,0
 35073 ;; Tracked objects:
 35074 ;;		On entry : F/0
 35075 ;;		On exit  : F/0
 35076 ;;		Unchanged: 0/0
 35077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35082 ;;Total ram usage:        6 bytes
 35083 ;; Hardware stack levels used:    1
 35084 ;; Hardware stack levels required when called:    7
 35085 ;; This function calls:
 35086 ;;		Nothing
 35087 ;; This function is called by:
 35088 ;;		_TMR_GetDeltaTime
 35089 ;;		_TMR_SwapTimer
 35090 ;; This function uses a non-reentrant model
 35091 ;;
 35092                           
 35093                           	psect	text188
 35094  005E94                     __ptext188:
 35095                           	opt stack 0
 35096  005E94                     _TMR1_ReadTimer:
 35097                           	opt stack 17
 35098                           
 35099                           ; BSR set to: 0
 35100                           ;tmr1.c: 115: uint16_t readVal;
 35101                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 35102                           
 35103                           ; BSR set to: 0
 35104                           ;incstack = 0
 35105  005E94  50CD               	movf	4045,w,c	;volatile
 35106  005E96  CFCE F066          	movff	4046,??_TMR1_ReadTimer	;volatile
 35107  005E9A  6B67               	clrf	(??_TMR1_ReadTimer+1)& (0+255),b
 35108  005E9C  C066  F067         	movff	??_TMR1_ReadTimer,??_TMR1_ReadTimer+1
 35109  005EA0  6B66               	clrf	??_TMR1_ReadTimer& (0+255),b
 35110  005EA2  1166               	iorwf	??_TMR1_ReadTimer& (0+255),w,b
 35111  005EA4  6F68               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 35112  005EA6  5167               	movf	(??_TMR1_ReadTimer+1)& (0+255),w,b
 35113  005EA8  6F69               	movwf	(TMR1_ReadTimer@readVal+1)& (0+255),b
 35114                           
 35115                           ; BSR set to: 0
 35116                           ;tmr1.c: 119: return readVal;
 35117  005EAA  C068  F064         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 35118  005EAE  C069  F065         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 35119                           
 35120                           ; BSR set to: 0
 35121  005EB2  0012               	return		;funcret
 35122  005EB4                     __end_of_TMR1_ReadTimer:
 35123                           	opt stack 0
 35124                           tosu	equ	0xFFF
 35125                           tosh	equ	0xFFE
 35126                           tosl	equ	0xFFD
 35127                           pclath	equ	0xFFA
 35128                           tblptru	equ	0xFF8
 35129                           tblptrh	equ	0xFF7
 35130                           tblptrl	equ	0xFF6
 35131                           tablat	equ	0xFF5
 35132                           prodh	equ	0xFF4
 35133                           prodl	equ	0xFF3
 35134                           intcon	equ	0xFF2
 35135                           indf0	equ	0xFEF
 35136                           postinc0	equ	0xFEE
 35137                           plusw0	equ	0xFEB
 35138                           fsr0h	equ	0xFEA
 35139                           fsr0l	equ	0xFE9
 35140                           wreg	equ	0xFE8
 35141                           postinc1	equ	0xFE6
 35142                           postdec1	equ	0xFE5
 35143                           plusw1	equ	0xFE3
 35144                           fsr1h	equ	0xFE2
 35145                           fsr1l	equ	0xFE1
 35146                           indf2	equ	0xFDF
 35147                           postinc2	equ	0xFDE
 35148                           postdec2	equ	0xFDD
 35149                           plusw2	equ	0xFDB
 35150                           fsr2h	equ	0xFDA
 35151                           fsr2l	equ	0xFD9
 35152                           status	equ	0xFD8
 35153                           
 35154 ;; *************** function _SwTimerSetTimeout *****************
 35155 ;; Defined at:
 35156 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35157 ;; Parameters:    Size  Location     Type
 35158 ;;  timerId         1    wreg     unsigned char 
 35159 ;;  timeout         4   17[BANK0 ] unsigned long 
 35160 ;; Auto vars:     Size  Location     Type
 35161 ;;  timerId         1   25[BANK0 ] unsigned char 
 35162 ;; Return value:  Size  Location     Type
 35163 ;;                  1    wreg      void 
 35164 ;; Registers used:
 35165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35166 ;; Tracked objects:
 35167 ;;		On entry : C/2
 35168 ;;		On exit  : F/0
 35169 ;;		Unchanged: 0/0
 35170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35174 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35175 ;;Total ram usage:        9 bytes
 35176 ;; Hardware stack levels used:    1
 35177 ;; Hardware stack levels required when called:    7
 35178 ;; This function calls:
 35179 ;;		Nothing
 35180 ;; This function is called by:
 35181 ;;		_RADIO_Transmit
 35182 ;;		_RADIO_ReceiveStart
 35183 ;;		_LORAWAN_TxDone
 35184 ;;		_LORAWAN_RxTimeout
 35185 ;;		_StartReTxTimer
 35186 ;;		_DutyCycleCallback
 35187 ;;		_LORAWAN_Join
 35188 ;;		_LORAWAN_LinkCheckConfigure
 35189 ;;		_LORAWAN_LinkCheckCallback
 35190 ;;		_UpdateRetransmissionAckTimeoutState
 35191 ;;		_UpdateJoinSuccessState
 35192 ;; This function uses a non-reentrant model
 35193 ;;
 35194                           
 35195                           	psect	text189
 35196  00589E                     __ptext189:
 35197                           	opt stack 0
 35198  00589E                     _SwTimerSetTimeout:
 35199                           	opt stack 20
 35200                           
 35201                           ; BSR set to: 0
 35202                           ;incstack = 0
 35203                           ;SwTimerSetTimeout@timerId stored from wreg
 35204  00589E  0100               	movlb	0	; () banked
 35205  0058A0  6F79               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 35206                           
 35207                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 35208  0058A2  9EF2               	bcf	intcon,7,c	;volatile
 35209                           
 35210                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 35211  0058A4  0EE0               	movlw	224
 35212  0058A6  2571               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 35213  0058A8  6F75               	movwf	??_SwTimerSetTimeout& (0+255),b
 35214  0058AA  0EFF               	movlw	255
 35215  0058AC  2172               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 35216  0058AE  6F76               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 35217  0058B0  0EFF               	movlw	255
 35218  0058B2  2173               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 35219  0058B4  6F77               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 35220  0058B6  0EFF               	movlw	255
 35221  0058B8  2174               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 35222  0058BA  6F78               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 35223  0058BC  5179               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 35224  0058BE  ECFA  F01E         	call	PL10	;call to abstracted procedure
 35225  0058C2  C075  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 35226  0058C6  C076  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 35227  0058CA  C077  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 35228  0058CE  C078  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 35229                           
 35230                           ; BSR set to: 0
 35231                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 35232  0058D2  8EF2               	bsf	intcon,7,c	;volatile
 35233                           
 35234                           ; BSR set to: 0
 35235  0058D4  0012               	return		;funcret
 35236  0058D6                     __end_of_SwTimerSetTimeout:
 35237                           	opt stack 0
 35238                           tosu	equ	0xFFF
 35239                           tosh	equ	0xFFE
 35240                           tosl	equ	0xFFD
 35241                           pclath	equ	0xFFA
 35242                           tblptru	equ	0xFF8
 35243                           tblptrh	equ	0xFF7
 35244                           tblptrl	equ	0xFF6
 35245                           tablat	equ	0xFF5
 35246                           prodh	equ	0xFF4
 35247                           prodl	equ	0xFF3
 35248                           intcon	equ	0xFF2
 35249                           indf0	equ	0xFEF
 35250                           postinc0	equ	0xFEE
 35251                           plusw0	equ	0xFEB
 35252                           fsr0h	equ	0xFEA
 35253                           fsr0l	equ	0xFE9
 35254                           wreg	equ	0xFE8
 35255                           postinc1	equ	0xFE6
 35256                           postdec1	equ	0xFE5
 35257                           plusw1	equ	0xFE3
 35258                           fsr1h	equ	0xFE2
 35259                           fsr1l	equ	0xFE1
 35260                           indf2	equ	0xFDF
 35261                           postinc2	equ	0xFDE
 35262                           postdec2	equ	0xFDD
 35263                           plusw2	equ	0xFDB
 35264                           fsr2h	equ	0xFDA
 35265                           fsr2l	equ	0xFD9
 35266                           status	equ	0xFD8
 35267                           
 35268 ;; *************** function _InitDefault868Channels *****************
 35269 ;; Defined at:
 35270 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35271 ;; Parameters:    Size  Location     Type
 35272 ;;		None
 35273 ;; Auto vars:     Size  Location     Type
 35274 ;;  i               1   14[BANK0 ] unsigned char 
 35275 ;; Return value:  Size  Location     Type
 35276 ;;                  1    wreg      void 
 35277 ;; Registers used:
 35278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35279 ;; Tracked objects:
 35280 ;;		On entry : F/1
 35281 ;;		On exit  : F/0
 35282 ;;		Unchanged: 0/0
 35283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35287 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35288 ;;Total ram usage:        1 bytes
 35289 ;; Hardware stack levels used:    1
 35290 ;; Hardware stack levels required when called:    8
 35291 ;; This function calls:
 35292 ;;		_memcpy
 35293 ;;		_memset
 35294 ;; This function is called by:
 35295 ;;		_LORAWAN_Reset
 35296 ;; This function uses a non-reentrant model
 35297 ;;
 35298                           
 35299                           	psect	text190
 35300  005592                     __ptext190:
 35301                           	opt stack 0
 35302  005592                     _InitDefault868Channels:
 35303                           	opt stack 0
 35304                           
 35305                           ; BSR set to: 1
 35306                           ;lorawan_eu.c: 981: uint8_t i;
 35307                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 35308                           
 35309                           ; BSR set to: 0
 35310                           ;incstack = 0
 35311  005592  EC39  F028         	call	PL188	;call to abstracted procedure
 35312  005596  D81D               	call	PL182	;call to abstracted procedure
 35313  005598  0EE0               	movlw	224
 35314  00559A  6F68               	movwf	memset@n& (0+255),b
 35315  00559C  EC18  F02E         	call	_memset	;wreg free
 35316                           
 35317                           ; BSR set to: 0
 35318                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 35319  0055A0  EC3E  F028         	call	PL402	;call to abstracted procedure
 35320  0055A4  0ED2               	movlw	low _DefaultChannels868
 35321  0055A6  6F66               	movwf	memcpy@s1& (0+255),b
 35322  0055A8  0EFF               	movlw	high _DefaultChannels868
 35323  0055AA  EC43  F028         	call	PL442	;call to abstracted procedure
 35324  0055AE  ECA0  F028         	call	_memcpy	;wreg free
 35325                           
 35326                           ; BSR set to: 0
 35327                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 35328  0055B2  0E03               	movlw	3
 35329  0055B4  6F6E               	movwf	InitDefault868Channels@i& (0+255),b
 35330  0055B6                     l15006:
 35331                           
 35332                           ; BSR set to: 0
 35333                           ;lorawan_eu.c: 986: {
 35334                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 35335  0055B6  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35336  0055B8  ECCF  F006         	call	PL104	;call to abstracted procedure
 35337  0055BC  68DE               	setf	postinc2,c
 35338  0055BE  68DD               	setf	postdec2,c
 35339                           
 35340                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 35341  0055C0  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35342  0055C2  ECAF  F021         	call	PL6	;call to abstracted procedure
 35343  0055C6  68DF               	setf	indf2,c
 35344                           
 35345                           ; BSR set to: 0
 35346  0055C8  2B6E               	incf	InitDefault868Channels@i& (0+255),f,b
 35347                           
 35348                           ; BSR set to: 0
 35349  0055CA  0E0F               	movlw	15
 35350  0055CC  656E               	cpfsgt	InitDefault868Channels@i& (0+255),b
 35351  0055CE  D7F3               	goto	l15006
 35352  0055D0  0C0F               	retlw	15
 35353  0055D2                     __end_of_InitDefault868Channels:
 35354                           	opt stack 0
 35355  0055D2                     PL182:
 35356                           	opt stack 17
 35357  0055D2  6F65               	movwf	(memset@p1+1)& (0+255),b
 35358  0055D4  6B67               	clrf	(memset@c+1)& (0+255),b
 35359  0055D6  6B66               	clrf	memset@c& (0+255),b
 35360  0055D8  6B69               	clrf	(memset@n+1)& (0+255),b
 35361  0055DA  0012               	return	
 35362  0055DC                     __end_ofPL182:
 35363                           	opt stack 0
 35364                           tosu	equ	0xFFF
 35365                           tosh	equ	0xFFE
 35366                           tosl	equ	0xFFD
 35367                           pclath	equ	0xFFA
 35368                           tblptru	equ	0xFF8
 35369                           tblptrh	equ	0xFF7
 35370                           tblptrl	equ	0xFF6
 35371                           tablat	equ	0xFF5
 35372                           prodh	equ	0xFF4
 35373                           prodl	equ	0xFF3
 35374                           intcon	equ	0xFF2
 35375                           indf0	equ	0xFEF
 35376                           postinc0	equ	0xFEE
 35377                           plusw0	equ	0xFEB
 35378                           fsr0h	equ	0xFEA
 35379                           fsr0l	equ	0xFE9
 35380                           wreg	equ	0xFE8
 35381                           postinc1	equ	0xFE6
 35382                           postdec1	equ	0xFE5
 35383                           plusw1	equ	0xFE3
 35384                           fsr1h	equ	0xFE2
 35385                           fsr1l	equ	0xFE1
 35386                           indf2	equ	0xFDF
 35387                           postinc2	equ	0xFDE
 35388                           postdec2	equ	0xFDD
 35389                           plusw2	equ	0xFDB
 35390                           fsr2h	equ	0xFDA
 35391                           fsr2l	equ	0xFD9
 35392                           status	equ	0xFD8
 35393                           
 35394 ;; *************** function _InitDefault433Channels *****************
 35395 ;; Defined at:
 35396 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35397 ;; Parameters:    Size  Location     Type
 35398 ;;		None
 35399 ;; Auto vars:     Size  Location     Type
 35400 ;;  i               1   14[BANK0 ] unsigned char 
 35401 ;; Return value:  Size  Location     Type
 35402 ;;                  1    wreg      void 
 35403 ;; Registers used:
 35404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35405 ;; Tracked objects:
 35406 ;;		On entry : F/1
 35407 ;;		On exit  : F/0
 35408 ;;		Unchanged: 0/0
 35409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35413 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35414 ;;Total ram usage:        1 bytes
 35415 ;; Hardware stack levels used:    1
 35416 ;; Hardware stack levels required when called:    8
 35417 ;; This function calls:
 35418 ;;		_memcpy
 35419 ;;		_memset
 35420 ;; This function is called by:
 35421 ;;		_LORAWAN_Reset
 35422 ;; This function uses a non-reentrant model
 35423 ;;
 35424                           
 35425                           	psect	text191
 35426  005036                     __ptext191:
 35427                           	opt stack 0
 35428  005036                     _InitDefault433Channels:
 35429                           	opt stack 0
 35430                           
 35431                           ; BSR set to: 1
 35432                           ;lorawan_eu.c: 996: uint8_t i;
 35433                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 35434                           
 35435                           ; BSR set to: 0
 35436                           ;incstack = 0
 35437  005036  D81D               	call	PL188	;call to abstracted procedure
 35438  005038  ECE9  F02A         	call	PL182	;call to abstracted procedure
 35439  00503C  0EE0               	movlw	224
 35440  00503E  6F68               	movwf	memset@n& (0+255),b
 35441  005040  EC18  F02E         	call	_memset	;wreg free
 35442                           
 35443                           ; BSR set to: 0
 35444                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 35445  005044  D81B               	call	PL402	;call to abstracted procedure
 35446  005046  0EA8               	movlw	low _DefaultChannels433
 35447  005048  6F66               	movwf	memcpy@s1& (0+255),b
 35448  00504A  0EFF               	movlw	high _DefaultChannels433
 35449  00504C  D81C               	call	PL442	;call to abstracted procedure
 35450  00504E  ECA0  F028         	call	_memcpy	;wreg free
 35451                           
 35452                           ; BSR set to: 0
 35453                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 35454  005052  0E03               	movlw	3
 35455  005054  6F6E               	movwf	InitDefault433Channels@i& (0+255),b
 35456  005056                     l15022:
 35457                           
 35458                           ; BSR set to: 0
 35459                           ;lorawan_eu.c: 1001: {
 35460                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 35461  005056  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35462  005058  ECCF  F006         	call	PL104	;call to abstracted procedure
 35463  00505C  68DE               	setf	postinc2,c
 35464  00505E  68DD               	setf	postdec2,c
 35465                           
 35466                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 35467  005060  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35468  005062  ECAF  F021         	call	PL6	;call to abstracted procedure
 35469  005066  68DF               	setf	indf2,c
 35470                           
 35471                           ; BSR set to: 0
 35472  005068  2B6E               	incf	InitDefault433Channels@i& (0+255),f,b
 35473                           
 35474                           ; BSR set to: 0
 35475  00506A  0E0F               	movlw	15
 35476  00506C  656E               	cpfsgt	InitDefault433Channels@i& (0+255),b
 35477  00506E  D7F3               	goto	l15022
 35478  005070  0C0F               	retlw	15
 35479  005072                     __end_of_InitDefault433Channels:
 35480                           	opt stack 0
 35481  005072                     PL188:
 35482                           	opt stack 20
 35483  005072  0E00               	movlw	low _Channels
 35484  005074  0100               	movlb	0	; () banked
 35485  005076  6F64               	movwf	memset@p1& (0+255),b
 35486  005078  0E04               	movlw	high _Channels
 35487  00507A  0012               	return	
 35488  00507C                     __end_ofPL188:
 35489                           	opt stack 0
 35490  00507C                     PL402:
 35491                           	opt stack 20
 35492  00507C  0E00               	movlw	low _Channels
 35493  00507E  6F64               	movwf	memcpy@d1& (0+255),b
 35494  005080  0E04               	movlw	high _Channels
 35495  005082  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 35496  005084  0012               	return	
 35497  005086                     __end_ofPL402:
 35498                           	opt stack 0
 35499  005086                     PL442:
 35500                           	opt stack 20
 35501  005086  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 35502  005088  6B69               	clrf	(memcpy@n+1)& (0+255),b
 35503  00508A  0E2A               	movlw	42
 35504  00508C  6F68               	movwf	memcpy@n& (0+255),b
 35505  00508E  0C2A               	retlw	42
 35506  005090                     __end_ofPL442:
 35507                           	opt stack 0
 35508                           tosu	equ	0xFFF
 35509                           tosh	equ	0xFFE
 35510                           tosl	equ	0xFFD
 35511                           pclath	equ	0xFFA
 35512                           tblptru	equ	0xFF8
 35513                           tblptrh	equ	0xFF7
 35514                           tblptrl	equ	0xFF6
 35515                           tablat	equ	0xFF5
 35516                           prodh	equ	0xFF4
 35517                           prodl	equ	0xFF3
 35518                           intcon	equ	0xFF2
 35519                           indf0	equ	0xFEF
 35520                           postinc0	equ	0xFEE
 35521                           plusw0	equ	0xFEB
 35522                           fsr0h	equ	0xFEA
 35523                           fsr0l	equ	0xFE9
 35524                           wreg	equ	0xFE8
 35525                           postinc1	equ	0xFE6
 35526                           postdec1	equ	0xFE5
 35527                           plusw1	equ	0xFE3
 35528                           fsr1h	equ	0xFE2
 35529                           fsr1l	equ	0xFE1
 35530                           indf2	equ	0xFDF
 35531                           postinc2	equ	0xFDE
 35532                           postdec2	equ	0xFDD
 35533                           plusw2	equ	0xFDB
 35534                           fsr2h	equ	0xFDA
 35535                           fsr2l	equ	0xFD9
 35536                           status	equ	0xFD8
 35537                           
 35538 ;; *************** function _memset *****************
 35539 ;; Defined at:
 35540 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 35541 ;; Parameters:    Size  Location     Type
 35542 ;;  p1              2    4[BANK0 ] PTR void 
 35543 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 35544 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 35545 ;;  c               2    6[BANK0 ] int 
 35546 ;;  n               2    8[BANK0 ] unsigned int 
 35547 ;; Auto vars:     Size  Location     Type
 35548 ;;  p               2   10[BANK0 ] PTR unsigned char 
 35549 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 35550 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 35551 ;; Return value:  Size  Location     Type
 35552 ;;                  2    4[BANK0 ] PTR void 
 35553 ;; Registers used:
 35554 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 35555 ;; Tracked objects:
 35556 ;;		On entry : F/0
 35557 ;;		On exit  : F/0
 35558 ;;		Unchanged: 0/0
 35559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35560 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35563 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35564 ;;Total ram usage:        8 bytes
 35565 ;; Hardware stack levels used:    1
 35566 ;; Hardware stack levels required when called:    7
 35567 ;; This function calls:
 35568 ;;		Nothing
 35569 ;; This function is called by:
 35570 ;;		_LORAWAN_Reset
 35571 ;;		_InitDefault868Channels
 35572 ;;		_InitDefault433Channels
 35573 ;;		_AESCmac
 35574 ;;		_GenerateSubkey
 35575 ;;		_AssemblePacket
 35576 ;;		_PrepareJoinRequestFrame
 35577 ;;		_PrepareSessionKeys
 35578 ;;		_AssembleEncryptionBlock
 35579 ;; This function uses a non-reentrant model
 35580 ;;
 35581                           
 35582                           	psect	text192
 35583  005C30                     __ptext192:
 35584                           	opt stack 0
 35585  005C30                     _memset:
 35586                           	opt stack 20
 35587                           
 35588                           ; BSR set to: 0
 35589                           
 35590                           ; BSR set to: 0
 35591                           ;incstack = 0
 35592  005C30  C064  F06A         	movff	memset@p1,memset@p
 35593  005C34  C065  F06B         	movff	memset@p1+1,memset@p+1
 35594  005C38  D008               	goto	l12326
 35595  005C3A                     l12322:
 35596                           
 35597                           ; BSR set to: 0
 35598  005C3A  C06A  FFD9         	movff	memset@p,fsr2l
 35599  005C3E  C06B  FFDA         	movff	memset@p+1,fsr2h
 35600  005C42  C066  FFDF         	movff	memset@c,indf2
 35601                           
 35602                           ; BSR set to: 0
 35603  005C46  4B6A               	infsnz	memset@p& (0+255),f,b
 35604  005C48  2B6B               	incf	(memset@p+1)& (0+255),f,b
 35605  005C4A                     l12326:
 35606                           
 35607                           ; BSR set to: 0
 35608  005C4A  0768               	decf	memset@n& (0+255),f,b
 35609  005C4C  A0D8               	btfss	status,0,c
 35610  005C4E  0769               	decf	(memset@n+1)& (0+255),f,b
 35611  005C50  2968               	incf	memset@n& (0+255),w,b
 35612  005C52  E1F3               	bnz	l12322
 35613  005C54  2969               	incf	(memset@n+1)& (0+255),w,b
 35614  005C56  E1F1               	bnz	l12322
 35615                           
 35616                           ; BSR set to: 0
 35617  005C58  0012               	return		;funcret
 35618  005C5A                     __end_of_memset:
 35619                           	opt stack 0
 35620                           tosu	equ	0xFFF
 35621                           tosh	equ	0xFFE
 35622                           tosl	equ	0xFFD
 35623                           pclath	equ	0xFFA
 35624                           tblptru	equ	0xFF8
 35625                           tblptrh	equ	0xFF7
 35626                           tblptrl	equ	0xFF6
 35627                           tablat	equ	0xFF5
 35628                           prodh	equ	0xFF4
 35629                           prodl	equ	0xFF3
 35630                           intcon	equ	0xFF2
 35631                           indf0	equ	0xFEF
 35632                           postinc0	equ	0xFEE
 35633                           plusw0	equ	0xFEB
 35634                           fsr0h	equ	0xFEA
 35635                           fsr0l	equ	0xFE9
 35636                           wreg	equ	0xFE8
 35637                           postinc1	equ	0xFE6
 35638                           postdec1	equ	0xFE5
 35639                           plusw1	equ	0xFE3
 35640                           fsr1h	equ	0xFE2
 35641                           fsr1l	equ	0xFE1
 35642                           indf2	equ	0xFDF
 35643                           postinc2	equ	0xFDE
 35644                           postdec2	equ	0xFDD
 35645                           plusw2	equ	0xFDB
 35646                           fsr2h	equ	0xFDA
 35647                           fsr2l	equ	0xFD9
 35648                           status	equ	0xFD8
 35649                           
 35650 ;; *************** function _memcpy *****************
 35651 ;; Defined at:
 35652 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
 35653 ;; Parameters:    Size  Location     Type
 35654 ;;  d1              2    4[BANK0 ] PTR void 
 35655 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 35656 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 35657 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 35658 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 35659 ;;  s1              2    6[BANK0 ] PTR const void 
 35660 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 35661 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 35662 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 35663 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 35664 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 35665 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 35666 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 35667 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 35668 ;;		 -> NULL(0), 
 35669 ;;  n               2    8[BANK0 ] unsigned int 
 35670 ;; Auto vars:     Size  Location     Type
 35671 ;;  s               2   12[BANK0 ] PTR const unsigned char 
 35672 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 35673 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 35674 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 35675 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 35676 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 35677 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 35678 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 35679 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 35680 ;;		 -> NULL(0), 
 35681 ;;  d               2   10[BANK0 ] PTR unsigned char 
 35682 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 35683 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 35684 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 35685 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 35686 ;; Return value:  Size  Location     Type
 35687 ;;                  2    4[BANK0 ] PTR void 
 35688 ;; Registers used:
 35689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 35690 ;; Tracked objects:
 35691 ;;		On entry : F/0
 35692 ;;		On exit  : F/0
 35693 ;;		Unchanged: 0/0
 35694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35695 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35696 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35698 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35699 ;;Total ram usage:       10 bytes
 35700 ;; Hardware stack levels used:    1
 35701 ;; Hardware stack levels required when called:    7
 35702 ;; This function calls:
 35703 ;;		Nothing
 35704 ;; This function is called by:
 35705 ;;		_RADIO_SetFSKSyncWord
 35706 ;;		_UpdateCfList
 35707 ;;		_InitDefault868Channels
 35708 ;;		_InitDefault433Channels
 35709 ;;		_AESCmac
 35710 ;;		_LORAWAN_SetNetworkSessionKey
 35711 ;;		_LORAWAN_SetApplicationSessionKey
 35712 ;;		_LORAWAN_RxDone
 35713 ;;		_AssemblePacket
 35714 ;;		_PrepareJoinRequestFrame
 35715 ;;		_PrepareSessionKeys
 35716 ;;		_AssembleEncryptionBlock
 35717 ;;		_ExtractMic
 35718 ;;		_ComputeMic
 35719 ;;		_AESEncodeLoRa
 35720 ;; This function uses a non-reentrant model
 35721 ;;
 35722                           
 35723                           	psect	text193
 35724  005140                     __ptext193:
 35725                           	opt stack 0
 35726  005140                     _memcpy:
 35727                           	opt stack 17
 35728                           
 35729                           ; BSR set to: 0
 35730                           
 35731                           ; BSR set to: 0
 35732                           ;incstack = 0
 35733  005140  C066  F06C         	movff	memcpy@s1,memcpy@s
 35734  005144  C067  F06D         	movff	memcpy@s1+1,memcpy@s+1
 35735  005148  C064  F06A         	movff	memcpy@d1,memcpy@d
 35736  00514C  C065  F06B         	movff	memcpy@d1+1,memcpy@d+1
 35737  005150  D01B               	goto	l11954
 35738  005152                     l11948:
 35739                           
 35740                           ; BSR set to: 0
 35741  005152  C06C  FFF6         	movff	memcpy@s,tblptrl
 35742  005156  C06D  FFF7         	movff	memcpy@s+1,tblptrh
 35743  00515A  0E00               	movlw	low (__mediumconst shr (0+16))
 35744  00515C  6EF8               	movwf	tblptru,c
 35745  00515E  C06A  FFD9         	movff	memcpy@d,fsr2l
 35746  005162  C06B  FFDA         	movff	memcpy@d+1,fsr2h
 35747  005166  0E0D               	movlw	(high __ramtop+-1)
 35748  005168  64F7               	cpfsgt	tblptrh,c
 35749  00516A  D003               	bra	u12587
 35750  00516C  0008               	tblrd		*
 35751  00516E  50F5               	movf	tablat,w,c
 35752  005170  D005               	bra	u12580
 35753  005172                     u12587:
 35754  005172  CFF6 FFE9          	movff	tblptrl,fsr0l
 35755  005176  CFF7 FFEA          	movff	tblptrh,fsr0h
 35756  00517A  50EF               	movf	indf0,w,c
 35757  00517C                     u12580:
 35758  00517C  6EDF               	movwf	indf2,c
 35759  00517E  0100               	movlb	0	; () banked
 35760  005180  4B6C               	infsnz	memcpy@s& (0+255),f,b
 35761  005182  2B6D               	incf	(memcpy@s+1)& (0+255),f,b
 35762                           
 35763                           ; BSR set to: 0
 35764  005184  4B6A               	infsnz	memcpy@d& (0+255),f,b
 35765  005186  2B6B               	incf	(memcpy@d+1)& (0+255),f,b
 35766  005188                     l11954:
 35767                           
 35768                           ; BSR set to: 0
 35769  005188  0768               	decf	memcpy@n& (0+255),f,b
 35770  00518A  A0D8               	btfss	status,0,c
 35771  00518C  0769               	decf	(memcpy@n+1)& (0+255),f,b
 35772  00518E  2968               	incf	memcpy@n& (0+255),w,b
 35773  005190  E1E0               	bnz	l11948
 35774  005192  2969               	incf	(memcpy@n+1)& (0+255),w,b
 35775  005194  E1DE               	bnz	l11948
 35776                           
 35777                           ; BSR set to: 0
 35778  005196  0012               	return		;funcret
 35779  005198                     __end_of_memcpy:
 35780                           	opt stack 0
 35781                           tosu	equ	0xFFF
 35782                           tosh	equ	0xFFE
 35783                           tosl	equ	0xFFD
 35784                           pclath	equ	0xFFA
 35785                           tblptru	equ	0xFF8
 35786                           tblptrh	equ	0xFF7
 35787                           tblptrl	equ	0xFF6
 35788                           tablat	equ	0xFF5
 35789                           prodh	equ	0xFF4
 35790                           prodl	equ	0xFF3
 35791                           intcon	equ	0xFF2
 35792                           indf0	equ	0xFEF
 35793                           postinc0	equ	0xFEE
 35794                           plusw0	equ	0xFEB
 35795                           fsr0h	equ	0xFEA
 35796                           fsr0l	equ	0xFE9
 35797                           wreg	equ	0xFE8
 35798                           postinc1	equ	0xFE6
 35799                           postdec1	equ	0xFE5
 35800                           plusw1	equ	0xFE3
 35801                           fsr1h	equ	0xFE2
 35802                           fsr1l	equ	0xFE1
 35803                           indf2	equ	0xFDF
 35804                           postinc2	equ	0xFDE
 35805                           postdec2	equ	0xFDD
 35806                           plusw2	equ	0xFDB
 35807                           fsr2h	equ	0xFDA
 35808                           fsr2l	equ	0xFD9
 35809                           status	equ	0xFD8
 35810                           
 35811 ;; *************** function _CreateAllSoftwareTimers *****************
 35812 ;; Defined at:
 35813 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35814 ;; Parameters:    Size  Location     Type
 35815 ;;		None
 35816 ;; Auto vars:     Size  Location     Type
 35817 ;;		None
 35818 ;; Return value:  Size  Location     Type
 35819 ;;                  1    wreg      void 
 35820 ;; Registers used:
 35821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35822 ;; Tracked objects:
 35823 ;;		On entry : F/2
 35824 ;;		On exit  : F/2
 35825 ;;		Unchanged: 0/0
 35826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35831 ;;Total ram usage:        0 bytes
 35832 ;; Hardware stack levels used:    1
 35833 ;; Hardware stack levels required when called:    8
 35834 ;; This function calls:
 35835 ;;		_SwTimerCreate
 35836 ;; This function is called by:
 35837 ;;		_LORAWAN_Init
 35838 ;; This function uses a non-reentrant model
 35839 ;;
 35840                           
 35841                           	psect	text194
 35842  005290                     __ptext194:
 35843                           	opt stack 0
 35844  005290                     _CreateAllSoftwareTimers:
 35845                           	opt stack 21
 35846                           
 35847                           ; BSR set to: 2
 35848                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 35849                           
 35850                           ; BSR set to: 0
 35851                           ;incstack = 0
 35852  005290  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35853  005294  0102               	movlb	2	; () banked
 35854  005296  6FE2               	movwf	(_loRa+226)& (0+255),b
 35855                           
 35856                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 35857  005298  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35858  00529C  0102               	movlb	2	; () banked
 35859  00529E  6FE3               	movwf	(_loRa+227)& (0+255),b
 35860                           
 35861                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 35862  0052A0  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35863  0052A4  0102               	movlb	2	; () banked
 35864  0052A6  6FE4               	movwf	(_loRa+228)& (0+255),b
 35865                           
 35866                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 35867  0052A8  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35868  0052AC  0102               	movlb	2	; () banked
 35869  0052AE  6FE5               	movwf	(_loRa+229)& (0+255),b
 35870                           
 35871                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 35872  0052B0  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35873  0052B4  0102               	movlb	2	; () banked
 35874  0052B6  6FE7               	movwf	(_loRa+231)& (0+255),b
 35875                           
 35876                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 35877  0052B8  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35878  0052BC  0102               	movlb	2	; () banked
 35879  0052BE  6FE8               	movwf	(_loRa+232)& (0+255),b
 35880                           
 35881                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 35882  0052C0  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35883  0052C4  0102               	movlb	2	; () banked
 35884  0052C6  6FE6               	movwf	(_loRa+230)& (0+255),b
 35885                           
 35886                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 35887  0052C8  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35888  0052CC  0102               	movlb	2	; () banked
 35889  0052CE  6FEA               	movwf	(_loRa+234)& (0+255),b
 35890                           
 35891                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 35892  0052D0  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35893  0052D4  0102               	movlb	2	; () banked
 35894  0052D6  6FF3               	movwf	(_loRa+243)& (0+255),b
 35895                           
 35896                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 35897  0052D8  EC12  F02B         	call	_SwTimerCreate	;wreg free
 35898  0052DC  0102               	movlb	2	; () banked
 35899  0052DE  6FE9               	movwf	(_loRa+233)& (0+255),b
 35900                           
 35901                           ; BSR set to: 2
 35902  0052E0  0012               	return		;funcret
 35903  0052E2                     __end_of_CreateAllSoftwareTimers:
 35904                           	opt stack 0
 35905                           tosu	equ	0xFFF
 35906                           tosh	equ	0xFFE
 35907                           tosl	equ	0xFFD
 35908                           pclath	equ	0xFFA
 35909                           tblptru	equ	0xFF8
 35910                           tblptrh	equ	0xFF7
 35911                           tblptrl	equ	0xFF6
 35912                           tablat	equ	0xFF5
 35913                           prodh	equ	0xFF4
 35914                           prodl	equ	0xFF3
 35915                           intcon	equ	0xFF2
 35916                           indf0	equ	0xFEF
 35917                           postinc0	equ	0xFEE
 35918                           plusw0	equ	0xFEB
 35919                           fsr0h	equ	0xFEA
 35920                           fsr0l	equ	0xFE9
 35921                           wreg	equ	0xFE8
 35922                           postinc1	equ	0xFE6
 35923                           postdec1	equ	0xFE5
 35924                           plusw1	equ	0xFE3
 35925                           fsr1h	equ	0xFE2
 35926                           fsr1l	equ	0xFE1
 35927                           indf2	equ	0xFDF
 35928                           postinc2	equ	0xFDE
 35929                           postdec2	equ	0xFDD
 35930                           plusw2	equ	0xFDB
 35931                           fsr2h	equ	0xFDA
 35932                           fsr2l	equ	0xFD9
 35933                           status	equ	0xFD8
 35934                           
 35935 ;; *************** function _SwTimerCreate *****************
 35936 ;; Defined at:
 35937 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35938 ;; Parameters:    Size  Location     Type
 35939 ;;		None
 35940 ;; Auto vars:     Size  Location     Type
 35941 ;;  retVal          1    4[BANK0 ] unsigned char 
 35942 ;; Return value:  Size  Location     Type
 35943 ;;                  1    wreg      unsigned char 
 35944 ;; Registers used:
 35945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35946 ;; Tracked objects:
 35947 ;;		On entry : C/1
 35948 ;;		On exit  : F/0
 35949 ;;		Unchanged: 0/0
 35950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 35951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35955 ;;Total ram usage:        1 bytes
 35956 ;; Hardware stack levels used:    1
 35957 ;; Hardware stack levels required when called:    7
 35958 ;; This function calls:
 35959 ;;		Nothing
 35960 ;; This function is called by:
 35961 ;;		_RADIO_Init
 35962 ;;		_CreateAllSoftwareTimers
 35963 ;; This function uses a non-reentrant model
 35964 ;;
 35965                           
 35966                           	psect	text195
 35967  005624                     __ptext195:
 35968                           	opt stack 0
 35969  005624                     _SwTimerCreate:
 35970                           	opt stack 21
 35971                           
 35972                           ;sw_timer.c: 156: uint8_t retVal;
 35973                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 35974                           
 35975                           ; BSR set to: 2
 35976                           ;incstack = 0
 35977  005624  0E14               	movlw	20
 35978  005626  0101               	movlb	1	; () banked
 35979  005628  6173               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 35980  00562A  D01A               	goto	l143
 35981                           
 35982                           ; BSR set to: 1
 35983                           ;sw_timer.c: 158: {
 35984                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 35985  00562C  9EF2               	bcf	intcon,7,c	;volatile
 35986                           
 35987                           ;sw_timer.c: 160: retVal = allocatedTimers;
 35988  00562E  C173  F064         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 35989                           
 35990                           ; BSR set to: 1
 35991                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 35992  005632  0100               	movlb	0	; () banked
 35993  005634  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 35994  005636  EC84  F023         	call	PL36	;call to abstracted procedure
 35995  00563A  6ADF               	clrf	indf2,c
 35996                           
 35997                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 35998  00563C  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 35999  00563E  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36000  005642  ECCF  F01D         	call	PL184	;call to abstracted procedure
 36001                           
 36002                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 36003  005646  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36004  005648  ECFB  F02D         	call	PL158	;call to abstracted procedure
 36005  00564C  6ADF               	clrf	indf2,c
 36006                           
 36007                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 36008  00564E  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36009  005650  EC8C  F023         	call	PL94	;call to abstracted procedure
 36010  005654  6ADE               	clrf	postinc2,c
 36011  005656  6ADD               	clrf	postdec2,c
 36012                           
 36013                           ; BSR set to: 0
 36014                           ;sw_timer.c: 165: allocatedTimers++;
 36015  005658  0101               	movlb	1	; () banked
 36016  00565A  2B73               	incf	_allocatedTimers& (0+255),f,b	;volatile
 36017                           
 36018                           ; BSR set to: 1
 36019                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 36020  00565C  8EF2               	bsf	intcon,7,c	;volatile
 36021                           
 36022                           ;sw_timer.c: 167: }
 36023  00565E  D001               	goto	l14120
 36024  005660                     l143:
 36025  005660  D7FF               	goto	l143
 36026  005662                     l14120:
 36027                           
 36028                           ; BSR set to: 1
 36029                           ;sw_timer.c: 175: }
 36030                           ;sw_timer.c: 176: }
 36031                           ;sw_timer.c: 177: return retVal;
 36032  005662  0100               	movlb	0	; () banked
 36033  005664  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36034                           
 36035                           ; BSR set to: 0
 36036  005666  0012               	return		;funcret
 36037  005668                     __end_of_SwTimerCreate:
 36038                           	opt stack 0
 36039                           tosu	equ	0xFFF
 36040                           tosh	equ	0xFFE
 36041                           tosl	equ	0xFFD
 36042                           pclath	equ	0xFFA
 36043                           tblptru	equ	0xFF8
 36044                           tblptrh	equ	0xFF7
 36045                           tblptrl	equ	0xFF6
 36046                           tablat	equ	0xFF5
 36047                           prodh	equ	0xFF4
 36048                           prodl	equ	0xFF3
 36049                           intcon	equ	0xFF2
 36050                           indf0	equ	0xFEF
 36051                           postinc0	equ	0xFEE
 36052                           plusw0	equ	0xFEB
 36053                           fsr0h	equ	0xFEA
 36054                           fsr0l	equ	0xFE9
 36055                           wreg	equ	0xFE8
 36056                           postinc1	equ	0xFE6
 36057                           postdec1	equ	0xFE5
 36058                           plusw1	equ	0xFE3
 36059                           fsr1h	equ	0xFE2
 36060                           fsr1l	equ	0xFE1
 36061                           indf2	equ	0xFDF
 36062                           postinc2	equ	0xFDE
 36063                           postdec2	equ	0xFDD
 36064                           plusw2	equ	0xFDB
 36065                           fsr2h	equ	0xFDA
 36066                           fsr2l	equ	0xFD9
 36067                           status	equ	0xFD8
 36068                           
 36069 ;; *************** function _INTERRUPT_InterruptManager *****************
 36070 ;; Defined at:
 36071 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 36072 ;; Parameters:    Size  Location     Type
 36073 ;;		None
 36074 ;; Auto vars:     Size  Location     Type
 36075 ;;		None
 36076 ;; Return value:  Size  Location     Type
 36077 ;;                  1    wreg      void 
 36078 ;; Registers used:
 36079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36080 ;; Tracked objects:
 36081 ;;		On entry : 0/0
 36082 ;;		On exit  : 0/0
 36083 ;;		Unchanged: 0/0
 36084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36087 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36088 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36089 ;;Total ram usage:        8 bytes
 36090 ;; Hardware stack levels used:    1
 36091 ;; Hardware stack levels required when called:    6
 36092 ;; This function calls:
 36093 ;;		_INT1_ISR
 36094 ;;		_INT2_ISR
 36095 ;;		_PIN_MANAGER_IOC
 36096 ;;		_TMR1_ISR
 36097 ;; This function is called by:
 36098 ;;		Interrupt level 2
 36099 ;; This function uses a non-reentrant model
 36100 ;;
 36101                           
 36102                           	psect	intcode
 36103  000008                     __pintcode:
 36104                           	opt stack 0
 36105  000008                     _INTERRUPT_InterruptManager:
 36106                           	opt stack 12
 36107                           
 36108                           ; BSR set to: 0
 36109                           ;incstack = 0
 36110  000008  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
 36111  00000C  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 36112  000010  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 36113  000014  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 36114  000018  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 36115  00001C  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 36116  000020  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+6
 36117  000024  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+7
 36118  000028  EE19  F04A         	lfsr	1,___inthi_sp
 36119                           
 36120                           ;interrupt_manager.c: 60: if(PIE0bits.INT1IE == 1 && PIR0bits.INT1IF == 1)
 36121  00002C  010E               	movlb	14	; () banked
 36122  00002E  B329               	btfsc	41,1,b	;volatile
 36123                           
 36124                           ; BSR set to: 14
 36125  000030  A333               	btfss	51,1,b	;volatile
 36126  000032  D003               	goto	i2l2510
 36127                           
 36128                           ; BSR set to: 14
 36129                           ;interrupt_manager.c: 61: {
 36130                           ;interrupt_manager.c: 62: INT1_ISR();
 36131  000034  EC39  F031         	call	_INT1_ISR	;wreg free
 36132                           
 36133                           ;interrupt_manager.c: 63: }
 36134  000038  D013               	goto	i2l2518
 36135  00003A                     i2l2510:
 36136                           
 36137                           ; BSR set to: 14
 36138                           ;interrupt_manager.c: 64: else if(PIE0bits.INT2IE == 1 && PIR0bits.INT2IF == 1)
 36139  00003A  B529               	btfsc	41,2,b	;volatile
 36140                           
 36141                           ; BSR set to: 14
 36142  00003C  A533               	btfss	51,2,b	;volatile
 36143  00003E  D003               	goto	i2l2512
 36144                           
 36145                           ; BSR set to: 14
 36146                           ;interrupt_manager.c: 65: {
 36147                           ;interrupt_manager.c: 66: INT2_ISR();
 36148  000040  EC36  F031         	call	_INT2_ISR	;wreg free
 36149                           
 36150                           ;interrupt_manager.c: 67: }
 36151  000044  D00D               	goto	i2l2518
 36152  000046                     i2l2512:
 36153                           
 36154                           ; BSR set to: 14
 36155                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE5bits.TMR1IE == 1 && PIR5bi
      +                          ts.TMR1IF == 1)
 36156  000046  BCF2               	btfsc	intcon,6,c	;volatile
 36157                           
 36158                           ; BSR set to: 14
 36159  000048  A12E               	btfss	46,0,b	;volatile
 36160  00004A  D005               	goto	i2l2514
 36161                           
 36162                           ; BSR set to: 14
 36163  00004C  A138               	btfss	56,0,b	;volatile
 36164  00004E  D003               	goto	i2l2514
 36165                           
 36166                           ; BSR set to: 14
 36167                           ;interrupt_manager.c: 69: {
 36168                           ;interrupt_manager.c: 70: TMR1_ISR();
 36169  000050  ECC4  F02E         	call	_TMR1_ISR	;wreg free
 36170                           
 36171                           ;interrupt_manager.c: 71: }
 36172  000054  D005               	goto	i2l2518
 36173  000056                     i2l2514:
 36174                           
 36175                           ; BSR set to: 14
 36176                           ;interrupt_manager.c: 72: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 36177  000056  B929               	btfsc	41,4,b	;volatile
 36178                           
 36179                           ; BSR set to: 14
 36180  000058  A933               	btfss	51,4,b	;volatile
 36181  00005A  D002               	goto	i2l2518
 36182                           
 36183                           ; BSR set to: 14
 36184                           ;interrupt_manager.c: 73: {
 36185                           ;interrupt_manager.c: 74: PIN_MANAGER_IOC();
 36186  00005C  EC20  F031         	call	_PIN_MANAGER_IOC	;wreg free
 36187  000060                     i2l2518:
 36188  000060  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 36189  000064  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 36190  000068  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 36191  00006C  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 36192  000070  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 36193  000074  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 36194  000078  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 36195  00007C  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 36196  000080  0011               	retfie		f
 36197  000082                     __end_of_INTERRUPT_InterruptManager:
 36198                           	opt stack 0
 36199                           tosu	equ	0xFFF
 36200                           tosh	equ	0xFFE
 36201                           tosl	equ	0xFFD
 36202                           pclatu	equ	0xFFB
 36203                           pclath	equ	0xFFA
 36204                           tblptru	equ	0xFF8
 36205                           tblptrh	equ	0xFF7
 36206                           tblptrl	equ	0xFF6
 36207                           tablat	equ	0xFF5
 36208                           prodh	equ	0xFF4
 36209                           prodl	equ	0xFF3
 36210                           intcon	equ	0xFF2
 36211                           indf0	equ	0xFEF
 36212                           postinc0	equ	0xFEE
 36213                           plusw0	equ	0xFEB
 36214                           fsr0h	equ	0xFEA
 36215                           fsr0l	equ	0xFE9
 36216                           wreg	equ	0xFE8
 36217                           postinc1	equ	0xFE6
 36218                           postdec1	equ	0xFE5
 36219                           plusw1	equ	0xFE3
 36220                           fsr1h	equ	0xFE2
 36221                           fsr1l	equ	0xFE1
 36222                           indf2	equ	0xFDF
 36223                           postinc2	equ	0xFDE
 36224                           postdec2	equ	0xFDD
 36225                           plusw2	equ	0xFDB
 36226                           fsr2h	equ	0xFDA
 36227                           fsr2l	equ	0xFD9
 36228                           status	equ	0xFD8
 36229                           
 36230 ;; *************** function _TMR1_ISR *****************
 36231 ;; Defined at:
 36232 ;;		line 161 in file "mcc_generated_files/tmr1.c"
 36233 ;; Parameters:    Size  Location     Type
 36234 ;;		None
 36235 ;; Auto vars:     Size  Location     Type
 36236 ;;		None
 36237 ;; Return value:  Size  Location     Type
 36238 ;;                  1    wreg      void 
 36239 ;; Registers used:
 36240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36241 ;; Tracked objects:
 36242 ;;		On entry : F/E
 36243 ;;		On exit  : 0/0
 36244 ;;		Unchanged: 0/0
 36245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36250 ;;Total ram usage:        0 bytes
 36251 ;; Hardware stack levels used:    1
 36252 ;; Hardware stack levels required when called:    5
 36253 ;; This function calls:
 36254 ;;		_TMR1_CallBack
 36255 ;; This function is called by:
 36256 ;;		_INTERRUPT_InterruptManager
 36257 ;; This function uses a non-reentrant model
 36258 ;;
 36259                           
 36260                           	psect	text197
 36261  005D88                     __ptext197:
 36262                           	opt stack 0
 36263  005D88                     _TMR1_ISR:
 36264                           	opt stack 12
 36265                           
 36266                           ; BSR set to: 14
 36267                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
 36268                           ;tmr1.c: 166: PIR5bits.TMR1IF = 0;
 36269                           
 36270                           ;incstack = 0
 36271  005D88  9138               	bcf	56,0,b	;volatile
 36272                           
 36273                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
 36274  005D8A  C05F  FFCE         	movff	_timer1ReloadVal+1,4046	;volatile
 36275                           
 36276                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
 36277  005D8E  C05E  FFCD         	movff	_timer1ReloadVal,4045	;volatile
 36278                           
 36279                           ; BSR set to: 14
 36280                           ;tmr1.c: 172: if (++CountCallBack >= 16)
 36281  005D92  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 36282  005D94  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 36283  005D96  503D               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 36284  005D98  E104               	bnz	i2u1947_40
 36285  005D9A  0E10               	movlw	16
 36286  005D9C  5C3C               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 36287  005D9E  A0D8               	btfss	status,0,c
 36288  005DA0  0012               	return	
 36289  005DA2                     i2u1947_40:
 36290                           
 36291                           ; BSR set to: 14
 36292                           ;tmr1.c: 173: {
 36293                           ;tmr1.c: 175: TMR1_CallBack();
 36294  005DA2  EC88  F02F         	call	_TMR1_CallBack	;wreg free
 36295                           
 36296                           ;tmr1.c: 178: CountCallBack = 0;
 36297  005DA6  6A3C               	clrf	TMR1_ISR@CountCallBack,c	;volatile
 36298  005DA8  6A3D               	clrf	TMR1_ISR@CountCallBack+1,c	;volatile
 36299  005DAA  0012               	return		;funcret
 36300  005DAC                     __end_of_TMR1_ISR:
 36301                           	opt stack 0
 36302                           tosu	equ	0xFFF
 36303                           tosh	equ	0xFFE
 36304                           tosl	equ	0xFFD
 36305                           pclatu	equ	0xFFB
 36306                           pclath	equ	0xFFA
 36307                           tblptru	equ	0xFF8
 36308                           tblptrh	equ	0xFF7
 36309                           tblptrl	equ	0xFF6
 36310                           tablat	equ	0xFF5
 36311                           prodh	equ	0xFF4
 36312                           prodl	equ	0xFF3
 36313                           intcon	equ	0xFF2
 36314                           indf0	equ	0xFEF
 36315                           postinc0	equ	0xFEE
 36316                           plusw0	equ	0xFEB
 36317                           fsr0h	equ	0xFEA
 36318                           fsr0l	equ	0xFE9
 36319                           wreg	equ	0xFE8
 36320                           postinc1	equ	0xFE6
 36321                           postdec1	equ	0xFE5
 36322                           plusw1	equ	0xFE3
 36323                           fsr1h	equ	0xFE2
 36324                           fsr1l	equ	0xFE1
 36325                           indf2	equ	0xFDF
 36326                           postinc2	equ	0xFDE
 36327                           postdec2	equ	0xFDD
 36328                           plusw2	equ	0xFDB
 36329                           fsr2h	equ	0xFDA
 36330                           fsr2l	equ	0xFD9
 36331                           status	equ	0xFD8
 36332                           
 36333 ;; *************** function _TMR1_CallBack *****************
 36334 ;; Defined at:
 36335 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 36336 ;; Parameters:    Size  Location     Type
 36337 ;;		None
 36338 ;; Auto vars:     Size  Location     Type
 36339 ;;		None
 36340 ;; Return value:  Size  Location     Type
 36341 ;;                  1    wreg      void 
 36342 ;; Registers used:
 36343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36344 ;; Tracked objects:
 36345 ;;		On entry : F/E
 36346 ;;		On exit  : 0/0
 36347 ;;		Unchanged: 0/0
 36348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36353 ;;Total ram usage:        0 bytes
 36354 ;; Hardware stack levels used:    1
 36355 ;; Hardware stack levels required when called:    4
 36356 ;; This function calls:
 36357 ;;		Absolute function
 36358 ;;		_TMR1_DefaultInterruptHandler
 36359 ;;		_TMR_ISR_lora
 36360 ;; This function is called by:
 36361 ;;		_TMR1_ISR
 36362 ;; This function uses a non-reentrant model
 36363 ;;
 36364                           
 36365                           	psect	text198
 36366  005F10                     __ptext198:
 36367                           	opt stack 0
 36368  005F10                     _TMR1_CallBack:
 36369                           	opt stack 12
 36370                           
 36371                           ; BSR set to: 14
 36372                           ;tmr1.c: 185: if(TMR1_InterruptHandler)
 36373                           
 36374                           ;incstack = 0
 36375  005F10  0101               	movlb	1	; () banked
 36376  005F12  51F3               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36377  005F14  11F4               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36378  005F16  B4D8               	btfsc	status,2,c
 36379  005F18  0012               	return	
 36380                           
 36381                           ; BSR set to: 1
 36382                           ;tmr1.c: 186: {
 36383                           ;tmr1.c: 187: TMR1_InterruptHandler();
 36384  005F1A  0005               	push	
 36385  005F1C  6EFA               	movwf	pclath,c
 36386  005F1E  51F3               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36387  005F20  6EFD               	movwf	tosl,c
 36388  005F22  51F4               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36389  005F24  6EFE               	movwf	tosh,c
 36390  005F26  6AFF               	clrf	tosu,c
 36391  005F28  50FA               	movf	pclath,w,c
 36392  005F2A  0012               	return		;indir
 36393  005F2C                     __end_of_TMR1_CallBack:
 36394                           	opt stack 0
 36395                           tosu	equ	0xFFF
 36396                           tosh	equ	0xFFE
 36397                           tosl	equ	0xFFD
 36398                           pclatu	equ	0xFFB
 36399                           pclath	equ	0xFFA
 36400                           tblptru	equ	0xFF8
 36401                           tblptrh	equ	0xFF7
 36402                           tblptrl	equ	0xFF6
 36403                           tablat	equ	0xFF5
 36404                           prodh	equ	0xFF4
 36405                           prodl	equ	0xFF3
 36406                           intcon	equ	0xFF2
 36407                           indf0	equ	0xFEF
 36408                           postinc0	equ	0xFEE
 36409                           plusw0	equ	0xFEB
 36410                           fsr0h	equ	0xFEA
 36411                           fsr0l	equ	0xFE9
 36412                           wreg	equ	0xFE8
 36413                           postinc1	equ	0xFE6
 36414                           postdec1	equ	0xFE5
 36415                           plusw1	equ	0xFE3
 36416                           fsr1h	equ	0xFE2
 36417                           fsr1l	equ	0xFE1
 36418                           indf2	equ	0xFDF
 36419                           postinc2	equ	0xFDE
 36420                           postdec2	equ	0xFDD
 36421                           plusw2	equ	0xFDB
 36422                           fsr2h	equ	0xFDA
 36423                           fsr2l	equ	0xFD9
 36424                           status	equ	0xFD8
 36425                           
 36426 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 36427 ;; Defined at:
 36428 ;;		line 195 in file "mcc_generated_files/tmr1.c"
 36429 ;; Parameters:    Size  Location     Type
 36430 ;;		None
 36431 ;; Auto vars:     Size  Location     Type
 36432 ;;		None
 36433 ;; Return value:  Size  Location     Type
 36434 ;;                  1    wreg      void 
 36435 ;; Registers used:
 36436 ;;		None
 36437 ;; Tracked objects:
 36438 ;;		On entry : F/1
 36439 ;;		On exit  : F/1
 36440 ;;		Unchanged: F/0
 36441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36446 ;;Total ram usage:        0 bytes
 36447 ;; Hardware stack levels used:    1
 36448 ;; This function calls:
 36449 ;;		Nothing
 36450 ;; This function is called by:
 36451 ;;		_TMR1_Initialize
 36452 ;;		_TMR1_CallBack
 36453 ;; This function uses a non-reentrant model
 36454 ;;
 36455                           
 36456                           	psect	text199
 36457  0062A6                     __ptext199:
 36458                           	opt stack 0
 36459  0062A6                     _TMR1_DefaultInterruptHandler:
 36460                           	opt stack 15
 36461                           
 36462                           ; BSR set to: 1
 36463                           
 36464                           ;incstack = 0
 36465  0062A6  0012               	return		;funcret
 36466  0062A8                     __end_of_TMR1_DefaultInterruptHandler:
 36467                           	opt stack 0
 36468                           tosu	equ	0xFFF
 36469                           tosh	equ	0xFFE
 36470                           tosl	equ	0xFFD
 36471                           pclatu	equ	0xFFB
 36472                           pclath	equ	0xFFA
 36473                           tblptru	equ	0xFF8
 36474                           tblptrh	equ	0xFF7
 36475                           tblptrl	equ	0xFF6
 36476                           tablat	equ	0xFF5
 36477                           prodh	equ	0xFF4
 36478                           prodl	equ	0xFF3
 36479                           intcon	equ	0xFF2
 36480                           indf0	equ	0xFEF
 36481                           postinc0	equ	0xFEE
 36482                           plusw0	equ	0xFEB
 36483                           fsr0h	equ	0xFEA
 36484                           fsr0l	equ	0xFE9
 36485                           wreg	equ	0xFE8
 36486                           postinc1	equ	0xFE6
 36487                           postdec1	equ	0xFE5
 36488                           plusw1	equ	0xFE3
 36489                           fsr1h	equ	0xFE2
 36490                           fsr1l	equ	0xFE1
 36491                           indf2	equ	0xFDF
 36492                           postinc2	equ	0xFDE
 36493                           postdec2	equ	0xFDD
 36494                           plusw2	equ	0xFDB
 36495                           fsr2h	equ	0xFDA
 36496                           fsr2l	equ	0xFD9
 36497                           status	equ	0xFD8
 36498                           
 36499 ;; *************** function _TMR_ISR_lora *****************
 36500 ;; Defined at:
 36501 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 36502 ;; Parameters:    Size  Location     Type
 36503 ;;		None
 36504 ;; Auto vars:     Size  Location     Type
 36505 ;;		None
 36506 ;; Return value:  Size  Location     Type
 36507 ;;                  1    wreg      void 
 36508 ;; Registers used:
 36509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36510 ;; Tracked objects:
 36511 ;;		On entry : F/1
 36512 ;;		On exit  : 0/0
 36513 ;;		Unchanged: 0/0
 36514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36519 ;;Total ram usage:        0 bytes
 36520 ;; Hardware stack levels used:    1
 36521 ;; Hardware stack levels required when called:    3
 36522 ;; This function calls:
 36523 ;;		i2_SwTimersInterrupt
 36524 ;;		i2_TMR_SwapTimer
 36525 ;; This function is called by:
 36526 ;;		_TMR_ISR_Lora_Init
 36527 ;;		_TMR1_CallBack
 36528 ;; This function uses a non-reentrant model
 36529 ;;
 36530                           
 36531                           	psect	text200
 36532  0052E2                     __ptext200:
 36533                           	opt stack 0
 36534  0052E2                     _TMR_ISR_lora:
 36535                           	opt stack 12
 36536                           
 36537                           ; BSR set to: 1
 36538                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 36539                           
 36540                           ; BSR set to: 1
 36541                           ;incstack = 0
 36542  0052E2  0E01               	movlw	1
 36543  0052E4  6E49               	movwf	_timerOverflow,c	;volatile
 36544                           
 36545                           ; BSR set to: 1
 36546                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 36547  0052E6  EC6A  F020         	call	i2_SwTimersInterrupt	;wreg free
 36548  0052EA  C017  F05A         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 36549  0052EE  C018  F05B         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 36550  0052F2  C019  F05C         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 36551  0052F6  C01A  F05D         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 36552                           
 36553                           ; BSR set to: 1
 36554                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 36555  0052FA  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 36556  0052FC  E114               	bnz	i2l259
 36557  0052FE  045C               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 36558  005300  B0D8               	btfsc	status,0,c
 36559  005302  0012               	return	
 36560                           
 36561                           ; BSR set to: 1
 36562                           ;tmr_lora_addons.c: 66: {
 36563                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 36564  005304  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 36565  005306  0800               	sublw	0
 36566  005308  6E44               	movwf	_reloadVal,c	;volatile
 36567  00530A  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 36568  00530C  D80D               	call	PL428	;call to abstracted procedure
 36569                           
 36570                           ; BSR set to: 1
 36571                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 36572  00530E  C044  F007         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 36573  005312  C045  F008         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 36574  005316  EC97  F02B         	call	i2_TMR_SwapTimer	;wreg free
 36575  00531A  C007  F038         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 36576  00531E  C008  F039         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 36577  005322  6A3A               	clrf	_ticksAdded+2,c	;volatile
 36578  005324  6A3B               	clrf	_ticksAdded+3,c	;volatile
 36579  005326                     i2l259:
 36580  005326  0012               	return		;funcret
 36581  005328                     __end_of_TMR_ISR_lora:
 36582                           	opt stack 0
 36583  005328                     PL428:
 36584                           	opt stack 17
 36585  005328  A0D8               	btfss	status,0,c
 36586  00532A  2AE8               	incf	wreg,f,c
 36587  00532C  0800               	sublw	0
 36588  00532E  6E45               	movwf	_reloadVal+1,c	;volatile
 36589  005330  0012               	return	
 36590  005332                     __end_ofPL428:
 36591                           	opt stack 0
 36592                           tosu	equ	0xFFF
 36593                           tosh	equ	0xFFE
 36594                           tosl	equ	0xFFD
 36595                           pclatu	equ	0xFFB
 36596                           pclath	equ	0xFFA
 36597                           tblptru	equ	0xFF8
 36598                           tblptrh	equ	0xFF7
 36599                           tblptrl	equ	0xFF6
 36600                           tablat	equ	0xFF5
 36601                           prodh	equ	0xFF4
 36602                           prodl	equ	0xFF3
 36603                           intcon	equ	0xFF2
 36604                           indf0	equ	0xFEF
 36605                           postinc0	equ	0xFEE
 36606                           plusw0	equ	0xFEB
 36607                           fsr0h	equ	0xFEA
 36608                           fsr0l	equ	0xFE9
 36609                           wreg	equ	0xFE8
 36610                           postinc1	equ	0xFE6
 36611                           postdec1	equ	0xFE5
 36612                           plusw1	equ	0xFE3
 36613                           fsr1h	equ	0xFE2
 36614                           fsr1l	equ	0xFE1
 36615                           indf2	equ	0xFDF
 36616                           postinc2	equ	0xFDE
 36617                           postdec2	equ	0xFDD
 36618                           plusw2	equ	0xFDB
 36619                           fsr2h	equ	0xFDA
 36620                           fsr2l	equ	0xFD9
 36621                           status	equ	0xFD8
 36622                           
 36623 ;; *************** function i2_TMR_SwapTimer *****************
 36624 ;; Defined at:
 36625 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36626 ;; Parameters:    Size  Location     Type
 36627 ;;  timerVal        2    6[COMRAM] unsigned int 
 36628 ;; Auto vars:     Size  Location     Type
 36629 ;;		None
 36630 ;; Return value:  Size  Location     Type
 36631 ;;                  2    6[COMRAM] unsigned int 
 36632 ;; Registers used:
 36633 ;;		wreg, status,2, status,0, cstack
 36634 ;; Tracked objects:
 36635 ;;		On entry : F/1
 36636 ;;		On exit  : 0/0
 36637 ;;		Unchanged: 0/0
 36638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36643 ;;Total ram usage:        2 bytes
 36644 ;; Hardware stack levels used:    1
 36645 ;; Hardware stack levels required when called:    1
 36646 ;; This function calls:
 36647 ;;		i2_TMR1_ReadTimer
 36648 ;;		i2_TMR1_WriteTimer
 36649 ;; This function is called by:
 36650 ;;		_TMR_ISR_lora
 36651 ;; This function uses a non-reentrant model
 36652 ;;
 36653                           
 36654                           	psect	text201
 36655  00572E                     __ptext201:
 36656                           	opt stack 0
 36657  00572E                     i2_TMR_SwapTimer:
 36658                           	opt stack 13
 36659                           
 36660                           ; BSR set to: 1
 36661                           ;sw_timer.c: 114: static uint16_t oldVal;
 36662                           ;sw_timer.c: 115: static uint16_t retVal;
 36663                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 36664                           
 36665                           ;incstack = 0
 36666  00572E  EC5A  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36667  005732  C001  F040         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 36668  005736  C002  F041         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 36669  00573A                     i2l10550:
 36670  00573A  EC5A  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36671  00573E  5040               	movf	TMR_SwapTimer@oldVal,w,c
 36672  005740  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 36673  005742  E103               	bnz	i2u1097_40
 36674  005744  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 36675  005746  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 36676  005748  E0F8               	bz	i2l10550
 36677  00574A                     i2u1097_40:
 36678                           
 36679                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 36680  00574A  C007  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 36681  00574E  C008  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 36682  005752  EC2D  F030         	call	i2_TMR1_WriteTimer	;wreg free
 36683                           
 36684                           ;sw_timer.c: 128: oldVal++;
 36685                           
 36686                           ;sw_timer.c: 130: retVal = oldVal;
 36687  005756  D805               	call	PL292	;call to abstracted procedure
 36688                           
 36689                           ;sw_timer.c: 132: return retVal;
 36690  005758  C042  F007         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 36691  00575C  C043  F008         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 36692  005760  0012               	return		;funcret
 36693  005762                     __end_ofi2_TMR_SwapTimer:
 36694                           	opt stack 0
 36695  005762                     PL292:
 36696                           	opt stack 17
 36697  005762  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 36698  005764  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 36699  005766  C040  F042         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 36700  00576A  C041  F043         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 36701  00576E  0012               	return	
 36702  005770                     __end_ofPL292:
 36703                           	opt stack 0
 36704                           tosu	equ	0xFFF
 36705                           tosh	equ	0xFFE
 36706                           tosl	equ	0xFFD
 36707                           pclatu	equ	0xFFB
 36708                           pclath	equ	0xFFA
 36709                           tblptru	equ	0xFF8
 36710                           tblptrh	equ	0xFF7
 36711                           tblptrl	equ	0xFF6
 36712                           tablat	equ	0xFF5
 36713                           prodh	equ	0xFF4
 36714                           prodl	equ	0xFF3
 36715                           intcon	equ	0xFF2
 36716                           indf0	equ	0xFEF
 36717                           postinc0	equ	0xFEE
 36718                           plusw0	equ	0xFEB
 36719                           fsr0h	equ	0xFEA
 36720                           fsr0l	equ	0xFE9
 36721                           wreg	equ	0xFE8
 36722                           postinc1	equ	0xFE6
 36723                           postdec1	equ	0xFE5
 36724                           plusw1	equ	0xFE3
 36725                           fsr1h	equ	0xFE2
 36726                           fsr1l	equ	0xFE1
 36727                           indf2	equ	0xFDF
 36728                           postinc2	equ	0xFDE
 36729                           postdec2	equ	0xFDD
 36730                           plusw2	equ	0xFDB
 36731                           fsr2h	equ	0xFDA
 36732                           fsr2l	equ	0xFD9
 36733                           status	equ	0xFD8
 36734                           
 36735 ;; *************** function i2_TMR1_WriteTimer *****************
 36736 ;; Defined at:
 36737 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 36738 ;; Parameters:    Size  Location     Type
 36739 ;;  timerVal        2    0[COMRAM] unsigned int 
 36740 ;; Auto vars:     Size  Location     Type
 36741 ;;		None
 36742 ;; Return value:  Size  Location     Type
 36743 ;;                  1    wreg      void 
 36744 ;; Registers used:
 36745 ;;		None
 36746 ;; Tracked objects:
 36747 ;;		On entry : 0/1
 36748 ;;		On exit  : 0/0
 36749 ;;		Unchanged: 0/0
 36750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36751 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36755 ;;Total ram usage:        2 bytes
 36756 ;; Hardware stack levels used:    1
 36757 ;; This function calls:
 36758 ;;		Nothing
 36759 ;; This function is called by:
 36760 ;;		i2_TMR_SwapTimer
 36761 ;; This function uses a non-reentrant model
 36762 ;;
 36763                           
 36764                           	psect	text202
 36765  00605A                     __ptext202:
 36766                           	opt stack 0
 36767  00605A                     i2_TMR1_WriteTimer:
 36768                           	opt stack 13
 36769                           
 36770                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 36771                           
 36772                           ;incstack = 0
 36773  00605A  A4CF               	btfss	4047,2,c	;volatile
 36774  00605C  D005               	goto	PL434
 36775                           
 36776                           ;tmr1.c: 125: {
 36777                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 36778  00605E  90CF               	bcf	4047,0,c	;volatile
 36779                           
 36780                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 36781                           
 36782                           ;tmr1.c: 131: TMR1L = timerVal;
 36783  006060  D803               	call	PL434	;call to abstracted procedure
 36784                           
 36785                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 36786  006062  80CF               	bsf	4047,0,c	;volatile
 36787                           
 36788                           ;tmr1.c: 135: }
 36789  006064  0012               	return	
 36790  006066                     i2l1370:
 36791                           
 36792                           ;tmr1.c: 136: else
 36793                           ;tmr1.c: 137: {
 36794                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 36795                           
 36796                           ;tmr1.c: 140: TMR1L = timerVal;
 36797  006066  D000               	goto	PL434	;call to abstracted procedure
 36798  006068                     __end_ofi2_TMR1_WriteTimer:
 36799                           	opt stack 0
 36800  006068                     PL434:
 36801                           	opt stack 13
 36802  006068  C002  FFCE         	movff	i2TMR1_WriteTimer@timerVal+1,4046	;volatile
 36803  00606C  C001  FFCD         	movff	i2TMR1_WriteTimer@timerVal,4045	;volatile
 36804  006070  0012               	return	
 36805  006072                     __end_ofPL434:
 36806                           	opt stack 0
 36807                           tosu	equ	0xFFF
 36808                           tosh	equ	0xFFE
 36809                           tosl	equ	0xFFD
 36810                           pclatu	equ	0xFFB
 36811                           pclath	equ	0xFFA
 36812                           tblptru	equ	0xFF8
 36813                           tblptrh	equ	0xFF7
 36814                           tblptrl	equ	0xFF6
 36815                           tablat	equ	0xFF5
 36816                           prodh	equ	0xFF4
 36817                           prodl	equ	0xFF3
 36818                           intcon	equ	0xFF2
 36819                           indf0	equ	0xFEF
 36820                           postinc0	equ	0xFEE
 36821                           plusw0	equ	0xFEB
 36822                           fsr0h	equ	0xFEA
 36823                           fsr0l	equ	0xFE9
 36824                           wreg	equ	0xFE8
 36825                           postinc1	equ	0xFE6
 36826                           postdec1	equ	0xFE5
 36827                           plusw1	equ	0xFE3
 36828                           fsr1h	equ	0xFE2
 36829                           fsr1l	equ	0xFE1
 36830                           indf2	equ	0xFDF
 36831                           postinc2	equ	0xFDE
 36832                           postdec2	equ	0xFDD
 36833                           plusw2	equ	0xFDB
 36834                           fsr2h	equ	0xFDA
 36835                           fsr2l	equ	0xFD9
 36836                           status	equ	0xFD8
 36837                           
 36838 ;; *************** function i2_SwTimersInterrupt *****************
 36839 ;; Defined at:
 36840 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36841 ;; Parameters:    Size  Location     Type
 36842 ;;		None
 36843 ;; Auto vars:     Size  Location     Type
 36844 ;;  SwTimersInte    4   34[COMRAM] unsigned long 
 36845 ;;  SwTimersInte    4   30[COMRAM] unsigned long 
 36846 ;;  SwTimersInte    1   38[COMRAM] unsigned char 
 36847 ;; Return value:  Size  Location     Type
 36848 ;;                  4   22[COMRAM] unsigned long 
 36849 ;; Registers used:
 36850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36851 ;; Tracked objects:
 36852 ;;		On entry : F/1
 36853 ;;		On exit  : F/1
 36854 ;;		Unchanged: 0/0
 36855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 36856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36857 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36858 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36859 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36860 ;;Total ram usage:       17 bytes
 36861 ;; Hardware stack levels used:    1
 36862 ;; Hardware stack levels required when called:    2
 36863 ;; This function calls:
 36864 ;;		i2_TMR_GetDeltaTime
 36865 ;; This function is called by:
 36866 ;;		_TMR_ISR_lora
 36867 ;; This function uses a non-reentrant model
 36868 ;;
 36869                           
 36870                           	psect	text203
 36871  0040D4                     __ptext203:
 36872                           	opt stack 0
 36873  0040D4                     i2_SwTimersInterrupt:
 36874                           	opt stack 12
 36875                           
 36876                           ; BSR set to: 1
 36877                           ;sw_timer.c: 289: uint8_t i;
 36878                           ;sw_timer.c: 290: uint32_t timeElapsed;
 36879                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 36880                           
 36881                           ;incstack = 0
 36882  0040D4  6823               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 36883  0040D6  6824               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 36884  0040D8  6825               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 36885  0040DA  6826               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 36886                           
 36887                           ; BSR set to: 1
 36888                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 36889  0040DC  EC4E  F01C         	call	i2_TMR_GetDeltaTime	;wreg free
 36890  0040E0  C007  F01F         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 36891  0040E4  C008  F020         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 36892  0040E8  C009  F021         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 36893  0040EC  C00A  F022         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 36894                           
 36895                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 36896  0040F0  6A27               	clrf	i2SwTimersInterrupt@i,c
 36897  0040F2  D03A               	goto	i2l10580
 36898  0040F4                     i2l10568:
 36899                           
 36900                           ; BSR set to: 1
 36901                           ;sw_timer.c: 298: {
 36902                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 36903  0040F4  5027               	movf	i2SwTimersInterrupt@i,w,c
 36904  0040F6  EC84  F023         	call	PL36	;call to abstracted procedure
 36905  0040FA  04DE               	decf	postinc2,w,c
 36906  0040FC  E134               	bnz	i2l10578
 36907                           
 36908                           ; BSR set to: 1
 36909                           ;sw_timer.c: 302: {
 36910                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 36911  0040FE  5027               	movf	i2SwTimersInterrupt@i,w,c
 36912  004100  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36913  004104  50DE               	movf	postinc2,w,c
 36914  004106  5C1F               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 36915  004108  50DE               	movf	postinc2,w,c
 36916  00410A  5820               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 36917  00410C  50DE               	movf	postinc2,w,c
 36918  00410E  5821               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 36919  004110  50DE               	movf	postinc2,w,c
 36920  004112  5822               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 36921  004114  E306               	bnc	i2l10574
 36922                           
 36923                           ; BSR set to: 1
 36924                           ;sw_timer.c: 304: {
 36925                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 36926  004116  5027               	movf	i2SwTimersInterrupt@i,w,c
 36927  004118  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36928  00411C  ECCF  F01D         	call	PL184	;call to abstracted procedure
 36929                           
 36930                           ;sw_timer.c: 306: }
 36931  004120  D022               	goto	i2l10578
 36932  004122                     i2l10574:
 36933                           
 36934                           ; BSR set to: 1
 36935                           ;sw_timer.c: 307: else
 36936                           ;sw_timer.c: 308: {
 36937                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 36938  004122  5027               	movf	i2SwTimersInterrupt@i,w,c
 36939  004124  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36940  004128  501F               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 36941  00412A  5EDE               	subwf	postinc2,f,c
 36942  00412C  5020               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 36943  00412E  5ADE               	subwfb	postinc2,f,c
 36944  004130  5021               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 36945  004132  5ADE               	subwfb	postinc2,f,c
 36946  004134  5022               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 36947  004136  5ADE               	subwfb	postinc2,f,c
 36948                           
 36949                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 36950  004138  5027               	movf	i2SwTimersInterrupt@i,w,c
 36951  00413A  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36952  00413E  5023               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 36953  004140  5CDE               	subwf	postinc2,w,c
 36954  004142  5024               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 36955  004144  58DE               	subwfb	postinc2,w,c
 36956  004146  5025               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 36957  004148  58DE               	subwfb	postinc2,w,c
 36958  00414A  5026               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 36959  00414C  58DE               	subwfb	postinc2,w,c
 36960  00414E  E20B               	bc	i2l10578
 36961                           
 36962                           ; BSR set to: 1
 36963                           ;sw_timer.c: 313: {
 36964                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 36965  004150  5027               	movf	i2SwTimersInterrupt@i,w,c
 36966  004152  ECFA  F01E         	call	PL10	;call to abstracted procedure
 36967  004156  CFDE F023          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 36968  00415A  CFDE F024          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 36969  00415E  CFDE F025          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 36970  004162  CFDE F026          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 36971  004166                     i2l10578:
 36972                           
 36973                           ; BSR set to: 1
 36974  004166  2A27               	incf	i2SwTimersInterrupt@i,f,c
 36975  004168                     i2l10580:
 36976  004168  0101               	movlb	1	; () banked
 36977  00416A  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 36978  00416C  5C27               	subwf	i2SwTimersInterrupt@i,w,c
 36979  00416E  E3C2               	bnc	i2l10568
 36980                           
 36981                           ; BSR set to: 1
 36982                           ;sw_timer.c: 315: }
 36983                           ;sw_timer.c: 316: }
 36984                           ;sw_timer.c: 317: }
 36985                           ;sw_timer.c: 318: }
 36986                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 36987  004170  C023  F017         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 36988  004174  C024  F018         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 36989  004178  C025  F019         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 36990  00417C  C026  F01A         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 36991                           
 36992                           ; BSR set to: 1
 36993  004180  0012               	return		;funcret
 36994  004182                     __end_ofi2_SwTimersInterrupt:
 36995                           	opt stack 0
 36996                           tosu	equ	0xFFF
 36997                           tosh	equ	0xFFE
 36998                           tosl	equ	0xFFD
 36999                           pclatu	equ	0xFFB
 37000                           pclath	equ	0xFFA
 37001                           tblptru	equ	0xFF8
 37002                           tblptrh	equ	0xFF7
 37003                           tblptrl	equ	0xFF6
 37004                           tablat	equ	0xFF5
 37005                           prodh	equ	0xFF4
 37006                           prodl	equ	0xFF3
 37007                           intcon	equ	0xFF2
 37008                           indf0	equ	0xFEF
 37009                           postinc0	equ	0xFEE
 37010                           plusw0	equ	0xFEB
 37011                           fsr0h	equ	0xFEA
 37012                           fsr0l	equ	0xFE9
 37013                           wreg	equ	0xFE8
 37014                           postinc1	equ	0xFE6
 37015                           postdec1	equ	0xFE5
 37016                           plusw1	equ	0xFE3
 37017                           fsr1h	equ	0xFE2
 37018                           fsr1l	equ	0xFE1
 37019                           indf2	equ	0xFDF
 37020                           postinc2	equ	0xFDE
 37021                           postdec2	equ	0xFDD
 37022                           plusw2	equ	0xFDB
 37023                           fsr2h	equ	0xFDA
 37024                           fsr2l	equ	0xFD9
 37025                           status	equ	0xFD8
 37026                           
 37027 ;; *************** function i2_TMR_GetDeltaTime *****************
 37028 ;; Defined at:
 37029 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37030 ;; Parameters:    Size  Location     Type
 37031 ;;		None
 37032 ;; Auto vars:     Size  Location     Type
 37033 ;;		None
 37034 ;; Return value:  Size  Location     Type
 37035 ;;                  4    6[COMRAM] unsigned long 
 37036 ;; Registers used:
 37037 ;;		wreg, status,2, status,0, cstack
 37038 ;; Tracked objects:
 37039 ;;		On entry : F/1
 37040 ;;		On exit  : 0/0
 37041 ;;		Unchanged: 0/0
 37042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37045 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37046 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37047 ;;Total ram usage:       16 bytes
 37048 ;; Hardware stack levels used:    1
 37049 ;; Hardware stack levels required when called:    1
 37050 ;; This function calls:
 37051 ;;		i2_TMR1_ReadTimer
 37052 ;; This function is called by:
 37053 ;;		i2_SwTimersInterrupt
 37054 ;; This function uses a non-reentrant model
 37055 ;;
 37056                           
 37057                           	psect	text204
 37058  00389C                     __ptext204:
 37059                           	opt stack 0
 37060  00389C                     i2_TMR_GetDeltaTime:
 37061                           	opt stack 12
 37062                           
 37063                           ; BSR set to: 1
 37064                           ;sw_timer.c: 90: static uint32_t retVal;
 37065                           ;sw_timer.c: 91: static uint16_t tmrVal;
 37066                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 37067                           
 37068                           ; BSR set to: 1
 37069                           ;incstack = 0
 37070  00389C  EC5A  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 37071  0038A0  C001  F03E         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 37072  0038A4  C002  F03F         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 37073                           
 37074                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37075  0038A8  0449               	decf	_timerOverflow,w,c	;volatile
 37076  0038AA  E11E               	bnz	i2l9894
 37077                           
 37078                           ;sw_timer.c: 96: {
 37079                           ;sw_timer.c: 97: timerOverflow = 0;
 37080  0038AC  6A49               	clrf	_timerOverflow,c	;volatile
 37081                           
 37082                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37083  0038AE  D859               	call	PL284	;call to abstracted procedure
 37084  0038B0  A0D8               	btfss	status,0,c
 37085  0038B2  060D               	decf	(??i2_TMR_GetDeltaTime+2)& (0+255),f,c
 37086  0038B4  500D               	movf	(??i2_TMR_GetDeltaTime+2)& (0+255),w,c
 37087  0038B6  6E0E               	movwf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37088  0038B8  D82D               	call	PL126	;call to abstracted procedure
 37089  0038BA  6E13               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 37090  0038BC  5039               	movf	_ticksAdded+1,w,c	;volatile
 37091  0038BE  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37092  0038C0  6E14               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 37093  0038C2  503A               	movf	_ticksAdded+2,w,c	;volatile
 37094  0038C4  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37095  0038C6  6E15               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 37096  0038C8  503B               	movf	_ticksAdded+3,w,c	;volatile
 37097  0038CA  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37098  0038CC  6E16               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 37099  0038CE  0E00               	movlw	0
 37100  0038D0  2413               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 37101  0038D2  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37102  0038D4  0E00               	movlw	0
 37103  0038D6  2014               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 37104  0038D8  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37105  0038DA  0E01               	movlw	1
 37106  0038DC  2015               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 37107  0038DE  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37108  0038E0  0E00               	movlw	0
 37109  0038E2  2016               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 37110                           
 37111                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37112                           
 37113                           ;sw_timer.c: 100: ticksAdded = 0;
 37114                           
 37115                           ;sw_timer.c: 101: reloadVal = 0;
 37116  0038E4  D826               	call	PL136	;call to abstracted procedure
 37117                           
 37118                           ;sw_timer.c: 102: }
 37119  0038E6  D00D               	goto	i2l9896
 37120  0038E8                     i2l9894:
 37121                           
 37122                           ;sw_timer.c: 103: else
 37123                           ;sw_timer.c: 104: {
 37124                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37125  0038E8  D83C               	call	PL284	;call to abstracted procedure
 37126  0038EA  6A0E               	clrf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37127  0038EC  D813               	call	PL126	;call to abstracted procedure
 37128  0038EE  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37129  0038F0  5039               	movf	_ticksAdded+1,w,c	;volatile
 37130  0038F2  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37131  0038F4  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37132  0038F6  503A               	movf	_ticksAdded+2,w,c	;volatile
 37133  0038F8  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37134  0038FA  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37135  0038FC  503B               	movf	_ticksAdded+3,w,c	;volatile
 37136  0038FE  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37137                           
 37138                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37139  003900  D826               	call	PL208	;call to abstracted procedure
 37140  003902                     i2l9896:
 37141                           
 37142                           ;sw_timer.c: 107: }
 37143                           ;sw_timer.c: 109: return retVal;
 37144  003902  C030  F007         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 37145  003906  C031  F008         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 37146  00390A  C032  F009         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 37147  00390E  C033  F00A         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 37148  003912  0012               	return		;funcret
 37149  003914                     __end_ofi2_TMR_GetDeltaTime:
 37150                           	opt stack 0
 37151  003914                     PL126:
 37152                           	opt stack 12
 37153  003914  5034               	movf	_ticksAccounted,w,c	;volatile
 37154  003916  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37155  003918  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37156  00391A  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37157  00391C  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37158  00391E  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37159  003920  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37160  003922  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37161  003924  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37162  003926  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37163  003928  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37164  00392A  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37165  00392C  5038               	movf	_ticksAdded,w,c	;volatile
 37166  00392E  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37167  003930  0012               	return	
 37168  003932                     __end_ofPL126:
 37169                           	opt stack 0
 37170  003932                     PL136:
 37171                           	opt stack 17
 37172  003932  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37173  003934  C03E  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37174  003938  C03F  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37175  00393C  6A36               	clrf	_ticksAccounted+2,c	;volatile
 37176  00393E  6A37               	clrf	_ticksAccounted+3,c	;volatile
 37177  003940  6A38               	clrf	_ticksAdded,c	;volatile
 37178  003942  6A39               	clrf	_ticksAdded+1,c	;volatile
 37179  003944  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37180  003946  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37181  003948  6A44               	clrf	_reloadVal,c	;volatile
 37182  00394A  6A45               	clrf	_reloadVal+1,c	;volatile
 37183  00394C  0012               	return	
 37184  00394E                     __end_ofPL136:
 37185                           	opt stack 0
 37186  00394E                     PL208:
 37187                           	opt stack 17
 37188  00394E  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37189  003950  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 37190  003952  2634               	addwf	_ticksAccounted,f,c	;volatile
 37191  003954  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 37192  003956  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 37193  003958  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 37194  00395A  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 37195  00395C  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 37196  00395E  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 37197  003960  0012               	return	
 37198  003962                     __end_ofPL208:
 37199                           	opt stack 0
 37200  003962                     PL284:
 37201                           	opt stack 12
 37202  003962  5044               	movf	_reloadVal,w,c	;volatile
 37203  003964  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37204  003966  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37205  003968  5045               	movf	_reloadVal+1,w,c	;volatile
 37206  00396A  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37207  00396C  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37208  00396E  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37209  003970  0012               	return	
 37210  003972                     __end_ofPL284:
 37211                           	opt stack 0
 37212                           tosu	equ	0xFFF
 37213                           tosh	equ	0xFFE
 37214                           tosl	equ	0xFFD
 37215                           pclatu	equ	0xFFB
 37216                           pclath	equ	0xFFA
 37217                           tblptru	equ	0xFF8
 37218                           tblptrh	equ	0xFF7
 37219                           tblptrl	equ	0xFF6
 37220                           tablat	equ	0xFF5
 37221                           prodh	equ	0xFF4
 37222                           prodl	equ	0xFF3
 37223                           intcon	equ	0xFF2
 37224                           indf0	equ	0xFEF
 37225                           postinc0	equ	0xFEE
 37226                           plusw0	equ	0xFEB
 37227                           fsr0h	equ	0xFEA
 37228                           fsr0l	equ	0xFE9
 37229                           wreg	equ	0xFE8
 37230                           postinc1	equ	0xFE6
 37231                           postdec1	equ	0xFE5
 37232                           plusw1	equ	0xFE3
 37233                           fsr1h	equ	0xFE2
 37234                           fsr1l	equ	0xFE1
 37235                           indf2	equ	0xFDF
 37236                           postinc2	equ	0xFDE
 37237                           postdec2	equ	0xFDD
 37238                           plusw2	equ	0xFDB
 37239                           fsr2h	equ	0xFDA
 37240                           fsr2l	equ	0xFD9
 37241                           status	equ	0xFD8
 37242                           
 37243 ;; *************** function i2_TMR1_ReadTimer *****************
 37244 ;; Defined at:
 37245 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 37246 ;; Parameters:    Size  Location     Type
 37247 ;;		None
 37248 ;; Auto vars:     Size  Location     Type
 37249 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 37250 ;; Return value:  Size  Location     Type
 37251 ;;                  2    0[COMRAM] unsigned int 
 37252 ;; Registers used:
 37253 ;;		wreg, status,2, status,0
 37254 ;; Tracked objects:
 37255 ;;		On entry : 0/1
 37256 ;;		On exit  : 0/0
 37257 ;;		Unchanged: 0/0
 37258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37262 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37263 ;;Total ram usage:        6 bytes
 37264 ;; Hardware stack levels used:    1
 37265 ;; This function calls:
 37266 ;;		Nothing
 37267 ;; This function is called by:
 37268 ;;		i2_TMR_GetDeltaTime
 37269 ;;		i2_TMR_SwapTimer
 37270 ;; This function uses a non-reentrant model
 37271 ;;
 37272                           
 37273                           	psect	text205
 37274  005EB4                     __ptext205:
 37275                           	opt stack 0
 37276  005EB4                     i2_TMR1_ReadTimer:
 37277                           	opt stack 13
 37278                           
 37279                           ;tmr1.c: 115: uint16_t readVal;
 37280                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 37281                           
 37282                           ;incstack = 0
 37283  005EB4  50CD               	movf	4045,w,c	;volatile
 37284  005EB6  CFCE F003          	movff	4046,??i2_TMR1_ReadTimer	;volatile
 37285  005EBA  6A04               	clrf	(??i2_TMR1_ReadTimer+1)& (0+255),c
 37286  005EBC  C003  F004         	movff	??i2_TMR1_ReadTimer,??i2_TMR1_ReadTimer+1
 37287  005EC0  6A03               	clrf	??i2_TMR1_ReadTimer,c
 37288  005EC2  1003               	iorwf	??i2_TMR1_ReadTimer,w,c
 37289  005EC4  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 37290  005EC6  5004               	movf	??i2_TMR1_ReadTimer+1,w,c
 37291  005EC8  6E06               	movwf	i2TMR1_ReadTimer@readVal+1,c
 37292                           
 37293                           ;tmr1.c: 119: return readVal;
 37294  005ECA  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 37295  005ECE  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 37296  005ED2  0012               	return		;funcret
 37297  005ED4                     __end_ofi2_TMR1_ReadTimer:
 37298                           	opt stack 0
 37299                           tosu	equ	0xFFF
 37300                           tosh	equ	0xFFE
 37301                           tosl	equ	0xFFD
 37302                           pclatu	equ	0xFFB
 37303                           pclath	equ	0xFFA
 37304                           tblptru	equ	0xFF8
 37305                           tblptrh	equ	0xFF7
 37306                           tblptrl	equ	0xFF6
 37307                           tablat	equ	0xFF5
 37308                           prodh	equ	0xFF4
 37309                           prodl	equ	0xFF3
 37310                           intcon	equ	0xFF2
 37311                           indf0	equ	0xFEF
 37312                           postinc0	equ	0xFEE
 37313                           plusw0	equ	0xFEB
 37314                           fsr0h	equ	0xFEA
 37315                           fsr0l	equ	0xFE9
 37316                           wreg	equ	0xFE8
 37317                           postinc1	equ	0xFE6
 37318                           postdec1	equ	0xFE5
 37319                           plusw1	equ	0xFE3
 37320                           fsr1h	equ	0xFE2
 37321                           fsr1l	equ	0xFE1
 37322                           indf2	equ	0xFDF
 37323                           postinc2	equ	0xFDE
 37324                           postdec2	equ	0xFDD
 37325                           plusw2	equ	0xFDB
 37326                           fsr2h	equ	0xFDA
 37327                           fsr2l	equ	0xFD9
 37328                           status	equ	0xFD8
 37329                           
 37330 ;; *************** function _PIN_MANAGER_IOC *****************
 37331 ;; Defined at:
 37332 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 37333 ;; Parameters:    Size  Location     Type
 37334 ;;		None
 37335 ;; Auto vars:     Size  Location     Type
 37336 ;;		None
 37337 ;; Return value:  Size  Location     Type
 37338 ;;                  1    wreg      void 
 37339 ;; Registers used:
 37340 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37341 ;; Tracked objects:
 37342 ;;		On entry : F/E
 37343 ;;		On exit  : F/E
 37344 ;;		Unchanged: 0/0
 37345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37350 ;;Total ram usage:        0 bytes
 37351 ;; Hardware stack levels used:    1
 37352 ;; Hardware stack levels required when called:    2
 37353 ;; This function calls:
 37354 ;;		_IOCBF4_ISR
 37355 ;; This function is called by:
 37356 ;;		_INTERRUPT_InterruptManager
 37357 ;; This function uses a non-reentrant model
 37358 ;;
 37359                           
 37360                           	psect	text206
 37361  006240                     __ptext206:
 37362                           	opt stack 0
 37363  006240                     _PIN_MANAGER_IOC:
 37364                           	opt stack 15
 37365                           
 37366                           ; BSR set to: 14
 37367                           ;pin_manager.c: 155: if(IOCBFbits.IOCBF4 == 1)
 37368                           
 37369                           ;incstack = 0
 37370  006240  B993               	btfsc	147,4,b	;volatile
 37371                           
 37372                           ; BSR set to: 14
 37373                           ;pin_manager.c: 156: {
 37374                           ;pin_manager.c: 157: IOCBF4_ISR();
 37375  006242  ECD6  F02E         	call	_IOCBF4_ISR	;wreg free
 37376                           
 37377                           ; BSR set to: 14
 37378  006246  0012               	return		;funcret
 37379  006248                     __end_of_PIN_MANAGER_IOC:
 37380                           	opt stack 0
 37381                           tosu	equ	0xFFF
 37382                           tosh	equ	0xFFE
 37383                           tosl	equ	0xFFD
 37384                           pclatu	equ	0xFFB
 37385                           pclath	equ	0xFFA
 37386                           tblptru	equ	0xFF8
 37387                           tblptrh	equ	0xFF7
 37388                           tblptrl	equ	0xFF6
 37389                           tablat	equ	0xFF5
 37390                           prodh	equ	0xFF4
 37391                           prodl	equ	0xFF3
 37392                           intcon	equ	0xFF2
 37393                           indf0	equ	0xFEF
 37394                           postinc0	equ	0xFEE
 37395                           plusw0	equ	0xFEB
 37396                           fsr0h	equ	0xFEA
 37397                           fsr0l	equ	0xFE9
 37398                           wreg	equ	0xFE8
 37399                           postinc1	equ	0xFE6
 37400                           postdec1	equ	0xFE5
 37401                           plusw1	equ	0xFE3
 37402                           fsr1h	equ	0xFE2
 37403                           fsr1l	equ	0xFE1
 37404                           indf2	equ	0xFDF
 37405                           postinc2	equ	0xFDE
 37406                           postdec2	equ	0xFDD
 37407                           plusw2	equ	0xFDB
 37408                           fsr2h	equ	0xFDA
 37409                           fsr2l	equ	0xFD9
 37410                           status	equ	0xFD8
 37411                           
 37412 ;; *************** function _IOCBF4_ISR *****************
 37413 ;; Defined at:
 37414 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 37415 ;; Parameters:    Size  Location     Type
 37416 ;;		None
 37417 ;; Auto vars:     Size  Location     Type
 37418 ;;		None
 37419 ;; Return value:  Size  Location     Type
 37420 ;;                  1    wreg      void 
 37421 ;; Registers used:
 37422 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37423 ;; Tracked objects:
 37424 ;;		On entry : F/E
 37425 ;;		On exit  : F/E
 37426 ;;		Unchanged: 0/0
 37427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37432 ;;Total ram usage:        0 bytes
 37433 ;; Hardware stack levels used:    1
 37434 ;; Hardware stack levels required when called:    1
 37435 ;; This function calls:
 37436 ;;		Absolute function
 37437 ;;		_IOCBF4_DefaultInterruptHandler
 37438 ;; This function is called by:
 37439 ;;		_PIN_MANAGER_IOC
 37440 ;; This function uses a non-reentrant model
 37441 ;;
 37442                           
 37443                           	psect	text207
 37444  005DAC                     __ptext207:
 37445                           	opt stack 0
 37446  005DAC                     _IOCBF4_ISR:
 37447                           	opt stack 15
 37448                           
 37449                           ; BSR set to: 14
 37450                           ;pin_manager.c: 171: if(IOCBF4_InterruptHandler)
 37451                           
 37452                           ; BSR set to: 14
 37453                           ;incstack = 0
 37454  005DAC  0101               	movlb	1	; () banked
 37455  005DAE  51F1               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37456  005DB0  11F2               	iorwf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37457  005DB2  E00B               	bz	i2l16298
 37458                           
 37459                           ; BSR set to: 1
 37460                           ;pin_manager.c: 172: {
 37461                           ;pin_manager.c: 173: IOCBF4_InterruptHandler();
 37462  005DB4  D801               	call	i2u1946_48
 37463  005DB6  D009               	goto	i2l16298
 37464  005DB8                     i2u1946_48:
 37465  005DB8  0005               	push	
 37466  005DBA  6EFA               	movwf	pclath,c
 37467  005DBC  51F1               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37468  005DBE  6EFD               	movwf	tosl,c
 37469  005DC0  51F2               	movf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37470  005DC2  6EFE               	movwf	tosh,c
 37471  005DC4  6AFF               	clrf	tosu,c
 37472  005DC6  50FA               	movf	pclath,w,c
 37473  005DC8  0012               	return		;indir
 37474  005DCA                     i2l16298:
 37475                           
 37476                           ;pin_manager.c: 174: }
 37477                           ;pin_manager.c: 175: IOCBFbits.IOCBF4 = 0;
 37478  005DCA  010E               	movlb	14	; () banked
 37479  005DCC  9993               	bcf	147,4,b	;volatile
 37480                           
 37481                           ; BSR set to: 14
 37482  005DCE  0012               	return		;funcret
 37483  005DD0                     __end_of_IOCBF4_ISR:
 37484                           	opt stack 0
 37485                           tosu	equ	0xFFF
 37486                           tosh	equ	0xFFE
 37487                           tosl	equ	0xFFD
 37488                           pclatu	equ	0xFFB
 37489                           pclath	equ	0xFFA
 37490                           tblptru	equ	0xFF8
 37491                           tblptrh	equ	0xFF7
 37492                           tblptrl	equ	0xFF6
 37493                           tablat	equ	0xFF5
 37494                           prodh	equ	0xFF4
 37495                           prodl	equ	0xFF3
 37496                           intcon	equ	0xFF2
 37497                           indf0	equ	0xFEF
 37498                           postinc0	equ	0xFEE
 37499                           plusw0	equ	0xFEB
 37500                           fsr0h	equ	0xFEA
 37501                           fsr0l	equ	0xFE9
 37502                           wreg	equ	0xFE8
 37503                           postinc1	equ	0xFE6
 37504                           postdec1	equ	0xFE5
 37505                           plusw1	equ	0xFE3
 37506                           fsr1h	equ	0xFE2
 37507                           fsr1l	equ	0xFE1
 37508                           indf2	equ	0xFDF
 37509                           postinc2	equ	0xFDE
 37510                           postdec2	equ	0xFDD
 37511                           plusw2	equ	0xFDB
 37512                           fsr2h	equ	0xFDA
 37513                           fsr2l	equ	0xFD9
 37514                           status	equ	0xFD8
 37515                           
 37516 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 37517 ;; Defined at:
 37518 ;;		line 188 in file "mcc_generated_files/pin_manager.c"
 37519 ;; Parameters:    Size  Location     Type
 37520 ;;		None
 37521 ;; Auto vars:     Size  Location     Type
 37522 ;;		None
 37523 ;; Return value:  Size  Location     Type
 37524 ;;                  1    wreg      void 
 37525 ;; Registers used:
 37526 ;;		None
 37527 ;; Tracked objects:
 37528 ;;		On entry : F/1
 37529 ;;		On exit  : F/1
 37530 ;;		Unchanged: F/0
 37531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37536 ;;Total ram usage:        0 bytes
 37537 ;; Hardware stack levels used:    1
 37538 ;; This function calls:
 37539 ;;		Nothing
 37540 ;; This function is called by:
 37541 ;;		_PIN_MANAGER_Initialize
 37542 ;;		_IOCBF4_ISR
 37543 ;; This function uses a non-reentrant model
 37544 ;;
 37545                           
 37546                           	psect	text208
 37547  0062A8                     __ptext208:
 37548                           	opt stack 0
 37549  0062A8                     _IOCBF4_DefaultInterruptHandler:
 37550                           	opt stack 15
 37551                           
 37552                           ; BSR set to: 1
 37553                           
 37554                           ; BSR set to: 14
 37555                           ;incstack = 0
 37556  0062A8  0012               	return		;funcret
 37557  0062AA                     __end_of_IOCBF4_DefaultInterruptHandler:
 37558                           	opt stack 0
 37559                           tosu	equ	0xFFF
 37560                           tosh	equ	0xFFE
 37561                           tosl	equ	0xFFD
 37562                           pclatu	equ	0xFFB
 37563                           pclath	equ	0xFFA
 37564                           tblptru	equ	0xFF8
 37565                           tblptrh	equ	0xFF7
 37566                           tblptrl	equ	0xFF6
 37567                           tablat	equ	0xFF5
 37568                           prodh	equ	0xFF4
 37569                           prodl	equ	0xFF3
 37570                           intcon	equ	0xFF2
 37571                           indf0	equ	0xFEF
 37572                           postinc0	equ	0xFEE
 37573                           plusw0	equ	0xFEB
 37574                           fsr0h	equ	0xFEA
 37575                           fsr0l	equ	0xFE9
 37576                           wreg	equ	0xFE8
 37577                           postinc1	equ	0xFE6
 37578                           postdec1	equ	0xFE5
 37579                           plusw1	equ	0xFE3
 37580                           fsr1h	equ	0xFE2
 37581                           fsr1l	equ	0xFE1
 37582                           indf2	equ	0xFDF
 37583                           postinc2	equ	0xFDE
 37584                           postdec2	equ	0xFDD
 37585                           plusw2	equ	0xFDB
 37586                           fsr2h	equ	0xFDA
 37587                           fsr2l	equ	0xFD9
 37588                           status	equ	0xFD8
 37589                           
 37590 ;; *************** function _INT2_ISR *****************
 37591 ;; Defined at:
 37592 ;;		line 87 in file "mcc_generated_files/ext_int.c"
 37593 ;; Parameters:    Size  Location     Type
 37594 ;;		None
 37595 ;; Auto vars:     Size  Location     Type
 37596 ;;		None
 37597 ;; Return value:  Size  Location     Type
 37598 ;;                  1    wreg      void 
 37599 ;; Registers used:
 37600 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37601 ;; Tracked objects:
 37602 ;;		On entry : F/E
 37603 ;;		On exit  : 0/0
 37604 ;;		Unchanged: 0/0
 37605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37610 ;;Total ram usage:        0 bytes
 37611 ;; Hardware stack levels used:    1
 37612 ;; Hardware stack levels required when called:    2
 37613 ;; This function calls:
 37614 ;;		_INT2_CallBack
 37615 ;; This function is called by:
 37616 ;;		_INTERRUPT_InterruptManager
 37617 ;; This function uses a non-reentrant model
 37618 ;;
 37619                           
 37620                           	psect	text209
 37621  00626C                     __ptext209:
 37622                           	opt stack 0
 37623  00626C                     _INT2_ISR:
 37624                           	opt stack 15
 37625                           
 37626                           ; BSR set to: 14
 37627                           ;ext_int.c: 93: (PIR0bits.INT2IF = 0);
 37628                           
 37629                           ; BSR set to: 1
 37630                           ;incstack = 0
 37631  00626C  9533               	bcf	51,2,b	;volatile
 37632                           
 37633                           ; BSR set to: 14
 37634                           ;ext_int.c: 96: INT2_CallBack();
 37635  00626E  EF96  F02F         	goto	_INT2_CallBack	;wreg free
 37636  006272                     __end_of_INT2_ISR:
 37637                           	opt stack 0
 37638                           tosu	equ	0xFFF
 37639                           tosh	equ	0xFFE
 37640                           tosl	equ	0xFFD
 37641                           pclatu	equ	0xFFB
 37642                           pclath	equ	0xFFA
 37643                           tblptru	equ	0xFF8
 37644                           tblptrh	equ	0xFF7
 37645                           tblptrl	equ	0xFF6
 37646                           tablat	equ	0xFF5
 37647                           prodh	equ	0xFF4
 37648                           prodl	equ	0xFF3
 37649                           intcon	equ	0xFF2
 37650                           indf0	equ	0xFEF
 37651                           postinc0	equ	0xFEE
 37652                           plusw0	equ	0xFEB
 37653                           fsr0h	equ	0xFEA
 37654                           fsr0l	equ	0xFE9
 37655                           wreg	equ	0xFE8
 37656                           postinc1	equ	0xFE6
 37657                           postdec1	equ	0xFE5
 37658                           plusw1	equ	0xFE3
 37659                           fsr1h	equ	0xFE2
 37660                           fsr1l	equ	0xFE1
 37661                           indf2	equ	0xFDF
 37662                           postinc2	equ	0xFDE
 37663                           postdec2	equ	0xFDD
 37664                           plusw2	equ	0xFDB
 37665                           fsr2h	equ	0xFDA
 37666                           fsr2l	equ	0xFD9
 37667                           status	equ	0xFD8
 37668                           
 37669 ;; *************** function _INT2_CallBack *****************
 37670 ;; Defined at:
 37671 ;;		line 102 in file "mcc_generated_files/ext_int.c"
 37672 ;; Parameters:    Size  Location     Type
 37673 ;;		None
 37674 ;; Auto vars:     Size  Location     Type
 37675 ;;		None
 37676 ;; Return value:  Size  Location     Type
 37677 ;;                  1    wreg      void 
 37678 ;; Registers used:
 37679 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37680 ;; Tracked objects:
 37681 ;;		On entry : F/E
 37682 ;;		On exit  : 0/0
 37683 ;;		Unchanged: 0/0
 37684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37689 ;;Total ram usage:        0 bytes
 37690 ;; Hardware stack levels used:    1
 37691 ;; Hardware stack levels required when called:    1
 37692 ;; This function calls:
 37693 ;;		Absolute function
 37694 ;;		_INT2_DefaultInterruptHandler
 37695 ;; This function is called by:
 37696 ;;		_INT2_ISR
 37697 ;; This function uses a non-reentrant model
 37698 ;;
 37699                           
 37700                           	psect	text210
 37701  005F2C                     __ptext210:
 37702                           	opt stack 0
 37703  005F2C                     _INT2_CallBack:
 37704                           	opt stack 15
 37705                           
 37706                           ; BSR set to: 14
 37707                           ;ext_int.c: 105: if(INT2_InterruptHandler)
 37708                           
 37709                           ;incstack = 0
 37710  005F2C  0101               	movlb	1	; () banked
 37711  005F2E  51EF               	movf	_INT2_InterruptHandler& (0+255),w,b
 37712  005F30  11F0               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37713  005F32  B4D8               	btfsc	status,2,c
 37714  005F34  0012               	return	
 37715                           
 37716                           ; BSR set to: 1
 37717                           ;ext_int.c: 106: {
 37718                           ;ext_int.c: 107: INT2_InterruptHandler();
 37719  005F36  0005               	push	
 37720  005F38  6EFA               	movwf	pclath,c
 37721  005F3A  51EF               	movf	_INT2_InterruptHandler& (0+255),w,b
 37722  005F3C  6EFD               	movwf	tosl,c
 37723  005F3E  51F0               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37724  005F40  6EFE               	movwf	tosh,c
 37725  005F42  6AFF               	clrf	tosu,c
 37726  005F44  50FA               	movf	pclath,w,c
 37727  005F46  0012               	return		;indir
 37728  005F48                     __end_of_INT2_CallBack:
 37729                           	opt stack 0
 37730                           tosu	equ	0xFFF
 37731                           tosh	equ	0xFFE
 37732                           tosl	equ	0xFFD
 37733                           pclatu	equ	0xFFB
 37734                           pclath	equ	0xFFA
 37735                           tblptru	equ	0xFF8
 37736                           tblptrh	equ	0xFF7
 37737                           tblptrl	equ	0xFF6
 37738                           tablat	equ	0xFF5
 37739                           prodh	equ	0xFF4
 37740                           prodl	equ	0xFF3
 37741                           intcon	equ	0xFF2
 37742                           indf0	equ	0xFEF
 37743                           postinc0	equ	0xFEE
 37744                           plusw0	equ	0xFEB
 37745                           fsr0h	equ	0xFEA
 37746                           fsr0l	equ	0xFE9
 37747                           wreg	equ	0xFE8
 37748                           postinc1	equ	0xFE6
 37749                           postdec1	equ	0xFE5
 37750                           plusw1	equ	0xFE3
 37751                           fsr1h	equ	0xFE2
 37752                           fsr1l	equ	0xFE1
 37753                           indf2	equ	0xFDF
 37754                           postinc2	equ	0xFDE
 37755                           postdec2	equ	0xFDD
 37756                           plusw2	equ	0xFDB
 37757                           fsr2h	equ	0xFDA
 37758                           fsr2l	equ	0xFD9
 37759                           status	equ	0xFD8
 37760                           
 37761 ;; *************** function _INT2_DefaultInterruptHandler *****************
 37762 ;; Defined at:
 37763 ;;		line 121 in file "mcc_generated_files/ext_int.c"
 37764 ;; Parameters:    Size  Location     Type
 37765 ;;		None
 37766 ;; Auto vars:     Size  Location     Type
 37767 ;;		None
 37768 ;; Return value:  Size  Location     Type
 37769 ;;                  1    wreg      void 
 37770 ;; Registers used:
 37771 ;;		None
 37772 ;; Tracked objects:
 37773 ;;		On entry : F/1
 37774 ;;		On exit  : F/1
 37775 ;;		Unchanged: F/0
 37776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37781 ;;Total ram usage:        0 bytes
 37782 ;; Hardware stack levels used:    1
 37783 ;; This function calls:
 37784 ;;		Nothing
 37785 ;; This function is called by:
 37786 ;;		_EXT_INT_Initialize
 37787 ;;		_INT2_CallBack
 37788 ;; This function uses a non-reentrant model
 37789 ;;
 37790                           
 37791                           	psect	text211
 37792  0062AA                     __ptext211:
 37793                           	opt stack 0
 37794  0062AA                     _INT2_DefaultInterruptHandler:
 37795                           	opt stack 15
 37796                           
 37797                           ; BSR set to: 1
 37798                           
 37799                           ;incstack = 0
 37800  0062AA  0012               	return		;funcret
 37801  0062AC                     __end_of_INT2_DefaultInterruptHandler:
 37802                           	opt stack 0
 37803                           tosu	equ	0xFFF
 37804                           tosh	equ	0xFFE
 37805                           tosl	equ	0xFFD
 37806                           pclatu	equ	0xFFB
 37807                           pclath	equ	0xFFA
 37808                           tblptru	equ	0xFF8
 37809                           tblptrh	equ	0xFF7
 37810                           tblptrl	equ	0xFF6
 37811                           tablat	equ	0xFF5
 37812                           prodh	equ	0xFF4
 37813                           prodl	equ	0xFF3
 37814                           intcon	equ	0xFF2
 37815                           indf0	equ	0xFEF
 37816                           postinc0	equ	0xFEE
 37817                           plusw0	equ	0xFEB
 37818                           fsr0h	equ	0xFEA
 37819                           fsr0l	equ	0xFE9
 37820                           wreg	equ	0xFE8
 37821                           postinc1	equ	0xFE6
 37822                           postdec1	equ	0xFE5
 37823                           plusw1	equ	0xFE3
 37824                           fsr1h	equ	0xFE2
 37825                           fsr1l	equ	0xFE1
 37826                           indf2	equ	0xFDF
 37827                           postinc2	equ	0xFDE
 37828                           postdec2	equ	0xFDD
 37829                           plusw2	equ	0xFDB
 37830                           fsr2h	equ	0xFDA
 37831                           fsr2l	equ	0xFD9
 37832                           status	equ	0xFD8
 37833                           
 37834 ;; *************** function _INT1_ISR *****************
 37835 ;; Defined at:
 37836 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 37837 ;; Parameters:    Size  Location     Type
 37838 ;;		None
 37839 ;; Auto vars:     Size  Location     Type
 37840 ;;		None
 37841 ;; Return value:  Size  Location     Type
 37842 ;;                  1    wreg      void 
 37843 ;; Registers used:
 37844 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37845 ;; Tracked objects:
 37846 ;;		On entry : F/E
 37847 ;;		On exit  : 0/0
 37848 ;;		Unchanged: 0/0
 37849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37854 ;;Total ram usage:        0 bytes
 37855 ;; Hardware stack levels used:    1
 37856 ;; Hardware stack levels required when called:    2
 37857 ;; This function calls:
 37858 ;;		_INT1_CallBack
 37859 ;; This function is called by:
 37860 ;;		_INTERRUPT_InterruptManager
 37861 ;; This function uses a non-reentrant model
 37862 ;;
 37863                           
 37864                           	psect	text212
 37865  006272                     __ptext212:
 37866                           	opt stack 0
 37867  006272                     _INT1_ISR:
 37868                           	opt stack 15
 37869                           
 37870                           ; BSR set to: 14
 37871                           ;ext_int.c: 52: (PIR0bits.INT1IF = 0);
 37872                           
 37873                           ; BSR set to: 1
 37874                           ;incstack = 0
 37875  006272  9333               	bcf	51,1,b	;volatile
 37876                           
 37877                           ; BSR set to: 14
 37878                           ;ext_int.c: 55: INT1_CallBack();
 37879  006274  EFA4  F02F         	goto	_INT1_CallBack	;wreg free
 37880  006278                     __end_of_INT1_ISR:
 37881                           	opt stack 0
 37882                           tosu	equ	0xFFF
 37883                           tosh	equ	0xFFE
 37884                           tosl	equ	0xFFD
 37885                           pclatu	equ	0xFFB
 37886                           pclath	equ	0xFFA
 37887                           tblptru	equ	0xFF8
 37888                           tblptrh	equ	0xFF7
 37889                           tblptrl	equ	0xFF6
 37890                           tablat	equ	0xFF5
 37891                           prodh	equ	0xFF4
 37892                           prodl	equ	0xFF3
 37893                           intcon	equ	0xFF2
 37894                           indf0	equ	0xFEF
 37895                           postinc0	equ	0xFEE
 37896                           plusw0	equ	0xFEB
 37897                           fsr0h	equ	0xFEA
 37898                           fsr0l	equ	0xFE9
 37899                           wreg	equ	0xFE8
 37900                           postinc1	equ	0xFE6
 37901                           postdec1	equ	0xFE5
 37902                           plusw1	equ	0xFE3
 37903                           fsr1h	equ	0xFE2
 37904                           fsr1l	equ	0xFE1
 37905                           indf2	equ	0xFDF
 37906                           postinc2	equ	0xFDE
 37907                           postdec2	equ	0xFDD
 37908                           plusw2	equ	0xFDB
 37909                           fsr2h	equ	0xFDA
 37910                           fsr2l	equ	0xFD9
 37911                           status	equ	0xFD8
 37912                           
 37913 ;; *************** function _INT1_CallBack *****************
 37914 ;; Defined at:
 37915 ;;		line 61 in file "mcc_generated_files/ext_int.c"
 37916 ;; Parameters:    Size  Location     Type
 37917 ;;		None
 37918 ;; Auto vars:     Size  Location     Type
 37919 ;;		None
 37920 ;; Return value:  Size  Location     Type
 37921 ;;                  1    wreg      void 
 37922 ;; Registers used:
 37923 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37924 ;; Tracked objects:
 37925 ;;		On entry : F/E
 37926 ;;		On exit  : 0/0
 37927 ;;		Unchanged: 0/0
 37928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 37929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37933 ;;Total ram usage:        0 bytes
 37934 ;; Hardware stack levels used:    1
 37935 ;; Hardware stack levels required when called:    1
 37936 ;; This function calls:
 37937 ;;		Absolute function
 37938 ;;		_INT1_DefaultInterruptHandler
 37939 ;; This function is called by:
 37940 ;;		_INT1_ISR
 37941 ;; This function uses a non-reentrant model
 37942 ;;
 37943                           
 37944                           	psect	text213
 37945  005F48                     __ptext213:
 37946                           	opt stack 0
 37947  005F48                     _INT1_CallBack:
 37948                           	opt stack 15
 37949                           
 37950                           ; BSR set to: 14
 37951                           ;ext_int.c: 64: if(INT1_InterruptHandler)
 37952                           
 37953                           ;incstack = 0
 37954  005F48  0101               	movlb	1	; () banked
 37955  005F4A  51ED               	movf	_INT1_InterruptHandler& (0+255),w,b
 37956  005F4C  11EE               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 37957  005F4E  B4D8               	btfsc	status,2,c
 37958  005F50  0012               	return	
 37959                           
 37960                           ; BSR set to: 1
 37961                           ;ext_int.c: 65: {
 37962                           ;ext_int.c: 66: INT1_InterruptHandler();
 37963  005F52  0005               	push	
 37964  005F54  6EFA               	movwf	pclath,c
 37965  005F56  51ED               	movf	_INT1_InterruptHandler& (0+255),w,b
 37966  005F58  6EFD               	movwf	tosl,c
 37967  005F5A  51EE               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 37968  005F5C  6EFE               	movwf	tosh,c
 37969  005F5E  6AFF               	clrf	tosu,c
 37970  005F60  50FA               	movf	pclath,w,c
 37971  005F62  0012               	return		;indir
 37972  005F64                     __end_of_INT1_CallBack:
 37973                           	opt stack 0
 37974                           tosu	equ	0xFFF
 37975                           tosh	equ	0xFFE
 37976                           tosl	equ	0xFFD
 37977                           pclatu	equ	0xFFB
 37978                           pclath	equ	0xFFA
 37979                           tblptru	equ	0xFF8
 37980                           tblptrh	equ	0xFF7
 37981                           tblptrl	equ	0xFF6
 37982                           tablat	equ	0xFF5
 37983                           prodh	equ	0xFF4
 37984                           prodl	equ	0xFF3
 37985                           intcon	equ	0xFF2
 37986                           indf0	equ	0xFEF
 37987                           postinc0	equ	0xFEE
 37988                           plusw0	equ	0xFEB
 37989                           fsr0h	equ	0xFEA
 37990                           fsr0l	equ	0xFE9
 37991                           wreg	equ	0xFE8
 37992                           postinc1	equ	0xFE6
 37993                           postdec1	equ	0xFE5
 37994                           plusw1	equ	0xFE3
 37995                           fsr1h	equ	0xFE2
 37996                           fsr1l	equ	0xFE1
 37997                           indf2	equ	0xFDF
 37998                           postinc2	equ	0xFDE
 37999                           postdec2	equ	0xFDD
 38000                           plusw2	equ	0xFDB
 38001                           fsr2h	equ	0xFDA
 38002                           fsr2l	equ	0xFD9
 38003                           status	equ	0xFD8
 38004                           
 38005 ;; *************** function _INT1_DefaultInterruptHandler *****************
 38006 ;; Defined at:
 38007 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 38008 ;; Parameters:    Size  Location     Type
 38009 ;;		None
 38010 ;; Auto vars:     Size  Location     Type
 38011 ;;		None
 38012 ;; Return value:  Size  Location     Type
 38013 ;;                  1    wreg      void 
 38014 ;; Registers used:
 38015 ;;		None
 38016 ;; Tracked objects:
 38017 ;;		On entry : F/1
 38018 ;;		On exit  : F/1
 38019 ;;		Unchanged: F/0
 38020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 38021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38025 ;;Total ram usage:        0 bytes
 38026 ;; Hardware stack levels used:    1
 38027 ;; This function calls:
 38028 ;;		Nothing
 38029 ;; This function is called by:
 38030 ;;		_EXT_INT_Initialize
 38031 ;;		_INT1_CallBack
 38032 ;; This function uses a non-reentrant model
 38033 ;;
 38034                           
 38035                           	psect	text214
 38036  0062AC                     __ptext214:
 38037                           	opt stack 0
 38038  0062AC                     _INT1_DefaultInterruptHandler:
 38039                           	opt stack 15
 38040                           
 38041                           ; BSR set to: 1
 38042                           
 38043                           ;incstack = 0
 38044  0062AC  0012               	return		;funcret
 38045  0062AE                     __end_of_INT1_DefaultInterruptHandler:
 38046                           	opt stack 0
 38047                           tosu	equ	0xFFF
 38048                           tosh	equ	0xFFE
 38049                           tosl	equ	0xFFD
 38050                           pclatu	equ	0xFFB
 38051                           pclath	equ	0xFFA
 38052                           tblptru	equ	0xFF8
 38053                           tblptrh	equ	0xFF7
 38054                           tblptrl	equ	0xFF6
 38055                           tablat	equ	0xFF5
 38056                           prodh	equ	0xFF4
 38057                           prodl	equ	0xFF3
 38058                           intcon	equ	0xFF2
 38059                           indf0	equ	0xFEF
 38060                           postinc0	equ	0xFEE
 38061                           plusw0	equ	0xFEB
 38062                           fsr0h	equ	0xFEA
 38063                           fsr0l	equ	0xFE9
 38064                           wreg	equ	0xFE8
 38065                           postinc1	equ	0xFE6
 38066                           postdec1	equ	0xFE5
 38067                           plusw1	equ	0xFE3
 38068                           fsr1h	equ	0xFE2
 38069                           fsr1l	equ	0xFE1
 38070                           indf2	equ	0xFDF
 38071                           postinc2	equ	0xFDE
 38072                           postdec2	equ	0xFDD
 38073                           plusw2	equ	0xFDB
 38074                           fsr2h	equ	0xFDA
 38075                           fsr2l	equ	0xFD9
 38076                           status	equ	0xFD8
 38077                           tosu	equ	0xFFF
 38078                           tosh	equ	0xFFE
 38079                           tosl	equ	0xFFD
 38080                           pclatu	equ	0xFFB
 38081                           pclath	equ	0xFFA
 38082                           tblptru	equ	0xFF8
 38083                           tblptrh	equ	0xFF7
 38084                           tblptrl	equ	0xFF6
 38085                           tablat	equ	0xFF5
 38086                           prodh	equ	0xFF4
 38087                           prodl	equ	0xFF3
 38088                           intcon	equ	0xFF2
 38089                           indf0	equ	0xFEF
 38090                           postinc0	equ	0xFEE
 38091                           plusw0	equ	0xFEB
 38092                           fsr0h	equ	0xFEA
 38093                           fsr0l	equ	0xFE9
 38094                           wreg	equ	0xFE8
 38095                           postinc1	equ	0xFE6
 38096                           postdec1	equ	0xFE5
 38097                           plusw1	equ	0xFE3
 38098                           fsr1h	equ	0xFE2
 38099                           fsr1l	equ	0xFE1
 38100                           indf2	equ	0xFDF
 38101                           postinc2	equ	0xFDE
 38102                           postdec2	equ	0xFDD
 38103                           plusw2	equ	0xFDB
 38104                           fsr2h	equ	0xFDA
 38105                           fsr2l	equ	0xFD9
 38106                           status	equ	0xFD8
 38107                           
 38108                           	psect	text215
 38109  000000                     __ptext215:
 38110                           	opt stack 0
 38111                           tosu	equ	0xFFF
 38112                           tosh	equ	0xFFE
 38113                           tosl	equ	0xFFD
 38114                           pclatu	equ	0xFFB
 38115                           pclath	equ	0xFFA
 38116                           tblptru	equ	0xFF8
 38117                           tblptrh	equ	0xFF7
 38118                           tblptrl	equ	0xFF6
 38119                           tablat	equ	0xFF5
 38120                           prodh	equ	0xFF4
 38121                           prodl	equ	0xFF3
 38122                           intcon	equ	0xFF2
 38123                           indf0	equ	0xFEF
 38124                           postinc0	equ	0xFEE
 38125                           plusw0	equ	0xFEB
 38126                           fsr0h	equ	0xFEA
 38127                           fsr0l	equ	0xFE9
 38128                           wreg	equ	0xFE8
 38129                           postinc1	equ	0xFE6
 38130                           postdec1	equ	0xFE5
 38131                           plusw1	equ	0xFE3
 38132                           fsr1h	equ	0xFE2
 38133                           fsr1l	equ	0xFE1
 38134                           indf2	equ	0xFDF
 38135                           postinc2	equ	0xFDE
 38136                           postdec2	equ	0xFDD
 38137                           plusw2	equ	0xFDB
 38138                           fsr2h	equ	0xFDA
 38139                           fsr2l	equ	0xFD9
 38140                           status	equ	0xFD8
 38141                           
 38142                           	psect	rparam
 38143  0000                     tosu	equ	0xFFF
 38144                           tosh	equ	0xFFE
 38145                           tosl	equ	0xFFD
 38146                           pclatu	equ	0xFFB
 38147                           pclath	equ	0xFFA
 38148                           tblptru	equ	0xFF8
 38149                           tblptrh	equ	0xFF7
 38150                           tblptrl	equ	0xFF6
 38151                           tablat	equ	0xFF5
 38152                           prodh	equ	0xFF4
 38153                           prodl	equ	0xFF3
 38154                           intcon	equ	0xFF2
 38155                           indf0	equ	0xFEF
 38156                           postinc0	equ	0xFEE
 38157                           plusw0	equ	0xFEB
 38158                           fsr0h	equ	0xFEA
 38159                           fsr0l	equ	0xFE9
 38160                           wreg	equ	0xFE8
 38161                           postinc1	equ	0xFE6
 38162                           postdec1	equ	0xFE5
 38163                           plusw1	equ	0xFE3
 38164                           fsr1h	equ	0xFE2
 38165                           fsr1l	equ	0xFE1
 38166                           indf2	equ	0xFDF
 38167                           postinc2	equ	0xFDE
 38168                           postdec2	equ	0xFDD
 38169                           plusw2	equ	0xFDB
 38170                           fsr2h	equ	0xFDA
 38171                           fsr2l	equ	0xFD9
 38172                           status	equ	0xFD8
 38173                           
 38174                           	psect	temp
 38175  00004A                     btemp:
 38176                           	opt stack 0
 38177  00004A                     	ds	12
 38178                           tosu	equ	0xFFF
 38179                           tosh	equ	0xFFE
 38180                           tosl	equ	0xFFD
 38181                           pclatu	equ	0xFFB
 38182                           pclath	equ	0xFFA
 38183                           tblptru	equ	0xFF8
 38184                           tblptrh	equ	0xFF7
 38185                           tblptrl	equ	0xFF6
 38186                           tablat	equ	0xFF5
 38187                           prodh	equ	0xFF4
 38188                           prodl	equ	0xFF3
 38189                           intcon	equ	0xFF2
 38190                           indf0	equ	0xFEF
 38191                           postinc0	equ	0xFEE
 38192                           plusw0	equ	0xFEB
 38193                           fsr0h	equ	0xFEA
 38194                           fsr0l	equ	0xFE9
 38195                           wreg	equ	0xFE8
 38196                           postinc1	equ	0xFE6
 38197                           postdec1	equ	0xFE5
 38198                           plusw1	equ	0xFE3
 38199                           fsr1h	equ	0xFE2
 38200                           fsr1l	equ	0xFE1
 38201                           indf2	equ	0xFDF
 38202                           postinc2	equ	0xFDE
 38203                           postdec2	equ	0xFDD
 38204                           plusw2	equ	0xFDB
 38205                           fsr2h	equ	0xFDA
 38206                           fsr2l	equ	0xFD9
 38207                           status	equ	0xFD8
 38208                           tosu	equ	0xFFF
 38209                           tosh	equ	0xFFE
 38210                           tosl	equ	0xFFD
 38211                           pclatu	equ	0xFFB
 38212                           pclath	equ	0xFFA
 38213                           tblptru	equ	0xFF8
 38214                           tblptrh	equ	0xFF7
 38215                           tblptrl	equ	0xFF6
 38216                           tablat	equ	0xFF5
 38217                           prodh	equ	0xFF4
 38218                           prodl	equ	0xFF3
 38219                           intcon	equ	0xFF2
 38220                           indf0	equ	0xFEF
 38221                           postinc0	equ	0xFEE
 38222                           plusw0	equ	0xFEB
 38223                           fsr0h	equ	0xFEA
 38224                           fsr0l	equ	0xFE9
 38225                           wreg	equ	0xFE8
 38226                           postinc1	equ	0xFE6
 38227                           postdec1	equ	0xFE5
 38228                           plusw1	equ	0xFE3
 38229                           fsr1h	equ	0xFE2
 38230                           fsr1l	equ	0xFE1
 38231                           indf2	equ	0xFDF
 38232                           postinc2	equ	0xFDE
 38233                           postdec2	equ	0xFDD
 38234                           plusw2	equ	0xFDB
 38235                           fsr2h	equ	0xFDA
 38236                           fsr2l	equ	0xFD9
 38237                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    402
    Data        56
    BSS         1276
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     47      83
    BANK0           160    152     152
    BANK1           256    110     245
    BANK2           256      0     245
    BANK3           256     20     180
    BANK4           256      0     224
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          222      0       0

Pointer List with Targets:

    RxDataDone@pData	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    S1518$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> NULL(NULL[0]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncode@masterKey	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    EncKeySchedule@key	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncode@key(BANK0[16]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> payload(BANK1[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(1) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK1[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK1[16]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> LORAWAN_RxDone@channelIndex(BANK3[1]), SelectChannelForTransmission@channelIndex(BANK0[1]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    S1518$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S1518$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S843$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S843$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), 

    S172$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    INT3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), DIO2_ISR_Lora(), DIO1_ISR_Lora(), DIO0_ISR_Lora(), 
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), DIO2_ISR_Lora(), DIO1_ISR_Lora(), DIO0_ISR_Lora(), 
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _sendPacket->_LORAWAN_Send
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO5_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    ___lmul->_SwTimerReadValue
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_Send->_AssemblePacket
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0 6731791
                                            147 BANK0      5     5      0
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
                              _flash
                         _sendPacket
 ---------------------------------------------------------------------------------
 (1) _sendPacket                                           0     0      0  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (1) _flash                                                2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3699
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0     239
                                              6 BANK0      2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     169
                                              6 BANK0      1     1      0
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0    2371
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     239
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     920
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2     117
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2     533
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     135
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5952710
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 2321151
                                            136 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  153376
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  681520
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  499821
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  155778
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    9224
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    9667
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  163191
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                         _RxDataDone *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   36323
                                             29 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  545727
                                            100 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  509373
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   26412
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 3019844
                                            143 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    9747
                                              8 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                         8     8      0  213243
                                            120 BANK0      8     8      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0 1059613
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              5     4      1     549
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1533256
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  483942
                                             91 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  321190
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3 1033274
                                            136 BANK0      5     5      0
                                            107 BANK1      3     0      3
                                              0 BANK3     20    20      0
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                         _RxDataDone *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    9085
                                             52 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    9122
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     228
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                        11     9      2   22339
                                             64 BANK0     11     9      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    9376
                                             52 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  165446
     _LORAWAN_EnterContinuousReceive
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   25555
                                             72 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     843
                                             11 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0     640
                                             10 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     578
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               7     5      2    7042
                                             64 BANK0      7     5      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     438
                                              4 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                    8     6      2   12796
                                             64 BANK0      8     6      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     644
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     297
                                              6 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     385
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     385
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     608
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2369
                                              8 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     842
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     203
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                       9     7      2    3295
                                             17 BANK0      9     7      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  3     1      2     271
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    2044
                                             14 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      6     1      5    1774
                                              8 BANK0      6     1      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     971
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     265
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Send                                         7     3      4  317742
                                            129 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_GetMaxPayloadSize                            3     3      0     272
                                             12 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (3) _AssemblePacket                                      12     7      5  151724
                                            122 BANK0      7     7      0
                                            102 BANK1      5     0      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _IncludeMacCommandsResponse                          12     8      4    2532
                                              4 BANK0     12     8      4
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _FindSmallestDataRate                                 4     4      0     424
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _EncryptFRMPayload                                   22     8     14   44159
                                             68 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
 ---------------------------------------------------------------------------------
 (5) _AssembleEncryptionBlock                              9     2      7   19076
                                             14 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _CountfOptsLength                                     8     8      0     198
                                              4 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          10     6      4   13819
                                             14 BANK0     10     6      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   37765
                                             68 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   17577
                                             14 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     290
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     228
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                  9     9      0  203691
                                            120 BANK0      9     9      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      40    38      2  181894
                                             84 BANK0     36    34      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                         _RxDataDone *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     455
                                             43 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      65
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  160595
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _RxDataDone                                           4     0      4    4851
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_ReceiveStop                                    0     0      0   15684
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  125388
                                             74 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   14672
                                             22 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  256436
                                            140 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SelectChannelForTransmission                         3     3      0   22010
                                             85 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (4) _SearchAvailableChannel                              12     9      3    7280
                                             73 BANK0     12     9      3
                             _Random
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadioTx                                     6     2      4   14532
                                             22 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetOutputPower                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetIQInverted                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetCRC                                         1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadio                                       5     1      4   14236
                                             17 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetSpreadingFactor                             1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetModulation                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFrequencyHopPeriod                          2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFSKSyncWord                                 3     1      2   13293
                                             14 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetChannelFrequency                            4     0      4     321
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetBandwidth                                   1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Transmit                                      17    14      3  126515
                                             74 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteConfiguration                            10     8      2   90430
                                             64 BANK0     10     8      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _RADIO_WritePower                                     3     3      0   10303
                                              8 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   15813
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKBitRate                                8     4      4   15810
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                              9     9      0  104515
                                            131 BANK0      9     9      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _Random                                               2     0      2    6071
                                             71 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (6) _rand                                                 2     0      2    5392
                                             64 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                             66 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   81241
                                            122 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _AESCmac                                            116   109      7   67391
                                            108 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _GenerateSubkey                                      40    34      6   26439
                                             68 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (6) _FillSubKey                                           8     3      5    1539
                                              4 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _AESEncodeLoRa                                       20    16      4   19957
                                             48 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _AESEncode                                           38    35      3    5098
                                             10 BANK0     38    35      3
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (7) _EncodeShiftRow                                       3     1      2     984
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _EncKeySchedule                                       6     5      1    1164
                                              4 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  174260
                                             76 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     135
                                             21 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2620
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     5     3      2   26256
                                             16 BANK0      5     3      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   98519
                                             75 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     223
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      31
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetLoRaSyncWord                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   46271
                                             29 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2620
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteMode                                      7     5      2   15684
                                              9 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterRead                                   2     2      0     130
                                              6 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFrequency                                12     8      4   16566
                                             17 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              4 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterWrite                                  2     1      1    9716
                                              6 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (6) _HALSPISend                                           1     1      0      62
                                              5 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI2_Exchange8bit                                    1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     680
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _SystemBlockingWaitMs                                 5     1      4     618
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      62
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          11     9      2   14810
                                             64 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    5392
                                             52 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    5857
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _SwTimerStop                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SwTimerStart                                         9     9      0    1294
                                             43 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (5) _TMR_OverrideRemaining                               10     6      4     743
                                             12 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (6) _TMR_SwapTimer                                        2     0      2     478
                                             10 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     240
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SwTimersInterrupt                                   17    13      4     390
                                             26 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (6) _TMR_GetDeltaTime                                    16    12      4      34
                                             10 BANK0     16    12      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_ReadTimer                                       6     4      2      34
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _SwTimerSetTimeout                                    9     5      4    1934
                                             17 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    3569
                                              4 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              10     4      6   13062
                                              4 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     158
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     158
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     455
                                             39 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     455
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     455
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        0     0      0     455
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     185
                                              6 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_WriteTimer                                   2     0      2     114
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     270
                                             22 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 16    12      4      23
                                              6 COMRAM    16    12      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _flash
   _sendPacket
     _LORAWAN_Send
       _AssemblePacket
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _AssembleEncryptionBlock
           _memcpy
           _memset
         _CountfOptsLength
         _EncryptFRMPayload
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
         _FindSmallestDataRate
         _IncludeMacCommandsResponse
           _RADIO_GetPacketSnr
         _memcpy
         _memset
       _LORAWAN_GetMaxPayloadSize
         _CountfOptsLength
       _RADIO_ReceiveStop
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _RADIO_Transmit
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteConfiguration
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteFSKBitRate
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFSKFrequencyDeviation
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFrequency
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
             ___llmod
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _RADIO_WritePower
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _SelectChannelForTransmission
         _ConfigureRadioTx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
           _RADIO_SetOutputPower
         _SearchAvailableChannel
           _Random
             ___lwmod
               _rand (ARG)
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
             _rand
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DDD      0     21E      33       15.3%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      11        0.0%
BANK3              100     14      B4      12       70.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F5      10       95.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6E      F5       7       95.7%
BITBANK13           DE      0       0      31        0.0%
BANK13              DE      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      98       5       95.0%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     2F      53       1      100.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     469       8        0.0%
DATA                 0      0     689       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Mar 22 09:39:01 2023

                                        ??_LORAWAN_TxDone 00B6  
                              __end_of_DIO3_ISR_Lora_Init 62A0  
                                      ?_LORAWAN_RxTimeout 0001  
                        __size_of_RADIO_FHSSChangeChannel 002E  
                                          HALSPISend@data 0065  
                                             __CFG_CP$OFF 000000  
                                                      PL2 2BD6  
                                                      PL4 0CE2  
                                                      PL6 435E  
                         __end_of_ValidateChannelMaskCntl 602A  
                                                      PL8 0CF2  
                         __size_of_UpdateJoinSuccessState 008C  
                                     ___wmul@multiplicand 0066  
                                            _TMR_ISR_lora 52E2  
                                   __end_of_AESEncodeLoRa 5D1A  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                                                     PL10 3DF4  
                                                     PL20 2CC4  
                                                     PL12 436E  
                                                     PL30 2A78  
                                                     PL22 0D26  
                                                     PL14 217C  
                                                     PL40 2CFA  
                                                     PL32 2332  
                                                     PL24 06EA  
                                                     PL16 218A  
                                                     PL50 2D08  
                                                     PL42 071C  
                                                     PL34 070A  
                                                     PL26 2CEC  
                                                     PL18 3B90  
                                                     PL60 0D46  
                                                     PL52 0726  
                                                     PL44 300E  
                                                     PL36 4708  
                                                     PL28 06FA  
                                                     PL70 3C6E  
                                                     PL62 3042  
                                                     PL54 488C  
                                                     PL46 3C5C  
                                                     PL38 3402  
                                             __CFG_LVP$ON 000000  
                                                     PL80 2A90  
                                                     PL72 5B72  
                                                     PL64 3AFE  
                                                     PL56 4898  
                                                     PL48 0D3A  
                                                     PL90 2AA2  
                                                     PL82 1BA2  
                                                     PL74 18FC  
                                                     PL66 0D7C  
                                                     PL58 3AF0  
                                                     PL92 0732  
                                                     PL84 48A2  
                                                     PL76 190A  
                                                     PL68 2D14  
                                                     PL94 4718  
                                                     PL86 5B4A  
                                                     PL78 2EF6  
                                                     PL96 0740  
                                                     PL88 0D84  
                                                     PL98 0D8E  
                                     ??_LORAWAN_RxTimeout 00BB  
                                                     l143 5660  
                                                     l209 6134  
                                                     l403 371A  
                                                     l500 116E  
                                                     l613 5A94  
                                                     l711 492E  
                                                     l481 0EF8  
                                                     l474 0E80  
                                                     l468 0EB0  
                                             ?_RADIO_Init 007D  
                                                     l487 10A4  
                                                     l691 59A4  
                                                     l694 58F6  
                                                     l697 5908  
                                         ??_UpdateTxPower 0064  
                                                     _GIE 007F97  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 4DEC  
                   __size_of_SelectChannelForTransmission 0054  
                            _SelectChannelForTransmission 4D98  
                                  _ExecuteRxParamSetupReq 3062  
                              ??_INT0_SetInterruptHandler 0066  
                                      _DIO2_ISR_Lora_Init 6208  
                                      __size_of_AESEncode 0196  
                                         _timer1ReloadVal 005E  
                              ??_INT3_SetInterruptHandler 0066  
                                         ?_EncKeySchedule 0064  
                                   _RADIO_SetLoRaSyncWord 61EC  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                         __end_of_AESCmac 141C  
                                 __end_of_SwTimersExecute 4708  
                                  SystemBlockingWaitMs@ms 0064  
                                 LORAWAN_Join@bufferIndex 00EC  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0064  
                                    ??i2_TMR_GetDeltaTime 000B  
                      __end_of_IOCBF4_SetInterruptHandler 619C  
                              _IOCBF4_SetInterruptHandler 6192  
                                ??_SearchAvailableChannel 00AC  
                            __end_of_FindSmallestDataRate 483A  
                     __end_of_RADIO_SetFrequencyHopPeriod 61EC  
                             _RADIO_SetFrequencyHopPeriod 61E2  
                                              _CheckFlags 54FE  
                                  ?_TMR_OverrideRemaining 006C  
                                                    PL100 1918  
                                                    PL110 1926  
                                                    PL102 0762  
                                                    PL200 43F6  
                                                    PL120 1D9C  
                                                    PL112 1D84  
                                                    PL104 0D9E  
                                                    PL210 27C8  
                                                    PL202 5020  
                                                    PL130 43E0  
                                                    PL122 1F80  
                                                    PL114 1D90  
                                                    PL106 0784  
                                                    PL300 5BA0  
                                                    PL220 1436  
                                                    PL212 083C  
                                                    PL204 082E  
                                                    PL140 1DBA  
                                                    PL132 233C  
                                                    PL124 42AA  
                                                    PL116 193A  
                                                    PL108 0798  
                                                    PL310 4B84  
                                                    PL302 5A6A  
                                                    PL230 1DC4  
                                                    PL222 172C  
                                                    PL214 4404  
                                                    PL206 351C  
                                                    PL150 3EA8  
                                                    PL142 43EA  
                                                    PL134 5132  
                                                    PL126 3914  
                                                    PL118 2DE6  
                                                    PL400 2E36  
                                                    PL320 3434  
                                                    PL312 1458  
                                                    PL304 45F6  
                                                    PL240 3056  
                                                    PL232 2E06  
                                                    PL224 24F0  
                                                    PL216 0850  
                                                    PL208 394E  
                                                    PL160 5288  
                                                    PL152 44AC  
                                                    PL144 07AC  
                                                    PL136 3932  
                                                    PL128 117E  
                                                    PL410 4A24  
                                                    PL402 507C  
                                                    PL330 27EA  
                                                    PL322 3BB4  
                                                    PL314 4214  
                                                    PL306 4416  
                                                    PL250 174A  
                                                    PL242 37B2  
                                                    PL234 173E  
                                                    PL226 0864  
                                                    PL218 1718  
                                                    PL170 07F2  
                                                    PL162 07D2  
                                                    PL154 141C  
                                                    PL146 07B8  
                                                    PL138 0DAE  
                                                    PL420 1FC2  
                                                    PL412 14A2  
                                                    PL404 11BA  
                                                    PL340 1F94  
                                                    PL332 2BF0  
                                                    PL324 1DD6  
                                                    PL316 198C  
                                                    PL308 27DC  
                                                    PL260 197C  
                                                    PL252 4CC2  
                                                    PL244 1964  
                                                    PL236 4D24  
                                                    PL228 1440  
                                                    PL180 2F1C  
                                                    PL172 2918  
                                                    PL164 5538  
                                                    PL156 195A  
                                                    PL148 4CA8  
                                                    PL430 4D2A  
                                                    PL422 2680  
                                                    PL414 620A  
                                                    PL406 3EB0  
                                                    PL350 3442  
                                                    PL342 1190  
                                                    PL334 08AC  
                                                    PL326 146E  
                                                    PL318 1460  
                                                    PL270 2F3C  
                                                    PL262 2E18  
                                                    PL254 1BAC  
                                                    PL246 1970  
                                                    PL238 341E  
                                                    PL190 2F26  
                                                    PL182 55D2  
                                                    PL174 5858  
                                                    PL166 07E2  
                                                    PL158 5BF6  
                                                    PL440 219A  
                                                    PL432 08D6  
                                                    PL424 14AC  
                                                    PL416 11C2  
                                                    PL408 149A  
                                                    PL360 3602  
                                                    PL352 4222  
                                                    PL344 1478  
                                                    PL336 3BBE  
                                                    PL328 08A2  
                                                    PL280 1450  
                                                    PL272 4DEC  
                                                    PL264 0876  
                                                    PL256 086C  
                                                    PL248 3890  
                                                    PL192 4F0A  
                                                    PL184 3B9E  
                                                    PL176 3506  
                                                    PL168 07EA  
                                                    PL450 11C8  
                                                    PL442 5086  
                                                    PL434 6068  
                                                    PL426 6050  
                                                    PL418 2AB0  
                                                    PL370 08C2  
                                                    PL362 1FAC  
                                                    PL354 1FA0  
                                                    PL346 1482  
                                                    PL338 27F4  
                                                    PL290 088C  
                                                    PL282 2F44  
                                                    PL274 45E8  
                                                    PL266 440E  
                                                    PL258 42C8  
                                                    PL194 4B6E  
                                                    PL186 080A  
                                                    PL178 170C  
                                                    PL460 37BE  
                                                    PL452 3BC8  
                                                    PL444 14B6  
                                                    PL436 315E  
                                                    PL428 5328  
                                                    PL380 1756  
                                                    PL372 11A8  
                                                    PL364 2930  
                                                    PL356 08B6  
                                                    PL348 148E  
                                                    PL292 5762  
                                                    PL284 3962  
                                                    PL276 3C88  
                                                    PL268 342A  
                                                    PL196 234E  
                                                    PL188 5072  
                                                    PL470 21A4  
                                                    PL462 3A38  
                                                    PL454 11D0  
                                                    PL446 08E0  
                                                    PL438 1BBE  
                                                    PL390 1BB6  
                                                    PL382 175E  
                                                    PL374 2946  
                                                    PL366 1994  
                                                    PL358 119C  
                                                    PL294 0894  
                                                    PL286 2BE6  
                                                    PL278 0880  
                                                    PL198 0820  
                                                    PL472 4A2C  
                                                    PL464 11DC  
                                                    PL456 2364  
                                                    PL448 502E  
                                                    PL392 08CC  
                                                    PL384 1FB8  
                                                    PL376 2950  
                                                    PL368 293C  
                                                    PL296 2E28  
                                                    PL288 4B7A  
                                                    PL474 11E2  
                                                    PL466 50E0  
                                                    PL458 11D6  
                                                    PL394 295A  
                                                    PL386 4A1C  
                                                    PL378 6156  
                                                    PL298 3BA8  
                                                    PL468 59A6  
                                                    PL396 235A  
                                                    PL388 49B0  
                                                    PL398 11B0  
                                           _INT1_CallBack 5F48  
                                ?_AssembleEncryptionBlock 006E  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0068  
                                            __CFG_ZCD$OFF 000000  
                                                    l1100 60EE  
                                                    l1112 536C  
                                                    l1104 5DEE  
                                                    l1120 2B56  
                                                    l1043 09DA  
                                                    l1131 2732  
                                                    l1052 0B88  
                                                    l1300 50BA  
                                                    l1070 19D0  
                                                    l2120 4BC8  
                                                    l1225 431E  
                                                    l2018 31D2  
                                                    l1154 403C  
                                                    l2042 3E94  
                                                    l1411 1254  
                                                    l2051 3EA4  
                                                    l2115 3C58  
                                                    l1236 3B54  
                                                    l1252 4FD6  
                                                    l1244 60DA  
                                                    l1148 310A  
                                                    l1172 2976  
                                                    l1084 1A8E  
                                                    l1157 409C  
                                                    l2037 444C  
                                                    l1318 1D7E  
                                                    l1167 40D0  
                                                    l1271 6026  
                                                    l2039 44A6  
                                                    l1265 5EEE  
                                                    l1370 604E  
                                                    l3026 4B0E  
                                                    l1426 134A  
                                                    l2146 00EE  
                                                    l2066 3008  
                                                    l1259 59DC  
                                                    l3036 4EAE  
                                                    l2308 2124  
                                                    l2332 4CDE  
                                                    l2317 47C8  
                                                    l2261 1596  
                                                    l1285 5AD8  
                                                    l2158 01FE  
                                                    l2094 4B6A  
                                                    l2175 03A0  
                                                    l2256 150C  
                                                    l2176 03A2  
                                                    l2088 3360  
                                                    l2257 159C  
                                                    l2266 15AA  
                                                    l2258 159A  
                                                    l2196 05DC  
                                                    l2541 1798  
                                                    l1742 473C  
                   RADIO_WriteConfiguration@symbolTimeout 00A0  
                                                    l1743 4784  
                                                    l3089 57E2  
                                                    l1771 401A  
                                                    l2688 5470  
                                        _RADIO_WritePower 3972  
                            ??_LORAWAN_SetChannelIdStatus 0069  
                                 _PrepareJoinRequestFrame 2E40  
                                                    _LATA 000F79  
                                                    _LATB 000F7A  
                                                    _LATC 000F7B  
                                     _RADIO_Transmit$1056 00B5  
                                                    _LATD 000F7C  
                                                    _LATE 000F7D  
                                                    _LATF 000F7E  
                                                    _LATG 000F7F  
                                                    _LATH 000F80  
                                            ?_RADIO_Reset 0001  
                              __size_of_RADIO_ReceiveStop 0018  
                                       ??_UpdateDutyCycle 0066  
                                                    _WPUA 000E91  
                                                    _WPUB 000E99  
                                                    _WPUC 000EA1  
                                  ??_LORAWAN_PlatformInit 0066  
                                                    _WPUD 000EA6  
                                                    _WPUE 000EAE  
                                                    _WPUF 000EB3  
                                                    _WPUG 000EBB  
                                                    _WPUH 000EC0  
                                           _INT2_CallBack 5F2C  
                                           __CFG_FCMEN$ON 000000  
                                ??_InitDefault433Channels 006E  
                                ExecuteNewChannel@drRange 00A2  
                                      _PrepareSessionKeys 4FDA  
                                                    _loRa 0200  
                                                    _main 3C90  
                                                    _rand 5380  
                          __end_of_UpdateMinMaxChDataRate 4BFC  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr0l 000FE9  
                                                    fsr2h 000FDA  
                                                    fsr1l 000FE1  
                                                    indf2 000FDF  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 01A0  
                                                    btemp 004A  
                          __size_of_StopAllSoftwareTimers 004E  
                                           ComputeMic@mic 00DF  
                                           ComputeMic@key 00DA  
                               __end_of_LORAWAN_RxTimeout 1BA2  
                               __size_of_ConfigureRadioRx 0026  
                               __size_of_ConfigureRadioTx 0042  
                       __size_of_INT2_SetInterruptHandler 000A  
                                                    pclat 000FFA  
                           __end_of_StopAllSoftwareTimers 541C  
                               ?_INT2_SetInterruptHandler 0064  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 0082  
                                __end_of_CountfOptsLength 488C  
                                   ExecuteLinkAdr@txPower 0076  
                                     __size_of_HALSPISend 000A  
                              ??_TMR1_SetInterruptHandler 0066  
                                           __CFG_CSWEN$ON 000000  
                              EnableChannels1@channelMask 0068  
                                        ??_AssemblePacket 00DA  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006E  
                                  __size_of_TMR_SwapTimer 0036  
                              __end_of_RADIO_GetPacketSnr 625A  
                                            ___param_bank 000010  
                                              _GetRx1Freq 6118  
                              __size_of_RADIO_ReleaseData 0006  
                                           __CFG_SCANE$ON 000000  
                                    ??_DIO2_ISR_Lora_Init 0066  
                         __end_of_CreateAllSoftwareTimers 52E2  
                  SearchAvailableChannel@transmissionType 00A9  
                         __size_of_HALResetPinOutputValue 0014  
                                   MacExecuteCommands@ptr 00AE  
                                   _RADIO_WriteFSKBitRate 4DFC  
                                __size_of_SystemTimerInit 0006  
                                        __end_of_INT1_ISR 6278  
                                        __end_of_INT2_ISR 6272  
                          __size_of_OSCILLATOR_Initialize 0012  
                                  ExecuteLinkAdr@dataRate 0079  
                           __end_of_OSCILLATOR_Initialize 6118  
                                     __size_of_IOCBF4_ISR 0024  
                      __size_of_LORAWAN_LinkCheckCallback 00BA  
                                                   l12010 181A  
                                                   l12002 17D8  
                                                   l12012 1824  
                                                   l12022 1862  
                                                   l12024 186C  
                                                   l12016 183E  
                                                   l12122 3D98  
                                                   l12042 18E8  
                                                   l12018 1848  
                                                   l12034 18DE  
                                                   l12116 3D6E  
                                                   l13012 1240  
                                                   l12300 4908  
                                                   l13100 47CC  
                                                   l12126 3DD6  
                                                   l12070 4AD2  
                                                   l12230 398A  
                                                   l13110 4802  
                                                   l12128 3DD8  
                                                   l12056 5484  
                                                   l12152 373C  
                                                   l12160 3754  
                                                   l12144 371C  
                                                   l12136 3702  
                                                   l13040 1306  
                                                   l13032 12DA  
                                                   l13024 1296  
                                                   l13112 480C  
                                                   l13200 1FD0  
                                                   l12322 5C3A  
                                                   l12066 4AC2  
                                                   l12090 4E7E  
                                                   l13050 1314  
                                                   l13042 130A  
                                                   l13018 1266  
                                                   l13026 12B4  
                                                   l12234 3996  
                                                   l12250 39C6  
                                                   l14010 5114  
                                                   l14002 510A  
                                                   l13122 482C  
                                         __end_of___abdiv 523E  
                                                   l12404 4C44  
                                                   l12068 4ACE  
                                                   l12172 3778  
                                                   l12156 3746  
                                                   l13036 12F8  
                                                   l12420 0E3E  
                                                   l12316 5BBA  
                                                   l13108 4800  
                                                   l12332 3B28  
                                                   l12326 5C4A  
                                                   l12078 4B00  
                                                   l12094 4EA0  
                                                   l12086 4E6E  
                                                   l12174 377C  
                                                   l12158 374E  
                                                   l12262 39EC  
                                                   l12254 39D4  
                                                   l12422 0E4E  
                                                   l12430 0E96  
                                                   l13118 481C  
                                                   l13126 4834  
                                                   l13222 2060  
                                                   l12334 3B2C  
                                                   l14102 2658  
                                                   l14120 5662  
                                                   l12088 4E7A  
                                                   l12176 3786  
                                                   l12360 5552  
                                                   l13080 13DE  
                                                   l13064 134E  
                                                   l13056 1332  
                                                   l12248 39BA  
                                                   l12440 0EE2  
                                                   l12432 0EB2  
                                                   l12424 0E5E  
                                                   l13320 1E20  
                                                   l13312 1E08  
                                                   l14016 5126  
                                                   l13152 2D3C  
                                                   l13144 2D2E  
                                                   l13224 206C  
                                                   l13208 2030  
                                                   l12352 3B8E  
                                                   l12344 3B74  
                                                   l13136 5932  
                                                   l14040 4D14  
                                                   l14200 01E4  
                                                   l12186 37A2  
                                                   l13074 13B2  
                                                   l12282 3A1A  
                                                   l12258 39E0  
                                                   l13306 1DF2  
                                                   l12610 49A2  
                                                   l14050 5508  
                                                   l13170 2DAC  
                                                   l13162 2D90  
                                                   l13242 20AA  
                                                   l13226 2074  
                                                   l13218 204E  
                                                   l12346 3B78  
                                                   l14106 2676  
                                                   l12188 37AC  
                                                   l12364 558A  
                                                   l12380 57C2  
                                                   l12276 3A12  
                                                   l12444 0EEE  
                                                   l12428 0E84  
                                                   l13340 1E6E  
                                                   l13180 4842  
                                                   l13228 207A  
                                                   l12620 50A6  
                                                   l14212 0246  
                                                   l15022 5056  
                                                   l15006 55B6  
                                                   l12382 57C6  
                                                   l12534 1096  
                                                   l12526 106E  
                                                   l12518 1034  
                                                   l12446 0EF4  
                                                   l13342 1E7C  
                                                   l14054 5512  
                                                   l13190 4888  
                                                   l12702 43C2  
                                                   l13262 20E4  
                                                   l13238 2098  
                                                   l12630 50CE  
                                                   l12622 50AE  
                                                   l14070 2566  
                                                   l14038 4D10  
                                                   l14150 00B6  
                                                   l11824 2C4C  
                                                   l12552 1128  
                                                   l12528 107A  
                                                   l12536 10AC  
                                                   l13352 1E9C  
                                                   l12296 48E4  
                                                   l13424 4DE6  
                                                   l13184 4870  
                                                   l13176 2DDC  
                                                   l13248 20B8  
                                                   l13440 5376  
                                                   l12616 509C  
                                                   l14080 25C8  
                                                   l14072 257A  
                                                   l14400 04E4  
                                                   l11906 427C  
                                                   l11914 5C08  
                                                   l15034 4B9E  
                                                   l11826 2C56  
                                                   l12386 57D8  
                                                   l12378 57BA  
                                                   l12562 1164  
                                                   l12466 0F3A  
                                                   l13346 1E8C  
                                                   l14058 551C  
                                                   l13186 487C  
                                                   l13282 212A  
                                                   l13266 20F2  
                                                   l13258 20DC  
                                                   l13602 5840  
                                                   l12634 50D8  
                                                   l13530 271C  
                                                   l14082 25DE  
                                                   l14074 2586  
                                                   l14066 250E  
                                                   l14410 04EA  
                                                   l14322 03E8  
                                                   l14330 03F4  
                                                   l14250 02EA  
                                                   l14218 024E  
                                                   l15106 1C92  
                                                   l11908 4298  
                                                   l15044 4BEC  
                                                   l12556 1144  
                                                   l12548 1118  
                                                   l12476 0F60  
                                                   l12484 0F78  
                                                   l13380 1F0C  
                                                   l13356 1EB2  
                                                   l12732 21D4  
                                                   l13188 487E  
                                                   l13276 2110  
                                                   l13292 213E  
                                                   l13604 5852  
                                                   l12628 50C6  
                                                   l14084 25F4  
                                                   l14076 259C  
                                                   l14252 02F6  
                                                   l14156 00F0  
                                                   l15212 32FA  
                                                   l11918 5C24  
                                                   l15046 4BF0  
                                                   l12662 34B8  
                                                   l12742 2212  
                                                   l12726 21BE  
                                                   l13294 2162  
                                                   l12590 5EEA  
                                                   l12830 42FA  
                                                   l13550 27BA  
                                                   l13542 2776  
                                                   l14086 260A  
                                                   l14078 25B2  
                                                   l14094 261C  
                                                   l14510 068C  
                                                   l14502 067C  
                                                   l14422 0532  
                                                   l14414 04F8  
                                                   l14350 0452  
                                                   l14270 0310  
                                                   l14238 02D4  
                                                   l14318 03C6  
                                                   l14174 0162  
                                                   l15134 443C  
                                                   l15118 1D0C  
                                                   l11880 594E  
                                                   l15072 31FC  
                                                   l15064 31C2  
                                                   l12656 3494  
                                                   l12648 348C  
                                                   l12752 2250  
                                                   l12744 2234  
                                                   l12736 21E4  
                                                   l13296 2164  
                                                   l13704 169A  
                                                   l13624 1504  
                                                   l13472 2B42  
                                                   l13464 2B1E  
                                                   l12840 433C  
                                                   l12816 59D8  
                                                   l13544 2780  
                                                   l13552 27BE  
                                                   l13528 2712  
                                                   l14096 2644  
                                                   l14440 0584  
                                                   l14424 0534  
                                                   l14600 1B06  
                                                   l15208 32F2  
                                                   l11954 5188  
                                                   l15058 31AA  
                                                   l15066 31C6  
                                                   l11962 1768  
                                                   l12674 34D2  
                                                   l12666 34CA  
                                                   l13386 1F78  
                                                   l12762 22B2  
                                                   l12738 21F0  
                                                   l13298 2170  
                                                   l13650 1560  
                                                   l12842 4340  
                                                   l14450 05DE  
                                                   l14290 034A  
                                                   l14282 0324  
                                                   l14178 0172  
                                                   l14610 1B82  
                                                   l15138 444E  
                                                   l15162 2F7C  
                                                   l15218 331A  
                                                   l11948 5152  
                                                   l12756 2268  
                                                   l14700 0C94  
                                                   l13492 2BA8  
                                                   l13548 27B0  
                                                   l13572 30DA  
                                                   l14364 04A2  
                                                   l14380 04AE  
                                                   l14604 1B5E  
                                                   l13812 3E9C  
                                                   l13804 3E82  
                                                   l15164 2F88  
                                                   l15156 2F6A  
                                                   l15172 2FA2  
                                                   l15228 335C  
                                                   l12774 232A  
                                                   l13670 15C4  
                                                   l13902 3F98  
                                                   l12918 5AEC  
                                                   l13494 2BB6  
                                                   l13590 3154  
                                                   l14534 06D0  
                                                   l14286 033C  
                                                   l15238 4B3E  
                                                   l14800 245A  
                                                   l11976 178E  
                                                   l12952 4040  
                                                   l12768 22D6  
                                                   l14704 0CBE  
                                                   l12696 43AC  
                                                   l13672 15D2  
                                                   l13920 3FC8  
                                                   l13912 3FBA  
                                                   l13496 2BBA  
                                                   l12848 435A  
                                                   l13576 30F2  
                                                   l14528 06A0  
                                                   l13808 3E8C  
                                                   l15096 1C4C  
                                                   l15088 1BDE  
                                                   l11986 179A  
                                                   l14634 0988  
                                                   l12698 43B2  
                                                   l13906 3FAE  
                                                   l13498 2BCC  
                                                   l12858 5AB4  
                                                   l12794 4FAC  
                                                   l14490 064E  
                                                   l14474 0624  
                                                   l14378 04A8  
                                                   l14562 1A2E  
                                                   l14546 19C2  
                                                   l14730 5212  
                                                   l15442 4D5C  
                                                   l15178 2FC8  
                                                   l15098 1C58  
                                                   l13780 60FE  
                                                   l12972 40AA  
                                                   l12964 409A  
                                                   l14652 0B0A  
                                                   l13668 15BC  
                                                   l13924 3FD4  
                                                   l12884 5DE2  
                                                   l12796 4FB2  
                                                   l14484 0636  
                                                   l14492 0654  
                                                   l14388 04CC  
                                                   l14580 1A80  
                                                   l14724 5206  
                                                   l15452 4D82  
                                                   l16412 3D26  
                                                   l15614 2884  
                                                   l12982 40CC  
                                                   l13686 161A  
                                                   l12886 5DEA  
                                                   l13862 361C  
                                                   l13846 2A5E  
                                                   l14494 065A  
                                                   l14398 04D2  
                                                   l14566 1A3C  
                                                   l14750 523A  
                                                   l14742 522C  
                                                   l14734 5218  
                                                   l14718 51FC  
                                                   l15446 4D62  
                                                   l15462 4D92  
                                                   l16406 3D20  
                                                   l14808 247C  
                                                   l15552 280C  
                                                   l15528 49DC  
                                                   l12968 40A0  
                                                   l12976 40B6  
                                                   l14648 0AAE  
                                                   l13848 2A68  
                                                   l13856 5F8C  
                                                   l14488 0648  
                                                   l14568 1A54  
                                                   l14736 521C  
                                                   l15448 4D74  
                                                   l15472 5882  
                                                   l15480 589A  
                                                   l13960 3C3A  
                                                   l12978 40BA  
                                                   l14658 0B0C  
                                                   l13698 1666  
                                                   l13874 368C  
                                                   l14586 1A92  
                                                   l14746 5234  
                                                   l14850 3F5C  
                                                   l14834 3F18  
                                                   l14826 3EF6  
                                                   l15458 4D8C  
                                                   l13954 3C10  
                                                   l16274 46A2  
                                                   l14668 0B80  
                                                   l14676 0BC2  
                                                   l13876 3690  
                                                   l14924 4516  
                                                   l15476 5888  
                                                   l15492 560A  
                                                   l16284 46F4  
                                                   l14694 0C7E  
                                                   l14598 1B02  
                                                   l14870 459C  
                                                   l14838 3F28  
                                                   l16286 46F6  
                                                   l16390 3CEE  
                                                   l15760 5436  
                                                   l14688 0C14  
                                                   l14848 3F58  
                                                   l15488 5604  
                                                   l16288 46FA  
                                                   l15682 2E62  
                                                   l14946 33AE  
                                                   l13898 3F8A  
                                                   l14890 45D8  
                                                   l14874 45AA  
                                                   l16394 3CFC  
                                                   l16386 3CE8  
                                                   l14798 2444  
                                                   l15758 5432  
                                                   l15694 2E7C  
                                                   l14894 45DC  
                                                   l14958 5E84  
                                                   l14888 45D2  
                                                   l15878 566A  
                                                   ?_main 0001  
                                                   ?_rand 00A0  
                                           __CFG_WDTE$OFF 000000  
                                              _FillSubKey 5548  
                                         _TMR1_StartTimer 6278  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 4B20  
                                         RADIO_Transmit@i 00BA  
                                                   _T1CLK 000FD2  
                                                   _T1CON 000FCF  
                                         __end_of___llmod 4EC0  
                                                   u13310 0EAA  
                                                   u13315 0EA0  
                                                   u12540 595E  
                                       ??_EnableChannels1 006D  
                                                   u14205 1224  
                                                   u13415 0F90  
                                                   _LATC2 007BDA  
                                    RxJoinResponse@status 0001  
                                                   _LATD3 007BE3  
                                                   u12580 517C  
                                                   u16031 0230  
                       __end_of_AckRetransmissionCallback 3364  
                  SearchAvailableChannel@randomNumberCopy 00B0  
                                                   u13641 3458  
                                                   u14530 202E  
                                                   u16210 03E4  
                                                   u12587 5172  
                                                   u12780 4A42  
                                                   u16108 02E8  
                                                   u13805 22E8  
                                                   u16230 044C  
                                                   u15318 3E6E  
                                                   u16208 03B2  
                                                   u14730 1EF6  
                                                   u13780 22C2  
                                                   u17060 0BEE  
                                                   u16180 035A  
                                                   u13765 2282  
                                                   u14814 535C  
                                                   u15630 3BF6  
                                                   u18110 35FE  
                                                   u14815 5356  
                                                   u15615 51B2  
                                                   u17400 33C2  
                                                   u14745 1F02  
                                                   u16370 0544  
                                                   u17330 44F8  
                                                   u18018 4B56  
                                                   u14755 1F1E  
                                                   u13795 22CE  
                                                   u17075 0C0A  
                                                   u15475 36AE  
                                                   u16508 0668  
                                                   u17340 4508  
                                                   u17085 0C26  
                                                   u17405 33C0  
                                                   u15645 3C06  
                                                   u16438 0610  
                                                   u17350 452E  
                                          __CFG_DEBUG$OFF 000000  
                                                   u18135 4D40  
                                                   u15655 3020  
                                                   u16288 048E  
                                                   u17345 4504  
                                                   u17355 452A  
                                                   u17380 3394  
                                                   u17605 320E  
                                                   u17390 33A2  
                                                   u15950 0144  
                                                   u15678 3C46  
                                                   u16825 1B20  
                                                   u17705 1D26  
                                                   u17810 2FAE  
                                                   u17395 33A0  
                                                   u17580 31E4  
                                                   u16950 0A72  
                                                   u15798 4CFC  
                                                   u17910 32EA  
                                                   u16695 19FA  
                                                   u16960 0A90  
                                                   u17680 1CDC  
                                                   u17825 2FBE  
                                                   u16970 0ACE  
                                                   u19418 46E2  
                                                   u17595 31F2  
                                                   u16965 0A86  
                                                   u16975 0ACA  
                                                   u16895 0CFC  
                                                   u17695 1D04  
                                                   u17938 3318  
                                                   u19650 3D14  
                                                   u19707 5C0E  
                                                   u17978 3348  
                                                   u19677 3D2C  
                                                   u19687 5684  
                                         __end_of___lwmod 57EC  
                                                   u19697 5694  
                                                   i2l259 5326  
                                           ?_RADIO_RxDone 0001  
                             __size_of_RADIO_ReceiveStart 0186  
                                                   _OSCEN 000E47  
                     __size_of_LORAWAN_SetChannelIdStatus 002E  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCE  
                                                   _TMR1L 000FCD  
                                                   _TRISA 000F81  
                                                   _TRISB 000F82  
                                                   _TRISC 000F83  
                                                   _TRISD 000F84  
                                                   _TRISE 000F85  
                                                   _TRISF 000F86  
                                                   _TRISG 000F87  
                                                   _TRISH 000F88  
                                __size_of_RADIO_RxTimeout 0020  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0098  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 624E  
                                 ?_SetReceptionNotOkState 0001  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0074  
                                        __end_of_TMR1_ISR 5DAC  
                               FindSmallestDataRate@found 0065  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00BF  
                             __size_of_RADIO_SetBandwidth 0008  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0036  
                                                   __rcon 0046  
                                 __end_of_PIN_MANAGER_IOC 6248  
                                                   _flash 5668  
                            ??_IncludeMacCommandsResponse 0068  
                           __end_of_RADIO_WatchdogTimeout 590C  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 0071  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0014  
                                                   _randx 0056  
                          LORAWAN_RxDone@frmPayloadLength 03B1  
                           ValidateChannelMaskCntl@result 0064  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 616C  
                                        UpdateDataRange@i 0067  
                                LORAWAN_RxDone@joinAccept 03AF  
                                  _UpdateJoinSuccessState 3BD0  
                                                   main@x 00F6  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 61B0  
                                              _ComputeMic 523E  
                                 __end_of_TMR1_Initialize 56EC  
                                  UpdateCfList@joinAccept 00A0  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                 RADIO_WriteFrequency@num 0079  
                          __size_of_UpdateCurrentDataRate 0008  
                          __size_of_UpdateChannelIdStatus 0088  
                              PrepareSessionKeys@appNonce 0070  
                                  UpdateChannelIdStatus@i 0067  
                           __end_of_UpdateCurrentDataRate 6220  
                            __size_of_RADIO_FSKPacketSent 009E  
                           __end_of_UpdateChannelIdStatus 3B90  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                UpdateFrequency@channelId 0068  
                                                   status 000FD8  
                                      _MacExecuteCommands 2502  
                                UpdateCfList@channelIndex 00A9  
                                     __size_of_RADIO_DIO0 0064  
                                     __size_of_RADIO_DIO1 003A  
                                     __size_of_RADIO_DIO2 0048  
                                     __size_of_RADIO_DIO3 0018  
                                     __size_of_RADIO_DIO4 0018  
                                     __size_of_RADIO_DIO5 0018  
                      PrepareJoinRequestFrame@bufferIndex 00EA  
                                            __end_ofPL100 1926  
                                            __end_ofPL110 193A  
                                            __end_ofPL102 0784  
                                            __end_ofPL200 4404  
                                            __end_ofPL120 1DBA  
                                            __end_ofPL112 1D90  
                                            __end_ofPL104 0DAE  
                                            __end_ofPL210 27DC  
                                            __end_ofPL202 502E  
                                            __end_ofPL130 43EA  
                                            __end_ofPL122 1F94  
                                            __end_ofPL114 1D9C  
                                            __end_ofPL106 0798  
                                            __end_ofPL300 5BAE  
                                            __end_ofPL220 1440  
                                            __end_ofPL212 0850  
                                            __end_ofPL204 083C  
                                            __end_ofPL140 1DC4  
                                            __end_ofPL132 234E  
                                            __end_ofPL124 42C8  
                                            __end_ofPL116 195A  
                                            __end_ofPL108 07AC  
                                            __end_ofPL310 4B92  
                                            __end_ofPL302 5A72  
                                            __end_ofPL230 1DD6  
                                            __end_ofPL222 173E  
                                            __end_ofPL214 440E  
                                            __end_ofPL206 3530  
                                            __end_ofPL150 3EB0  
                                            __end_ofPL142 43F6  
                                            __end_ofPL134 5140  
                                            __end_ofPL126 3932  
                                            __end_ofPL118 2E06  
                                            __end_ofPL400 2E40  
                                            __end_ofPL320 3442  
                                            __end_ofPL312 1460  
                                            __end_ofPL304 4604  
                                            __end_ofPL240 3062  
                                            __end_ofPL232 2E18  
                                            __end_ofPL224 2502  
                                            __end_ofPL216 0864  
                                            __end_ofPL208 3962  
                                            __end_ofPL160 5290  
                                            __end_ofPL152 44C6  
                                            __end_ofPL144 07B8  
                                            __end_ofPL136 394E  
                                            __end_ofPL128 1190  
                                            __end_ofPL410 4A2C  
                                            __end_ofPL402 5086  
                                            __end_ofPL330 27F4  
                                            __end_ofPL322 3BBE  
                                            __end_ofPL314 4222  
                                            __end_ofPL306 4424  
                                            __end_ofPL250 1756  
                                            __end_ofPL242 37BE  
                                            __end_ofPL234 174A  
                                            __end_ofPL226 086C  
                                            __end_ofPL218 172C  
                                            __end_ofPL170 080A  
                                            __end_ofPL162 07E2  
                                            __end_ofPL154 1436  
                                            __end_ofPL146 07D2  
                                            __end_ofPL138 0DB6  
                                            __end_ofPL420 1FC8  
                                            __end_ofPL412 14AC  
                                            __end_ofPL404 11C2  
                                            __end_ofPL340 1FA0  
                                            __end_ofPL332 2BFA  
                                            __end_ofPL324 1DE0  
                                            __end_ofPL316 1994  
                                            __end_ofPL308 27EA  
                                            __end_ofPL260 198C  
                                            __end_ofPL252 4CCE  
                                            __end_ofPL244 1970  
                                            __end_ofPL236 4D2A  
                                            __end_ofPL228 1450  
                                            __end_ofPL180 2F26  
                                            __end_ofPL172 2930  
                                            __end_ofPL164 5548  
                                            __end_ofPL156 1964  
                                            __end_ofPL148 4CC2  
                                            __end_ofPL430 4D34  
                                            __end_ofPL422 268A  
                                            __end_ofPL414 6210  
                                            __end_ofPL406 3EBA  
                                            __end_ofPL350 344E  
                                            __end_ofPL342 119C  
                                            __end_ofPL334 08B6  
                                            __end_ofPL326 1478  
                                            __end_ofPL318 146E  
                                            __end_ofPL270 2F44  
                                            __end_ofPL262 2E28  
                                            __end_ofPL254 1BB6  
                                            __end_ofPL246 197C  
                                            __end_ofPL238 342A  
                                            __end_ofPL190 2F3C  
                                            __end_ofPL182 55DC  
                                            __end_ofPL174 5864  
                                            __end_ofPL166 07EA  
                                            __end_ofPL158 5C06  
                                            __end_ofPL440 21A4  
                                            __end_ofPL432 08E0  
                                            __end_ofPL424 14B6  
                                            __end_ofPL416 11C8  
                                            __end_ofPL408 14A2  
                                            __end_ofPL360 360E  
                                            __end_ofPL352 422E  
                                            __end_ofPL344 1482  
                                            __end_ofPL336 3BC8  
                                            __end_ofPL328 08AC  
                                            __end_ofPL280 1458  
                                            __end_ofPL272 4DFC  
                                            __end_ofPL264 0880  
                                            __end_ofPL256 0876  
                                            __end_ofPL248 389C  
                                            __end_ofPL192 4F20  
                                            __end_ofPL184 3BA8  
                                            __end_ofPL176 351C  
                                            __end_ofPL168 07F2  
                                            __end_ofPL450 11D0  
                                            __end_ofPL442 5090  
                                            __end_ofPL434 6072  
                                            __end_ofPL426 605A  
                                            __end_ofPL418 2ABA  
                                            __end_ofPL370 08CC  
                                            __end_ofPL362 1FB8  
                                            __end_ofPL354 1FAC  
                                            __end_ofPL346 148E  
                                            __end_ofPL338 27FE  
                                            __end_ofPL290 0894  
                                            __end_ofPL282 2F54  
                                            __end_ofPL274 45F6  
                                            __end_ofPL266 4416  
                                            __end_ofPL258 42D8  
                                            __end_ofPL194 4B7A  
                                            __end_ofPL186 0820  
                                            __end_ofPL178 1718  
                                            __end_ofPL460 37C4  
                                            __end_ofPL452 3BD0  
                                            __end_ofPL444 14C0  
                                            __end_ofPL436 3168  
                                            __end_ofPL428 5332  
                                            __end_ofPL380 175E  
                                            __end_ofPL372 11B0  
                                            __end_ofPL364 293C  
                                            __end_ofPL356 08C2  
                                            __end_ofPL348 149A  
                                            __end_ofPL292 5770  
                                            __end_ofPL284 3972  
                                            __end_ofPL276 3C90  
                                            __end_ofPL268 3434  
                                            __end_ofPL196 235A  
                                            __end_ofPL188 507C  
                                            __end_ofPL470 21AC  
                                            __end_ofPL462 3A3E  
                                            __end_ofPL454 11D6  
                                            __end_ofPL446 08EA  
                                            __end_ofPL438 1BC8  
                                            __end_ofPL390 1BBE  
                                            __end_ofPL382 1766  
                                            __end_ofPL374 2950  
                                            __end_ofPL366 199C  
                                            __end_ofPL358 11A8  
                                            __end_ofPL294 08A2  
                                            __end_ofPL286 2BF0  
                                            __end_ofPL278 088C  
                                            __end_ofPL198 082E  
                                            __end_ofPL472 4A32  
                                            __end_ofPL464 11E2  
                                            __end_ofPL456 236A  
                                            __end_ofPL448 5036  
                                            __end_ofPL392 08D6  
                                            __end_ofPL384 1FC2  
                                            __end_ofPL376 295A  
                                            __end_ofPL368 2946  
                                            __end_ofPL296 2E36  
                                            __end_ofPL288 4B84  
                                            __end_ofPL474 11E8  
                                            __end_ofPL466 50E8  
                                            __end_ofPL458 11DC  
                                            __end_ofPL394 2964  
                                            __end_ofPL386 4A24  
                                            __end_ofPL378 615E  
                                            __end_ofPL298 3BB4  
                                            __end_ofPL468 59AC  
                                            __end_ofPL396 2364  
                                            __end_ofPL388 49BA  
                                            __end_ofPL398 11BA  
                                         _TMR1_WriteTimer 6042  
                       TMR_OverrideRemaining@oldReloadVal 0074  
                                     LORAWAN_RxDone@fPort 03A0  
                                __size_of_RADIO_WriteMode 00C8  
                                       __end_of_AESEncode 18FC  
                                     __size_of_RADIO_Init 0186  
                        __end_of_RADIO_WriteConfiguration 117E  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 006C  
                                         __initialization 4604  
                            __size_ofi2_SwTimersInterrupt 00AE  
                                        LORAWAN_Send@port 00E1  
                             __size_of_DIO1_ISR_Lora_Init 0004  
                                     ?_MacExecuteCommands 00A8  
                                       _SPI2_Exchange8bit 612A  
                              __end_of_EUSART1_Initialize 6088  
                                            __end_of_main 3D4C  
                              AssembleEncryptionBlock@dir 0075  
                                            __end_of_rand 53CE  
                                       ?_TMR_GetDeltaTime 006A  
                                           AESCmac@padded 0130  
                                __end_of_RADIO_ReadRandom 4A1C  
                                        _SetJoinFailState 5D40  
                                 RADIO_WriteMode@blocking 006A  
                                    _UpdateJoinInProgress 5F98  
                                    _ExecuteRxTimingSetup 5D64  
                               __size_of_UpdateDLSettings 001A  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0014  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006E  
                                           AESCmac@output 00CE  
                            __end_of_RADIO_SetOutputPower 6228  
                                               ??_AESCmac 00D3  
                                          ??_RADIO_SetCRC 0064  
                                  MacExecuteCommands@done 00AD  
                                 InitDefault868Channels@i 006E  
                                                  ??_main 00F3  
                                                  ??_rand 00A2  
                                          ??_RADIO_RxDone 00ED  
                                          ??_RADIO_TxDone 00D8  
                                           __activetblptr 000003  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 6254  
                       __end_of_LORAWAN_LinkCheckCallback 300E  
                          __end_of_SetReceptionNotOkState 4D24  
                             __end_of_UpdateReceiveDelays 5942  
                         __end_of_AssembleEncryptionBlock 43E0  
                                __size_of_SPI2_Initialize 000C  
                                  ??_SystemBlockingWaitMs 0068  
                                        ??_StartReTxTimer 0094  
                                     ??_SPI2_Exchange8bit 0064  
                        CountfOptsLength@macCommandLength 006A  
                                      EncodeShiftRow@temp 0066  
                                ??_InitDefault868Channels 006E  
                             __size_of_RADIO_RegisterRead 0026  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 5942  
                                              _RxDataDone 62A4  
                                          _EnableChannels 609E  
                               ??_PrepareJoinRequestFrame 00E3  
                                          _HALSPICSAssert 6290  
                                    ??_MacExecuteCommands 00AB  
                                             ?_CheckFlags 0064  
                                 LORAWAN_TxDone@timeOnAir 00B4  
                                              _ExtractMic 5770  
                                                  ?_flash 0001  
                         __size_of_SearchAvailableChannel 00B2  
                                      ??_HALSPICSDeassert 0064  
                                  _HALResetPinOutputValue 60F2  
                                        ___llmod@dividend 0064  
                                                  ?_srand 0075  
                  __end_of_LORAWAN_ReceiveWindow1Callback 44AC  
                 __size_of_LORAWAN_ReceiveWindow1Callback 0088  
                          _LORAWAN_ReceiveWindow1Callback 4424  
                                _RADIO_FSKPacketSent$1075 00DC  
                                                  _ANSELA 000E92  
                                                  _ANSELB 000E9A  
                                                  _ANSELD 000EA7  
                                                  _ANSELE 000EAF  
                                                  _ANSELF 000EB4  
                                                  _ANSELG 000EBC  
                                         _ValidateTxPower 5DD0  
                                                  _T1GATE 000FD1  
                                                  _T1GCON 000FD0  
                                 SwTimerReadValue@timerId 0093  
                                                  _RC1STA 000F9C  
                                 TMR1_WriteTimer@timerVal 0064  
                                          _ExecuteLinkAdr 2ABA  
                                                  _ODCONA 000E90  
                                                  _ODCONB 000E98  
                                                  _RC6PPS 000E68  
                                                  _ODCONC 000EA0  
                                                  _ODCOND 000EA5  
                                                  _ODCONE 000EAD  
                                                  _ODCONF 000EB2  
                                                  _ODCONG 000EBA  
                                                  _ODCONH 000EBF  
                                                  _RD5PPS 000E6F  
                                                  _RD6PPS 000E70  
                                          __CFG_WDTCCS$SC 000000  
                                                  i2l1370 6066  
                  __end_of_LORAWAN_ReceiveWindow2Callback 3EA8  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00A4  
                          _LORAWAN_ReceiveWindow2Callback 3E04  
                                                  i2l2510 003A  
                                                  i2l2512 0046  
                                                  i2l2514 0056  
                                                  i2l2518 0060  
                           __size_of_RADIO_SetFSKSyncWord 002C  
                                                  i2l9894 38E8  
                                                  i2l9896 3902  
                                                  _OSCFRQ 000E49  
                                       ??_RADIO_GetStatus 0064  
                        __size_of_ValidateChannelMaskCntl 0018  
                                                  _TX1STA 000F9D  
                         __size_of_InitDefault433Channels 003C  
                                                  _TRISC2 007C1A  
                                           ?_LORAWAN_Init 00AC  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 0073  
                                           ?_LORAWAN_Send 00E1  
                         __size_of_AutomaticReplyCallback 001A  
                              __size_of_LORAWAN_RxTimeout 0206  
                                       ?_ExecuteDevStatus 0064  
                              __end_of_DIO0_ISR_Lora_Init 6288  
                                __size_ofi2_TMR_SwapTimer 0034  
                                       ExecuteLinkAdr@ptr 0071  
                           __size_of_RADIO_WriteFrequency 00CC  
                                                  _STable FE6D  
                             RADIO_WriteFrequency@num_mod 0075  
                                     LORAWAN_TxDone@delta 00C7  
                                          __CFG_PWRTE$OFF 000000  
                             __size_of_ComputeSessionKeys 0042  
                                               AESCmac@k1 0110  
                                               AESCmac@k2 0100  
                               __end_of_SPI2_Exchange8bit 613C  
                                     LORAWAN_TxDone@found 00C6  
                                         _CheckMcastFlags 50E8  
                                     LORAWAN_TxDone@minim 00D3  
                                      ??_ExecuteDevStatus 0066  
                                                  _Random 5DF2  
                                          __CFG_XINST$OFF 000000  
                                     LORAWAN_TxDone@ticks 00CF  
                      SearchAvailableChannel@randomNumber 00B3  
                    __end_of_TMR1_DefaultInterruptHandler 62A8  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 62A6  
                                             ?_GetRx1Freq 0064  
                           ValidateDataRange@dataRangeNew 0067  
                                 _RADIO_FHSSChangeChannel 5A72  
                                               ??___abdiv 0065  
                                                  ___lmul 5468  
                                  ?_RADIO_WriteFSKBitRate 0071  
                                 __end_of_TMR1_StartTimer 627C  
                                   ?_UpdateJoinInProgress 0001  
                                                  ___wmul 5C82  
                             ?_LORAWAN_LinkCheckConfigure 00A0  
                                   ?_ExecuteRxTimingSetup 006B  
                                          __CFG_STVREN$ON 000000  
                                    _FindSmallestDataRate 47B4  
                                               ??___lldiv 006C  
                                               ??___llmod 006C  
                                               ??___lwmod 00A6  
                      RADIO_SetChannelFrequency@frequency 0064  
                                         StartReTxTimer@i 009C  
                               ExecuteRxParamSetupReq@ptr 00A0  
                                  __size_of_LORAWAN_Reset 011A  
                                                  _memcpy 5140  
                                                  _memset 5C30  
                                                  clear_0 464C  
                                                  clear_1 465E  
                                                  clear_2 466A  
                                                  clear_3 4676  
                                                  clear_4 4682  
                                                  clear_5 468E  
                                 SwTimerIsRunning@timerId 0064  
                                                  flash@x 0065  
                             __size_of_DIO5_ISR_Lora_Init 0004  
                                             ?_FillSubKey 0064  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0064  
                                         ?_RxJoinResponse 0001  
                                 __size_of_EncodeShiftRow 00B2  
                                  __end_of_EnableChannels 60B4  
                              ??_RADIO_UnhandledInterrupt 0068  
                                            ??_HALSPISend 0065  
                    __end_of_INT2_DefaultInterruptHandler 62AC  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 62AA  
                                            __pdataCOMRAM 0056  
                                  __end_of_HALSPICSAssert 6294  
                       __size_of_RADIO_SetSpreadingFactor 0008  
                            __size_of_ValidateChannelMask 002E  
                                           ??_SwTimerStop 0064  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0064  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 008B  
                                      ??_SwTimerIsRunning 0064  
                                          ?_TMR_SwapTimer 006A  
                                       ?_ExecuteDutyCycle 0064  
                                      ??_ExecuteLinkCheck 0066  
                                            __mediumconst FE6C  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0075  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 008F  
                                         _UpdateDataRange 42D8  
                                  __end_of_ExecuteLinkAdr 2BD6  
                                      ??_ExecuteDutyCycle 0066  
              IOCBF4_SetInterruptHandler@InterruptHandler 0064  
                TMR1_SetInterruptHandler@InterruptHandler 0064  
                INT3_SetInterruptHandler@InterruptHandler 0064  
                INT0_SetInterruptHandler@InterruptHandler 0064  
                INT2_SetInterruptHandler@InterruptHandler 0064  
                INT1_SetInterruptHandler@InterruptHandler 0064  
                      __end_of_LORAWAN_SetChannelIdStatus 5ACE  
                              _LORAWAN_SetChannelIdStatus 5AA0  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 008D  
                                           AESEncode@aux2 008C  
                                           AESEncode@aux3 008E  
                                 __end_of_TMR1_WriteTimer 6050  
                                   __end_of_SwTimerCreate 5668  
                                            ??_IOCBF4_ISR 0001  
                          ??_SelectChannelForTransmission 00B5  
                                             ?_ComputeMic 00DA  
                           __size_of_INTERRUPT_Initialize 0004  
                                   __end_of_TMR1_CallBack 5F2C  
                               ExecuteDutyCycle@maxDCycle 0069  
                                       ??_RADIO_RxTimeout 00C4  
                                        ?_TMR1_Initialize 0001  
                             UpdateFrequency@frequencyNew 0064  
                                       _SYSTEM_Initialize 5E34  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 00B8  
                                          ??_LORAWAN_Init 00B0  
                                          ??_LORAWAN_Join 00EC  
                                          ??_LORAWAN_Send 00E5  
                          __size_of_RADIO_FSKPayloadReady 0082  
                                              __accesstop 0060  
                                 __end_of__initialization 4694  
                           __end_of_RADIO_FSKPayloadReady 45E8  
                                          _RADIO_Transmit 1DE0  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                    LORAWAN_RxDone@buffer 016B  
                                  RADIO_ReadRandom@retVal 0072  
                                        _ConfigureRadioRx 5CCE  
                                    __size_of_RADIO_Reset 002E  
                                        _ConfigureRadioTx 56EC  
                                     ExecuteDevStatus@ptr 0064  
                        ??_UpdateReceiveWindow2Parameters 0069  
                         ?_UpdateReceiveWindow2Parameters 0064  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 03A9  
                                          _maxPayloadSize FF6D  
                           RADIO_SetLoRaSyncWord@syncWord 0064  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0066  
                               ExecuteLinkAdr@channelMask 0074  
                                      __end_of_HALSPISend 6200  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 094A  
                                  _SearchAvailableChannel 4022  
                                 ValidateChannelId@result 0065  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 5A14  
                                     ??_SYSTEM_Initialize 0068  
                              __end_of_DIO4_ISR_Lora_Init 629E  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 003A  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 0DB6  
                                           __end_of_flash 56AA  
                                       ??_RADIO_WriteMode 006B  
                                         _spreadingFactor FF9B  
                               __size_of_LORAWAN_Mainloop 003C  
                                        ??_EncKeySchedule 0065  
                                __end_of_RADIO_WritePower 3A38  
                                 ?_ExecuteRxParamSetupReq 00A0  
                                           __end_of_srand 617A  
                                              __end_ofPL2 2BE6  
                                              __end_ofPL4 0CF2  
                                              __end_ofPL6 436E  
                                              __end_ofPL8 0D26  
                                       LORAWAN_RxDone@hdr 03B2  
                                            ??_RADIO_DIO0 00EF  
                                            ??_RADIO_DIO1 00C4  
                                            ??_RADIO_DIO2 007D  
                                            ??_RADIO_DIO3 0069  
                                            ??_RADIO_DIO4 0069  
                                            ??_RADIO_DIO5 0069  
                                  _InitDefault433Channels 5036  
                                         _UpdateFrequency 5CA8  
                                  _AutomaticReplyCallback 5F64  
                                      __end_of_IOCBF4_ISR 5DD0  
                                ??_INTERRUPT_GetDioStatus 0064  
                                            ??_RADIO_Init 0083  
                               SwTimerSetCallback@timerId 0067  
                              LORAWAN_RxDone@channelIndex 03A1  
                          AssembleEncryptionBlock@blockId 0072  
                             __size_of_EXT_INT_Initialize 004A  
                                         _UpdateDutyCycle 5B56  
                                         ?_EnableChannels 006E  
                                 ??_TMR_OverrideRemaining 0070  
                                 __end_of_ValidateTxPower 5DF2  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 629E  
                            __end_of_HALResetPinMakeInput 629C  
                                 __size_of_TMR1_ReadTimer 0020  
                        __end_of_INT2_SetInterruptHandler 61B0  
                                        RADIO_DIO0@opMode 00F2  
                             RADIO_RegisterRead@readValue 0067  
                                             ?_RxDataDone 0064  
                      __end_of_IncludeMacCommandsResponse 217C  
                              _IncludeMacCommandsResponse 1FC8  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 0040  
                                UpdateCfList@bufferLength 00A4  
                             ?_IOCBF4_SetInterruptHandler 0064  
                                   LORAWAN_Send@confirmed 00E7  
                                             ?_ExtractMic 006E  
                                                 ??_flash 0064  
                                         ?_ExecuteLinkAdr 0071  
                                        _ValidateDataRate 60DE  
                         LORAWAN_GetMaxPayloadSize@result 006E  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 5E54  
                      __size_of_RADIO_SetChannelFrequency 0082  
                                                 ??_srand 0077  
                                  __end_of_RADIO_Transmit 1F80  
                                       ??_SPI2_Initialize 0064  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _LORAWAN_Reset 27FE  
                              ?_RADIO_SetChannelFrequency 0064  
                                              __pbssBANK1 016E  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                     __end_of_SwTimerStop 614E  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 5132  
                                  __end_of_maxPayloadSize FF75  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                      SwTimersInterrupt@i 008A  
                                    _RADIO_SetOutputPower 6220  
                                              __pnvCOMRAM 005E  
                                    __end_of_RADIO_SetCRC 61E2  
                                 ??_HALResetPinMakeOutput 0064  
                                    __end_of_RADIO_RxDone 3F70  
                              __end_of_RADIO_RxFSKTimeout 59A6  
                                    __end_of_RADIO_TxDone 4566  
                                     __size_of_FillSubKey 004A  
                                      __end_of_RADIO_DIO0 4D98  
                                      __end_of_RADIO_DIO1 589E  
                                      __end_of_RADIO_DIO2 5624  
                                      __end_of_RADIO_DIO3 6012  
                                      __end_of_RADIO_DIO4 5FFA  
                                      __end_of_RADIO_DIO5 5FE2  
                               ??_RADIO_FHSSChangeChannel 007D  
                             __size_of_SwTimerSetCallback 001C  
                               RADIO_SetOutputPower@power 0064  
                              __size_of_SPI2_Exchange8bit 0012  
                                      __end_of_RADIO_Init 24F0  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 00B4  
                                                 ?_Random 00A7  
                                       ?_CountfOptsLength 0001  
                               ?_LORAWAN_SetDeviceAddress 0064  
                                        i2_TMR1_ReadTimer 5EB4  
                                          FillSubKey@size 0068  
                                         _EnableChannels1 5090  
                                __size_of_HALDIO5PinValue 0006  
                            __size_of_RADIO_RegisterWrite 001E  
                                  ??_UpdateJoinInProgress 0064  
                        __size_of_AssembleEncryptionBlock 0060  
                                  ??_ExecuteRxTimingSetup 006D  
                                        FillSubKey@source 0064  
            SelectChannelForTransmission@transmissionType 00B5  
                                                 ?___lmul 0094  
                  AssembleEncryptionBlock@multicastStatus 0074  
                          __end_of_ExecuteRxParamSetupReq 315E  
                                      ??_CountfOptsLength 0064  
                                                 ?___wmul 0064  
                                        ?_TMR1_StartTimer 0001  
                                      EncryptFRMPayload@i 00B8  
                                      EncryptFRMPayload@j 00B9  
                                      EncryptFRMPayload@k 00B7  
                                              ??_TMR1_ISR 0028  
                                         __CFG_PPS1WAY$ON 000000  
                                       ??i2_TMR_SwapTimer 0009  
                                    ??_DIO3_ISR_Lora_Init 0064  
                                        _UpdateDLSettings 5F7E  
                                        _ValidateRxOffset 60CA  
                                                 ?_memcpy 0064  
                                                 ?_memset 0064  
                                          ___lmul@product 009C  
                                       _TMR_ISR_Lora_Init 6186  
                        ??_IOCBF4_DefaultInterruptHandler 0001  
                         ?_IOCBF4_DefaultInterruptHandler 0001  
                                          _SSP2DATPPSbits 000E1D  
                                  RADIO_RegisterWrite@reg 0067  
                                     __size_of_ComputeMic 004A  
                                  RADIO_Transmit@regValue 00B9  
                            __size_of_RADIO_SetModulation 0008  
                                     _RADIO_FSKPacketSent 3364  
                                                 _AESCmac 11E8  
                                  ComputeMic@bufferLength 00DE  
                                 __end_of_UpdateDataRange 435E  
                                         ??_TMR_SwapTimer 006C  
                                RADIO_WriteFSKBitRate@num 0075  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0066  
                                                 i2l10550 573A  
                                                 i2l10580 4168  
                                                 i2l10574 4122  
                                                 i2l10568 40F4  
                                                 i2l10578 4166  
                                                 i2l16298 5DCA  
                                    EncryptFRMPayload@dir 00A7  
                                      _RADIO_GetPacketSnr 6254  
                                    EncryptFRMPayload@key 00AC  
                                   __end_of_UpdateTxPower 6218  
                                                 _SP1BRGH 000F9B  
                                                 _SP1BRGL 000F9A  
                                     _RADIO_SetIQInverted 61CE  
                                                 _OSCCON1 000E43  
                                                 _OSCCON3 000E45  
                                 __size_of_ConfigureRadio 0070  
                                                 _OSCTUNE 000E48  
                             __size_ofi2_TMR_GetDeltaTime 0078  
                                     i2_SwTimersInterrupt 40D4  
                                                 _SSP2ADD 000ED6  
                                                 _PPSLOCK 000DEF  
                                                 _SSP2BUF 000ED5  
                                     ??_TMR_ISR_Lora_Init 0066  
                                       __end_of_bandwidth FF94  
                  UpdateReceiveWindow2Parameters@dataRate 0068  
                                __end_of_SetJoinFailState 5D64  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0069  
                                  ValidateDataRate@result 0065  
                                        ?_TMR1_WriteTimer 0064  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0064  
                                         ?_RADIO_Transmit 00AA  
                                 _ValidateChannelMaskCntl 6012  
                                         ___abdiv@counter 0065  
                                     StartReTxTimer@minim 0098  
                              AssemblePacket@bufferLength 0169  
                            PrepareSessionKeys@sessionKey 006E  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 006A  
                       __end_of_RADIO_SetChannelFrequency 4940  
                             PrepareJoinRequestFrame@iCtr 00EB  
                       __end_of_SetCallbackSoftwareTimers 4214  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 3268  
                             PrepareJoinRequestFrame@mhdr 00E9  
                                  __size_of_AESEncodeLoRa 0026  
                       __size_of_INT0_SetInterruptHandler 0002  
                           __size_of_LORAWAN_PlatformInit 0020  
                       __size_of_INT3_SetInterruptHandler 0002  
                               ?_INT0_SetInterruptHandler 0064  
                               ?_INT3_SetInterruptHandler 0064  
                                          _ticksAccounted 0034  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00CC  
                                              AESCmac@ptr 0160  
                                 __end_of_spreadingFactor FFA2  
                           UpdateCurrentDataRate@valueNew 0064  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00E5  
                                  _InitDefault868Channels 5592  
                                RADIO_RegisterWrite@value 0066  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0064  
                                LORAWAN_Send@bufferLength 00E4  
                                   _StopAllSoftwareTimers 53CE  
                                         __size_of_Random 0022  
                              __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                                    ?i2_SwTimersInterrupt 0017  
                                 __end_of_UpdateFrequency 5CCE  
                                     AssemblePacket@fCtrl 00DE  
                                                 ___abdiv 51EC  
                                     __size_of_RxDataDone 0002  
                                              AESEncode@i 008F  
                                               _AESEncode 1766  
                                  ValidateRxOffset@result 0065  
                               __end_of_TMR_ISR_Lora_Init 6192  
                                         __size_of___lmul 004C  
                             __size_of_DIO2_ISR_Lora_Init 0002  
                                 __end_of_UpdateDutyCycle 5B72  
                                                 ___lldiv 4AAA  
                                     __size_of_ExtractMic 003E  
                                         __size_of___wmul 0026  
                                    ??_RADIO_GetPacketSnr 0064  
                                                 ___llmod 4E5E  
                                       ?_RADIO_ReadRandom 0070  
                                                 ___lwmod 57AE  
                               SwTimerIsRunning@isRunning 0065  
                                 ??_RADIO_SetLoRaSyncWord 0064  
                                    ValidateChannelMask@i 0066  
                                                 __pcinit 4604  
                      __size_of_LORAWAN_GetMaxPayloadSize 0030  
                                                 _appSKey 01CD  
                                         __size_of_memcpy 0058  
                              __end_of_RADIO_ReceiveStart 2332  
                                   RADIO_Init@radioBuffer 007D  
                                         __size_of_memset 002A  
                                                 __ramtop 0E00  
                        EncryptFRMPayload@multicastStatus 00B1  
                                      ??_RADIO_ReadRandom 0072  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0064  
                                                 __ptext0 3C90  
                                                 __ptext1 5E14  
                                                 __ptext2 5668  
                                                 __ptext3 5E34  
                                                 __ptext4 56AA  
                                                 __ptext5 6278  
                                                 __ptext6 617A  
                                                 __ptext7 3530  
                                                 __ptext8 6192  
                                                 __ptext9 6106  
                                    __end_of_LORAWAN_Init 5468  
                                    __end_of_LORAWAN_Join 47B4  
                                    __end_of_LORAWAN_Send 4022  
                                           _DIO0_ISR_Lora 000000  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 0070  
                                          _EncodeShiftRow 3A3E  
                              ExecuteNewChannel@frequency 00A3  
                         __size_of_INTERRUPT_GetDioStatus 000E  
                                               _T1CONbits 000FCF  
                      SelectChannelForTransmission@result 00B6  
                                 __size_of_LORAWAN_RxDone 0660  
                                   _OSCILLATOR_Initialize 6106  
                          __end_of_UpdateJoinSuccessState 3C5C  
                                 __size_of_LORAWAN_TxDone 03F8  
                              __end_of_RADIO_SetBandwidth 6240  
                                         _RADIO_GetStatus 625A  
                                        ?_ValidateTxPower 0001  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen FF9B  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 000000  
                                      _EUSART1_Initialize 6072  
                                             _SwTimerStop 613C  
                                                 _payload 01BB  
                                ??_PIN_MANAGER_Initialize 0066  
                               ?_TMR1_SetInterruptHandler 0064  
                                                 _nwkSKey 01DD  
                                               _IOCBFbits 000E93  
                             IncludeMacCommandsResponse@i 006E  
                                           ?_UpdateCfList 00A0  
                                       _ExecuteNewChannel 268A  
                                               _IOCBNbits 000E94  
                                               _IOCBPbits 000E95  
                             __size_of_PrepareSessionKeys 0046  
                                            ??_CheckFlags 0066  
                           RADIO_SetModulation@modulation 0064  
                                 UpdateDLSettings@dlRx2Dr 0065  
                               __size_of_TMR_GetDeltaTime 007C  
                                           _DIO2_ISR_Lora 000000  
                              __size_of_SYSTEM_Initialize 0020  
                    __end_of_LORAWAN_SetNetworkSessionKey 5C82  
                   __size_of_LORAWAN_SetNetworkSessionKey 0028  
                            _LORAWAN_SetNetworkSessionKey 5C5A  
                                      ?_ExecuteNewChannel 00A0  
                                              _sendPacket 5E14  
                              RADIO_WriteMode@currentMode 006D  
                                        ComputeMic@buffer 00DC  
                                    end_of_initialization 4694  
                                 _CreateAllSoftwareTimers 5290  
                                     SwTimerCreate@retVal 0064  
                                _INT2_SetInterruptHandler 61A6  
                                   ??_RADIO_FSKPacketSent 00D8  
                                     ?_EUSART1_Initialize 0001  
                                          _GenerateSubkey 344E  
                                   _RADIO_WatchdogTimeout 58D6  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation FF75  
                                        ?_CheckMcastFlags 0064  
                                  ExtractMic@bufferLength 0070  
                                                 memcpy@d 006A  
                                                 memcpy@n 0068  
                                                 memcpy@s 006C  
                                 __end_of_EnableChannels1 50E0  
                                                 memset@c 0066  
                                                 memset@n 0068  
                                                 memset@p 006A  
                               _LORAWAN_LinkCheckCallback 2F54  
                                          ??_SwTimerStart 008B  
                                     ??_ExecuteNewChannel 00A2  
                                               i2u1097_40 574A  
                                   _UpdateCurrentDataRate 6218  
                                   _UpdateChannelIdStatus 3B08  
                                 ??_RADIO_WriteFSKBitRate 0075  
                                   ??_RADIO_SetIQInverted 0064  
                              __end_of_DIO1_ISR_Lora_Init 6284  
                                         ___lldiv@divisor 0068  
                                               i2u1946_48 5DB8  
                                               i2u1947_40 5DA2  
                                     _ValidateChannelMask 5ACE  
                                              _ticksAdded 0038  
                             HALResetPinOutputValue@value 0064  
                                EncodeShiftRow@stateTable 0064  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0064  
                                         ___lldiv@counter 0070  
                                           _DIO5_ISR_Lora 000000  
                             TMR_OverrideRemaining@tmrVal 0072  
                                   ??i2_SwTimersInterrupt 001B  
                                ExecuteLinkAdr@redundancy 0077  
                                       GenerateSubkey@key 00A4  
                                    _HALResetPinMakeInput 6298  
                                            ??_GetRx1Freq 0068  
                           UpdateDLSettings@dlRx1DrOffset 0064  
                              LORAWAN_Init@RxJoinResponse 00AE  
                              LORAWAN_RxDone@bufferLength 016D  
                        __end_of_RADIO_SetSpreadingFactor 6230  
                      AssembleEncryptionBlock@bufferIndex 0076  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 006A  
                                         _SystemTimerInit 6248  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                        ??_RxJoinResponse 0064  
                                        _LORAWAN_Mainloop 57EC  
                            __end_of_RADIO_SetFSKSyncWord 5BDA  
                                      LORAWAN_Join@result 00ED  
                                      __end_of_CheckFlags 5538  
                                    ??_EUSART1_Initialize 0064  
                               ValidateTxPower@txPowerNew 0065  
                                   __CFG_WDTCPS$WDTCPS_31 000000  
                                          AESEncode@block 006A  
                       SearchAvailableChannel@maxChannels 00B2  
                                  __end_of_EncodeShiftRow 3AF0  
                                      _DIO0_ISR_Lora_Init 6284  
                                       ??_HALDIO5PinValue 0064  
                                   _INT1_InterruptHandler 01ED  
                                               _PORTBbits 000F8A  
                                            ??_FillSubKey 0069  
                                        RxDataDone@status 0067  
                            SwTimersInterrupt@timeElapsed 0082  
                                           _AESEncodeLoRa 5CF4  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 3890  
                              __end_of_RADIO_RegisterRead 5D40  
                       __end_of_LORAWAN_GetMaxPayloadSize 5858  
                          __end_of_HALResetPinOutputValue 6106  
                                        ?_UpdateDataRange 0064  
                                __end_of_ConfigureRadioRx 5CF4  
                                __end_of_ConfigureRadioTx 572E  
                                         _RADIO_RxTimeout 5B2A  
                          UpdateChannelIdStatus@channelId 0066  
                               __end_of_ExecuteNewChannel 27C8  
                                        EnableChannels1@i 006D  
                                 __size_of_AssemblePacket 024C  
                                    ?_ValidateChannelMask 0064  
                                       _SwTimerSetTimeout 589E  
                                          _TMR1_ReadTimer 5E94  
                                          ??_UpdateCfList 00A2  
                                              _txPower868 FFA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00AB  
                           __size_of_SystemBlockingWaitMs 002A  
                               ??_ValidateChannelMaskCntl 0064  
                                      ?_SwTimerSetTimeout 0071  
                             __size_of_MacExecuteCommands 017E  
                                    ExecuteNewChannel@ptr 00A0  
                                ??_UpdateMinMaxChDataRate 0064  
                                  __end_of_GenerateSubkey 3506  
                                           RADIO_RxDone@i 00EE  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00DF  
                             ?_LORAWAN_SetChannelIdStatus 0068  
                                        __CFG_FEXTOSC$OFF 000000  
                                          _localDioStatus 0174  
                                      __end_of_GetRx1Freq 612A  
                                   __size_of_RADIO_RxDone 00B6  
                                            ??_ComputeMic 00DF  
                            __size_of_UpdateReceiveDelays 0036  
                                   __size_of_RADIO_TxDone 00A0  
                                  ??_RADIO_SetOutputPower 0064  
                         EncryptFRMPayload@macBufferIndex 00AE  
                           ?_LORAWAN_SetNetworkSessionKey 006E  
                                 UpdateMinMaxChDataRate@i 0065  
                                 LORAWAN_Reset@ismBandNew 00AB  
                               __size_of_SwTimerIsRunning 0016  
                              __end_of_ComputeSessionKeys 4CA8  
                                     ??_SwTimerSetTimeout 0075  
                                __size_of_SwTimersExecute 006E  
                               __size_of_ExecuteLinkCheck 001E  
                                  _INTERRUPT_GetDioStatus 615E  
                                         _RADIO_WriteMode 36EA  
                              ??_RADIO_WriteConfiguration 00A2  
                                   SPI2_Exchange8bit@data 0064  
                                 ?_SearchAvailableChannel 00A9  
                               __size_of_SwTimerReadValue 0034  
                             RADIO_FSKPacketSent@irqFlags 00E0  
                               __size_of_ExecuteDutyCycle 004E  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00DC  
                                      __end_of_FillSubKey 5592  
                                 _AssembleEncryptionBlock 4380  
                                       __size_of_INT1_ISR 0006  
                                       __size_of_INT2_ISR 0006  
                                    ??_DIO0_ISR_Lora_Init 0066  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable FF6D  
                                     AESEncodeLoRa@useKey 0094  
                              SwTimerSetCallback@callback 0064  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0064  
                                        ?_UpdateFrequency 0064  
                                      LORAWAN_Send@buffer 00E2  
                                          __end_of_Random 5E14  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 000C  
                                __end_of_ValidateDataRate 60F2  
                            __end_of_INTERRUPT_Initialize 628C  
                          EnableChannels1@channelMaskCntl 006A  
                          EnableChannels1@channelIndexMax 006C  
                          EnableChannels1@channelIndexMin 006B  
                     LORAWAN_SetChannelIdStatus@channelId 006A  
                                        ?_UpdateDutyCycle 0064  
                            _INT0_DefaultInterruptHandler 000000  
                              __end_of_DIO5_ISR_Lora_Init 6280  
                                 __end_of_RADIO_GetStatus 6260  
                                          __end_of___lmul 54B4  
                                      LORAWAN_Send@result 00E6  
                                        ??_EnableChannels 0071  
                               i2TMR1_WriteTimer@timerVal 0001  
                                          __end_of___wmul 5CA8  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0064  
                     TMR_OverrideRemaining@ticksRemaining 006C  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 6200  
                                         ?_EncodeShiftRow 0064  
                                          ?_AESEncodeLoRa 0090  
                                       __size_of_TMR1_ISR 0024  
                                      __end_of_ComputeMic 5288  
                                               Random@max 00A7  
                                          __end_of_memcpy 5198  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 58D6  
                                  __end_of_TMR1_ReadTimer 5EB4  
                                          __end_of_memset 5C5A  
                                         _SPI2_Initialize 617A  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0068  
                                            _RADIO_SetCRC 61D8  
                                   ??_ValidateChannelMask 0066  
                                        ??_ExecuteLinkAdr 0073  
                                   UpdateCfList@frequency 00A5  
                                            _RADIO_RxDone 3EBA  
                                            _RADIO_TxDone 44C6  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006E  
                                             __end_ofPL10 3E04  
                                             __end_ofPL20 2CEC  
                                             __end_ofPL12 4380  
                                             __end_ofPL30 2A90  
                                             __end_ofPL22 0D3A  
                                             __end_ofPL14 218A  
                                             __end_ofPL40 2D08  
                                             __end_ofPL32 233C  
                                             __end_ofPL24 06FA  
                                             __end_ofPL16 219A  
                                             __end_ofPL50 2D14  
                                             __end_ofPL42 0726  
                                             __end_ofPL34 071C  
                                             __end_ofPL26 2CFA  
                                             __end_ofPL18 3B9E  
                                             __end_ofPL60 0D7C  
                                             __end_ofPL52 0732  
                                             __end_ofPL44 3042  
                                             __end_ofPL36 4718  
                                             __end_ofPL28 070A  
                                             __end_ofPL70 3C88  
                                             __end_ofPL62 3056  
                                             __end_ofPL54 4898  
                                             __end_ofPL46 3C6E  
                                             __end_ofPL38 341E  
                                             __end_ofPL80 2AA2  
                                             __end_ofPL72 5B82  
                                             __end_ofPL64 3B08  
                                             __end_ofPL56 48A2  
                                             __end_ofPL48 0D46  
                                             __end_ofPL90 2AB0  
                                             __end_ofPL82 1BAC  
                                             __end_ofPL74 190A  
                                             __end_ofPL66 0D84  
                                             __end_ofPL58 3AFE  
                                             __end_ofPL92 0740  
                                             __end_ofPL84 48BE  
                                             __end_ofPL76 1918  
                                             __end_ofPL68 2D1E  
                                             __end_ofPL94 4728  
                                             __end_ofPL86 5B56  
                                             __end_ofPL78 2F1C  
                                             __end_ofPL96 0762  
                                             __end_ofPL88 0D8E  
                                             __end_ofPL98 0D9E  
                                     start_initialization 4604  
                                          _ConfigureRadio 4940  
                                      LORAWAN_RxDone@mhdr 03A2  
                                      LORAWAN_RxDone@temp 03A8  
                                            ??_RxDataDone 0068  
                                      _DIO4_ISR_Lora_Init 629C  
                                __end_ofi2_TMR1_ReadTimer 5ED4  
                          __size_of_TMR_OverrideRemaining 0078  
                                     _RADIO_RegisterWrite 5EF2  
                                            AESCmac@mLast 0120  
                               ??_CreateAllSoftwareTimers 0065  
                                    RxDataDone@dataLength 0066  
                         __size_of_PIN_MANAGER_Initialize 00D2  
                            _INT3_DefaultInterruptHandler 000000  
                           __end_of_TMR_OverrideRemaining 4AAA  
                             ?_IncludeMacCommandsResponse 0064  
                                   __end_of_INT1_CallBack 5F64  
                                            ??_ExtractMic 0072  
                    EncryptFRMPayload@bufferToBeEncrypted 00AF  
                                            AESCmac@input 00D0  
                        __end_of_LORAWAN_SetDeviceAddress 5FCA  
                                         ?_GenerateSubkey 00A4  
                            ?_RADIO_SetFrequencyHopPeriod 0064  
                                         LORAWAN_TxDone@i 00D7  
                                             ?_sendPacket 0001  
                                   LORAWAN_Init@RxPayload 00AC  
                     AssembleEncryptionBlock@frameCounter 006E  
                                 i2TMR_SwapTimer@timerVal 0007  
                                   __end_of_INT2_CallBack 5F48  
                                           ??_RADIO_Reset 0069  
                                __end_of_UpdateDLSettings 5F98  
                              SwTimerStart@ticksRemaining 008F  
                                  RADIO_WriteMode@newMode 006E  
                                __end_of_ValidateRxOffset 60DE  
                             ??_RADIO_SetChannelFrequency 0068  
                             ??_SetCallbackSoftwareTimers 0068  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 6230  
                           ExecuteNewChannel@channelIndex 00A7  
                          __end_of_SearchAvailableChannel 40D4  
                                        ?_EnableChannels1 0068  
                                         i2_TMR_SwapTimer 572E  
                                 __size_of_StartReTxTimer 00DC  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0064  
                                         ___llmod@divisor 0068  
                              MacExecuteCommands@fOptsLen 00AA  
                                 __end_of_SystemTimerInit 624E  
                          UpdateChannelIdStatus@statusNew 0064  
                       __size_of_RADIO_UnhandledInterrupt 0020  
                                         ___llmod@counter 006C  
                                            _JoinedServer 0172  
                                     TMR_SwapTimer@oldVal 0040  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 0008  
                                     TMR_SwapTimer@retVal 0042  
                                   _RADIO_FSKPayloadReady 4566  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 6298  
                                                ??_Random 00A9  
                                                AESCmac@i 0165  
                                                AESCmac@j 0164  
                                        __CFG_LPBOREN$OFF 000000  
                                                AESCmac@n 0163  
                                                AESCmac@x 0150  
                                                AESCmac@y 0140  
                              SwTimerReadValue@ticksCount 008F  
                                    ?_RADIO_RegisterWrite 0066  
                          __end_of_InitDefault433Channels 5072  
                          __end_of_AutomaticReplyCallback 5F7E  
                                     RADIO_Init@frequency 007F  
                                __size_of_TMR1_Initialize 0042  
                                    _macEndDevCmdReplyLen FF94  
                                                ??___lmul 009C  
                                             ??_AESEncode 006D  
                       RADIO_WriteConfiguration@tempValue 00A5  
                                   __size_of_LORAWAN_Init 004C  
                      __size_of_AckRetransmissionCallback 00FC  
                                   __size_of_LORAWAN_Join 008C  
                                                ??___wmul 0068  
                                   __size_of_LORAWAN_Send 00B2  
                                 __end_of_RADIO_RxTimeout 5B4A  
                                MacExecuteCommands@buffer 00A8  
                                      __end_of_RxDataDone 62A6  
                                ??_SetReceptionNotOkState 00B4  
                                          ??_TMR_ISR_lora 0028  
                                             __pdataBANK1 01BD  
                                       _ValidateDataRange 59AC  
                                      __end_of_ExtractMic 57AE  
                i2SwTimersInterrupt@ticksToNextTimerEvent 0023  
                  SwTimersInterrupt@ticksToNextTimerEvent 0086  
                                                ??_memcpy 006A  
                                  __size_of_SwTimerCreate 0044  
                                                ??_memset 006A  
                                    ??_DIO4_ISR_Lora_Init 0064  
                              __end_of_EXT_INT_Initialize 54FE  
                                       _ValidateChannelId 5ED4  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 6228  
                                      _RADIO_RxFSKTimeout 5978  
                                                ?_AESCmac 00CC  
                                  __size_of_TMR1_CallBack 001C  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0064  
                                            AESEncode@aux 008B  
                                            AESEncode@key 0075  
                                  TMR_GetDeltaTime@retVal 0030  
                                         ?_TMR1_ReadTimer 0064  
                                  __end_of_ConfigureRadio 49B0  
                                          _LORAWAN_RxDone 008A  
                                      ?_ValidateChannelId 0064  
                                  TMR_GetDeltaTime@tmrVal 003E  
                                          _LORAWAN_TxDone 08EA  
                              __size_of_ExecuteNewChannel 013E  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 006D  
                                    __end_of_SwTimerStart 4C66  
                  __end_of_LORAWAN_EnterContinuousReceive 4F0A  
                 __size_of_LORAWAN_EnterContinuousReceive 004A  
                          _LORAWAN_EnterContinuousReceive 4EC0  
                                             __pbssBIGRAM 04E0  
                                   TMR1_ISR@CountCallBack 003C  
                               __size_of_CountfOptsLength 0052  
                                       CountfOptsLength@i 006B  
                                             __pbssCOMRAM 0030  
                              __end_of_DefaultChannels433 FFD2  
                              __end_of_DefaultChannels868 FFFC  
                                        ??_RADIO_Transmit 00AD  
                        __end_of_INT0_SetInterruptHandler 62A4  
                                      LORAWAN_RxTimeout@i 00C3  
                        __end_of_INT3_SetInterruptHandler 62A2  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A0  
                                     ??_ValidateDataRange 0066  
                                        _TMR_GetDeltaTime 422E  
                           EnableChannels@channelMaskCntl 0070  
                                 __end_of_RADIO_WriteMode 37B2  
                 __end_of_UnconfirmedTransmissionCallback 4B6E  
                __size_of_UnconfirmedTransmissionCallback 004E  
                         _UnconfirmedTransmissionCallback 4B20  
                                 SearchAvailableChannel@i 00B4  
                                     ??_ValidateChannelId 0065  
                                   RADIO_RegisterRead@reg 0066  
                         __size_of_UpdateMinMaxChDataRate 006A  
                                 _RADIO_ReceiveStart$1059 00B0  
                     LORAWAN_SetChannelIdStatus@statusNew 0068  
                                               _aesBuffer 01AB  
                                 INTERRUPT_GetDioStatus@a 0064  
                  __end_of_IOCBF4_DefaultInterruptHandler 62AA  
                 __size_of_IOCBF4_DefaultInterruptHandler 0002  
                          _IOCBF4_DefaultInterruptHandler 62A8  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 0093  
                           ??_RADIO_SetFrequencyHopPeriod 0066  
                                    _RADIO_SetFSKSyncWord 5BAE  
                             RADIO_SetBandwidth@bandwidth 0064  
                              __end_of_SwTimerSetCallback 5BF6  
       __end_of_ResetParametersForUnconfirmedTransmission 61CE  
      __size_of_ResetParametersForUnconfirmedTransmission 000A  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0064  
               _ResetParametersForUnconfirmedTransmission 61C4  
                               ??_AssembleEncryptionBlock 0075  
                                   _INT2_InterruptHandler 01EF  
                                               _bandwidth FF8D  
                                      ??_SetJoinFailState 0064  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 541C  
                                            _LORAWAN_Join 4728  
                                            _LORAWAN_Send 3F70  
                                  RADIO_FSKPayloadReady@i 00EE  
                                       _ValidateFrequency 4F7E  
                                               __pnvBANK1 01ED  
                                  ??_HALResetPinMakeInput 0064  
                                    _RADIO_WriteFrequency 37C4  
                                         FillSubKey@carry 006A  
                                        _HALSPICSDeassert 628C  
                          ??_LORAWAN_SetNetworkSessionKey 0070  
                                     __end_of_RADIO_Reset 5B2A  
                                   ??_RADIO_RegisterWrite 0067  
                                  _PIN_MANAGER_Initialize 3530  
                                           FillSubKey@key 0066  
                                      ?_ValidateFrequency 0064  
                                    __end_of_UpdateCfList 2A78  
                     RADIO_WriteFSKFrequencyDeviation@num 0075  
                               EnableChannels@channelMask 006E  
                                               _macBuffer 04E0  
                                               _dioStatus 0048  
                               __end_of_ValidateDataRange 59E0  
                           RADIO_FSKPayloadReady@irqFlags 00ED  
                                       _SwTimersInterrupt 3D4C  
                                       ??_SwTimersExecute 00E8  
                                               __pintcode 0008  
                                                ?___abdiv 0064  
                        __end_of_TMR1_SetInterruptHandler 61A6  
                                           __pmediumconst FE6C  
                                 RADIO_Transmit@bufferLen 00AC  
                                 __end_of_SPI2_Initialize 6186  
                                               __ptext100 4380  
                                               __ptext101 483A  
                                               __ptext110 60B4  
                                               __ptext102 5770  
                               __end_of_ValidateChannelId 5EF2  
                                               __ptext111 625A  
                                               __ptext103 4C66  
                                               __ptext200 52E2  
                                               __ptext120 615E  
                                               __ptext112 4EC0  
                                               __ptext104 4FDA  
                                               __ptext201 572E  
                                               __ptext121 4728  
                                               __ptext113 62A4  
                                               __ptext105 50E8  
                                               __ptext210 5F2C  
                                               __ptext202 605A  
                                               __ptext130 6228  
                                               __ptext122 5F98  
                                               __ptext114 61C4  
                                               __ptext106 54FE  
                                               __ptext211 62AA  
                                               __ptext203 40D4  
                                               __ptext131 6230  
                                               __ptext123 4D98  
                                               __ptext115 614E  
                                               __ptext107 3364  
                                               __ptext212 6272  
                                               __ptext204 389C  
                                               __ptext140 4DFC  
                                               __ptext132 61E2  
                                               __ptext124 4022  
                                               __ptext116 6260  
                                               __ptext108 08EA  
                                               __ptext213 5F48  
                                               __ptext205 5EB4  
                                               __ptext141 2E40  
                                               __ptext133 5BAE  
                                               __ptext125 56EC  
                                               __ptext117 602A  
                                               __ptext109 59E0  
                                               __ptext214 62AC  
                                               __ptext206 6240  
                                               __ptext150 1766  
                                               __ptext142 5DF2  
                                               __ptext134 48BE  
                                               __ptext126 6220  
                                               __ptext118 21AC  
                                               __ptext215 0000  
                                               __ptext207 5DAC  
                                               __ptext151 3A3E  
                                               __ptext143 5380  
                                               __ptext135 6238  
                                               __ptext127 61CE  
                                               __ptext119 5CCE  
                                               __ptext208 62A8  
                                               __ptext160 61EC  
                                               __ptext152 2BFA  
                                               __ptext144 57AE  
                                               __ptext136 1DE0  
                                               __ptext128 61D8  
                                               __ptext209 626C  
                                               __ptext161 236A  
                                               __ptext153 541C  
                                               __ptext145 523E  
                                               __ptext137 0DB6  
                                               __ptext129 4940  
                                               __ptext170 612A  
                                               __ptext162 5BDA  
                                               __ptext154 616C  
                                               __ptext146 11E8  
                                               __ptext138 3972  
                                               __ptext171 628C  
                                               __ptext163 36EA  
                                               __ptext155 4182  
                                               __ptext147 344E  
                                               __ptext139 4F20  
                                               __ptext180 4AAA  
                                               __ptext172 6290  
                                               __ptext164 5D1A  
                                               __ptext156 49BA  
                                               __ptext148 5548  
                                               __ptext181 613C  
                                               __ptext173 5AFC  
                                               __ptext165 6266  
                                               __ptext157 27FE  
                                               __ptext149 5CF4  
                                               __ptext190 5592  
                                               __ptext182 4BFC  
                                               __ptext174 5C06  
                                               __ptext166 37C4  
                                               __ptext158 4B92  
                                               __ptext191 5036  
                                               __ptext183 4A32  
                                               __ptext175 60F2  
                                               __ptext167 4E5E  
                                               __ptext159 53CE  
                                               __ptext192 5C30  
                                               __ptext184 5942  
                                               __ptext176 6294  
                                               __ptext168 5EF2  
                                               __ptext193 5140  
                                               __ptext185 6042  
                                               __ptext177 6298  
                                               __ptext169 61F6  
                                               __ptext194 5290  
                                               __ptext186 3D4C  
                                               __ptext178 3168  
                                               __ptext195 5624  
                                               __ptext187 422E  
                                               __ptext179 5468  
                                               __ptext188 5E94  
                                               __ptext197 5D88  
                                               __ptext189 589E  
                                               __ptext198 5F10  
                                               __ptext199 62A6  
                                       _EncryptFRMPayload 2D1E  
                                                ?___lldiv 0064  
                            RADIO_FSKPacketSent@timeOnAir 00D8  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0064  
                           __size_of_ExecuteRxTimingSetup 0024  
                                         ??_AESEncodeLoRa 0094  
                SelectChannelForTransmission@channelIndex 00B7  
                         __end_of_PrepareJoinRequestFrame 2EF6  
                                                ?___lwmod 00A2  
                                      ?_SwTimersInterrupt 007A  
                               _RADIO_SetChannelFrequency 48BE  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006F  
                               _SetCallbackSoftwareTimers 4182  
                                      ConfigureRadio@freq 0071  
                                   ??_RADIO_SetModulation 0064  
                                        ?_RADIO_GetStatus 0001  
                                     __size_of_sendPacket 0020  
                                  __end_of_LORAWAN_RxDone 06EA  
                                     ??_ValidateFrequency 0068  
                                  __end_of_LORAWAN_TxDone 0CE2  
                                      ?_EncryptFRMPayload 00A4  
                            ??_INTERRUPT_InterruptManager 0028  
                            __end_of_LORAWAN_PlatformInit 5E74  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                    GenerateSubkey@F17044 01BD  
                                        _ExecuteDevStatus 61BA  
                           __end_of_RADIO_SetLoRaSyncWord 61F6  
                  IncludeMacCommandsResponse@pBufferIndex 0066  
                              __size_of_SwTimerSetTimeout 0038  
                             ??_LORAWAN_GetMaxPayloadSize 006C  
                          LORAWAN_LinkCheckConfigure@iCtr 00AA  
                        ExecuteRxParamSetupReq@dlSettings 00A6  
                                          _AssemblePacket 14C0  
                                                _BAUD1CON 000F9E  
                                         ?_ConfigureRadio 0071  
                               AssemblePacket@bufferIndex 00E0  
                              ??_INT2_SetInterruptHandler 0066  
                              __end_ofi2_TMR_GetDeltaTime 3914  
                                __size_of_TMR1_StartTimer 0004  
                                     ??_SwTimersInterrupt 007E  
                                    RADIO_DIO0@dioMapping 00F1  
                                       _DutyCycleCallback 1BC8  
                                 InitDefault433Channels@i 006E  
                                   __end_of_TMR_SwapTimer 5978  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 00B2  
                                 __end_ofi2_TMR_SwapTimer 5762  
                                 __size_of_EncKeySchedule 00CA  
                                      AssemblePacket@mhdr 00DD  
                                      AssemblePacket@port 0166  
                                          __size_of_flash 0042  
                               __size_of_RADIO_ReadRandom 0062  
                                ConfigureRadioRx@dataRate 007A  
                                      _RADIO_ReceiveStart 21AC  
                                          __size_of_srand 000E  
                                __end_of_LORAWAN_Mainloop 5828  
                                   ?_RADIO_SetFSKSyncWord 006E  
                                    _INTERRUPT_Initialize 6288  
                                           _SwTimerCreate 5624  
                          __end_of_InitDefault868Channels 55D2  
                     IncludeMacCommandsResponse@macBuffer 0064  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0064  
                                           _TMR1_CallBack 5F10  
                               __end_of_ValidateFrequency 4FDA  
                                        _SwTimerIsRunning 60B4  
                                        _ExecuteLinkCheck 5B82  
                                    i2SwTimersInterrupt@i 0027  
                                                _INT1_ISR 6272  
                                _LORAWAN_SetDeviceAddress 5FB2  
                                                _INT2_ISR 626C  
                                       EncKeySchedule@key 0064  
                                          ___wmul@product 0068  
                                      _RADIO_SetBandwidth 6238  
                                                _LATAbits 000F79  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize FF8D  
                                   ?_RADIO_WriteFrequency 0071  
                               ?_INT1_SetInterruptHandler 0064  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 0044  
                                     ?_RADIO_ReceiveStart 00AA  
                                                _PIE0bits 000E29  
                                        _SwTimerReadValue 59E0  
                                        _ExecuteDutyCycle 5332  
                                                _PIE5bits 000E2E  
                                         _HALDIO5PinValue 6266  
                                    RADIO_DIO1@dioMapping 00C5  
                               __end_of_SwTimersInterrupt 3DF4  
                                __size_of_TMR1_WriteTimer 000E  
                                      AESEncode@masterKey 006C  
                     __size_of_INTERRUPT_InterruptManager 007A  
                              __end_of_DIO2_ISR_Lora_Init 620A  
                                                _PIR0bits 000E33  
                                        GenerateSubkey@k1 00A6  
                                        GenerateSubkey@k2 00A8  
                                    ConfigureRadioRx@freq 0076  
                               __end_of_EncryptFRMPayload 2DE6  
                                                _PIR5bits 000E38  
                          __size_of_RADIO_WriteFSKBitRate 0062  
                                UpdateReceiveDelays@delay 006A  
                               LORAWAN_RxDone@bufferIndex 03A7  
                                  __size_of_UpdateTxPower 0008  
                           __end_of_RADIO_WriteFSKBitRate 4E5E  
                                    ConfigureRadioTx@freq 0076  
                                         RxDataDone@pData 0064  
                             UpdateDataRange@dataRangeNew 0064  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 00AA  
                                               _rxPayload 016E  
                                  _UpdateMinMaxChDataRate 4B92  
                           EncryptFRMPayload@bufferLength 00A6  
                                 ValidateDataRange@result 0066  
                                                _SSP2CON1 000ED9  
                             UpdateDutyCycle@dutyCycleNew 0064  
              ValidateChannelId@allowedForDefaultChannels 0064  
                           __size_of_FindSmallestDataRate 0086  
                                                _TMR1_ISR 5D88  
                                ConfigureRadioTx@dataRate 007A  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0064  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 01B4  
                                                _SSP2STAT 000ED8  
                            ??_LORAWAN_LinkCheckConfigure 00A2  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 590C  
                                             _INT0PPSbits 000DF0  
                         __size_of_SetReceptionNotOkState 0056  
                                             _INT1PPSbits 000DF1  
                                  __end_of_AssemblePacket 170C  
                                         ?_LORAWAN_RxDone 016B  
                                             _INT2PPSbits 000DF2  
                                         ?_LORAWAN_TxDone 00B4  
                                       ??_TMR1_Initialize 0066  
                                             _INT3PPSbits 000DF3  
                                        ___abdiv@dividend 0068  
                                      _DIO1_ISR_Lora_Init 6280  
                               __end_of_DutyCycleCallback 1D84  
                                       ___wmul@multiplier 0064  
                                        __size_of_AESCmac 0234  
                                    ??_RADIO_ReceiveStart 00AC  
                                 ValidateFrequency@result 0068  
                              __end_of_PrepareSessionKeys 5020  
                                       ?_ConfigureRadioRx 0076  
                                       ?_ConfigureRadioTx 0076  
                                    RADIO_DIO2@dioMapping 007E  
                                      AESEncodeLoRa@block 0090  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 3402  
                 RADIO_SetSpreadingFactor@spreadingFactor 0064  
                                      ??_ConfigureRadioRx 007A  
                                      ??_ConfigureRadioTx 007A  
                                    ??_RADIO_SetBandwidth 0064  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0064  
                                        ?_RADIO_WriteMode 0069  
                               LORAWAN_RxDone@computedMic 03AB  
                                       ___lmul@multiplier 0094  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 4618  
                                               copy_data1 4638  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                                     _EncKeySchedule$3770 0068  
                                _INT0_SetInterruptHandler 62A2  
                             __end_of_RADIO_SetIQInverted 61D8  
                                          ?_TMR1_CallBack 0001  
                                _INT3_SetInterruptHandler 62A0  
                                    __end_of_TMR_ISR_lora 5328  
                                             _RADIO_Reset 5AFC  
                                     ExecuteLinkCheck@ptr 0064  
                          i2SwTimersInterrupt@timeElapsed 001F  
                                      _RADIO_RegisterRead 5D1A  
                                __size_of_ValidateTxPower 0022  
                                 ??_StopAllSoftwareTimers 0065  
                                          _StartReTxTimer 360E  
                             __end_ofi2_SwTimersInterrupt 4182  
                               _LORAWAN_GetMaxPayloadSize 5828  
                              LORAWAN_RxDone@extractedMic 03A3  
                                             AESCmac@flag 0162  
                           EncryptFRMPayload@frameCounter 00A8  
                                      CheckMcastFlags@hdr 0064  
                                             AESCmac@size 00D2  
                                SwTimerSetTimeout@timerId 0079  
                                SwTimerSetTimeout@timeout 0071  
                                   RADIO_WriteMode@opMode 006F  
                                ??_ExecuteRxParamSetupReq 00A2  
                     __size_of_LORAWAN_LinkCheckConfigure 0100  
                                        ___abdiv@quotient 0067  
                 UpdateReceiveWindow2Parameters@frequency 0064  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 5C30  
                  ValidateChannelMaskCntl@channelMaskCntl 0065  
                                       i2_TMR1_WriteTimer 605A  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0066  
                                    ??_DIO1_ISR_Lora_Init 0066  
                                __size_of_CheckMcastFlags 004A  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0068  
                              __size_of_ValidateDataRange 0034  
                               _ticksToScheduledInterrupt 005A  
                            ValidateDataRange@dataRateMax 0068  
                            ValidateDataRange@dataRateMin 0069  
                              __size_of_ValidateChannelId 001E  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0052  
                                 ??_OSCILLATOR_Initialize 0064  
                                       ?_ValidateDataRate 0001  
                                      _ComputeSessionKeys 4C66  
                                   __size_of_SwTimerStart 006A  
                                        __size_of___lldiv 0076  
                                        __size_of___llmod 0062  
                             __size_of_EUSART1_Initialize 0016  
                                        __size_of___lwmod 003E  
                                         ?_AssemblePacket 0166  
                                    AssemblePacket@buffer 0167  
                                        SwTimersExecute@i 00EC  
                                      ??_ValidateDataRate 0064  
                                _TMR1_SetInterruptHandler 619C  
                                             _radioBuffer 05EF  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 6156  
        __size_of_ResetParametersForConfirmedTransmission 0008  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0064  
                 _ResetParametersForConfirmedTransmission 614E  
                                   _TMR1_InterruptHandler 01F3  
                                        ??_GenerateSubkey 00AA  
                                        _CountfOptsLength 483A  
                                              _HALSPISend 61F6  
                                     ?_ComputeSessionKeys 00A4  
                                          _rxWindowOffset FF7D  
                      RADIO_UnhandledInterrupt@modulation 0068  
                                 _IOCBF4_InterruptHandler 01F1  
                              __end_of_MacExecuteCommands 2680  
                                    ??_RADIO_RegisterRead 0066  
                        __end_of_RADIO_UnhandledInterrupt 5E94  
                                           _UpdateTxPower 6210  
                                    RADIO_Transmit@buffer 00AA  
                         __end_of_RADIO_FHSSChangeChannel 5AA0  
                                         _allocatedTimers 0173  
                          __end_of_INTERRUPT_GetDioStatus 616C  
                                       ?i2_TMR1_ReadTimer 0001  
                                      _DIO5_ISR_Lora_Init 627C  
                                                __ptext10 5E54  
                                                __ptext11 6186  
                                                __ptext20 6288  
                                                __ptext12 619C  
                                                __ptext21 54B4  
                                                __ptext13 6248  
                                                __ptext30 57EC  
                                                __ptext22 62A0  
                                                __ptext14 627C  
                                                __ptext31 469A  
                                                __ptext23 61A6  
                                                __ptext15 629C  
                                                __ptext40 5978  
                                                __ptext32 1BC8  
                                                __ptext24 61B0  
                                                __ptext16 629E  
                                                __ptext41 4B20  
                                                __ptext33 3BD0  
                                                __ptext25 62A2  
                                                __ptext17 6208  
                                                __ptext50 4D34  
                                                __ptext42 6118  
                                                __ptext34 5F64  
                                                __ptext26 6072  
                                                __ptext18 6280  
                                                __ptext51 5E74  
                                                __ptext43 5FCA  
                                                __ptext35 3268  
                                                __ptext27 5C5A  
                                                __ptext19 6284  
                                                __ptext60 2964  
                                                __ptext52 44C6  
                                                __ptext44 5FE2  
                                                __ptext36 2F54  
                                                __ptext28 5FB2  
                                                __ptext61 360E  
                                                __ptext53 3EBA  
                                                __ptext45 5FFA  
                                                __ptext37 4424  
                                                __ptext29 5A44  
                                                __ptext70 60CA  
                                                __ptext62 4CCE  
                                                __ptext54 51EC  
                                                __ptext46 55DC  
                                                __ptext38 3E04  
                                        ?i2_TMR_SwapTimer 0007  
                                                __ptext71 6088  
                                                __ptext63 5D40  
                                                __ptext55 4566  
                                                __ptext47 5864  
                                                __ptext39 58D6  
                                                __ptext80 5B82  
                                                __ptext72 268A  
                                                __ptext64 624E  
                                                __ptext56 199C  
                                                __ptext48 5B2A  
                                                __ptext81 2ABA  
                                                __ptext73 4F7E  
                                                __ptext65 2502  
                                                __ptext57 008A  
                                                __ptext49 5A72  
                                                __ptext90 3B08  
                                                __ptext82 5DD0  
                                                __ptext74 59AC  
                                                __ptext66 5D64  
                                                __ptext58 5198  
                                                __ptext91 5332  
                                                __ptext83 60DE  
                                                __ptext75 5CA8  
                                                __ptext67 590C  
                                                __ptext59 5F7E  
                                                __ptext92 61BA  
                                                __ptext84 6012  
                                                __ptext76 5B56  
                                                __ptext68 5C82  
                                                __ptext93 3F70  
                                                __ptext85 5ACE  
                                                __ptext77 42D8  
                                                __ptext69 3062  
                                                __ptext94 5828  
                                                __ptext86 6210  
                                                __ptext78 5AA0  
                                                __ptext95 14C0  
                                                __ptext87 6218  
                                                __ptext79 5ED4  
                                                __ptext96 1FC8  
                                                __ptext88 609E  
                                                __ptext97 6254  
                                                __ptext89 5090  
                                                __ptext98 47B4  
                                                __ptext99 2D1E  
                                 ExecuteRxTimingSetup@ptr 006B  
                                  ??_RADIO_SetFSKSyncWord 0070  
                            ??_IOCBF4_SetInterruptHandler 0066  
                                   ??_UpdateReceiveDelays 006A  
                                   __end_of_LORAWAN_Reset 2918  
                                            ??_sendPacket 00E8  
                                  __end_of_StartReTxTimer 36EA  
                                 ??_UpdateCurrentDataRate 0064  
                                 ??_UpdateChannelIdStatus 0065  
                                __size_of_UpdateDataRange 0086  
                                  _SetReceptionNotOkState 4CCE  
                                            _SSP2CON1bits 000ED9  
                                       ??_TMR1_StartTimer 0064  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00C6  
                                 __end_of_HALDIO5PinValue 626C  
                                              _IOCBF4_ISR 5DAC  
                                       ?_UpdateDLSettings 0064  
                                  ConfigureRadio@dataRate 0075  
                                       ?_ValidateRxOffset 0001  
                              __size_of_ValidateFrequency 005C  
                        __size_of_PrepareJoinRequestFrame 00B6  
                                           CheckFlags@hdr 0064  
                                  ??_RADIO_WriteFrequency 0075  
                                   __size_of_UpdateCfList 0114  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 0008  
                                           __size_of_main 00BC  
                                           __size_of_rand 004E  
                                       _RADIO_ReceiveStop 602A  
                                      ??_UpdateDLSettings 0065  
                                    _LORAWAN_PlatformInit 5E54  
                                         _FskSyncWordBuff FFFC  
                                      ??_ValidateRxOffset 0064  
                               __end_ofi2_TMR1_WriteTimer 6068  
               IncludeMacCommandsResponse@bIncludeInFopts 0067  
                                    ??_ComputeSessionKeys 00A6  
                                           _timerOverflow 0049  
                                    __CFG_WDTCWS$WDTCWS_7 000000  
                                            _SwTimerStart 4BFC  
                              __size_of_SwTimersInterrupt 00A8  
                                      ?_RADIO_ReceiveStop 0001  
                                      __CFG_BORV$VBOR_190 000000  
                              ??_RADIO_SetSpreadingFactor 0064  
                                   RADIO_TxDone@timeOnAir 00D8  
                          ValidateChannelMask@channelMask 0064  
                             __size_of_DIO0_ISR_Lora_Init 0004  
                              __size_of_EncryptFRMPayload 00C8  
                                         GenerateSubkey@i 00CB  
                                         GenerateSubkey@l 00BB  
                                 PrepareSessionKeys@index 0074  
                                __end_of_TMR_GetDeltaTime 42AA  
                                      SwTimerStop@timerId 0064  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0066  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006E  
                                    RADIO_RxDone@irqFlags 00ED  
                             __end_of_ValidateChannelMask 5AFC  
                                           UpdateCfList@i 00AA  
                      __end_of_INTERRUPT_InterruptManager 0082  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 0070  
                             PrepareSessionKeys@networkId 0072  
                                       _RADIO_ReleaseData 6260  
                                                main@flag 00F4  
                                       ??_TMR1_WriteTimer 0066  
                                      __end_of_sendPacket 5E34  
                                              _RADIO_DIO0 4D34  
                                              _RADIO_DIO1 5864  
                                              _RADIO_DIO2 55DC  
                                              _RADIO_DIO3 5FFA  
                                              _RADIO_DIO4 5FE2  
                                              _RADIO_DIO5 5FCA  
                                            _SSP2STATbits 000ED8  
                                    ??_DIO5_ISR_Lora_Init 0066  
                    __end_of_INT1_DefaultInterruptHandler 62AE  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 62AC  
                       __size_of_RADIO_WriteConfiguration 03C8  
                                  __end_of_rxWindowOffset FF85  
                             PIN_MANAGER_Initialize@state 0066  
                     __size_of_IOCBF4_SetInterruptHandler 000A  
                              __size_of_DutyCycleCallback 01BC  
                                 EncryptFRMPayload@buffer 00A4  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 00A0  
                                      __end_of_modulation FF7D  
                                              _RADIO_Init 236A  
                         ExecuteRxParamSetupReq@frequency 00A2  
                                __size_of_UpdateFrequency 0026  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0047  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 007B  
                                __end_of_HALSPICSDeassert 6290  
                                __size_of_UpdateDutyCycle 001C  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0064  
                                                memcpy@s1 0066  
                                          _EncKeySchedule 2BFA  
                      __size_of_SetCallbackSoftwareTimers 0092  
                                 __size_of_RxJoinResponse 0006  
                                         ??_SwTimerCreate 0064  
                                     ExecuteDutyCycle@ptr 0064  
                                            _UpdateCfList 2964  
                                     ??_RADIO_ReleaseData 0064  
                                  ??_INTERRUPT_Initialize 0064  
                                                memset@p1 0064  
                                         ??_TMR1_CallBack 0028  
                                    __size_of_SwTimerStop 0012  
                                        _RADIO_ReadRandom 49BA  
                                       _RADIO_TxDone$1071 00DC  
                                      _EXT_INT_Initialize 54B4  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 4A32  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 00AA  
                               __end_of_RADIO_ReceiveStop 6042  
                                         _SwTimersExecute 469A  
                     SwTimerSetCallback@callbackParameter 0066  
                                             FillSubKey@i 006B  
                           RADIO_WriteFrequency@frequency 0071  
                                        ___lwmod@dividend 00A2  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0064  
                                __end_of_ExecuteDevStatus 61C4  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 FFA8  
                                      _DefaultChannels868 FFD2  
                                       __CFG_CLKOUTEN$OFF 000000  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0066  
                                UpdateDutyCycle@channelId 0066  
                                  GenerateSubkey@const_Rb 00AB  
                                             _PPSLOCKbits 000DEF  
                         __size_of_ExecuteRxParamSetupReq 00FC  
                               UpdateJoinInProgress@state 0064  
                                       ??_ValidateTxPower 0064  
                                     _LORAWAN_TxDone$5204 00CB  
                                     _LORAWAN_TxDone$1952 00BE  
                                     _LORAWAN_TxDone$1953 00C2  
                      __end_of_LORAWAN_LinkCheckConfigure 3268  
                               __end_of_RADIO_ReleaseData 6266  
                              _LORAWAN_LinkCheckConfigure 3168  
                                __size_of_EnableChannels1 0050  
                                      __end_of_txPower868 FFA8  
                                   _HALResetPinMakeOutput 6294  
                                ??_HALResetPinOutputValue 0064  
                                  __size_of_INT1_CallBack 001C  
                               RADIO_WriteConfiguration@i 00A4  
                               ExecuteRxTimingSetup@delay 006D  
                                        AESEncodeLoRa@key 0092  
                               __size_of_SetJoinFailState 0024  
                        LORAWAN_LinkCheckConfigure@period 00A0  
                                        ??_ConfigureRadio 0075  
                                      _SwTimerSetCallback 5BDA  
             __end_of_UpdateRetransmissionAckTimeoutState 51EC  
            __size_of_UpdateRetransmissionAckTimeoutState 0054  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 0094  
                     _UpdateRetransmissionAckTimeoutState 5198  
                                       RADIO_ReadRandom@i 0074  
                            SearchAvailableChannel@result 00B1  
                                   RADIO_WritePower@paDac 0069  
                                  __size_of_INT2_CallBack 001C  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$3784 0085  
                                          _AESEncode$3785 0087  
                                          _AESEncode$3786 0089  
                                __end_of_SwTimerIsRunning 60CA  
                                       ??_CheckMcastFlags 0066  
                                __end_of_ExecuteLinkCheck 5BA0  
                                   RADIO_WritePower@power 006A  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 006B  
                                    ??_EXT_INT_Initialize 0066  
                            RADIO_SetFSKSyncWord@syncWord 006E  
                                            _rxWindowSize FF85  
                                  __end_of_EncKeySchedule 2CC4  
                           ?_INT1_DefaultInterruptHandler 0001  
                                     ?_SwTimerSetCallback 0064  
                                __end_of_SwTimerReadValue 5A14  
                                        ___lldiv@quotient 006C  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 5380  
                                         ___lwmod@divisor 00A4  
                  __end_of_UpdateReceiveWindow2Parameters 609E  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 6088  
                                 UpdateTxPower@txPowerNew 0064  
                                         ___lwmod@counter 00A6  
                         _LORAWAN_LinkCheckConfigure$3290 00A6  
                        __end_of_INT1_SetInterruptHandler 61BA  
                            FindSmallestDataRate@dataRate 0067  
                           LORAWAN_Join@activationTypeNew 00EE  
                                   __size_of_TMR_ISR_lora 0046  
                              ??_LORAWAN_SetDeviceAddress 0068  
                                    _SystemBlockingWaitMs 5C06  
                                   FindSmallestDataRate@i 0066  
                      ComputeSessionKeys@joinAcceptBuffer 00A4  
                                 __size_of_EnableChannels 0016  
                            __end_of_UpdateJoinInProgress 5FB2  
                            __end_of_ExecuteRxTimingSetup 5D88  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff FFFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 4F7E  
               __size_of_RADIO_WriteFSKFrequencyDeviation 005E  
                      ??_RADIO_WriteFSKFrequencyDeviation 0075  
                       ?_RADIO_WriteFSKFrequencyDeviation 0071  
                        _RADIO_WriteFSKFrequencyDeviation 4F20  
                __end_of_LORAWAN_SetApplicationSessionKey 5A6A  
               __size_of_LORAWAN_SetApplicationSessionKey 0026  
                      ??_LORAWAN_SetApplicationSessionKey 0070  
                       ?_LORAWAN_SetApplicationSessionKey 006E  
                        _LORAWAN_SetApplicationSessionKey 5A44  
                                        ExtractMic@buffer 006E  
                                 ??_RADIO_FSKPayloadReady 00ED  
                                UpdateDataRange@channelId 0066  
                                             ?_IOCBF4_ISR 0001  
                                _RADIO_UnhandledInterrupt 5E74  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 3602  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 5F10  
                                 __size_of_ExecuteLinkAdr 011C  
                            RADIO_WriteFSKBitRate@bitRate 0071  
                                      i2_TMR_GetDeltaTime 389C  
                                         RADIO_SetCRC@crc 0064  
                                         _PIN_MANAGER_IOC 6240  
                                     RADIO_WritePower@ocp 0068  
                                      ??_LORAWAN_Mainloop 00F3  
                              __size_ofi2_TMR1_WriteTimer 000E  
                                    ??_SwTimerSetCallback 0067  
                                       ??_UpdateDataRange 0065  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 56AA  
                        RADIO_WriteConfiguration@regValue 00A9  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 0175  
                                           ExtractMic@mic 0074  
                                       _LORAWAN_RxTimeout 199C  
                             __end_of_RADIO_SetModulation 6238  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 002E  
                                        ??_LORAWAN_RxDone 00E8  
                                     ?i2_TMR_GetDeltaTime 0007  
